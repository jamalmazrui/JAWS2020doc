Freedom Scientific Developer Network

Table of Contents

General Scripting Concepts

Getting_Started

Formatting Script Files for UTF-8

Freedom Scientific Scripting Standards

Settings and Configurations

Script File Types

Settings Files

Reserved Files

Variables and Constants

Constants

Collection Type

Array Type

Operators

Calling Scripts and Functions

Scheduling Functions

Pause and Delay

Enumerator Functions

Redirecting Functions Using Scope

Web App Scriptability

Domain-Specific Utilities

Localization: JAWS Folder Restructure

Control Flow

Conditional Statement Structures

Looping

Return Statements

Objects

Events

Application Info Events

Clipboard Events

Connection Events

Cursors Events

Cursors Event Helpers

Dialogs Events

Help Events

HTML Events

HTML Event Helpers

Keyboard Events

Keyboard Event Helpers

Menus Events

Menus Event Helpers

Mouse Events

Mouse Speech Events

Object Model and MSAA Events

Object Model and MSAA Event Helpers

Optical Character Recognition Events

SayAll Events

Screen Text Events

Screen Text Event Helpers

Scripts Events

Selection Events

Selection Event Helpers

Settings Events

Window Events

Window Event Helpers

Keywords and Non-Required Keywords

Compiler Directives

Use Directive

Import Directive

Prototype Directive

;#Pragma StringComparison Directive

;#Pragma UsePoFile Directive

ScriptFileVersion and ScriptFile Directive

Key Management

Hooks

Key Layers

Key Map Files

Creating Research It rules

The Rule File

The Query File

Customized Quick Settings

Output Types

Implementing a Virtual Viewer Window

Structured Braille Functionality

Reference Guide

Aggregate Data Types

ArrayLength

CollectionCompare

CollectionCopy

CollectionItemCount

CollectionItemExists

CollectionRemoveAll

CollectionRemoveItem

StringArrayCompact

StringArrayConcat

Annotations

GetAnnotationAtCaret

GetAnnotationCountAtCaret

Application Info

GetAppFileName

GetAppFilePath

GetAppTitle

GetFixedProductVersion

GetLotusProgramVersion

GetLotusVersionInfoString

GetMetroAppName

GetMetroAppVersion

GetProgramVersion

GetVersionInfoString

SayAppVersion

SayProgramComments

Braille Device

BrailleGetCellCount

BrailleGetDeviceInfo

BrailleGetStatusCellCount

BrailleInUse

GetBrailleDisplayName

GetBrailleKeyboardLayout

GetDefaultBrailleDisplayInfo

GetNavRowCellOffset

Braille Keyboard

BrailleAltTab

BrailleControlLeftMouseClick

BrailleCyclePreferredTranslationTable

BrailleEnter

BrailleEscape

BrailleGetTypeKeysMode

BrailleRightMouseClick

BrailleRouting

BrailleSelectBlock

BrailleSelectText

BrailleSelectTextClearValues

BrailleSetTypeKeysMode

BrailleShiftTab

BrailleSupportsTypeKeysMode

BrailleTab

ContractedBrailleInputAllowedNow

FHPBrailleSelectText

IsContractedBrailleInputSupported

SALModeButton

SpeakBrailleStudyCharacterInfo

SpeakBrailleStudyWordInfo

Braille Navigation

BrailleAutoAdvance

BrailleAutoAdvanceMode

BrailleAutoAdvanceModeActive

BrailleBottom

BrailleMoveLeft

BrailleMoveRight

BrailleNextLine

BrailleNextLine

BraillePanLeft

BraillePanLeft

BraillePanLeftBySegment

BraillePanRight

BraillePanRight

BraillePanRightBySegment

BraillePriorLine

BraillePriorLine

BrailleRoutingButton

BrailleTop

DecreaseBrailleAutoAdvanceSpeed

FHPBraillexEL2R

FSLeftRockerDown

FSLeftRockerUp

FSRightRockerDown

FSRightRockerUp

IncreaseBrailleAutoAdvanceSpeed

LeftFocusWhizWheelDown

LeftFocusWhizWheelUp

LeftWhizWheelDown

LeftWhizWheelUp

RightFocusWhizWheelDown

RightFocusWhizWheelUp

RightWhizWheelDown

RightWhizWheelUp

Braille Output

BrailleAddBrlCursorLine

BrailleAddField

BrailleAddFocusCell

BrailleAddFocusItem

BrailleAddFocusLine

BrailleAddFrame

BrailleAddString

BrailleAddStringWithCallback

BrailleAddTextBetween

BrailleBuildLine

BrailleBuildStatus

BrailleClearMessage

BrailleDescribeFont

BrailleDescribeItem

BrailleG2StringLength

BrailleGetCursorDots

BrailleGetDataOffsetFromDisplayOffset

BrailleGetStateString

BrailleGetSubtypeDisplayName

BrailleGetSubtypeString

BrailleGrade2ExpandCurrentWord

BrailleIsMessageBeingShown

BrailleIsStructuredLine

BrailleLine

BrailleMessage

BrailleMessageRepeatLast

BrailleRefresh

BrailleSetCursorDots

BrailleSetStatusCells

BrailleString

BrailleSwitchTransLanguage

FocusGDBHelpMessage

GetBrailleCellColumn

GetBrailleCellRow

GetLastBrailleRoutingKey

NavRockersTracking

NextBrailleString

PointNeedsMarking

PriorBrailleString

PushBrailleMathString

PushBrailleString

RepeatLastFlashMessage

SetBrailleMessageStatusText

SuppressG2TranslationForNextStructuredModeSegment

SwitchTranslatorRule

WheelsTracking

Braille Settings

BrailleChangeCursorShape

BrailleGetCurrentTranslatorMode

BrailleGetTranslatorModeCount

BrailleGetTranslatorModeID

BrailleGetTranslatorModeName

BrailleGrade2Translation

BrailleLineCursorShapeOff

BrailleSet6DOTS

BrailleSet8DOTS

BrailleSet8PixelsPerSpace

BrailleSetTranslatorMode

BrailleSetUnlimittedPixelsPerSpace

BrailleToggle8DOTS

BrailleToggle8PixelsPerSpace

BrailleToggleBrailleLineMode

BrailleToggleCharactersAndAttributes

BrailleToggleMarking

BrailleToggleMode

BrailleToggleSpeechHistory

BrailleToggleSpeechInterrupt

BrailleToggleTableHeaders

BrailleTurnMarkingOff

BrailleVerbosity

ChangeContractedBrailleSetting

GetBrailleMode

GetBrailleModeForModeId

GetBrailleModesForLanguage

GetBrailleTableDisplayName

GetBrailleTableFileName

GetBrailleTranslatorSupportedLanguages

NavRockersOnOff

PressLeftFocusNavButton

PressLeftFocusWheel

PressLeftWhizWheel

PressRightFocusNavButton

PressRightFocusWheel

PressRightWhizWheel

SetBrailleMode

SetBrailleVerbosity

ToggleOutputType

WhizWheelsOnOff

Clipboard

AppendSelectedTextToClipboard

AppendToClipboard

ClipboardHasData

ClipboardUpdateInConsoleWindow

CopySelectedTextToClipboard

CopyToClipboard

CutToClipboard

GetClipboardText

GetTextFromClipboard

IsNoSelectionForClipboard

MayOnlyCopyToClipboard

PasteFromClipboard

ShowClipboardTextInResultsViewer

updateClipboard

ViewClipboardText

WasTextAlreadyAppended

WillOverwriteClipboard

Colors

AddBrailleColors

BrailleAddColorField

BrailleColorMarkingAssign

BrailleSetColorsToMark

ColorToRGBString

FindColors

GetColorApproximation

GetColorAtPoint

GetColorBackground

GetColorField

GetColorName

GetColorText

ReloadSystemColors

RGBDecToHex

RGBHexToColor

RGBHexToDec

RGBStringToColor

SayColor

SayColor

Connection

IsTandemInstalled

PauseTandemVideo

RemoteAccessIsConnected

SetJTControllerMode

StartOrEndTandemSession

TandemAcceptConnections

TandemDisconnect

TandemIsConnected

TandemStart

ToggleTandemMode

Cursors

ActiveMovesBraille

BrailleCursor

BrailleMovesActive

BrailleToggleCursor

CaretVisible

ClearSavedLocation

ConvertCursorShape

FindCaret

GetActiveCursor

GetActiveCursorName

GetActiveCursorRestrictionName

GetBrailleRestriction

GetCursorCol

GetCursorColString

GetCursorPos

GetCursorPosString

GetCursorRow

GetCursorRowString

GetCursorShape

GetRestriction

GetRestrictionName

HandleWebDialogRestriction

InARIAGrid

InvisibleCursor

IsBrailleCursor

IsFormsModeActive

IsInsideARIAApplication

IsInvisibleCursor

IsInvisibleUIACursor

IsJAWSCursor

IsJAWSCursorInMenu

IsJawsUIACursor

IsPCCursor

IsUIAReviewCursor

IsVirtualPCCursor

JAWSCursor

JAWSCursor

MoveTo

PCCursor

PCCursor

RestoreCursor

RestrictBrailleCursor

RestrictCurrentCursor

RestrictCursor

RestrictJAWSCursor

RouteBrailleToActiveCursor

RouteBrailleToJAWS

RouteBrailleToJAWS

RouteBrailleToPc

RouteBrailleToPC

RouteCursorToMouse

RouteInvisibleToJAWS

RouteInvisibleToPc

RouteJAWSCursorToPc

RouteJAWSCursorToTouch

RouteJAWSToBraille

RouteJAWSToInvisible

RouteJAWSToPc

RouteJAWSToTouch

RouteMouseToCursor

RouteMouseToTouch

RoutePCCursorToJAWS

RoutePCToBraille

RoutePCToInvisible

RoutePcToJAWS

RoutePCToVirtual

RoutePCToVirtual

RouteTouchCursorToJAWS

RouteTouchToJAWS

RouteTouchToMouse

RouteVirtualToMouse

RouteVirtualToMouse

RouteVirtualToPc

RouteVirtualToPc

SaveCurrentLocation

SaveCursor

SayActiveCursor

SayActiveCursor

SayCursorPos

SayCursorType

SayObjectNavigationCursor

SetActiveCursor

SetBrailleRestriction

SetRestriction

SetRestrictionToFrame

SetRestrictionToRect

TetherJAWSToPC

ToggleRestriction

TouchCursor

TULSwitchToRuleSet

VirtualPCCursorToggle

Dialog Controls

ClickToolbarItemByIndex

CloseListBox

ControlCanBeChecked

ControlIsChecked

FindHotKey

GetControlAttributes

GetControlName

GetCurrentItem

GetCurrentListViewItemName

GetHotKey

GetItemCount

GetListViewText

GetProgressBarInfo

GetSingleBitControlAttributeString

GetToolBarButtonList

GetTreeViewLevel

HotKeyHelpDefaultLoop

HotKeyHelpDefaultLoopHelper

IsSliderControl

IsToolbarWindow

JavaReadBoxInTabOrder

lvGetCRC

lvGetFocusItem

lvGetGroupName

lvGetItemCount

lvGetItemRect

lvGetItemState

lvGetItemText

lvGetSelectionCount

lvGetUserDefinedItemText

lvIsCustomized

lvMoveByLineUnit

lvSelectItem

lvSetFocusItem

MoveSliderPos

MoveToControl

MoveToFirstSdmControl

MoveToNextSdmControl

OpenListBox

PositionInGroup

ProcessCloseListBox

ProcessOpenListBox

ReadListviewColumn

ReadToolbarObjects

SayControl

SayControlEx

SayControlExWithMarkup

SayControlInformation

SayCurrentAccessKey

SayLVItemCheckStatus

SayTreeViewItem

SayTreeViewLevel

SayTVFocusItemExpandState

SDMGetControlActiveItem

SDMGetControlName

SDMGetControlSubtypeCode

SDMGetControlValue

SDMGetCurrentControl

SDMGetFirstControl

SDMGetFocus

SDMGetLastControl

SDMGetNextControl

SDMGetPrevControl

SDMSayControl

SDMSayStaticText

SDMSayWindowTypeAndText

SetCurrentItem

ShouldSayFunctionsSpeakSlider

SpeakProgressBarInfo

tbGetItemRect

tbGetItemState

tbGetItemText

tvCollapse

tvExpand

tvGetFocusItemExpandState

tvGetFocusItemText

tvGetItemStateImageIndex

tvGetItemText

tvGetParent

tvGetPathToSelection

tvGetSelection

tvSelectNextItem

tvSelectPriorItem

Dialogs

DialogActive

DialogList

DialogListHelper

GetDefaultButtonName

GetDialogPageName

GetDialogStaticText

GetGroupBoxName

HandleWebDialogFocusTransition

IsMultiPageDialog

NextDocumentWindow

NextDocumentWindowByPage

PreviousDocumentWindow

PreviousDocumentWindowByPage

ReadBoxInTabOrder

SayDefaultButton

Event Functions

Application Info Events

AppWillNotSpeakEvent

AutoFinishEvent

AutoStartEvent

Clipboard Events

ClipboardChangedEvent

Connection Events

ControllerModeChangedEvent

RemoteControllerModeChangedEvent

TandemConnectionEvent

Cursors Event Helpers

ProcessBoundaryStrike

Cursors Events

BottomEdgeEvent

CursorShapeChangedEvent

FocusPointMovedEvent

TopEdgeEvent

Dialogs Events

DialogPageChangedEvent

Help Events

TutorMessageEvent

Html Event Helpers

AnnounceDocumentElements

DocumentLoadedAtFormField

DoDefaultDocumentLoadActions

ProcessDocumentLoadAppAlerts

Html Events

ApplicationRegionEvent

DocumentLoadedEvent

DocumentUpdated

FormsModeEvent

FrameLoadedEvent

JavaObjectChanged

PageChangedEvent

Keyboard Event Helpers

PreProcessKeyPressedEvent

ProcessBXModifiedKey

ProcessHJDialogKeyPressed

ProcessKeyPressed

ProcessSpaceBarKeyPressed

ProcessUserBufferKeyTrapExemption

Keyboard Events

KeymapChangedEvent

KeyPressedEvent

QuickKeyNavigationModeChanged

Menus Event Helpers

ContextMenuProcessed

DoExtraMenuProcessing

MenuActiveProcessed

MenuBarActiveProcessed

MenuInactiveProcessed

MenuModeHook

Menus Events

MenuModeEvent

Mouse Events

MouseButtonEvent

MouseMovedEvent

Object Model And Msaa Event Helpers

HJDialogObjStateChangeSpoken

Object Model And Msaa Events

ActiveItemChangedEvent

DescriptionChangedEvent

DesktopAttachEvent

DesktopDetachEvent

IsReadOnlyEditObject

MSAAAlertEvent

NameChangedEvent

ObjStateChangedEvent

ProofingErrorDetectedEvent

UIANotificationEvent

ValueChangedEvent

Optical Character Recognition Events

OcrAcquisitionRotated

OCRCompletedEvent

OCRDataInvalidatedEvent

OCRReportNoTextFound

OcrStartedEvent

Sayall Events

SayAllStarted

SayAllStoppedEvent

Screen Text Event Helpers

MonitorNewTextEventAlerts

NewTextEventShouldBeSilent

ProcessSpeechOnNewTextEvent

SayCellFromCaretMovedEvent

SayCharacterFromCaretMovedEvent

SayFirstOrLastLineFromCaretMovedEvent

SayHomeOrEndFromCaretMovedEvent

SayLineFromCaretMovedEvent

SayNonHighlightedText

SayPageFromCaretMovedEvent

SayParagraphFromCaretMovedEvent

SaySentenceFromCaretMovedEvent

SayWordFromCaretMovedEvent

Screen Text Events

CaretMovedEvent

CellChangedEvent

ItemNotFoundEvent

NewTextEvent

PageSectionColumnChangedEvent

SayColumnAndRowChangeOnCellChangedEvent

SayTableCellOnCellChangedEvent

ScreenStabilizedEvent

SelectionContextChangedEvent

ShouldExitcellChangedEvent

TableEnteredEvent

TableExitedEvent

TabStopEvent

UpdateTableCellCoordinatesOnCellChangedEvent

Scripts Events

GestureEvent

Unknown

UserBufferActivatedEvent

UserBufferDeactivatedEvent

Selection Event Helpers

ProcessSelectText

SayHighLightedText

ShouldProcessSelectionChangedEvent

Selection Events

SelectionChangedEvent

SelectionRectChangedEvent

TextSelectedEvent

Settings Events

ConfigurationChangedEvent

SpeechToggledEvent

Window Event Helpers

FocusChangedEvent

FocusChangedEventProcessAncestors

FocusChangedEventShouldProcessAncestors

GetWindowsNotificationTextFromHandle

HandleCustomAppWindows

HandleCustomRealWindows

HandleCustomWindows

HandleNoCurrentWindow

MenuProcessedOnFocusChangedEventEx

MonitorFormsModeComboBox

PreProcessFocusChangedEventEx

ProcessEventOnFocusChangedEvent

ProcessEventOnFocusChangedEventEx

ProcessSayAppWindowOnFocusChange

ProcessSayFocusWindowOnFocusChange

ProcessSayRealWindowOnFocusChange

ProcessTaskSwitchList

SetDepthForFocusChangedEventProcessAncestors

SpeakAnyVisibleWindowsNotification

Window Events

FocusChangedEventEx

ForegroundIconicEvent

ForegroundWindowChangedEvent

HelpBalloonEvent

InternalFrameChangedEvent

JavaFocusChangedEvent

ToolTipEvent

WindowActivatedEvent

WindowCreatedEvent

WindowDestroyedEvent

WindowMinMaxEvent

WindowResizedEvent

Files

DeleteFile

FileExists

FilenameGetNearestMatch

FileNameList

GetDefaultSynthGlobalSectionName

GetFileDate

GetSoundFileLocation

iniDeleteFile

IniFlush

IniFlushEx

IniReadInteger

IniReadIntegerEx

IniReadSectionKeys

IniReadSectionKeysEx

IniReadSectionNames

IniReadSectionNamesEx

IniReadString

IniReadStringEx

IniRemoveKey

IniRemoveKeyEx

IniRemoveSection

IniRemoveSectionEx

IniWriteInteger

IniWriteIntegerEx

IniWriteString

IniWriteStringEx

ReadSettingInteger

ReadSettingString

SaveSelectionContextFlags

WriteSettingInteger

WriteSettingString

Frames

AreJAWSFramesActive

BrailleGetFramePrompt

CreatePrompt

FrameClearValues

FrameGetBottomRight

FrameGetTopLeft

FrameManager

FrameManagerRun

FrameMoveHelper

FramesEnumerate

FrameSetOnObject

FrameSetOnWindow

FramesListHelper

FrameViewer

FrameViewerActive

GetFrameDescription

GetFrameNameAtCursor

GetFramePrompt

GetFrameSynopsis

GetFrameTutorMessage

GetTextInFrame

MoveToFrame

SayFrame

SayFrame

SayFrameAtCursor

SayFrameAtCursor

SelectAFrame

ShowAllFrames

ShowFramesTextOnly

ShowFramesWithText

ShowFrameText

ShowFrameTextHelper

Fs Product Info

CheckAuthScheme

GetAuthCode

GetAuthLanguageCat

GetAuthScheme

GetAuthScriptLanguageCat

GetJAWSBuildVersionNumber

GetJAWSMajorVersionNumber

GetJAWSMinorVersionNumber

GetJAWSUpdateVersionNumber

GetJFWSerialNumber

GetJFWSMACount

GetLockingCode

getRunningFSProducts

InitFSProductVersionInfo

IsZoomTextReaderEnabled

Graphics

AutoGraphicsLabelerHelper

AutoLabelGraphics

FindGraphic

GetGraphicID

GetGraphicNameAtPoint

GraphicsEnumerate

GraphicsLabeler

GraphicsLabeler

GraphicsList

GraphicsListHelper

GraphicsMode

GraphicsVerbosity

MoveToGraphic

SetGraphicLabel

Help

AppFileTopic

BasicLayerHelp

EchoLayerHelp

GeneralJAWSHotKeys

GestureContextHelp

GestureListHelp

GetCorrespondingHelpFile

GetCustomScreenSensitiveHelpForKnownClasses

GetCustomTutorMessage

HotKeyHelp

IsWinKeyHelp

JAWSHotKeys

KeyboardHelp

KeyboardHelpHook

NotifyIfContextHelp

OCRLayerHelp

SayExtendedHelpHotKey

ScreenSensitiveHelp

ScreenSensitiveHelpForColorsDialog

ScreenSensitiveHelpForJAWSDialogs

ScreenSensitiveHelpForJAWSManager

ScreenSensitiveHelpForJAWSOptionsDialog

ScreenSensitiveHelpForKnownClasses

ScreenSensitiveHelpForLinksListDialog

ScreenSensitiveHelpForPlaceMarkerDialog

ScreenSensitiveHelpForRibbons

ScreenSensitiveHelpForSelectVoiceAliasDialog

ScreenSensitiveHelpForSysTray

ScreenSensitiveHelpForUnknownClasses

ScreenSensitiveHelpVirtualCursor

ScreenSensitiveHelpWindowList

ScreenSensitiveHelpWinforms

ShouldNotifyIfContextHelp

ShowHelpByID

ShowHelpByName

ShowScreenSensitiveHelp

ShowScreenSensitiveHelpForVirtualRibbon

TableLayerHelp

WindowKeysHelp

WindowKeysHelpDefault

Html

AdjustHTMLSettings

BrailleToggleTableReading

CreateXMLDomDoc

CustomPageSummaryReported

DefineATempPlaceMarker

DisplayAdvancedElementInfo

DisplayBasicElementInfo

DlgAriaLiveRegionFilterText

DlgListOfDropTargets

DlgListOfLandmarks

dlgListOfLinks

DlgListOfPlaceMarkers

DoFlexibleWebDialog

DoFlexibleWebDialog

EnableFlexibleWeb

ExitFormsMode

F3Script

FlexibleWebGetActiveRulesNumberForSelectedLocation

FlexibleWebNumberOfActiveRules

FocusToFirstField

FocusToLastField

FocusToNextField

FocusToPriorField

GetCurrentDocumentLength

GetCurrentHeading

GetCurrentHeadingLevel

GetCurrentRegionName

GetCurrentRegionType

GetDescribedByText

GetDocumentName

GetDocumentPath

GetDocumentPercentage

GetDocumentTitle

GetDocumentXML

GetDomainName

GetElementDescription

GetElementXML

GetFormFieldIndex

GetFSXMLDomDoc

GetFSXMLElementNode

GetHeadingCount

GetHTMLFrameCount

GetHTMLFrameIndex

GetHTMLFrameName

GetHTMLFrameNames

GetLandmarkCount

GetLineCount

GetLinkCount

GetListIndex

GetListOfFormFields

GetListOfLists

GetListOfTables

GetListOfTags

GetListOfTagsWithAttribute

GetNearestLink

GetPlaceMarkerCount

GetRegionCount

GetStateInfoFromXMLDomNodeAttributes

GetTableIndex

GetTagIndex

GetTagWithAttributeIndex

GetTextFromXMLDomTextChildNodes

GetXMLDomNodeText

GetXMLDomNodeTypeAndText

HasVirtualEnhancedClipboard

HTMLButtonTextVerbosityToggle

HTMLDecrementLinesPerPageItem

HTMLDecrementMaxBlockLength

HTMLDecrementMaxLineLength

HTMLFrameIndicationToggle

HTMLGraphicReadingVerbosityToggle

HTMLIdentifyLinkTypeToggle

HTMLIdentifySamePageLinksToggle

HTMLIncludeGraphicsToggle

HTMLIncludeImageMapLinksToggle

HTMLIncludeLinksToggle

HTMLIncrementLinesPerPageItem

HTMLIncrementMaxBlockLength

HTMLIncrementMaxLineLength

HTMLIndicateBlockQuotes

HTMLIndicateElementAccessKeys

HTMLIndicateLists

HTMLScreenFollowsVCursorToggle

HTMLSkipPastRepeatedTextToggle

HTMLTextLinkVerbosityToggle

HTMLToggleFormsModeAutoOff

HTMLToggleIgnoreInlineFrames

IE4GetFocus

IEFind

IEGetCurrentDocument

IEGetFocus

IEGetUnrestrictedWindow

IEReformatBody

InList

inWebDialog

IsBrowserClassWindowOrDocument

IsEmptyEditFormField

IsFlexibleWebEnabled

IsVirtualCursorOnAnnotationString

IsVirtualDocumentViewRestricted

JumpReturnFromLine

JumpTo

JumpToLine

LoadAndParseXML

MoveToAnyLink

MoveToAnyNextLink

MoveToAnyPriorLink

MoveToControlledTarget

MoveToControlType

MoveToElementOfDifferentType

MoveToElementOfSameType

MoveToFirstArticle

MoveToFirstBlockQuote

MoveToFirstButton

MoveToFirstForm

MoveToFirstFrame

MoveToFirstGraphic

MoveToFirstHeading

MoveToFirstHeadingLevelN

MoveToFirstList

MoveToFirstObject

MoveToFirstSameElement

MoveToFirstTable

MoveToFirstVisitedLink

MoveToFormField

MoveToFormFieldByIndex

MoveToFrameByNumber

MoveToHeading

MoveToHTMLFrame

MoveToHTMLFrameByIndex

MoveToLandmark

MoveToLastArticle

MoveToLastBlockQuote

MoveToLastButton

MoveToLastForm

MoveToLastFrame

MoveToLastGraphic

MoveToLastHeading

MoveToLastHeadingLevelN

MoveToLastObject

MoveToLastSameElement

MoveToLastTable

MoveToLastVisitedLink

MoveToList

MoveToListByIndex

MoveToMainRegion

MoveToNextAnchor

MoveToNextArticle

MoveToNextBlockQuote

MoveToNextButton

MoveToNextCheckbox

MoveToNextCombo

MoveToNextDifferentElement

MoveToNextDivision

MoveToNextEdit

MoveToNextForm

MoveToNextFrame

MoveToNextGraphic

MoveToNextHeading

MoveToNextHeadingLevelFive

MoveToNextHeadingLevelFour

MoveToNextHeadingLevelN

MoveToNextHeadingLevelOne

MoveToNextHeadingLevelSix

MoveToNextHeadingLevelThree

MoveToNextHeadingLevelTwo

MoveToNextList

MoveToNextListItem

MoveToNextMailToLink

MoveToNextNonLinkText

MoveToNextObject

MoveToNextOnClickElement

MoveToNextOnmouseOverElement

MoveToNextPlaceMarker

MoveToNextRadioButton

MoveToNextRegion

MoveToNextSameElement

MoveToNextSeparator

MoveToNextSpan

MoveToNextTable

MoveToNextUnvisitedLink

MoveToNextVisitedLink

MoveToPlaceMarkerN

MoveToPreviousHeadingLevelFive

MoveToPreviousHeadingLevelFour

MoveToPreviousHeadingLevelOne

MoveToPreviousHeadingLevelSix

MoveToPreviousHeadingLevelThree

MoveToPreviousHeadingLevelTwo

MoveToPriorAnchor

MoveToPriorArticle

MoveToPriorBlockQuote

MoveToPriorButton

MoveToPriorCheckbox

MoveToPriorCombo

MoveToPriorDifferentElement

MoveToPriorDivision

MoveToPriorEdit

MoveToPriorForm

MoveToPriorFrame

MoveToPriorGraphic

MoveToPriorHeading

MoveToPriorHeadingLevelN

MoveToPriorList

MoveToPriorListItem

MoveToPriorMailToLink

MoveToPriorNonLinkText

MoveToPriorObject

MoveToPriorOnClickElement

MoveToPriorOnMouseOverElement

MoveToPriorPlaceMarker

MoveToPriorRadioButton

MoveToPriorRegion

MoveToPriorSameElement

MoveToPriorSeparator

MoveToPriorSpan

MoveToPriorTable

MoveToPriorUnvisitedLink

MoveToPriorVisitedLink

MoveToRegion

MoveToTable

MoveToTableByIndex

MoveToTag

MoveToTagByIndex

MoveToTagWithAttribute

MoveToTagWithAttributeByIndex

MoveToUnvisitedLink

MoveToVisitedLink

NavToFlowRelations

NextNonLink

PerformActionOnElementWithID

PerformActionOnElementWithTagAndAttribute

PlaceMarkersEnumerate

PriorNonLink

QuickKeyNavigationModeActive

SayNextRow

SayPriorRow

SelectAFormField

SelectAHeading

SelectALink

SelectAPlaceMarker

SelectHierarchicalElement

SelectHTMLElement

SelectTextBetweenMarkedPlaceAndCurrentPosition

SetQuickKeyNavigationMode

SetVPCApplicationMode

ShiftF3Script

SmartNavToggle

SpeakPlaceMarkerByIndex

SpeakPlaceMarkerN

SpeakPlaceMarkers

StepOutOfCurrentElement

StepToEndOfElement

StepToStartOfElement

ToggleExpandAbbreviations

ToggleExpandAcronyms

ToggleUseVirtualInfoInFormsMode

TurnOffFormsMode

TurnOnFormsMode

VirtualDialogRestrictionToggle

VirtualHTMLFeatures

Jaws Program

FindJAWSHelpFile

FindJAWSHomeFile

FindJAWSPersonalizedSettingsFile

FindJAWSSettingsFile

FindJAWSSoundFile

FindJAWSUtilityProgram

FindWindowsSystemFile

GetJAWSDirectory

GetJAWSHelpDirectory

GetJAWSMode

GetJAWSSettingsDirectory

GetJAWSUserName

GetJFWLang

GetJFWVersion

GetSharedScriptsDirectory

GetSharedSettingsDirectory

GetUserSettingsDirectory

IsJFWInstall

IsOBUtil

IsUnicodeJAWS

JAWSMemDmp

JAWSWindow

JAWSWindow

PathAddExtension

PathFindExtension

PathRemoveExtension

PathRenameExtension

ShutDownJAWS

ShutDownJAWS

Keyboard

AltLeftMouseClick

BackspaceMSDos

BXBuildFKeyModifyer

BXBuildModifyer

CancelLayeredKeySequence

ControlBackSpace

ControlDownArrow

ControlDownArrowPCCursor

ControlEnter

ControlEnterKey

ControlShiftEnter

ControlShiftEnterKey

ControlUpArrow

ControlUpArrowPCCursor

Delete

DoBXModifiedKey

DoCloseListBoxKeyStroke

DoNativeKey

DoOpenListBoxKeyStroke

Enter

EnterKey

EscapeKey

ExitUserBuffer

FindKeyAliasMatch

FSReaderFastForward

FSReaderPlay

FSReaderRewind

GetCharacterInfoForBackSpace

GetKeyState

GetLastKeyPressTime

GetReservedKeystrokes

GetTextInfoForControlBackSpace

IsKeyboardAttached

IsKeystrokeReservedByApp

IsKeyWaiting

IsLastKeyRepeating

IsSameKey

JAWSBackspace

JAWSDelete

JAWSKey

KeyboardManager

KeyIsSpaceBar

LoadKeymapSection

LockKeyboard

LookupBXKeyNames

OnMouseOver

PassKeyThrough

PassKeyThrough

PausePACMateRemote

PausePACMateRemote

PlayKeys

PressKey

QuickNavigationKeysSuspendOrResume

ReleaseKey

ResetKeyboard

ScrollLockKey

SendApplicationKey

SetTypingEcho

SetTypingEchoLanguage

ShiftEnter

ShiftEnterKey

ShiftTab

ShiftTabKey

SimulateKey

StripBXKeyNamePrefix

SwitchInputLanguage

Tab

TabKey

ToggleCapsLock

ToggleTypingEcho

TrapKeys

TypeKey

TypingEcho

TypingEchoToggle

Undo

UnloadKeymapSection

UpALevel

UsingRemotePACMateBX

Menus

ActivateMenuBar

ActivateStartMenu

GetMenuMode

GetMenuName

MenuBar

MenusActive

StartMenu

Misc

ClearSpeechHistory

ClearSpeechHistory

DecToHex

DisplayShapeOverlapInfo

DoesSelectedShapeOverlap

FindUrgentConversation

FlagChangedState

GetCustomLabelFileName

GetCustomLabelKey

GetCustomLabelSectionName

GetOutputModeName

GetSpeechHistory

GetVariantType

HexToDec

HighWord

HiWord

IsRTLLanguageProcessorLoaded

LoWord

LowWord

MakeLong

Max

Min

MinimizeAllApps

MinimizeAllApps

RepeatLastAIMAlert

RepeatLastSkypeNotification

RepeatLastYIMAlert

RepeatMSNSignIn

ShowSpeechHistory

SkypeRepeatLastCallInfo

SwitchToConversation

VistaWindowsSidebarActivate

Mouse

ActivateOnMouseOver

AltLeftMouseClick

ClearValues

ClickAtPoint

ControlLeftMouseClick

ControlLeftMouseClick

DoSetUpSourceForDragAndDrop

DragAndDrop

DragAndDropClearValues

DragItemWithMouse

FocusFollowsMouse

GetButtonLockedNotification

GetDragAndDropCollectionData

GetLastMouseMovementTime

IsLeftButtonDown

IsReadyToDragSourceToTarget

IsRightButtonDown

LeftMouseButton

LeftMouseButton

LeftMouseButtonLock

LeftMouseButtonLock

MouseDown

MouseDown

MouseLeft

MouseLeft

MouseMovementIncrement

MouseRight

MouseRight

MouseUp

MouseUp

RightMouseButton

RightMouseButton

RightMouseButtonLock

RightMouseButtonLock

SayMouseAndANSISettings

ShiftLeftMouseClick

ShiftLeftMouseClick

Mouse Speech

GetMouseSpeechTextAndRectUsingUIA

SetMouseEchoToCharacter

SetMouseEchoToLine

SetMouseEchoToParagraph

SetMouseEchoToWord

ToggleMouseEchoFromLayer

Navigation

BottomOfFile

End

GotoLineNumber

Home

JAWSBottomOfFile

JAWSEnd

JAWSEnd

JAWSEndPcCursor

JAWSHome

JAWSHome

JAWSHomePcCursor

JAWSPageDown

JAWSPageDown

JAWSPageDownPcCursor

JAWSPageUp

JAWSPageUp

JAWSPageUpPcCursor

JAWSTopOfFile

NavigationQuickKeysToggle

NextCharacter

NextChunk

NextLine

NextParagraph

NextSentence

NextWord

NumericDataSayNextAsSingleUnit

NumericDataSayPriorAsSingleUnit

PageDown

PageUp

PriorCharacter

PriorChunk

PriorLine

PriorParagraph

PriorSentence

PriorWord

SayCellUnit

SayCellUnitEx

SayCharacterUnit

SayNextCharacterPCCursor

SayNextLinePCCursor

SayNextParagraph

SayNextSentence

SayNextWordPCCursor

SayPriorCharacterPCCursor

SayPriorLine

SayPriorLinePCCursor

SayPriorParagraph

SayPriorSentence

SayPriorWordPCCursor

ShouldMoveBySentence

SpeakNthPlaceMarker

ToggleOutlookReminder

TopOfFile

Object Model And Msaa

AnnounceLastAlert

ClickObjectByName

CloseOleObject

ComGetAvailableNames

ComRelease

CreateObject

CreateObjectEx

EnumerateTypeAndTextStringsForWindow

FetchCollectionProperty

FetchObjectProperties

FindAncestorOfType

FocusToLink

GetAncestorCount

GetCachedMSAAFocusInfo

GetControlTypeName

GetCurrentLinkIndex

GetCurrentObject

GetDocumentProperties

GetEmbeddedObjectDescription

GetFocusObject

GetLastMSAAAlertInfo

GetListOfObjects

GetListOfProofreadingElements

GetMSAAObjectTree

GetNativeOMFromMSAA

GetObject

GetObjectAtPoint

GetObjectAutomationId

GetObjectClassName

GetObjectContainerHelp

GetObjectDescription

GetObjectHelp

GetObjectIA2State

GetObjectInfoByName

GetObjectIsEditable

GetObjectItemStatus

GetObjectItemType

GetObjectModuleId

GetObjectMSAAState

GetObjectName

GetObjectNameUnfiltered

GetObjectRect

GetObjectRole

GetObjectState

GetObjectStateCode

GetObjectSubtype

GetObjectSubTypeCode

GetObjectType

GetObjectTypeCode

GetObjectValue

GetProofreadingElementCount

GetProofreadingElementInfo

GetRelationText

GetRichEditDocument

getRoleText

GetTypeAndTextStringsForObject

GetTypeAndTextStringsForWindow

GetUIAObjectFocusItem

GetUIAObjectTree

GetUIAXMLObject

IE4GetCurrentDocument

IsMSAAWindow

MoveToProofreadingElement

MoveToProofreadingElementByIndex

MSAAGetDialogStaticText

MSAARefresh

MSOGetMenuBarObject

OutlookGetDisplayedDates

SayFocusedHJDialogWindow

SayFocusedObject

SayObjectActiveItem

SayObjectTypeAndText

UIARefresh

VisualStudioGetAddinObject

WaitForFocusToMoveTo

WasSayObjectTypeAndTextExceptionProcessed

Optical Character Recognition

CancelOCR

CancelRecognition

CanRecognize

getOCRLangID

getOCRLangString

GetOCRLanguages

InvalidateCachedCursor

OCRDocument

OCRFile

OCRPdf

OCRScreenArea

OCRSelectedFile

RecognizeCamera

RecognizeControl

RecognizeRealWindow

RecognizeScreen

Picture Smart

PictureSmartWithCamera

PictureSmartWithControl

PictureSmartWithSelectedFile

Research It

ConvertLookupModuleDataToList

DebugLookupModuleQueryUsingListOfModules

IterateLookupModules

LRL_Dialog

LRL_GetFirstLookupModule

LRL_GetNextLookupModule

LRL_GetPrimaryLookupModule

LRL_Invoke

ResearchIt

ResearchItByEnteringTerm

ResearchItDefaultLookup

ResearchItUsingPrimaryLocation

RunLookupModuleQuery

RunLookupModuleQueryUsingListOfModules

WeatherWidget

WeatherWidgetClearLocationInfo

Say

HomeEndMovement

Say

SayCursorMovementException

SayInteger

SayLineUnit

SayMessage

SayObjectActiveItemWithDescription

SayPageUpDownUnit

SayString

SayTopBottomUnit

SayWordUnit

SpeakHomeEndMovement

SpellString

Screen Text

AnalyzeTextLine

ClearRect

DoJAWSFind

GetCharacter

GetCharacterPhonetic

GetChunk_ColorNA

GetChunk

GetCurrentFontData

GetDetailedFontChangesInfo

GetField

GetFromStartOfLine

GetJAWSFindText

GetLine

GetLiveRegionText

GetParagraph

GetPriorCharacter

GetPriorWord

GetScreenEcho

GetScreenXML

GetSentence

GetTextBetween

GetToEndOfLine

GetWord

GetWordInContext

GetWordList

IndicateInconsistenciesInRange

IndicateInconsistency

IsMovingByCharacter

IsMovingByFirstOrLastLine

IsMovingByHomeOrEnd

IsMovingByLine

IsMovingByPage

IsMovingByParagraph

IsMovingBySentence

IsMovingByWord

IsTextAnalysisValid

JAWSFind

JAWSFind

JAWSFindNext

JAWSFindNext

JAWSFindPrior

lvGetColumnHeader

MoveToFirstInconsistency

MoveToLastInconsistency

MoveToLastList

MoveToNextInconsistency

MoveToPriorInconsistency

PhoneticSpellHook

PresentAllOccurrences

PresentAllOccurrencesOfWord

ProcessNewText

ReadContextLine

SayAll

SayAll

SayAllBy

SayByTypeForScriptSayLine

SayCharacter

SayCharacter

SayCharacterPhonetic

SayChunk

SayField

SayFromCursor

SayFromCursor

SayLine

SayLine

SayLineInsteadOfSayAll

SayParagraph

SayParagraph

SaySentence

SaySentence

SayTextBetween

SayToCursor

SayToCursor

SayToPunctuation

SayToPunctuation

SayWord

SayWord

ScreenEcho

ScreenEchoToggle

SetJAWSFindText

SetScreenEcho

SpellFromCursor

SpellLine

SpellMode

SpellModeToggle

SpellToCursor

SpellWord

SpellWordHook

SpellWordPhonetic

SupportsEditCallbacks

ToggleTextAnalyzer

WordList

Scripts

AdjustBrailleOptions

AdjustJAWSOptions

CallFunctionByName

CaptureAllGestures

cStrBrailleList

cstrBrailleMarkingList

cStrDefaultHTMLList

cStrDefaultList

cStrTableBrailleList

Delay

EnablePerModeGestures

GetCurrentKeyboardLayoutDisplayName

GetCurrentKeyboardLayoutText

GetCurrentScriptKeyName

GetGestureName

GetGestureNames

GetLastInputSource

GetRangeInconsistencyByIndex

GetRangeInconsistencyCount

GetScriptAssignedTo

GetScriptCallStack

GetScriptDescription

GetScriptFileName

GetScriptKeyName

GetScriptKeyNames

GetScriptSynopsis

IsSameScript

IsScriptKey

IsTouchCapable

MoveToRangeInconsistency

NotifyTouchInteraction

Null

Pause

PerformScriptByName

QueueFunction

QuickSettings

ReformatKeyName

RefreshScripts

SayCurrentScriptKeyLabel

ScheduleFunction

ScheduleFunctionAfterWindowGainsFocus

ScriptAndAppNames

ScriptFileName

ScriptManager

ScriptManagerDefault

SetFocusToWindowAndScheduleFunction

SetGestureMode

SetLastScriptKey

SetPassThroughNextGesture

SwitchToScriptFile

TypeCurrentScriptKey

UnScheduleFunction

Selection

CustomHighlightAssign

DoCustomHighlightColors

DragDialogWindow

GetSelectedCellsAsArray

GetSelectedText

ReadWordInContext

SayClipboard

SaySelectedText

SelectAll

SelectAllItems

SelectCurrentItem

SelectFromSavedLocationToCurrent

SelectFromStartOfLine

SelectFromStartOfLine

SelectFromTop

SelectFromTop

SelectingText

SelectNextCharacter

SelectNextCharacter

SelectNextLine

SelectNextLine

SelectNextParagraph

SelectNextParagraph

SelectNextScreen

SelectNextScreen

SelectNextWord

SelectNextWord

SelectPriorCharacter

SelectPriorCharacter

SelectPriorLine

SelectPriorLine

SelectPriorParagraph

SelectPriorParagraph

SelectPriorScreen

SelectPriorScreen

SelectPriorWord

SelectPriorWord

SelectToBottom

SelectToBottom

SelectToEndOfLine

SelectToEndOfLine

UnselectAllButCurrent

Settings

AdjustJAWSVerbosity

ANSICharsDecrement

BrailleCount

BrailleDisplayLoadErrors

BrailleDriver

BrailleDriverInformation

BrailleLongName

BrailleName

BraillePort

BraillePortString

CreateDictionaryCommandLine

DictionaryManager

GetActiveConfiguration

GetActiveSynthGlobalSectionName

GetAlternateUserDirectoryMode

GetDefaultJCFOption

GetIntOptionDefaultJSISetting

GetIntOptionDefaultSetting

GetJCFOption

GetJCFOptionFromFile

GetNavigationQuickKeysSettingFromFile

GetSettingInformation

GetSettingsCenterControlDisabledReason

GetSettingsCenterControlHelp

GetStringOptionDefaultJSISetting

GetStringOptionDefaultSetting

GetVerbosity

IsSayAllOnDocumentLoadSupported

JAWSVerbosityCore

LaunchCommandsSearch

LaunchCommandsSearchViewer

LaunchQuickSettings

NavigationQuickKeysManager

ProgressBarAnnouncement

ProgressBarAnnouncementToggle

PunctuationToggle

ReloadAllConfigs

RunJAWSManager

RunNavQuickKeysManager

ScreenShadeToggle

SelectALanguage

SetAlternateUserDirectoryMode

SetAnsiCharsIncrement

SetDefaultJCFOption

SetJAWSLanguage

SetJCFOption

SetPunctuationLevel

SettingsCenter

SetVerbosityLevel

ShouldItemBraille

ShouldItemSpeak

ShouldSayAllOnDocumentLoad

SpellModeSet

SwitchToConfiguration

SynthCount

SynthDisplayLoadErrors

SynthDriver

SynthDriverInformation

SynthLongName

SynthName

SynthPort

SynthPortString

ToggleDefaultUserMode

ToggleLanguageDetection

UtilityDomainSpecificConfiguration

VerbosityLevel

VerbosityLevelToggle

VirtualRibbonToggle

Skim-Reading

DlgSkimRead

MoveToDocumentOffset

SkimRead

SkimReadDialog

SkimReadMatchCallback

SkimReadMoveToDocLine

SkimReadMoveToDocOffset

SkimReadShouldSpeakText

StartSkimRead

Sounds

Beep

DecreaseSystemVolume

IncreaseSystemVolume

PlayJCFSoundFile

PlaySound

ToggleAudioDucking

Speech Markup

GetCountedSelectionContextItems

GetCurrentSayAllScheme

GetCurrentSchemeName

GetSelectionContext

GetSelectionContextFlags

IndicateControlState

IndicateControlType

SelectAScheme

setCountedSelectionContextItems

SetSelectionContextFlags

smmGetBehavior

smmGetBehaviorForControlState

smmGetBehaviorForControlType

smmGetDesiredUnitsOfMeasure

smmGetEndMarkupForAllCaps

smmGetEndMarkupForAttributes

smmGetEndMarkupForColor

smmGetEndMarkupForControlState

smmGetEndMarkupForControlType

smmGetEndMarkupForFontName

smmGetEndMarkupForFontSize

smmGetEndMarkupForSingleCap

smmGetMarkupForSymbol

smmGetSpeechMarkupTextOptions

smmGetStartMarkupForAllCaps

smmGetStartMarkupForAttributes

smmGetStartMarkupForColor

smmGetStartMarkupForControlState

smmGetStartMarkupForControlType

smmGetStartMarkupForFontName

smmGetStartMarkupForFontSize

smmGetStartMarkupForSingleCap

smmGetSymbolForMarkup

smmMarkupString

smmReplaceSymbolsWithMarkup

smmSchemeDefinesBehaviorFor

smmSetBehavior

smmSetDesiredUnitsOfMeasure

smmStripMarkup

smmToggleTrainingMode

smmTrainingModeActive

SwitchToScheme

ToggleSMMTrainingMode

Strings

FindString

FormatString

FormatStringWithEmbeddedFunctions

GetCharacterValue

GetCharacterValueString

GetSpellString

IntToPaddedString

IntToString

IsWordDelimiter

LevenshteinDistance

MakeCharacterFromValue

ParseOutlookCalendarUIAText

SayFormattedMessage

SayFormattedMessageWithvoice

stringChopLeft

stringChopRight

StringCompare

StringContains

StringContainsChars

StringDeleteBlankFields

StringDiff

StringIsAlpha

StringIsBlank

StringIsPunctuation

StringLeft

StringLength

StringLower

StringMixedCaseToMultiword

StringRemoveCharsInRange

StringReplaceChars

StringReplaceSubstrings

StringReverse

StringRight

StringSegment

StringSegmentCount

StringSegmentIndex

stringsMatchExcludingWhitespace

StringStartsWith

stringStripAllBlanks

StringToHandle

StringToInt

StringTrimCommon

StringTrimLeadingBlanks

StringTrimTrailingBlanks

StringUpper

SubString

TextToHTML

TypeFormattedString

TypeString

System

abs

AllowedToUseSkypeAPI

AppCommand

ChangeSystemVolume

CheckForWinVistaErrorDialog

EnableRemoteAccessClient

EnableRemoteAccessServer

FocusToWerFaultApp

GetBatteryChargeStatus

GetBatteryLifeTimeRemainingString

GetBatteryLifeTimeSecondsRemaining

GetDayOfWeek

GetEnvironmentVariable

GetInputLanguage

GetLanguageCodeAtCursor

GetPowerACLineStatus

GetRegistryEntryDWORD

GetRegistryEntryString

GetSystemDefaultLang

GetSystemLocaleInfo

GetSystemPowerStatus

GetSystemVolume

GetSystemVolumeRange

GetSystemYear

GetTickCount

GetUserDefaultLang

GetUserLocaleInfo

GetWindowsOS

GetWindowsSystemDirectory

GrantAppContainerAccess

IsMetroApp

IsRemoteAccessClientEnabled

IsRemoteAccessServerEnabled

IsSecureDesktop

IsWindows10

IsWindows7

IsWindows8

IsWinNtOr95

IsWinVista

KeyboardHelp_LaunchWindowsShortcut

KeyboardHelp_WindowsCmd

LaunchShortcut

ListTaskTrayIcons

ParseDateString

ParseLongDate

ParseLongDateToShortDate

ParseShortDate

Run

SayBatteryLevel

SayConnectionStatus

SayDriveLetter

SaySystemTime

SaySystemTray

SayTaskBar

ScreenGetHeight

ScreenGetWidth

SetRegistryEntryDWORD

SetRegistryEntryString

SetSystemVolume

StartJAWSTaskList

SwitchToPreviousApp

SysGetDate

SysGetTime

SysTrayGetItemCount

SysTrayGetItemToolTip

SysTrayMoveToItem

UtilityDumpScreenOSM

ViewSysTrayItems

VKSelect

Tables

BottomOfColumn

DownCell

DownCell

EndOfRow

ExitTableLayer

FirstCell

FirstCellInTable

GetCell

GetCellCoordinates

GetCellFormula

GetCellNote

GetCellSpan

GetColumnHeader

GetColumnText

GetColumnTextAsArray

GetCurrentRowColumnCount

GetRowAndColumnHeadersForSpeakTableCells

GetRowHeader

GetRowSpanInfo

GetRowText

GetRowTextAsArray

GetTableCaption

GetTableCoordinatesForSpeakTableCells

GetTableName

GetTableNestingLevel

GetTableRowCount

GetTableSelectionRange

GetTableSummary

InTable

inTableCell

IsTableNavSupported

JumpReturnFromTableCell

JumpToTableCell

LastCell

LastCellInTable

MoveToBottomOfColumn

MoveToEndOfRow

MoveToStartOfRow

MoveToTableCell

MoveToTopOfColumn

NextCell

NextCell

PriorCell

PriorCell

ReadCurrentColumn

ReadCurrentRow

ReadFromCurrentCell

ReadFromTopOfColumn

ReadToBottomOfColumn

ReadToCurrentCell

SayCell

SayCell

SayColumnHeader

SayNextColumn

SayPriorColumn

SayRowHeader

SayTableCellCoordinates

SetColumnHeader

SetRowHeader

SetTableTitleReading

ShouldSpeakTableCellsOnScriptCall

SpeakTableCells

StartOfRow

TableErrorEncountered

TopOfColumn

UpCell

UpCell

Text Format

AttributeEnumerate

AttributesChanged

FindFirstAttribute

FindLastAttribute

FindNextAttribute

FindPriorAttribute

FormatOneTwoAndThree

GetCharacterAttributes

GetCharacterFont

GetCharacterPoints

GetCharacterWidth

GetFont

GetLineBottom

GetLineTop

GetStringWidth

GetWordWidth

IntToAttribName

IsRtlChar

IsRtlReading

SayAttributesChanges

SayControlAttribBits

SayFont

SayFont

SayTextAndAttributes

Touch Navigation

AdvancedObjectNavigationModeToggle

AnnounceCurrentGestureModeAsError

DisableSemanticZoom

DoSecondaryActionForCurrentElement

EnableSemanticZoom

GestureCloseApp

GestureEscape

GestureF6

GestureJAWSWindow

GestureRunJAWSManager

GestureSayAll

GestureShiftF6

GestureShutDownJAWS

GestureToggleShowTouchKeyboard

GestureToggleTextReview

GestureToggleTouchCursor

InvalidTouchCursorAction

KillUIAObject

ObjectNavigateToFirstChild

ObjectNavigateToFirstElementInProcessID

ObjectNavigateToLastElementInProcessID

ObjectNavigateToNextSibling

ObjectNavigateToParent

ObjectNavigateToPriorSibling

PassThroughNextGesture

RouteTouchToFocus

SayUIAPoint

SayUIARect

SetGestureModeNext

SetGestureModePrior

ShowUIAElementProperties

TogglePerModeGestures

TouchBottomOfFile

TouchChangeElementMovementNext

TouchChangeElementMovementPrior

TouchCloseApp

TouchEnd

TouchExploreEnded

TouchGoToNextButton

TouchGoToNextCheckBox

TouchGoToNextComboBox

TouchGoToNextDocument

TouchGoToNextEdit

TouchGoToNextFormControl

TouchGoToNextGroup

TouchGoToNextHeading

TouchGoToNextHyperlink

TouchGoToNextImage

TouchGoToNextLandmark

TouchGoToNextList

TouchGoToNextListItem

TouchGoToNextMenu

TouchGoToNextPane

TouchGoToNextRadioButton

TouchGoToNextRegion

TouchGoToNextStaticText

TouchGoToNextStatusBar

TouchGoToNextTab

TouchGoToNextTable

TouchGoToNextToolBar

TouchGoToNextTree

TouchGoToPriorButton

TouchGoToPriorCheckBox

TouchGoToPriorComboBox

TouchGoToPriorDocument

TouchGoToPriorEdit

TouchGoToPriorFormControl

TouchGoToPriorGroup

TouchGoToPriorHeading

TouchGoToPriorHyperlink

TouchGoToPriorImage

TouchGoToPriorLandmark

TouchGoToPriorList

TouchGoToPriorListItem

TouchGoToPriorMenu

TouchGoToPriorPane

TouchGoToPriorRadioButton

TouchGoToPriorRegion

TouchGoToPriorStaticText

TouchGoToPriorStatusBar

TouchGoToPriorTab

TouchGoToPriorTable

TouchGoToPriorToolBar

TouchGoToPriorTree

TouchHome

TouchMoveToFirstElement

TouchMoveToLastElement

TouchMoveToNextElementByType

TouchMoveToPriorElementByType

TouchNextElement

TouchPageDown

TouchPageUp

TouchPriorElement

TouchQuickNavEnableToggle

TouchRightClick

TouchSayAll

TouchSayCharacter

TouchSayCurrentElement

TouchSayNextCharacter

TouchSayNextLine

TouchSayNextParagraph

TouchSayNextWord

TouchSayPriorCharacter

TouchSayPriorLine

TouchSayPriorParagraph

TouchSayPriorWord

TouchSayWord

TouchScrollDown

TouchScrollLeft

TouchScrollRight

TouchScrollUp

TouchSetFocus

TouchStopCurrentSpeechOutput

TouchTapCurrentElement

TouchTextReviewNext

TouchTextReviewOff

TouchTextReviewOn

TouchTextReviewPrior

TouchToggleSelectionMode

TouchTopOfFile

TrySetGestureModeForTextReading

User Interaction

DlgCustomizeColumns

DlgCustomizeListview

DlgGetCustomSummaryInfo

DlgSelectAVoiceProfile

DlgSelectControls

dlgSelectFunctionToRun

DlgSelectItemInList

DlgSelectScriptToRun

DlgSysTray

ExMessageBox

InHJDialog

InputBox

IsSelectItemDlg

IsSelectScriptDlg

MessageBox

StartJAWSTaskList

TimedMessageBox

User Options

AddCustomNodes

AlphaNumCombinations

CapsIndicate

CapsIndicateDuringSayAll

ConvertListToNodeList

CustomLabelsSet

DocumentPresentationSet

FlashMoviesRecognize

GraphicsShow

IndentationIndicate

InsertCustomNodesInBranch

LanguageDetectChange

NavigationQuickKeysSet

OptionsTreeCore

PageRefresh

PrependItemWithNode

ProgressBarSetAnnouncement

PunctuationSetLevel

SayAllReadsBy

ScreenEchoSet

SmartWordReadingSet

SynthesizerMute

TopAndBottomEdgeIndicate

TreeCoreGetDefaultBrailleMarkingList

TreeCoreGetDefaultBrailleOptions

TreeCoreGetDefaultEditingOptions

TreeCoreGetDefaultGeneralOptions

TreeCoreGetDefaultNumbersOptions

TreeCoreGetDefaultOptions

TreeCoreGetDefaultReadingOptions

TreeCoreGetDefaultSayAllOptions

TreeCoreGetDefaultSpellingOptions

TreeCoreGetDefaultVCursorFormsOptions

TreeCoreGetDefaultVCursorGeneralOptions

TreeCoreGetDefaultVCursorGraphicsOptions

TreeCoreGetDefaultVCursorHeadingAndFrameOptions

TreeCoreGetDefaultVCursorLinksOptions

TreeCoreGetDefaultVCursorListAndTableOptions

TreeCoreGetDefaultVCursorOptions

TreeCoreGetDefaultVCursorTextOptions

TreeCoreGetDefaultVCursorTopLevelOptions

TypingEchoSet

UOGrade2Rules

vCursorAbbreviationsExpand

vCursorAccessKeysShow

vCursorAcronymsExpand

vCursorAttributesIndicate

vCursorBlockQuotesIdentifyStartAndEnd

vCursorButtonsShowUsing

vCursorCustomPageSummary

vCursorFormFieldsIdentifyPromptUsing

vCursorFormsModeAutoOff

vCursorFramesShowStartAndEnd

vCursorGraphicalLinksSet

vCursorGraphicsSetRecognition

vCursorGraphicsSetRecognitionJlp

vCursorGraphicsShow

vCursorHeadingsAnnounce

vCursorImageMapLinksShow

vCursorInlineFramesShow

vCursorLayoutTables

vCursorLinksIdentifySamePage

vCursorLinksIdentifyType

vCursorListsIdentifyStartAndEnd

vCursorRepeatedTextSkip

vCursorScreenTrack

vCursorTablesShowStartAndEnd

vCursorTableTitlesAnnounce

vCursorTextLinksShow

vCursorUntaggedGraphicalLinkShow

VerbositySetLevel

Utility

CollectWindowInfo

GetRightLeaf

GetTreeInfo

HomeRowToggle

MouseMovementDecrement

MouseMovementDefault

OutputDebugString

SayDebugger

ScreenSensitiveHelpTechnical

ToggleHomeRow

UtilityCopyInfo

UtilityCopyMSAAObjectInfo

UtilityDebugResearchItRuleSet

UtilityFindFirstAttribute

UtilityFindLastAttribute

UtilityHelp

UtilityInitializeHomeRowPosition

UtilityJumpToOutputMode

UtilityJumpToOutputModeReverseOrder

UtilityLeftMouseButton

UtilityManageSayLogging

UtilityManageScriptCallStackLogging

UtilityManageSwitchLogging

UtilityMoveToChild

UtilityMoveToFirstWindow

UtilityMoveToLastWindow

UtilityMoveToNextWindow

UtilityMoveToParent

UtilityMoveToPriorWindow

UtilityNextAttribute

UtilityNodeCapture

UtilityPriorAttribute

UtilityPutInfoInBox

UtilityPutMSAAObjectInfoInBox

UtilityResetOutputMode

UtilityRouteJAWSCursorToPc

UtilitySayCurrentMSAAMode

UtilitySayInfoAccess

UtilitySayMenuMode

UtilitySayMSAAObjectInfoAccess

UtilitySayMSAAObjectOutputMode

UtilitySayOutputMode

UtilitySayWindow

UtilitySayWindowPromptAndText

UtilitySetFontMode

UtilitySetMSAAObjectOutputMode

UtilitySetMSAAObjectOutputModeReverseOrder

UtilitySetOutputMode

UtilitySetOutputModeReverseOrder

UtilityShowLastUnknownFunctionName

UtilityShowObjectHierarchyInfo

UtilityShowObjectList

UtilityShowObjectListInfoByName

UtilityShowSDMControls

UtilityShowUIAFocusObjectTreeInfo

UtilityShowUIAFocusParentObjectTreeInfo

UtilityShowUIAObjectFocusAncestorsInfo

UtilityShowUIAObjectFocusInfo

UtilityShowUIATopObjectTreeInfo

UtilitySpeakWindowVisibility

UtilityTestKeys

UtilityToggleShowUnknownFunctionCallStack

UtilityToggleSpeakWindowVisibility

UtilityToggleSuppressUnknownFunctionCallNotification

UtilityToggleUIAObjectBrowserMode

UtilityToggleUseMSAA

UtilityToggleXMLDomDocBrowserMode

UtilityTreeCapture

UtilityWindowClassReassign

Virtual Viewer

AddHotKeyLinks

EnsureNoUserBufferActive

RedirectToUserBuffer

RedisplayPrevField

SayFocusAfterExitUserBuffer

UpdateResultsViewerTitle

UserBufferActivate

UserBufferActivateEx

UserBufferAddFormattedMessage

UserBufferAddLink

UserBufferAddText

UserBufferAddTextResultsViewer

UserBufferAddTextWithHTML

UserBufferClear

UserBufferClearResultsViewer

UserBufferDeactivate

UserBufferDeactivateResultsViewer

UserBufferGetFontInfo

UserBufferGetLength

UserBufferGetText

UserBufferIsActive

UserBufferIsActiveResultsViewer

UserBufferIsTrappingKeys

UserBufferPrevWindowName

userBufferPrevWindowType

UserBufferSetFontInfo

UserBufferWindowName

userBufferWindowType

Voices

ChangeVoiceSetting

DecreaseVoicePitch

DecreaseVoiceRate

DecreaseVoiceRatePermanent

DecreaseVoiceRateTemporary

DecreaseVoiceVolume

GetActiveProfileIndex

GetActiveProfileName

GetActiveSynthInfo

GetActiveSynthLanguage

GetDefaultProfileIndex

GetDefaultProfileName

GetDefaultSynthInfo

GetSynthLanguages

GetSynthPitchRange

GetSynthRateRange

GetVoiceParameters

GetVoicePerson

GetVoicePitch

GetVoiceProfileCount

GetVoiceProfileNames

GetVoicePunctuation

GetVoiceRate

GetVoiceVolume

GetVoiceVolumeRange

HasUserDefinedVoiceProfiles

IncreaseVoicePitch

IncreaseVoiceRate

IncreaseVoiceRatePermanent

IncreaseVoiceRateTemporary

IncreaseVoiceVolume

InFSVoiceSettingsDialogBox

InitializeGlobalVoiceSettings

IsSpeechOff

MuteSynthesizer

MuteSynthesizerToggle

NullAllGlobalSettings

ResetSynth

ResetVoiceSettings

RestoreVoiceSettings

SayAllInProgress

SayUsingVoice

SelectAVoiceProfile

SetActiveVoiceProfileByIndex

SetActiveVoiceProfileByName

SetAllVoicesToGlobals

SetSynth

SetSynthLanguage

SetVoiceGlobalSettings

SetVoiceParameters

SetVoicePerson

SetVoicePitch

SetVoicePunctuation

SetVoiceRate

SetVoiceSetting

SetVoiceVolume

SpeechInUse

SpeechOff

SpeechOn

SpeechOnDemandToggle

StopSpeech

StopSpeech

UseSapi5ForSayAll

Window

ActivateSearchBox

CheckForReminderDialog

CloseDocumentWindow

DoChildWindows

DoesWindowBelongToFocusedThread

EnumerateChildWindows

FindDescendantWindow

FindTopLevelWindow

FindWindow

findWindowByType

FindWindowWithClassAndId

FocusWindowSupportsUIA

GetAppletName

GetAppMainWindow

GetBottomLineOfWindow

GetControlID

GetControlIDString

GetCurrentControlID

GetCurrentWindow

GetDocumentLoadState

GetFirstChild

GetFirstWindow

GetFocus

GetFocusRect

GetFocusRectBottom

GetFocusRectLeft

GetFocusRectRight

GetFocusRectTop

GetForegroundWindow

GetItemRect

GetLastWindow

GetNavModuleVersionInfo

GetNextWindow

GetOwningAppName

GetOwningAppNameAndVersionNumberForWindow

GetParent

GetPriorWindow

GetRealWindow

GetRibbonStatus

GetScrollBarInfo

GetTextInFocusRects

GetTextInRect

GetTextInWindow

GetTopLevelWindow

GetWindowAtPoint

GetWindowBottom

GetWindowClass

GetWindowExStyleBits

GetWindowHierarchyX

GetWindowHierarchyY

GetWindowLeft

GetWindowName

GetWindowOwner

GetWindowRect

GetWindowRight

GetWindowStyleBits

GetWindowSubtypeCode

GetWindowText

GetWindowTextEx

GetWindowTitleForApplication

GetWindowTop

GetWindowType

GetWindowTypeCode

HasFocusRect

HasTitleBar

HideRectangleWindow

InRibbons

InTextWindow

InvalidateRect

IsDescendedFromWindow

IsPointInWindow

IsScanCursorClass

IsWindowDisabled

IsWindowObscured

IsWindowVisible

lvGetItemColumnRect

lvGetNumOfColumns

lvIsReportListStyle

MoveToWindow

navGetAppMainObjectID

navGetCurrentObjectID

navGetFirstChildObjectID

navGetFirstObjectID

navGetFocusObjectID

navGetLastObjectID

navGetNextObjectID

navGetObjectContainerHelp

navGetObjectHelp

navGetObjectName

navGetObjectTypeCode

navGetObjectTypeString

navGetParentObjectID

navGetPrevObjectID

navGetRealObjectID

navGetTopLevelObjectID

navSayObjectTypeAndText

PostMessage

Refresh

RefreshWindow

RegisterWindowMessage

RibbonsActive

SayBottomLineOfWindow

SayFocusedWindow

SayFocusRect

SayFocusRects

SayParentGroupboxForWindowPromptAndText

SaySpecialWindowClasses

SayToBottom

SayTopLineOfWindow

SayWin8AppWindowTitle

SayWindow

SayWindowPromptAndText

SayWindowPromptAndTextPostProcess

SayWindowTitle

SayWindowTitleForApplication

SayWindowTypeAndText

SendMessage

SetFocus

SetParentDims

ShowRectangleWindow

SpeakWindowInformation

VirtualizeCurrentControl

VirtualizeWindow

WindowClassReassign

API Tools

FS Braille Display API

fbBeep

fbClose

fbGetCellCount

fbGetDisplayName

fbGetFirmwareVersion

fbOpen

fbSetVariBraille

FS API

ResearchIt DLL API

Copyright Information

General Scripting Concepts

The Freedom Scientific Developer network (FSDN) is a set of help files intended to be used as a reference for the Freedom Scientific Scripting language and API tools. It is not a scripting manual or training tool. Furthermore, it is assumed that you have knowledge of basic programming concepts like statement and logic structures, the meaning of terms such as "variable", "constant", or "function", etc. Therefore, such terms are not explained.

Since the FSDN is meant to be used as a reference, you may choose to read any topic of interest in any order because book summaries are designed to be self-contained wherever possible; that is, they are independent of each other with links to relevant topics where appropriate. Plus, many book summaries and subtopics include code samples you may find helpful.

The FSDN is divided into three major sections:

·         General Scripting Concepts

·         Reference Guide

·         API Tools, including FS Braille Display API

The General Scripting Concepts book contains numerous general topic summaries as well as function descriptions. Where possible, general topic summaries point to related topics. Many topic summaries include code samples to facilitate understanding of how to apply certain concepts to scripts and functions for JAWS features (i.e., the virtual viewer and Research It). There may be general topic areas that are new or already familiar to you but have updated content. The general topic areas are updated each time the FSDN is published.

The Reference Guide is comprised of many category books of scripts and functions. Each category book of scripts and functions has a summary, and each script or function is listed with specific details of its own. These category summaries are updated each time the FSDN is published. So it may be worth checking them out even if they are already familiar. Plus, there are likely new scripts and functions available for your use than the last time you examined a particular category. Two new categories are Aggregate Data Types and Annotations.

The API Tools book is specifically for very advanced users familiar with the concepts of API functionality. One set of tools for example is the FS Braille Display API book, which contains functions related to the Freedom Scientific Braille displays. The API Tools book also contains:

FSAPI: a tool that allows you to obtain object model information for third-party applications through the COM process.
 FSAPI

Research It Lookup Module API: a tool so you can create your own customized rule sets for third-party applications.
 Research It DLL API

 

Scripting Language Enhancements

Every new version of JAWS introduces new scripts and functions to enhance the flexibility of JAWS and to further your ability to customize it for your needs. Since JAWS 17, the Freedom Scientific Scripting language has added several critical enhancements, as follows:

Scripting specifically for a Web App within a browser supported by JAWS, including a tool (formerly called HomeRow Utility). This is now called the Script Utility. One enhancement of this tool is that the XMLDom Browser mode allows you to inspect the element structure of a webpage in great detail without having to write your own functions to obtain XML information.
 Another enhancement, starting in JAWS 2020 and rlated to Domain-Specific Utilities, Web App Scriptability has enhancements for you to choose when to load or not load your custom scripts for a given Web application by adjusting your ConfigNames.ini file.
 Web App Scriptability

Customizing some of the Freedom Scientific utilities, such as the dictionary Manager, by domain for Web-based applications, even those not specifically within a browser. Domain-Specific Utilities

A file structure to support easier localization of JAWS message and header files for constants and variables.
 Localization: JAWS Folder Restructure

Starting with JAWS 2020, a Scan cursor capability for applications that support UI automation (UIA), including moderm Windows Presentation Foundation (WPF) and Universal Windows Platform (UWP) applications.

 

Backward Compatibility with Prior Versions of JAWS

You may have customized script sets from prior versions of JAWS that you still want to work with the current version, or that you want to enhance. There is no way for a script binary .jsb file to recognize which version of JAWS compiled it, and no direct method for the compiler to recognize which version of JAWS to compile at runtime. Starting with JAWS 17, JAWS can employ the "Pragma" mechanism for you to add to your source code where relevant so that your older script source files compile and work well with the structure. See the topic area called Localization: JAWS Folder Restructure for how to compile older script sets.

 

Book Topics

The following book topics are included in the FSDN General Scripting Concepts book, and the new API Tools book. Check to see which ones are updated since the last published FSDN. Many of these topics have their own summaries within the topic areas, as well:

Getting Started

Formatting Script Files for UTF-8

Freedom Scientific Scripting Standards

Settings and Configurations

Variables and Constants

Operators

Calling Scripts and Functions

Control Flow

Objects

Events

Keywords and Non-Required Keywords

Compiler Directives

Key Management

Creating Research It Rules

Customized Quick Settings

Output Types

Implementing a Virtual Viewer Window

Structured Braille Functionality

 

Web App Scriptability

 

Domain-Specific Utilities

 

Localization: JAWS Folder Restructure

FS Braille Displays API

 

FSAPI

 

Research It DLL API

Getting Started

The Freedom Scientific Developer Network is divided into three major books for your convenience. they include:

General Scripting Concepts

Reference Guide

FS Braille Display API

The General Scripting Concepts book includes many topic areas, many of which have further summaries for complex concepts such as Compiler Directives. Each topic area has its own summary page with links to related information where appropriate, and many of the summaries include code samples.

The Reference Guide contains all the functions exposed in the Freedom Scientific Scripting language. The book is divided into category books of related scripts and functions. To facilitate finding what you need quickly and efficiently, each category book has its own summary with code samples where appropriate.

The FS Braille Display API book contains information about the functions specific to working with Braille displays. Since this topic falls outside the standard scripting functions, this information is in its own book for ease of use.

Note: JAWS ships with the ability for you to customize scripts out of the box. You do not need a special build of the product but you must have administrative rights on your installed version and be using an Administrator user account in order to take advantage of this powerful tool.

Writing Script Files with Script Manager or a Text Editor

Editing

Create or edit JAWS Script Source (.JSS) files from within any text editor. If you are new to scripting, you may find it easiest to use the JAWS Script Manager to create and edit script files because this text editor provides many helpful tools for navigating through a script file. Starting with JAWS 2020, the Script Manager provides an even more robust set of tools for creating your own script sets. Tools include:

·         Shift+F1 - Using a keystroke at the cursor where a function is located to have that function's details shown to you in a popup window you can review and dismiss with ESC.

·         Inserting built-in functions.

·         Formatting scripts.

·         Providing script language help.

·         Writing and synchronizing the script documentation.

·         Formatting the script file for UTF-8 encoding.

You may learn about scripting by choosing the JAWS "Help Topics" item from the "Help" menu.

Activate the Script Manager from within any application by one of the following methods:

1.    Press INSERT+0.

2.    Press INSERT+F2 for the JAWS "Run Managers" dialog. Navigate through the list until Script Manager is selected, and then press ENTER.

As mentioned above, starting with JAWS 2020, if you want to see the details for a function within a script, you can press Shift+F1 while your cursor is on the name of the function. For example, bring up the Notepad.jss file. It already has functions within it. Move to any function call within a script or function and place your cursor at the function call name. Pressing Shift+F1 shows you that function's details. Dismiss the function's details with Esc. You are back in the .jss source file.

Naming

Script files follow the same naming and location conventions as most JAWS Settings files. Storing script files in the JAWS\Settings\(Language) folder ensures that all necessary include files are present at compile time. By default, the JAWS Script Manager creates files with the same root name as the active application executable, and places them into the Jaws\Settings\(Language) folder.

Compiling Script Files

The JAWS Script Manager compiles an active script file whenever the "Save" option is selected from the "File" menu. The compiler gives the resulting binary file the same root name as the script source file, and places it in the same folder. JAWS will load the new binary file the next time the application with the same root name gains focus by moving into the Windows foreground.

If you choose to edit script source files with a text editor instead of the Script Manager, use the application "SCompile.exe", located in the JAWS program folder to compile them from the command line. Call "SCompile", passing in script source file names. The compiler accepts wild cards;, so many source files may be compiled with one command.

Formatting for UTF-8 Encoding

UTF-8 is an acronym for UCS Transformation Format — 8-bit multibyte character encoding for Unicode. ANSI is an acronym for American National Standards Institute. For more technical information about the meanings of these terms, and how to format script files for UTF-8, see Formatting Script Files for UTF-8.

IME Support

JAWS can make Input Method Editors (IME) accessible. These special types of editors allow you to input from the keyboard into documents containing characters belonging to languages such as Chinese, Japanese, and Korean. In order for JAWS to support IME, you must install a text service compatible with Microsoft Text Services Framework (TSF). The installer is called FSTxtSvc.MSI, and it installs the Freedom Scientific Text Service (FSTxtSvc). Note that this text service is not installed by default for languages other than Chinese, Japanese, and Korean. For more information about this highly specialized area so that you may work with localized custom scripts for the languages mentioned above, please contact the Director of Localization at Freedom Scientific.

Overview

UTF-8 is an acronym for UCS Transformation Format — 8-bit multibyte character encoding for Unicode. ANSI is an acronym for American National Standards Institute. For more technical information about the meanings of these terms, please visit:

http://en.wikipedia.org/wiki/UTF-8
 and
 http://en.wikipedia.org/wiki/ANSI
 and
 http://en.wikipedia.org/wiki/Unicode

For our purposes, ANSI and UTF-8 refer to a method for reading and writing files for JAWS to utilize where there are characters in the code or in the files whose character values are higher than ASCII 127. ASCII characters include all standard punctuation and alphanumeric characters for Western European languages, as well as various other symbols. From 127 to 256, there are characters like smiley faces, Greek characters, etc. Beyond 256 are over 109,000 Unicode characters, including Hebrew characters, Cyrillic characters, etc. Files containing such characters must be formatted properly in order to be interpreted by JAWS. So the UTF-8 file format for the Script Manager supports many languages other than English. This file format can even include characters that are used in Western European languages but have accent marks like vowels with an acute or umlaut mark.

For JAWS support to interpret UTF-8 file formats correctly, in the past, localizers had to manipulate script files that included Unicode characters one file at a time and by hand in order to save files with Unicode characters properly in UTF-8 format. Otherwise, files containing Unicode characters would wipe out those characters in when saving or compiling files with the JAWS Script Manager. The UTF-8 implementation for Freedom Scientific JAWS support via scripting should eliminate this problem.

Definitions

 Script source related files are those with extensions:

.jss - script source

.hss - hidden script source

.jsh - script header

.hsh - hidden script header

.jsm - script message

.jsd - script documentation

.sbl - speech symbols file

.jbt - JAWS Braille table file

.CHR - character substitution

Script binary files are those with the extension of .JSB. BOM (Byte Order Mark) is a series of three specific bytes (written in hex as 0xEF, 0xBB, and 0xBF respectively) which if present at the beginning of a file, indicates that the file is stored in UTF-8 format.

Remarks

The Script Manager is not a hex text editor, the only way to test whether a file is being read by JAWS in UTF-8 format is by inference.

Where UTF-8 is supported, the option in the Files menu of the Script Manager called UTF-8 Format appears as “checked” when the script Manager has read the file as a UTF-8 file.

If the Script Manager reads the file without the File menu option for UTF-8 Format checked, the file is considered to be an ANSI file.

If the File menu option for UTF-8 Format does not appear at all in the Files menu of Script Manager, it means that the current version/build of JAWS being run does not support UTF-8. (Note: If the current version/build of JAWS reader being run is supposed to support UTF-8 but there is no File menu option for UTF-8 Format available at all when a file is read or a new file created, no UTF-8 processing will be handled by JAWS with respect to that file at compile time.

Saving a UTF-8 Formatted Script File

Notes

When you open a script file using Script Manager, JAWS assumes that the file is formatted as an ANSI file. When you save the file, it is saved as an ANSI file. Unless you explicitly enable UTF-8 formatting for the current file, it is not saved as a UTF-8 file. Unless you direct it to be saved elsewhere, it will be saved in your User\Settings\(Language) folder.

If UTF-8 symbols are needed to appear on a Braille display, one or more .jbt files may need to be formatted as UTF-8 files.

 

The following example illustrates how to reformat your .jbt file for UTF-8:

1.    The .jbt file must temporarily replace the file whose name is identical in the Program Files folder for the current version of JAWS. Navigate to that folder. It’s path will be something like,
 C:\Program Files\Freedom Scientific\JAWS\xx.0

2.    Change the name of the file called “US_Unicode.jbt” to something like “#US_Unicode.jbt”.

3.    Copy the file with the same name as the original file whose name you just changed into the current folder. You should now have a file called “US_Unicode.jbt” file in the current folder as well as the renamed one that originally is part of the current JAWS build.

4.    From within Script Manager with the .jbt file open, find the option in the Files menu called "UTF-8 Format". The option is unchecked by default.

5.    Press ENTER on the option to enable UTF-8 formatting for the current file.

6.    Change or add whatever UTF-8 symbol is desired in the file, following its exact correct syntax.

7.    Save the file.

8.    Unload and reload JAWS without rebooting.

9.    From now on, the UTF-8 symbol coded into the .jbt file should be recognized by JAWS and displayed in Braille properly because the .jbt file has been saved with UTF-8 formatting enabled.

Freedom Scientific Scripting Standards

This document contains a set of standards which is required for all script submitions to Freedom Scientific. Since failure to conform to these standards results in scripts which are either buggy, suffer from degraded performance, or which are not localizable to multiple languages, all submitions of scripts must conform to the following standards in order to be considered for acceptance:

1.    Critical: Do not break any currently existing features or intended functionality!

2.    In the JSH file, define all script constants and globals. The only exception to this is for constants or globals that must be strictly local to the current script file and that should not be exposed to other script files.

3.    In the JSM file, define all messages to be spoken, and use only those message names in the JSS file.

4.    In the JSM file, define all strings used for comparison or for identification as constants, and use only those string names in the JSS file.

5.    In the JSM file, add a comment for string names whose meaning is not obvious, explaining to translators where to find the text those string names represent in the comparison, or where to use those string names for identification in the program.

6.    In the JSM file, define all window names and classes as constants, and use only those constants in the JSS file.

7.    In the JSM file, define all string variables that are messages consisting of a specific formatted pattern such that each variable uses a variable placeholder in the formatted message. Then use the FormatString or SayFormattedMessage functions in the JSS file to format the message.

8.    In the JSM file, document all replaceable parameters for each message that has them with comments explaining what information goes into the replaceable parameters.

9.    Name all defined constants and variables for windows or controls so that they are self-documenting in order that a scripter or localizer can recognize the location of the window or control. If it belongs to a dialog, include the dialog name as part of the constant or variable name. If it belongs to a page in a multi-page dialog, include the page name as part of the constant or variable name. If it does not belong to a dialog, name the constant or variable so that the scripter or localizer can determine to which view or component of the program the window or control belongs.

10. Create different constant or variable names for windows or controls that have the same names but appear in more than one area or in unrelated areas of the program. In this way, windows or controls each have their own constant or variable names that refer specifically to where they are used. Do not re-use the same constant or variable name to refer to different windows or controls.

11. In the JSD documentation file, document all your functions and scripts. Take care to document well the synopsis, description, and any parameters or return types for each function and script. For scripts in particular, Be sure that the text of the Synopsis and Description fields is appropriate to be spoken and displayed in Braille by the JAWS Keyboard Help feature.

12. Do not attach the SPACEBAR or any alphanumeric keys to scripts. If special behavior is required for these keys, use the KeyPressedEvent function instead of attaching scripts to the keys.

13. Use the SayString function only as a debugging tool during scripting, and do not use this function to speak anything in the finished product.

14. Do not use braces like "{" and "}" to simulate keystrokes. Use the TypeKey or TypeCurrentScriptKey functions when sending a keystroke to the application.

15. Structure your code so that it tests and executes in the most expedient manner possible. When adding code to frequently-run events, be especially careful not to introduce unnecessary sluggishness.

16. Use window or object information as opposed to screen information where possible.

17. Use the JAWS or Invisible cursor to obtain information only when no other method works. In this case, always use the Invisible cursor unless the JAWS cursor is required to perform the action because the Invisible cursor cannot. If it is necessary to use the JAWS or Invisible cursor, store the location of the PC cursor prior to activating the JAWS or Invisible cursor, or prior to calling a function that activates either of these cursors. Then take care to re-activate the PC cursor at the stored location as soon as the desired action is completed with the JAWS or Invisible cursor.
 Note: As of JAWS 2020, you might instead choose to use the UIA Scan cursors. See the functions related to these cursors available for JAWS 2020 and later. Generally speaking, the same rules apply to the use of these cursors as to the traditional JAWS and Invisible cursors.
 There are several methods to work with these cursors.

18. Never use the SpeechOff and SpeechOn functions as a means of suppressing speech output temporarily. If you must suppress speech for specific purposes, use a specific global variable for the specific suppression.

19. Always respect the active cursor when defining behavior in a script or function. Do not break the functionality of the JAWS, Invisible cursor, or the UIA Scan cursors.

20. When designing your code, always consider whether the desired JAWS behavior should honor the status of the user buffer or the menu state as special or exception cases.

21. When designing your code, always respect the user's speech output configuration, and always honor speech and sound scheme functionality for controls and for text properties.

22. Keep all global variables up to date. If you overwrite a function that has global variables, be sure to update the necessary variables before returning from that function.

23. Overwrite for the specific circumstance when overwriting the behavior of an existing function or script. Then call the default function or script for all other circumstances. Wherever possible, avoid copying the entire default function or script to your script file and then adding exception cases. Doing so renders your code obsolete if the default code changes. Always use the same name for your function or script as the name of the default function or script.

24. Use event-driven code where appropriate. For instance, in lists or trees where first-letter navigation is possible, make sure that any code for outputting speech during navigation uses appropriate event-driven code such as the SayHighlightedText function (called by the NewTextEvent function), the ActiveItemChangedEvent or ValueChangedEvent function instead of key-driven code like the SayNextLine or SayPriorLine scripts.

25. When designing your code for overwriting the functionality of a keystroke native to the application, evaluate whether the keystroke should be passed through to the application if the special testing conditions in your code are not met. In the JSM file, define the key name to be passed through as a constant with a meaningful name that explains the keystroke's functionality. For example: Do not use ksAltI; rather, use ksIgnoreButton since the hotkey for the button may vary from language to language.

26. If overwriting the functionality of a key combination already defined in the default JKM file, do not make any entry in the application-specific JKM file for the key combination.

27. In JAWS hotkey help, include all new non-application and non-standard Windows key maps for all keys added to the JKM file.

28. Ensure that the ScriptFileName function outputs relevant information for the current application and script file.

29. Do not output any special messages for scripts attached to native Windows keystrokes.

30. Ensure that the appropriate information (Application window information, real window information, and focus window information) is spoken when focus changes. Eliminate any double-speaking, and ensure that only relevant changes are spoken.

31. Ensure that the SayWindowPromptAndText function speaks the same information about the focus window that was spoken when the window gained focus. In addition, toggle on training mode temporarily for the SayWindowPromptAndText function when speaking the focus window so that training information is spoken as appropriate.

32. When designing help messages to be shown in the virtual viewer, place a statement at the top of the virtual viewer telling the user the current location. If showing a list of commands for a key layer, show what key should be pressed to start the layer. If showing a list of commands and their associated keystrokes, make each command in the list a link. Then for each command link, describe the command first, and then show the keystroke. Show any more general information in paragraph form without any links. Always end each virtual help screen with a message telling the user how to close the virtual viewer. This message need not be a link.

33. When scripting for special behavior, script both for speech and for Braille behaviors.

34. On controls where the position in group information is available, make sure that the position in the group is announced when focus moves to the control. Also, ensure that your special conditions cause the SayWindowPromptAndText and SayLine functions to announce the position in group. However, also ensure that JAWS does not announce the position in group when moving between the items in the group. JAWS should announce position in group information for controls such as lists, combo boxes, and radio buttons. For treeviews, along with position in group information, JAWS should also announce level and state information. Ensure that JAWS announces and displays in Braille the position, level and open/close state changes of treeview items as they are navigated.

Additional Guidelines for Writing Acceptable Scripting Code

Following are some additional guidelines for writing and formatting code so that it can be most easily maintained. The development staff at Freedom Scientific thanks you very much for following these guidelines when writing your code.
 

·         Write self-documenting code by using meaningful script, function, variable and constant names. Self-documenting code is much easier to understand, maintain and debug.

·         Modularize code so that your scripts or functions do not become large and unwieldy. It is much more time-efficient to maintain and debug modular, smaller scripts and functions than to step through a large section of code line-by-line.

·         Capitalize script, function, variable and constant names so that JAWS speaks them in a recognizable manner. This is best accomplished either by capitalizing the individual "words" of the name, or by using underscore ("_") to separate the component "words" of the name.

·         Since the compiler does not allow for nested C-style comments, do not use C-style comments ("/*" "*/") to comment code. Instead, use semicolon (";"). This will make it easier to use C-style comments as a temporary means to comment out code since the scripter will not need to look for existing C-style comment markers inside of the code.

·         When defining local variables, place "var" on a line by itself at the left margin, and then place each succeeding local variable on a line by itself indented one tab stop. This makes the variable list easy to read quickly and to modify if items need to be added or deleted.

·         Place all level-0 statements at the left margin, and indent once using tab (not spaces) for each level. Line up the matching components of If-ElIf-Else-EndIf statements and of While-EndWhile statements. When an If or While statement contains compound conditions, place each condition on a line by itself. Line up the operator for each line of the compound test with the If, the ElIf, the Else, and the Endif, or the While-Endwhile statement. Following this convention makes it easy to find code blocks displayed in Braille and by using the JAWS indentation announcement capabilities.

·         Comment your code judiciously. If the code itself is self-documenting, comments are unnecessary. However, if you are coding in a specific manner or employing a technique whose purpose may not be readily apparent simply by reading the code, then comments are critical. Remember that your code and comments may be read by anyone. So please keep the comments professional and appropriate for all readers.

 

Naming Conventions for Variables and Constants

Use a standard and consistent method for naming variables and constants. The Freedom Scientific scripting code adheres mostly to the following naming conventions for notating types of variables and constants:
 

·         Precede handle variable names with "h", string variable names with "s", integer variable names with "i" and object variable names with "o".

·         Precede global variable names with "g". For example, a global integer variable name is preceded with "gi".

·         When naming constants, precede window names with "wn", and window classes with "wc".

·         When defining messages to be spoken, precede the name with "msg"; use "sc" as a prefix to constant strings defined for on-screen comparison.

·         Be consistent with your convention, and choose a meaningful convention if an appropriate one does not already exist. Using this type of notation makes it easier to know instantly what type of variable is being used without having to look back at the declaration list in JSH or JSM files.

 

Settings and Configurations

 

Script File Types

The Freedom Scientific Scripting language stores script files in the product's root folder mostly under the settings\(language) folder. Most of the files are written in the familiar INI file format. With the exception of binary files (those with extension jsb), and with caution, you may edit most script files with a text editor such as TextPad or NotePad, with the JAWS's own Script Manager, or through the various "managers" (utilities) provided directly by JAWS.

When you plan to edit a script file that exists in the shipping version of JAWS through a text editor, you should back up the original files in a safe place. This ensures that you can restore files to their original state if you happen to edit a file's content in a way that causes unpredictable results.

For more details on the definitions of Script File Types, see Script File Types.

Settings Files

JAWS stores application-specific information such as the JAWS configuration settings, graphic labels, and frame definitions in settings files. All JAWS settings files are located in the root folder of the JAWS settings\(language) folder. For more details on how settings files are utilized by JAWS and for brief descriptions of what each one contains, see Settings Files.

Reserved Files

JAWS reserves some settings files to govern its default behavior, or for inclusion by other script files. For more details on which files are reserved and how they are utilized by JAWS, see Reserved Files.

Folders for Settings And Configuration Files

JAWS ships with several sub folders you may customize. The default subfolders are located in the JAWS root folder under the shared Settings\(language) folder. Depending on how your folders are set to display in windows Explorer, the subfolders may appear in a different order from the order presented here.

When you customize settings, none of them are placed in the shared JAWS folders. Instead, depending on the type of customization, JAWS may place your changes from default settings in the user Settings\(language) folder, and/or in one of the subfolders whose names also appear in the shared Settings\(language) folder. In other words, sometimes, both The user Settings\(language) folder and one of the subfolders contain your changes. The only exceptions are the Transient-Focus and Transient-session subfolders. Those never appear at all in the shared Settings\(language) folder because of how they are used. The subfolders in the Settings\(language) folder include:

·         PersonalizedSettings - Contains any .jsi files that ship with the JAWS. when you customize your location for use with Research It, a MyLocation.ini file is created in this folder. When you use the JAWS Find command on a virtualized document or Website, a FindData.ini file is created in this folder.

·         As of JAWS 17, merging from prior versions of JAWS was disabled due to the JAWS folder restructure. Instead, JAWS began providing a much more flexible user interface for backing up and restoring, and even migrating settings from a prior version of the product. But this all assumes the product is not older than JAWS 17. The Import/Export and Migrate utility accounts for the file restructure in JAWS 17 and later.

·         PlaceMarkers - contains any temporary or permanent placemarkers you create for a given Website.

·         Sounds - contains all the .wav sounds that ship with JAWS. If you customize a .wav sound, or generate a Speech and Sounds scheme or Dictionary Manager sound customization that includes a sound .wav file, JAWS places them in this folder.

·         RuleSets - contains any customized rule sets you create for Research It. the .rul and .qry files that ship with JAWS always remain in the shared Settings\(language)\RuleSets subfolder.

·         Transient-Focus - used for Quick Settings changes to store the settings that have the Restore Setting when Focus Changes persistence level.

·         Transient-Session - used for Quick Settings changes to store the settings that have the Restore Setting when JAWS exits persistence level.

Note: Persistence levels is a concept introduced in JAWS 13.0. It allows you more flexibility in whether a setting change should be transient or permanent. By default, changes made through the JAWS Quick Settings user interface are permanent. but you may change the persistence level of any setting through the context menu for any option in the Quick Settings user interface. The subfolders, Transient-Focus and Transient-session in your user settings\(language) folder store files related to persistency levels.

Additional Resources

For more information on Research It, see Creating Research It Rules.

For more information on Quick Settings, see Customized Quick Settings.

For more information on the JAWS 17 and later folder restructure, see Localization: JAWS Folder Restructure.

Script File Types

JAWS stores settings files in the product's root folder mostly under the settings\(language) folder. Most of the files are written in the familiar INI file format. With the exception of binary files (those with extension jsb), and with caution, you may edit all scripting settings files as follows:

·         with a text editor such as TextPad, NotePad++, or Notepad,

·         with the JAWS Script Manager,

·         or through the various "managers" provided directly by JAWS.

Whenever you plan to edit a script file that exists in the shipping version of JAWS directly through a text editor, you should back up the original files in a safe place. This ensures that you can restore files to their original state if you happen to edit a file's content in a way that causes unpredictable results.

If your script files require entries with Unicode characters, you must save them with UTF-8 formatting enabled. For more information on UTF-8 formatting, see Formatting Script Files for UTF-8.

Definitions of Extensions for Script File Types 

Following is a list of definitions for script file types by extension supported by the JAWS Scripting language. Each file type extension is followed by a brief description of how it is used.

For more information on the use of header files and on variables and constants, see
 Variables and Constants, and Non-Aggregate Variables,
 and Constants.

JBD - JAWS Braille Display

Used by the Papenmeier Braille displays. Their names generally begin with the prefix BrailleX. JAWS itself does not use these files, but they are needed by the BrailleX manager that comes with the Papenmeire displays.

JBS - JAWS Braille Structure

Structured mode settings for JAWS output to Braille displays. To make changes to these settings, choose the "Define Structured Mode..." button from the "Braille Settings" dialog in the JAWS Settings Center .

For more information on Structured Braille, see the topic called Structured Braille Functionality.

JCF - JAWS Configuration File

JAWS configuration settings for verbosity, text processing, keyboard processing, HTML options, window class reassignments, custom highlight options, etc. To make changes to .jcf files, use the Run JAWS Managers dialog, or Settings Center and Quick Settings dialogs.

You may edit .jcf files from within your script source files with functions like GetJCFOption_function and SetJCFOption respectively.

JSI - JAWS Script Initialization

Generated under certain circumstances when a change is made to Quick Settings for a specific application. the file is located in the PersonalizedSettings folder under the root folder of the JAWS user\Settings\(language) folder. the file's name is based on the application where it was generated. In other words, there is no default.jsi. But there are files like Word_MyDocument.docx.jsi. Such files are located in folders like C:\Users\MyName\Freedom Scientific\JAWS\(Vversion number)\Settings\(language)\PersonalizedSettings.

To prevent unpredictable results, it is not recommended that you edit .jsi files manually. However, it is possible and often practical to read from and write to .jsi files through script or function calls in your script source code. If you do, take care to consider the impact on the QuickSettings.his and SettingsCenter.ini files and even any .jcf files that may be associated with that .jsi file.

JDF - JAWS Dictionary File

Alternative pronunciations for words or characters that are not already pronounced correctly by the synthesizer. To edit dictionary entries in an existing .jdf file or to create a new .jdf file, use the JAWS Dictionary Manager.

You may edit .jdf files directly. Make entries one per line with the match text on the left and the replace text on the right. The match text should be the exact mispronounced word or characters, and the replace text should be a phonetically spelled representation of how the match text should be pronounced. Use the "." delimiter to begin and end each entry as well as for the left and right parts of each entry .

Note: JAWS processes Dictionary rules for all the text it reads. Therefore, be judicious in adding entries to the JAWS dictionary files in order to avoid slower responsiveness while navigating. Adding dictionary rules only for the applications where they are needed also helps to shorten processing time.

JGF - JAWS Graphics File

A list of numeric graphic specifiers paired with textual descriptions for each. When JAWS encounters a labelled graphic, it speaks the assigned text description. If a Braille textual description is also assigned for a numeric graphic specifier, JAWS displays that graphic label on any attached Braille display. To add to or edit graphics, use the Graphics Labeler (JAWSKey+g), or use the Auto-graphics labler, JAWSKey+Ctrl+g.

You can edit a graphics file manually. See how the file should be structured by examining the default.jgf file that ships with JAWS to understand how entries should be delimited and how the file sections should be managed. A .jgf file contains sections for various graphic resolutions as well as a section for symbols.

JFD - JAWS Frame Definition

Contains the definition for customized frames. the file is located in the root folder of the JAWS user\Settings(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jfd file is called Textpad.jfd.

You may utilize the JAWS user interface to create a frame with the key combinations JAWSKey+LeftBracket to set the upper left corner and JAWSKey+RightBracket to set the bottom right corner of an arbitrary rectangle on the screen. With the JAWS dialog that results from these actions, you may then enter a frame name, synopsis, and description much like you do in the Script Manager when generating new scripts and functions. You may even add a keystroke assignment so that the frame is acted upon by JAWS - for example, in response to an event or to a user pressing that keystroke combination. If you add a key assignment to a frame definition, that assignment is added to the application's .jkm file. The Synopsis and Description fields for the frame definition ensure that keyboard help for that key assignment is available to the user upon request.

You may also edit a .jfd manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JFF - JAWS Frame File

Contains all the information associated with customized frames with respect to how JAWS should act upon them. The file is located in the root folder of the JAWS user\Settings\(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jff file is called Textpad.jff.

The information contained in the file is sectioned in brackets with the name given to each frame that has been created. Following the name of the frame in brackets on separate lines are the specifics about the frame: whether it should be silent, spoken, Brailled, and upon what conditions or events, etc.

You may also edit a .jff manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JKM - JAWS Key Map

A list of keystrokes assigned to JAWS scripts. To add, remove, or change key assignments, use the Keyboard Manager, JAWSKey+8.

You may edit key map files directly. For more detailed information on working with key map files, see JAWS Key Map Files.

JSB - JAWS Script Binary

Binary files created by the JAWS compiler from JAWS Script Source (.jss or .hss) files. Such binary files are loaded each time an application receives focus by moving to the Windows foreground. JAWS uses compiled binary files because they execute more quickly than interpreted script text. Binary files may not be edited manually in any way. They are not available to a text editor.

JSD - JAWS Script Documentation

Generated by the JAWS Script Manager whenever scripts or functions are created in a script source (.jss or .hss) file. using the Script Manager. These files include very specific information about the name, synopsis, and description of each script or function in the associated source file. Optionally, they may even contain category information related to the type of script or function being documented. The synopsis and description entries for a script are used to provide JAWS Keyboard help. So be careful to create meaningful documentation for these entries.

You may create/edit a .jsd file manually. In fact, you must do so if you are creating script source files through a text editor other than the JAWS Script Manager to ensure complete and accurate documentation of your scripts and functions, and to ensure that any scripts tied to key assignments have meaningful keyboard help.

JSS - JAWS Script Source<

JAWS script source code. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format.

You may use the JAWS Script Manager to create/edit script source files. Compile source files by pressing Ctrl+s from the script Manager. Assuming that your source code compiles without errors, the .jss, a .jsd, and .jsb files of the same root name as your source file are all added to the root folder of the JAWS user\settings\(language) folder.

Alternatively, you may use a text editor like TextPad to create and edit script source code. This means that you will need to utilize command line commands or compile statements available through your text editor's user interface pointing to the JAWS compiler in order to compile that source code.

HSS - Hidden Script Source<

Hidden JAWS script source code has not been used in shipping JAWS for some time. But you may wish to keep your personal customized code private for professional reasons. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format. Again, hidden source files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But all the information that applies to exposed script source (.jss) files applies to hidden source ffiles with respect to "Include" statements, formatting for UTF-8, etc.

Another way to handle the use of hidden source files for a script set is to utilize "Use" or "Import" statements in the exposed script source (.jss) file. These statements assume that the hidden source files have compiled correctly and are available as binary (.jsb) files to be compiled along with the exposed .jss file. For more information on "Include", "Use", and "Import" statements, see Compiler Directives.

JSH - JAWS Script Header

Definitions for variables and constants to be used throughout your script source files. "Include" statements in your script source files are necessary for header files to be available at run-time and properly compiled.

HSH - Hidden Script Header

Hidden definitions for variables and constants to be used throughout your script source files. Typically, hidden header files are not exposed in the script set of your files. Hidden header files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But "Include" statements in your script source files (both .jss and .hss) are necessary for hidden header files to be available at run-time and properly compiled.

JSM - JAWS Script Message

Definitions for message constants to be used throughout your script source files. "Include" statements in your script source files are necessary for message files to be available at run-time and properly compiled.

INI Files

Numerous types of .ini files ship with JAWS. The files are located in different folders on your system, depending on their purpose. The SettingsCenter.ini file, for example, is one that should never be edited manually.

To prevent unpredictable results, it is not recommended that you edit .ini files manually. However, it is possible and often practical to read from and write to .ini files through script or function calls in your script source code.

HIS History

Used to hold history information for settings changes made through the JAWS user interface. To prevent unpredictable results, you should never edit These files manually.

QS Quick Settings

 Used to hold Quick Settings definitions. These files work in conjunction with their associated .qsm files. A .qsm file is written in XML and so has a different structure from the .jsm files that are added to script source files by "Include" statements.

 

QSM quick Settings Message

Message file specifically for Quick Settings options. These files work in conjunction with their associated .qs files. A .qsm file is written in XML and so has a different structure for message constants from the .jsm files that are added to script source files by "Include" statements. For more details on how to utilize .qsm files, see Customized Quick Settings.

SBL - Speech Symbols File

Used to look up language information for a specified synthesizer, or to load the JAWS default speech symbols file when no synthesizer symbols file exists for the synthesizer in effect. The .sbl files contain entries for symbols (mainly punctuation). JAWS processes how and even whether symbols are pronounced depending on the punctuation level in effect.

JAWS ships with many speech symbols files for supported speech synthesizers. Just as the folders containing scripts and configuration files are named with language abbreviations, the .sbl files support languages like: enu (English), deu (German), esn (Spanish). The list of synthesizers and languages JAWS supports is robust and growing, including most Western european languages with their Latin alphabets but also those with Cyrilic alphabets like Russian. Also supported are numerous Asian languagess such as: Japanese, Chinese (Cantonese and Mandarin), and right-to-left languages like Arabic and Hebrew.

You may edit an .sbl manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. An .sbl file is broken into sections, each of which lists the symbols for a particular language that synthesizer supports. For example, if you want to add an entry to the eloq.sbl (Eloquence synthesizer symbols file), you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other symbols already exist for that language section of the .sbl file.

Note: you cannot create a new language section in an .sbl file for a language that is not supported by that file's synthesizer.

Finally, if the symbol you are adding is a Unicode character, you must save the .sbl file with UTF-8 formatting enabled.

In JAWS 17, .sbl files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .sbl files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

CHR - Character Substitution

Used since JAWS 15 to process character substitutions (spelling and/or pronunciation corrections) for certain spoken behaviors in the languages supported by the speech synthesizer in effect. Each .chr file bears the name of its associated speech synthesizer (e.g., VocalizerExpressive.chr). But not all synthesizers require associated .chr files.

Unlike an .sbl file, a .chr file may contain entries that are not symbols. Entries may be alphanumeric characters as well. JAWS processes how characters are pronounced under certain circumstances regardless of the punctuation level in effect.

The .chr files that ship with JAWS since JAWS 15 are located in the JAWS root folder in the Settings\(language) folder.

In JAWS 17, .chr files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .chr files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

You may edit a .chr manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. A .chr file is broken into sections, each of which lists characters to be substituted for a particular language that synthesizer supports. For example, if you want to add an entry to the VocalizerExpressive.chr file, you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other entries already exist for that language section of the .chr file.

Within each language section, entries correspond to characters to be processed with substitutions. The key part of each entry is represented in one of two ways: the desired character entered directly, or a Unicode sequence representing the desired character (e.g., U+201C for Left Double Quotation Mark). For each entry, the value is the string to be substituted for the character. For example, the string to be substituted for a Left Double Quotation Mark could be "Left Double Quote" instead in English and whatever is appropriate in say, Spanish. But you must make each entry in the relevant language section of the file.

Note: You cannot create a new language section in a .chr file for a language that is not supported by that file's synthesizer.

The behaviors JAWS may process using .chr files occur when the user:

invokes any spelling command : word, line, to or from cursor, etc.

invokes a command to speak the current character.

navigates by character with left/right arrow keys.

types characters, and typing ecdho is set either to Characters or to Characters and Words.

Finally, you must format a .chr file as an INI-style file with UTF-8 formatting enabled.

VPF - Voice Profile

Since JAWS 16.0 and later, .vpf files have been used to support the enhanced language switching capabilities for speech synthesizers. JAWS stores the Voice Profiles .vpf files in the JAWS root folder under the settings\(VoiceProfiles) folder. The moment you make any adjustment to a voice profile, a file is created in your own User\Settings\VoiceProfiles folder with all the correct section names and entries for your customized voice profiles. Each speech synthesizer has its own voice profile file.

The sections of a Voice Profile .vpf file include:

·         Options - used to define profile defaults.

·         Context sections - formatted as three-letter language abbreviation followed by a dash, followed by a context name (e.g., [ENU-PCCursor] is for English United States PCCursor voice).

·         Sections for Voice Aliases - formatted as three-letter language abbreviations followed by the term, voice alias (e.g., [enu-Voice Aliases]).

·         Language Aliases - used In order to support language detection on the internet ISO 639/3066 language codes as well as Microsoft and other variants of these.

·         Voice Alias Translations - used to localize Voice Alias names (e.g., [enu-UI Voice Alias translation]).

·         Default Voice Aliases - used to define the default for each voice alias.

JBT - JAWS Braille Table

Used to look up Braillle symbols for the Braille format in use for the current JAWS session. This file governs how Braille symbols and what sets of symbols are displayed in Braille. For example, if the US_Unicode.jbt is in effect, all Unicode characters available in that file become possible to display in Braille as applications are run that may present such symbols. The .jbt files are located in the Freedom Scientific folder for the specific version of JAWS running in the Program Files folder of your system.

A .jbt Braille table may specify up to 7 dot pattern cells per unicode character. Make each entry for any symbol or Unicode character you are adding as a special cell dot pattern on a separate line.

You may edit a .jbt file manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. The file is broken into sections (sets of symbols), each of which lists the entries for that set (i.e., ANSI, Unicode Greek, etc. in the US-Unicode.jbt file). Make sure to add any entries at the end of the existing set of symbols for the correct set.

Finally, if the entry you are adding is a Unicode character, you must save the .jbt file with UTF-8 formatting enabled.

RUL and QRY - Rule and Query

Specifically used for the JAWS Research-It feature. For detailed information on how to customize these types of files, see Creating Research It Rules.

SBAK - Settings Backup

Since JAWS 18 and later, you have been able to create settings backup files for restoring user settings from another version of the product, or merging user settings to another system with the same version. This process is similar to the older process called Merge that allowed you to merge user settings from a prior version of JAWS to a current version. The Merge feature was removed in JAWS 17 due to a major relocation refactor. This was necessary to speed up the localization process for the growing number of languages JAWS supports. Starting with JAWS 18 and later, .sbak files provide an even more robust process for backing up and restoring user settings for whatever language you have installed.

Additional Resources

Settings Files

Reserved Files.

Calling Scripts and Functions

Settings Files

JAWS stores application-specific information such as the JAWS configuration settings, graphic labels, frame definitions, etc. in settings files. All JAWS settings files are located in the root folder of the JAWS settings\(language) folder. See Script File Types which provides a list of settings file types and brief descriptions of the information each contains.

JAWS loads settings files that have the same root name as an application executable. For example, if the executable name for the TextPad application is "textpad.exe", JAWS loads the script settings files named "textpad.*" whenever the TextPad application receives focus by moving into the Windows foreground.

Additionally, JAWS reserves some settings files to govern its default behavior, or for inclusion by other script files. See Reserved Files to read more about reserved files.

Since JAWS 17 and later, you can create domain-specific settings .jcf files as well as domain-specific dictionary .jdf and scripts in jss, .jsd, and compiled .jsb files, which may include domain-specific key map .jkm files. For more information, see
 Domain-specific Utilities.

Reserved Files

The screen reader reserves some settings files to govern its default behavior, or for inclusion by other script files. These files include the following:

Default Settings Files

Default.*

When JAWS recognizes an application that has no specific settings or customized scripts, it loads a default group of settings. The default scripts and settings govern the vast majority of familiar JAWS behavior. In fact, the default settings remain loaded even when JAWS finds application-specific settings files. If any setting or script is not overwritten by application-specific files, JAWS defers to the default settings when deciding how to behave. Although the methodology JAWS utilizes to decide how to behave appears to be straightforward, a good understanding of how JAWS routes function calls is very useful. See the function, GetScriptCallStack, in the JAWS Functions book of the Reference Guide under the category book called Scripts to learn about the stack flow of a function call in the JAWS Scripting language.

Colors.INI

This file contains a list of RGB values paired with textual names. Any time JAWS announces a text color, it refers to Colors.INI for the name. Note: JAWS must be reloaded for changes to this file to take effect.

JFW.INI (formerly symbols.ini)

This file contains textual names for ANSI symbols such as punctuation, monitary symbols, special characters, etc. Any time JAWS speaks an ANSI symbol, it refers to Symbols.INI for a name.

JFW.INI is divided into sections for several different hardware and software synthesizers. The values for each entry within the sections consist of the character symbol, the binary value for that symbol, and a textual description. The "SynthPunctuation" key in each synthesizer section tells JAWS whether it is JAWS or the assigned synthesizer that should control speaking of punctuation. Set a value of 1 for JAWS or a value of 0 for the synthesizer.

The "Synonyms" section allows JAWS to maintain a single set of symbol names for an entire family of synthesizers. Keys refer to synthesizer short names (noted for each installed synthesizer in JFW.INI). Values refer to the synthesizer section names further down in Symbols.INI.

Note: The JFW.ini file is located in the Program Data\Freedom Scientific\JAWS\Version\Settings\INIT folder.

Note: JAWS must be reloaded for changes to this file to take effect.

FlexibleWeb.db

This file is a database containing any rules you have created for Flexible Web, a JAWS feature introduced in the initial release of JAWS 14. If you have not created any rules, the file is still created as a placeholder for your rules. The file is located in the JAWS root folder of the user's Settings\(language) folder. It cannot be edited manually and is intended to be updated only through the Flexible Web user interface using the key layer command, JAWSKey+Space, x.

SettingsCenter.ini and QuickSettings.his

These files are used specifically to maintain an accurate history of changes made to Settings Center and Quick Settings through the JAWS user interface. The files also update .jcf files when a JCF option is changed that impacts a .jcf file. Updated SettingsCenter.ini and QuickSettings.his files, as well as any updated .jcf files they impact are placed in the JAWS root folder of the user's Settings\(language) folder. Never attempt to update a SettingsCenter.ini or QuickSettings.his file manually.

Useful Include Files

Certain JAWS Header files contain constants or global variable definitions needed to add as "Include" statements to your own script source files when customizing JAWS for any application. Any script source file may include the following header files:

·         HJConst.jsh

·         HJGlobal.jsh

·         common.jsm

For more information about how to include header files in your script source files, see Variables and Constants.

HJConst.JSH

This file contains definitions of the JAWS constants such as TRUE and FALSE, standard window types, cursor types, JAWS settings, speech output modes, etc. Add an "Include" statement for this file in any new JAWS script source file to avoid compilation errors when copying code.

 To learn more about the JAWS Script constants, see Constants

 

HJGlobal.JSH

This file contains declarations of the JAWS global variables. Add an "Include" statement for this file in any new JAWS script source file to avoid compilation errors when copying code.

To learn more about the JAWS Script variable types, see the following:

Non-Aggregate Variables,

Collection Type,

Array Type.

Additional Resources

Keywords and Non-Required Keywords

Variables and Constants

The Freedom Scientific Scripting language supports the use of variables and constants.

Variables

As in all programming languages, variables available in the Scripting language are for storing values of differing types of data. Values stored in variables can change simply by running a script or function, or by conditions that occur as a result of running a script or function.

Variables may be local or global. You must declare global variables outside of a script or function by preceding them with the keyword, Globals. Then you must precede each variable name by its type.

Global variables persist for the life of the JAWS program session, whereas local variables persist only for the life of the script or function where you declare them.

Variable types may be either non-aggregate, meaning that only one value of a specific type can be stored in the variable at a time, or they can be types that may store a set of values such that the set of values is of a specific type or of varied types. Non-aggregate variable types include but are not limited to integers and strings; whereas, aggregate types include collection and array types.

For more specific information on variables and their types, and how to utilize them in the Freedom Scientific Scripting language, see the following:

·         Non-Aggregate Variables

·         Collection Type Variables

·         Array Type Variables

Examples of Local and Global Variables

·         Use the let keyword in statements within scripts or functions. Note: As of JAWS 11.0, the let keyworkd is optional.
 
 Example of a local variable declaration and assignment:
 
 

Function Test ()
Var
            Int iControl
Let iControl = 1500 ; assigns the value of 1500 to the local integer variable, iControl.
;or you could write the statement as:
iControl = 1500 ; same meaning as the above example since "Let" is an optional keyword.
...
EndFunction

 
 Example of a global variable declared outside a script or function:
 
 

Globals
            Int ghWnd ; handle global variable
            String gsMyName ; a string variable to hold a person's name

 

·         Assign a value from the return value of a built-in function to a variable. Note: Ensure that the variable and the function are of the same type. Otherwise, the compiler will generate a syntax error when you try to compile your script file. For Example:
 
 

            hWnd = GetFocus () ; since the function returns a window handle.
            Let iControl = GetControlID (GetFocus ())

 

Constants

Unlike variables, constants do not change value. They are useful for storing hard-to-remember strings of characters with an easy-to-remember name. When declaring constants outside of a script or function, you must precede them by the keyword, Const. However, if the constants you are declaring are specifically message constants with mmulti-line strings of characters or with other special characteristics, you may choose to use the keywords, Messages and EndMessages for declaring them. See belo examplesw.

The Freedom Scientific Scripting language has no restrictions on the number of constants you can create, or on the number of constants that have the same value. Sometimes you will find it useful to have more than one constant name for the same value. For example, the constants named “True” and “On” may both have the value of 1. Depending on the circumstances, it may be more practical to use one or the other for readability in your scripts and functions.

Assigning Values to Constants

There are several syntax options for assigning values to constants:

Assign a value to a constant when you declare it. Once you do so, that value may not change. In other words, you cannot assign a value to a constant outside of its declaration. The "let" keyword is never used when declaring a constant and assigning it a value. However, constants may include replaceable parameters whose value may change. For specifics on how to assign and utilize constants, see Constants.

Examples of constants declared outside a script or function:

Const
            FSHQ="Freedom Scientific Headquarters",
            FSWH="Freedom Scientific Warehouse"
            sHelloMessage="Hello, world!"
Messages
@msgMyWorkplace ; the replaceable parameter, %1, is drawn from within a function call to the FormatString function.
I work at %1.
@@
EndMessages

Code Samples

SayMessage(ot_line,sHelloMessage)
SayFormattedMessage(ot_line,FormatString(MyWorkplace,FSHQ))

Or you could easily change the message upon some condition to the following:

SayMessage(ot_line,sHelloMessage)
SayFormattedMessage(ot_line,FormatString(MyWorkplace,FSWH))

Remarks:

Since the constant msgMyWorkplace includes a replaceable parameter, it may be used in the FormatString function as the first parameter, with the second parameter being some other constant (in this case, either FSHQ or FSWH. Although you could hard-code a character string for that second parameter, it will be easier to maintain the code if later on you want to change your workplace say to the Freedom Scientific Engineering Department.

Constants

Unlike variables, constants do not change value. They are most useful for hard-to-remember strings of characters or long numbers. Constants should have mnemonic names since it is easier to remember a name than a number or long string of characters.

The Freedom Scientific Scripting language has no restrictions as to how many constant names you assign to a particular value. For example, in the default JAWS constants file, HJConst.jsh, there are constants named True and On - both of which hold the value 1. It is more intuitive to understand a code statement that checks a condition for values of True or On than a code statement that checks for the integer 1. Once you declare the constants, JAWS recognizes all of the constant names with the same value.

If the string of characters being stored in a constant includes Unicode characters, ensure that the script files where the constants are declared and utilized are formatted properly for UTF-8. For more information on UTF-8, see Formatting Script Files for UTF-8./

Advantages of Using Constants

There are several advantages to using constants in scripts:

·         It is easier to remember a constant name than its value. And it is more intuitive when the constant name is a readable word like “True” or “on”.

·         It is much easier to maintain code when constant names are used rather than hard-coded strings of characters or hard-coded integer values.

·         Changing the value of a string of characters or an integer that is used throughout code is much easier to maintain if that value is stored in a constant. The change is made just in one place. In other words, simply changing the constant declaration affects the code wherever that constant is applied.

·         The Freedom Scientific Scripting language does not support direct declaration of a negative integer constant, as in "VBTrue = -1". However, it does support using hexadecimal representation of any integer, including negative integers, as in "VBTrue = 0xffffffff". Note: This is because the Scripting language uses four bytes to store numbers, and if the highest bit is a 1, the numbers are signed so that they are negative.

Declaring Constants

You may declare constants anywhere outside of a script or function, but conventionally, they are declared at the beginning of a script source (jss) file or in a header (jsh or jsm) file. Begin declaration of constants either with the keyword, Const for simple constants, or with the keyword pattern that generates a block of message constants. A message block of constants begins with the keyword, Messages, and ends with the keyword, EndMessages.

Simple Constants

For simple constants, place each constant declaration on a separate line followed by a comma, except for the last one. For example:

Const
            True = 1,
            False = 0,
            On = 1,
            Off = 0,
            FS = "Freedom Scientific",
            FSZipCode = "33764" ; since this is used as a string, not for computing

Formatted Message Constants

Although you may declare string constants such as for window names, window classes, and so on, it is much more practical to declare message constants as formatted strings. This ensures that when JAWS processes message constants, they are indicated properly in speech, Braille, and in the virtual viewer, if applicable. Furthermore, formatted message constant declarations may include replaceable parameters so that varied information may populate messages when JAWS processes them, depending on conditions you determine through scripts and functions or through events.

When declaring and using message constants, especially those you wish to format with replaceable parameters in them, be sure to:

1.    Populate the message constant with text (it can be long and have multiple paragraphs), including spaces, tabs, and hard returns.

2.    If desired, create the text of the message constant with the "%" character followed by a number to indicate a replaceable parameter within the message. You may use multiple replaceable parameters in the same message.

3.    Use the FormatString function in order to populate the message with appropriate replacement strings for the replaceable parameters in the message constant. The FormatString function returns a string that is already formatted properly for you to pass to a function that outputs formatted strings .

4.    Utilize only functions that process formatted strings correctly, or enclose the string parameters in a call to the FormatString function. For example, if you pass the SayMessage function a formatted string, it cannot process any replaceable parameters; so the output may yield unexpected results. Instead, use one of the functions that processes formatted strings. These include:

o   SayFormattedMessage

o   SayFormattedMessageWithVoice

o   UserBufferAddFormattedMessage

For a complete list of formatting functions, see the String Functions category page of the Reference Guide called Strings Functions
 and
 Text Format Functions.

Syntax of Formatted Messages

Use the following format for message constants:
 The keyword, “Messages”
 On a new line, the name of the constant beginning with the at (@) symbol.
 As many lines as necessary for the content of the message, including hard returns, to generate multiple paragraphs, even replaceable parameters.
 On a new line, a double at (@@) symbol to end the constant declaration.
 On a new line, the keyword, “endMessages” to end the block of message constants.

You may repeat the pattern for as many message constants as you wish of "@" followed by message constant name, constant message itself, and a double "@" symbol to complete each message constant within the block beginning and ending with the keywords, Messages and EndMessages. It is good practice to begin the names message constants with the letters "msg" to distinguish them from other types of string constants. Also, if the constant takes replaceable parameters, place a comment above each message constant declaration explaining the purpose of the replaceable parameter.

Code Sample

 

Messages
@msgFSHeadquarters
11800 31
st
 CT North
St. Petersburg, FL
@@
@msgFSPhoneNumbers
800-444-4443
or
727-803-8000
@@
;for msgMyWorkplace, %1 is the name of the workplace.
@msgMyWorkplace
I work at %1.
@@
EndMessages

 

Using a Header File to Store Constants

Unless the constants you are declaring apply only to the current script source file, it is more practical to declare constants in a script header file. Typically, a header file has an extension of .jsh or .jsm. When you use a header file to declare constants, you must refer to that header file with an “Include” statement in the script source file where you want to use the constants. For examples, see the script source file that ships with the JAWS Shared user\settings\(Language) folder. One of the "include" statements for this file is "hjconst.jsh". Another is "common.jsm". Since the constants declared in these header files are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions.

If you add an "Include" statement for the HJConst.jsh file within an application-specific script source file, for example, those constants become available to that script source file.

Collection Type Variables

Description

Collection New

A collection is a data type that may contain members of any type, and whose members are accessed by means of a key. Members of a collection need not be of the same data type as each other. After declaring a collection, create it using the keyword, New.

Items of a collection spring into existence the first time they are assigned. Assigning a collection member to a value makes that member's type the type of the value being assigned. Each member in a collection has a key of type string, and each member can contain a value of any data type.

You may access members of a collection by using the dot operator followed by the key name, or by the key as a string enclosed in square brackets.

Syntax

 

Var collection col
            Let col = new collection
            Let col.item = value

 

·         Col is a collection variable being declared and created.

·         Item is the name (or key) of a member in the collection being created.

·         Value is the value being assigned to a member of the collection.

Remarks

Declaring a collection does not create it. You must create the collection by means of the New statement.

Collection members are stored in alphabetical order of the member keys. If you know the name (or key) of a member in a collection, you can assign or retrieve that name (or key) using the dot operator. If the name (or key) of a collection member is enclosed in quotes or is contained in a variable, you must access that member using the variable name or quoted string enclosed inside square brackets instead of using the dot operator.

Collections are always passed to functions by reference.

Assigning one collection to another results in two variables referring to the same collection.

When retrieving a collection member into another variable, the script code must ensure that the value retrieved is stored in the appropriate type of variable. Retrieving a nonexistent item does not generate an error.

Code Sample

Script TestCollections ()
CollectionOfFruitCollections()
EndScript
Void Function FRTINIT(Collection Frt, String Type, string Prep, String Cut)
Let Frt.Type = Type
Let Frt.Prep = Prep
Let Frt.Cut = Cut
EndFunction
Void Function CollectionOfFruitCollections()
Var
            Collection Fruit,
            Collection frt,
            String key,
            String sMsgFruitInfo
sMsgFruitInfo = "%2 and %3 the %1."
Let Fruit = new collection
Let frt = new collection
FRTINIT(frt,"Bananas","peel","slice")
Let Fruit.Bananas = frt
Let frt = new collection
FRTINIT(frt,"Apples","core","slice")
Let Fruit.Apples = frt
Let frt = new collection
FRTINIT(frt,"Strawberries","sugar","halve")
Let Fruit.Strawberries = frt
Let frt = new collection
FRTINIT(frt,"Oranges","peel","section")
Let Fruit.Oranges = frt
Let frt = new collection
FRTINIT(frt,"Pears","peel","slice")
Let Fruit.Pears = frt
Let frt = new collection
FRTINIT(frt,"Cherries","hull","chop")
Let Fruit.Cherries = frt
Let frt = new collection
ForEach key in Fruit
            SayFormattedMessage(ot_line,
                        FormatString(sMsgFruitInfo,
                                    Fruit[key].Type,
                                    Fruit[key].Prep,
                                    Fruit[key].Cut))
EndForEach
EndFunction

Array Type Variables

Keywords:

IntArray

StringArray

HandleArray

ObjectArray

VariantArray

New

Description

An array is a data type that contains a fixed number of elements, and whose elements are accessed by means of an integer index. Arrays are created to hold the data type for which they are intended. For example, IntArrays hold integers, StringArrays hold strings, etc. A VariantArray holds data of type variant, which means that it may hold any data type.

After declaring an array, create it and specify the size of the array using the keyword, New. The array is fixed to be the size specified at the time it is created. Multiple dimensions may be created, and can be separated with a comma.

You may access elements in an array by means of indices enclosed in square brackets.

Syntax

 
 

Var
            TypeArray xArray
            Let xArray = new TypeArray(size)
            Let xArray[i] = value
Var
            TypeArray xyArray
            Let xyArray = new TypeArray(sizeX,sizeY)
            Let xyArray[i,j] = value

 

·         TypeArray is any of the types of arrays that may be created-- IntArray, StringArray, HandleArray, ObjectArray, or VariantArray.

·         XArray is an array variable being declared and created. It is a one-dimensional array.

·         Size is the number of elements in the one-dimensional array xArray.

·         XyArray is an array variable being declared and created. It is a one-dimensional array.

·         SizeX is the number of elements in the first dimension of the one-dimentional array xyArray.

·         SizeY is the number of elements in the second dimension of the one-dimensional array xyArray.

·         I is an index into the array.

·         J is an index into the second dimension of the one-dimensional array.

·         Value is a value assigned to an element of the array.

 
 

Remarks

Declaring the array does not create it. Creation of the array must be done by means of the New statement.

A VariantArray can contain items of any type. Collections can be elements of an array if that array is of type VariantArray. The script code should take care to manage the types of data in variant arrays appropriately.

Arrays are always passed to functions by reference.

Assigning one array to another will result in two variables referring to the same array.

There is no compile-time error if the wrong number of index expressions is specified for an array, or if an index attempts to access outside the bounds of the array.

There is also no runtime error notification, but the error may cause JAWS to lock. Therefore, take care to avoid illegal index references.

Code Sample

The below nonsense example shows the power of arrays and in fact of the VariantArray type.

Messages
;For sMsgGemInfo, %1 is the gem type, %2 the jewelry, %3 the occasion, %4 the number, and %5 the shape
@sMsgGemInfo
%5 %1 %2s for the %4 %3s
@@
EndMessages
Script TestArrays ()
ArrayOfGemsCollections()
EndScript
Void Function GmsInit(Collection Gms, String Name, string Type, String Occasion, Int Number, String Shape)
Let Gms.Name = Name
Let Gms.Type = Type
Let Gms.Occasion = Occasion
Let Gms.Number = Number
Let Gms.Shape = Shape
EndFunction
Void Function ArrayOfGemsCollections()
Var
            VariantArray Gems,
            Collection gms,
            Int i,
            String sMessage
Let Gems = new variantArray[5]
Let gms = new collection
gmsInit(gms,"emerald","pendant","birthday",6,"oval")
Let Gems[1] = gms
Let gms = new collection
GMSInit(gms,"diamond","ring","engagement",7,"square-cut")
Let Gems[2] = gms
Let gms = new collection
GMSInit(gms,"sapphire","bracelet","anniversary",9,"round")
Let Gems[3] = gms
Let gms = new collection
GMSInit(gms,"ruby","pairs of earring","graduation",8,"tear-drop")
Let Gems[4] = gms
Let gms = new collection
GMSInit(gms,"pearl","necklace","wedding",20,"cultured")
Let Gems[5] = gms
Let gms = new collection
For i = 1 to 5
            SayFormattedMessage(ot_line,
                        FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            )
EndFor
For i = 1 to 5
                        Let sMessage = FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            TypeString (sMessage+cscBufferNewLine)
EndFor
EndFunction

Operators

The Freedom Scientific Scripting language supports the use of many operators. Operators are grouped by usage at heading level 2 elements, and each operator within that group is at a heading level 3 element along with its relevant descriptive information. Where the name of the operator is a punctuation character symbol or group of characters, it is spelled out in parentheses after the character or group of characters.

Unless otherwise specified, the version where the operator was first made available to the Scripting language was JAWS 4.5.

Arithmetic Operators

Operator: + (plus)

Use the + (plus) operator in equations to indicate addition or to concatenate strings enclosed in quotation marks.

Operator: - (minus)

Use the - (dash) minus operator in equations to indicate subtraction.

Operator: * (asterisk)

Use the * (asterisk) operator in equations to indicate multiplication.

Operator: / (slash)

The / slash operator is used in equations to indicate division.

Operator: % (percent)

The result of the modulus operator (%) is the remainder when the first operand is divided by the second.

Comparison Operators

Operator: == (double equal)

The == (double equal) operator asks whether the first condition is equal to the second condition.

Operator: != (is not equal to)

The != (exclamation mark equal to) operator asks whether the first condition is not equal to the second condition.

Operator: >= (greater than or equal to)

The >= (greater than or equal to) operator asks whether the first condition is greater than or equal to the second condition.

Operator: > (greater)

The > (greater than) operator asks whether the first condition is greater than the second condition.

Operator: <= (less than or equal to)

The <= (less than or equal to) operator asks whether the first condition is less than or equal to the second condition.

Operator: < (less than)

The < (less than) operator asks whether the first condition is less than the second condition.

Logical Operators

Operator: && (double ampersand)

The && (double ampersand) operator asks whether the first condition is true, and additionally whether the second condition is true.

Operator: || (double vertical bar)

The || (double vertical bar) ) operator asks whether the first condition is true, or if the second condition is true. If the first condition is true, the second condition is not evaluated. It does not matter which condition is true

Operator: ! (Exclamation point)

The ! (exclamation mark) operator negates the expression to which it is applied. It is equivalent to the "not" keyword.

Bitwise Operators

Operator: & (ampersand)

The & (ampersand) bitwise operator compares each bit of its first operand to the corresponding bit of its second operand. If both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

The best example of how to use this operator is in the NewTextEvent function in default.jss. In this function, it is used for a binary comparison of two binary numerical values. The value of nAttibutes is a multiple digit binary numerical value that indicates all the attributes applying to the buffer string. Each attribute is indicated by whether a certain bit in the byte is turned on. The & operator returns all values that exist in both numerical values. For example, if the value of nAttributes is 01001010, then the seventh bit in the result byte of nAttributes & ATTRIB_HIGHLIGHT is set to 1 (ATTRIB_HIGHLIGHT = 64 or 01000000 binary). The second bit in the result byte of nAttributes & ATTRIB_BOLD is set to 1 (ATTRIB_BOLD = 2 or 00000010 binary). The fourth bit in the result byte of nAttributes & ATTRIB_UNDERLINE is set to 1 (ATTRIB_UNDERLINE = 8 or 00001000 binary). But the third bit in the result byte of nAttributes & ATTRIB_ITALIC is set to 0 since ATTRIB_ITALIC is 4 or 00000100 binary and the third bit in the nAttributes byte is 0.

Operator: | (vertical bar)

The | (bitwise vertical bar) operator compares each bit of its first operand to the corresponding bit of its second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

This operator does a bit-by-bit comparison of two numerical values which is similar to that of the & operator. For example, the statement 00100110 | 11000000 returns 11100110.

Operator: ~ (tilde(

Use the ~ (tilde) operator with & and | (the "and" and "vertical bar")bitwise operators to mask off or exclude a bit from being processed. A good example is in default.jss in the ObjStateChangedEvent function in the following statement:
 IndicateControlState(iObjType,nState&~(CTRL_CHECKED|CTRL_UNCHECKED))
 The statement ensures that if the control is partially checked, the unchecked and checked states are not processed and therefore not indicated by JAWS.

Operator << (less than less than)

Bitwise left shift. Use to shift the bits in a bitwise pattern left. Often, this is done to move a bit to a specific position in a bit set before performing some other bitwise operation.

Operator >> (greater than greater than)

Bitwise right shift. Use to shift the bits in a bitwise pattern right. Often, this is done to move a bit to a specific position in a bit set before performing some other bitwise operation.

Miscellaneous Operators

Operator: = (equals)

Use this operator to assign a value to a variable.

Operator: . (dot)

Use the dot operator to assign or retrieve the name of an item in a collection when the name of the item is known. For example, you can use Months.January to access the item called January in the Months collection. But you may not use The dot operator to access the name of the item if the name of the item is enclosed in quotes, contained in a variable, or is returned by a function call.

Version: This operator is available as of JAWS 11.

Operator: New

 

Use the New operator to create an instance of an array of collection. You must specify the size and dimensions of the array when creating a new array and when creating an instance of the array.

Version: This operator is available as of JAWS 11.

Operator: [] (left bracket, right bracket)

Use brackets to specify the size of an array when creating the array . Also, you may use them to access elements of an array. If the array is multi-dimensional, you must separate the index for each dimension by commas. For example, [3,5] specifies the element on the third row and fifth column of the array.

Additionally, use brackets to assign or retrieve the name of an item in a collection if the name of the item is enclosed in quotes, contained in a variable, or is returned by a function call.

Version: This operator is available as of JAWS 11.

Operator: () (left-parenthesis right-parenthesis)

Use to enclose a parameter list for a function call, or to establish order of precedence.

Calling Scripts and Functions

The Freedom Scientific Scripting language supports many ways to call scripts and functions. This summary includes general descriptions and definitions of the more commonly used methods for calling scripts and functions, as well as a few code samples illustrating how to call them.

Script versus Function

Scripts and functions are standard blocks of code that govern JAWS behavior. A script is a block of code that may be tied to a keystroke or key combination the user must press in order for the script to execute. A script includes numerous steps that JAWS should perform on demand if the user presses the keystroke or key combination bound to the script.

On the other hand, a function is not performed based on the user pressing a particular keystroke or key combination. Rather, it is called by various means: by a script, by another function, or as a result of a system event. A function can return information after completing the steps within it. A script cannot return information, although both a script and a function can shift control to a different block of code. Additionally, a function may accept data from a calling script or function via parameters, and it may return a value to a calling script or function.

There are three types of functions:

·         Event - performed by JAWS automatically when Windows events occur. Without event functions, JAWS cannot speak and/or display in Braille any system changes automatically. JAWS recognizes many system events that have corresponding functions in the Freedom Scientific scripts where behavior is defined for these events. You cannot create new event functions of these types yourself. But if an application exposes events through a COM object, you can write new script functions that attach to the object for events, and that run when the application events occur. Use the function, ComAttachEvents, to attach functions to exposed COM events, and use the function, ComDetachEvents, to detach them.

 

Additionally, with caution, you may overwrite existing default event functions, and you may create application-specific versions of default event functions. For more details on working with event functions, see Events.

·         Built-in and Default Functions - an ever-growing list of built-in and default functions exposed to the Freedom Scientific Scripting language. These functions ship with JAWS and are used in the shipping code both in default and application-specific script files. With caution, you may use these functions to create and/or modify your own custom script sets. The built-in and default functions are the building blocks of your scripts and functions. For a complete listing of built-in and default functions, see all the category books and their summaries in the JAWS Reference Guide.

·         User-Defined Functions - developed either by Freedom Scientific script developers or by an independent script developer. Typically, they are created for an application the shipping version of JAWS does not support, and/or to enhance an application that JAWS does support. As with built-in and default functions, you may modify and overwrite user-defined functions, and call them from a script or from another function.

Hierarchy of Rules for Calling Scripts and Functions

JAWS performs functions based on their names and locations within the hierarchy of the script files that ship with the product, as well as script files located in your user settings\(language) folder. The rules for processing scripts and functions are as follows:

1.    Each time a function is called from within a script or another function, JAWS searches the application-specific script file first, assuming the application has focus. The application may have layered script files, and so the search starts at the top-most application script file and searches down through any script files linked through the Use statement. If the function is contained within the application-specific script file, then JAWS performs the function and stops processing.

2.    When JAWS does not find the function in the application-specific script file or files linked to it through the Use statement, then JAWS searches the default script file. If JAWS finds the function in the default script file, then JAWS performs the function and stops processing.

3.    When JAWS does not find the function in the default script file, then JAWS searches the list of built-in and default functions. If JAWS finds the function, then JAWS performs the function and stops processing.

4.    When JAWS does not find the function in the built-in and default functions, then JAWS announces, "unknown function call to", followed by the name of the function. JAWS then spells out the name of the unknown function. This error message warns you that the function JAWS tried to call may have a name that is misspelled, the function may have been deleted, or the function may not have been written.

For example, supposed you overwrite the SayLine script in your application-specific script file because processing for how the current line is spoken should be handled differently in your application from the way that the default JAWS functionality processes this script. Of course, the default version of the SayLine script still exists in the default script file. As long as your application has the focus, JAWS performs your overwritten SayLine script found in your application-specific script file rather than the default SayLine script found in the default script file.

Types of Parameters

Although scripts may receive parameters, they are almost never coded to do so. If you code a script to receive parameters, you may pass specific values to its parameters by use of key map files.

Functions may take parameters, and in fact, typically do so. parameters may be required or optional, and they may be passed by reference or not.

Parameters may be required or optional. If a parameter is optional, you must precede its declaration in the parameter list by the keyword, Optional. All subsequent parameters in the parameter list are also optional. So you only need to utilize the keyword, Optional, once in the parameter list. All parameters are required unless you use the keyword, Optional, and all parameters preceding the keyword, Optional, are required.

Whether a parameter is required or optional, it may be passed by reference or not. If you specify a non-aggregate parameter in a parameter list with the keyword, ByRef, the variable is passed by reference. This means that the variable is updated by any changes it receives when the function is called, and those changes are retained when the function is exited.

By contrast to non-aggregate variables, collections and arrays are automatically passed by reference. therefore, the keyword, ByRef, is not required when you declare collections and arrays as parameters.

If a function receives a non-aggregate variable that you have not specified as being ByRef, the variable receives a copy of the variable rather than a pointer reference to it. Therefore, any changes to the variable made in the function are discarded when the function exits.

Examples of Parameter Lists for Functions

·         Required - passed to the function when it is called. the syntax is parameter type followed by parameter name.
 
 

            String sMyName

 

·         Optional - passed to the function when it is called. The syntax is the keyword, Optional followed by parameter type followed by parameter name or names
 

            Optional String sMyName
            or
            Optional String sFirstName, String sMyLastName, Int iAge

 

·         ByRef - passed by the function when it is called rather than to it. The syntax is parameter type followed by the keyword, ByRef followed by parameter name
 
 

            String ByRef sMyName

 
 Note: When a function is declared with by reference parameters, those parameters must be included in any calls to that function.
 
 

Return Statements

A Return statement gives you great flexibility over how to call scripts and functions. A Return statement is used to terminate execution of the script or function in which it appears, and to shift control (and the value of an expression if you provide one) to the calling script or function. But since a script cannot return a value, never follow a return statement in a script by a value.

For more details on working with Return statements, see the topic in the Control Flow book at Return Statements.

Postponing Processing within a Script or Function

When you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait before it continues processing. It all depends on what event you need to complete processing, how much control you need over the wait time, and how you wish JAWS to behave after that event completes. Available methods in the Scripting language include:

·         Pause - waits for other tasks to complete.

·         Delay - waits for focus and new text events to complete with a timed delay you control and optionally by suppression of checking on whether those events have completed.

·         ScheduleFunction and UnscheduleFunction - ScheduleFunction Tells the script to schedule a function to run in a set amount of time, then continue processing the currently running function while waiting on the scheduled function to run. You may use UnscheduleFunction to cancel a scheduled function.

·         QueueFunction - waits to perform a function passed to it after JAWS has stopped speaking. You may queue more than one function to be performed in order.

·         ScheduleFunctionAfterWindowGainsFocus - allows you to call a function after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

·         SetFocusToWindowAndScheduleFunction - allows you to set focus to a particular window after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

Pause and Delay

Pause and Delay statements allow you to postpone execution of succeeding statements in your scripts and functions. Pause gives you the least control but may be all you need in order to accomplish your goal. Delay gives you more control, and allows you to specify how long to postpone processing, depending on whether focus and new text changes have completed.

For more details on working with Pause and Delay statements, see Pause and Delay.

Scheduling Functions

Scheduling functions give you the most control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these types of function calls let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions. As mentioned above, there are several types of scheduling functions.

For more details on working with scheduling functions, see Scheduling Functions.

Enumerator Function Calls

Enumerator functions call a callback function, which in turn may process the window optionally, and either stop or continue the enumeration depending on what the callback function tests and returns. For more details on working with enumerator functions, see Enumerator Functions.

Customizing Scripts and Functions from Default and Built-in Code

When you want to customize your own script files, or when you want to personalize the script sets that ship with JAWS, there are numerous methods you can use. You may create your own user-defined scripts and functions in your own script sets that do not ship with JAWS. but you may also customize existing code by modifying scripts and functions.

Choose your method for customizing your scripts and functions depending on what you need to accomplish: Are you customizing for your own needs in an application already supported by JAWS, or are you creating your own script set for an application JAWS does not support? Are you customizing an existing script or function for a specific application, or do you mean to affect JAWS behavior across all applications? How you code your customized scripts and functions may have very unpredictable results, or it may be a very powerful enhancement. It all depends on careful planning and cautious coding. We always recommend that you back up any code that ships with JAWS before customizing any code directly. Below are some methods for customizing scripts and functions.

MyExtensions

Script binary file stacking does not allow for events in the JAWS script source file (default.jss) to be overwritten in script binary files that are used by the default script binary file (default.jsb). Therefore, MyExtensions.jss and its resulting binary file, MyExtensions.jsb, are intended for you to add custom scripts and functions to the Freedom Scientific default scripts and functions, rather than for you to overwrite default scripts and functions.

You may generate a user default.jsb in the JAWS root folder settings\(language) folder. This default.jsb, compiled from its own default.jss script source file, utilizes the shared default.jsb that ships with the Freedom Scientific JAWS. In other words, it is in the user default.jss file that you should overwrite default scripts and functions.

CAUTION: Make sure that default.jss in the user area calls the one in the shared area by including a use statement for default.jsb. If this Use statement is missing, you will experience catastrophic failure when JAWS attempts to run any scripts that are in the shared default script file but not in the user default script file. Be sure that your script or function in the User default file calls the version in the shared default file where you want to defer to the default behavior of the script or function.

MyExtensions.jss and MyExtensions.jsb ship with JAWS. These files are located in the JAWS root folder of the shared settings\(language) folder. Once you compile the MyExtensions.jss file, thus creating a MyExtensions.jsb file, JAWS places these custom script source and binary files in the user settings\(language) folder.

Note: This assumes that you are using Script Manager to compile. If you elect to use your own text editor, you must ensure that you compile to the correct folder, or copy the files there manually.

MyExtensions.jss contains the following commented-out sections to help you understand the types of code blocks such a file expects:

·         The script source file begins with the typical Include statements that any script source file should have to ensure code integrity during compilation with the default JAWS scripts and functions. These are as follows:

o   Include "hjConst.jsh"

o   Include "hjGlobal.jsh"

o   Include "common.jsm"

o   Any other Include statements of header files specific to your own script set.

·         In order not to have to re-install your own script sets after JAWS automatic updates, place any additional use statements for your custom script binary files below any other "Include" statements of header files specific to your script set.

·         By default, JAWS 13 processed a literal full string match when the == operator was used on strings. The ;#Pragma line can allow the == operator to work as it did prior to JAWS 13, which was a partial comparison. If you need the == and != operators to work with partial comparisons only, add the appropriate statement below your use and Include statements. For more details on working with ;#Pragma StringComparison statements, see ;#Pragma StringComparison Directive.

·         Next are two functions that are necessary and run every time your script set loads and unloads. Use AutoStartEvent to obtain or construct object pointers or other flags or globals you need to initialize when your script set loads. Use AutoFinishEvent to destruct or unload your objects, or nullify any other flags or globals.

·         Add your own user-defined scripts and functions, and compile to create your own MyExtensions.jsb in your user settings\(language) folder.

Overwriting Default Scripts and Functions

The fundamental reason for overwriting a script or function JAWS already provides is that you want that script or function to behave differently from JAWS behavior for some special circumstance of your own. It may be for something specific to a script set you are writing for an application JAWS does not support. Or it may be for an application JAWS does support but for which you want a different behavior from JAWS default behavior.

A safe method for overwriting scripts and functions includes the use of several key function calls that ensure the default scripts and functions still work as expected. Some common function calls that you may use include:

·         PerformScript

·         CallScriptByName

·         CallFunctionByName

Using Scope to Redirect Function Calls

A very safe method for ensuring that a function call to an overwritten function is made only when you want it to be made employs the scope capabilities of the Scripting language to redirect from where the function should be processed. the syntax of scope is to use the name of the script source file where the function code is located, followed by two colons (::) and then by the name of the function as you would normally call it. for example, to call FocusChangedEvent and make sure that it is the one from the default script source file that is actually called, you write:
 

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 from within your own code in your script source file.

 

For more details on working with how to redirect function calls, see Redirecting Function Calls Using Scope.

Code Samples

Below are some code samples for the various types of script and function calls described in this summary.

Function with Optional Parameters Code Sample

The below code sample declares the String parameter as a required parameter but the Integer parameter as optional.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Optional Int iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If iAccountNumber then
            SayInteger (iAccountNumber)
EndIf
EndFunction
Script MyNameTest ()
SpeakNames (sName1) ;omits the optional parameter, just says "My name is Mary".
SpeakNames (sName2, iAccount2) ; speak both required and optional parameters.
EndScript

Function with By Reference Parameters Code Sample

The below code sample provides the integer parameter by reference.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Int ByRef iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If sMyName == sName1 then
            iAccountNumber = iAccount1
ElIf sMyName == sName2 then
            iAccountNumber = iAccount2
Else
            iAccountNumber = 0
EndIf
EndFunction
Script MyNameTest ()
Var
            Int iNum
; Any non-aggrigate variable declared in the function parameter list as ByRef is received by the function as being by reference.
; This means that the function knows where the variable is stored in memory and can change it.
; The function has the ability to change the variable, whether or not it actually does so.
; Any non-aggrigate variable received by a function receives only a copy of the variable, and any changes made to the variable do not persist when the function is exited.
SpeakNames (sName1, iNum)
SayInteger (iNum)
SpeakNames (sName2, iNum)
SayInteger (iNum)
SpeakNames (cscNull, iNum) .
SayInteger (iNum)
EndScript

PerformScript Code Sample

The PerformScript keyword must be followed by a defined script name. For example, if you write:
 SayLine (),
 you are calling the function. But if you write:
 PerformScript SayLine(),
 you are calling the script SayLine (), as if you had pressed the keystroke bound to that script.

Script SayLine ()
If MyConditions then ;whatever your special conditions are in your user-defined MyConditions function...
            DoMyFunction ; do whatever it is you want, like spell the line instead of speaking it in your DoMyFunction call.
            Return
EndIf
PerformScript SayLine () ; Call the default SayLine script bound to the keystroke, Insert+UpArrow.
EndScript

CallScriptByName Code Sample

A function call to PerformScriptByName lets you call dynamically a script whose name is passed as the first parameter. In other words, the script name does not need to be known during compilation, and the script name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the script to be run. then optionally, it takes up to nine variant script parameters.

The below nonsense sample for a supported browser for a Web site that has multiple headings checks to see if the current line is blank. If it is, then the script calls the MoveToNextHeading script to jump to the next heading level 2 on the page.

Script MySayLine ()
If StringIsBlank (GetLine () ) then
            PerformScriptByName ("MoveToNextHeadingLevelN",2)
            Return
EndIf
PerformScript SayLine () ; current line is not blank.
EndScript

CallFunctionByName Code Sample

A function call to CallFunctionByName lets you call dynamically a function whose name is passed as the first parameter. In other words, the function name does not need to be known during compilation, and the function name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the function to be run. then optionally, it takes up to nine variant parameters.

Note: Using CallFunctionByName bypasses checking parameter types that is processed when a function is invoked normally. The Return type is the same as that of the function being called.

The below code sample spells out the word at the cursor from within Notepad. although simply calling SpellString will do the same thing, this is simply to illustrate the syntax of how to use CallFunctionByName.

Script MyTest ()
If ! StringIsBlank (GetLine ()) then
            CallFunctionByName ("SpellString",getWord())
            Return
EndIf
SayLine() ; The line is blank.
EndScript

Scheduling Functions

There are several types of scheduling functions. Each type is described briefly below with its keyword, descriptions, syntax, returns, remarks (if any), and a code sample. Functions include:

ScheduleFunction and UnscheduleFunction

QueueFunction

ScheduleFunctionAfterWindowGainsFocus

SetFocusToWindowAndScheduleFunction

Note: You may schedule a script rather than a function by preceding the name of the script to be called with a dollar sign ($). (See the QueueFunction code sample below.)

In the code samples for each of the functions shown, Notepad is assumed to be the application, and the Script Manager is assumed to be the text editor. But of course, you may test these samples with your own applications.

Keywords: ScheduleFunction, UnscheduleFunction

Description

Unlike Pause and Delay, ScheduleFunction and UnScheduleFunction statements give you much more control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these statements let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions.

Schedule a function to run a user defined function in a set period of time. this is very useful when you want to perform a task and then check on the results at a specified later time. Use UnscheduleFunction if you want to cancel a scheduled function before it has run. Very often, the return value from a ScheduleFunction call is placed into a global variable so that a different script or function can make the related UnscheduleFunction call conditionally.

Syntax

 ScheduleFunction (FunctionName, Time)
 And
 UnscheduleFunction (ID)
 
 

·         For ScheduleFunction, FunctionName is a string representing the name of the function to be executed on a schedule.

·         For ScheduleFunction, Time is an integer representing the amount of time in tenths of a second to elapse before the function is executed.

·         For UnscheduleFunction, ID is the integer value returned by the ScheduleFunction call.

Returns

ScheduleFunction returns an integer ID that you can use to call UnScheduleFunction. If ScheduleFunction returns 0, it means that the timer was not set successfully.

UnscheduleFunction returns an integer value of TRUE if the call was found and canceled. Otherwise UnscheduleFunction returns FALSE.

Remarks

Once ScheduleFunction is called, call UnScheduleFunction to cause the user-defined event not to run.

UnscheduleFunction is used to cancel a ScheduleFunction call. UnscheduleFunction cannot be used without a call to ScheduleFunction.

Code Sample

Open Notepad and type a one-line sentence. then place the cursor at the beginning of the line. Use Script Manager to create the following example. This sample code gets the word at the cursor and speaks it. Then the code schedules a function to get the word at the cursor and spell it 5 seconds later as long as the script has not been reactivated. If the script has been reactivated, the code cancels the function to spell the word at the cursor and starts over again.

Globals
            Int ScheduleID
Void Function SpellIt ()
; Set the id to 0 so that we can test elsewhere if the function has already run.
ScheduleID = 0
; Now spell the word.
SpellString (GetWord ())
EndFunction
Script MyScheduleTest ()
; First, test if your user-defined function, SpellIt, is waiting to run; if so, cancel it.
If ScheduleID != 0
            UnscheduleFunction (ScheduleID)
EndIf
SayString (GetWord ())
; Now schedule your user-defined function, SpellIt, to run 5 seconds later,
; and save the schedule ID so it can be tested to see if the function has run.
ScheduleID = ScheduleFunction ("SpellIt",50)
EndScript

 

Keyword: QueueFunction

 

Description

Use this function to run the function being queued the next time JAWS stops speaking. You may call QueueFunction multiple times in a row, but you may queue only one function at a time. Functions are run in the order you add them to the queue. Stopping speech by pressing control or performing another such action clears the queue.

You can also queue scripts using QueueFunction. To queue a script instead of a function, precede the name of the script to be queued with the dollar sign ($).

Syntax

 QueueFunction ("FunctionName (parameter list)")
 
 

·         FunctionName is a string containing a function name. It must be enclosed in quotation marks.

·         Follow the function name by parentheses, and include the function's parameter list (but not as variable names) inside those parentheses. This is similar to how you call a function normally.

Returns

Returns the integer 1 if the function was queued.

Returns the integer 0 if the function was not queued.

Code Sample 1

In the below code sample, each time the user presses INSERT+UpArrow to have the current line in Notepad spoken, JAWS is queued to speak the word at the cursor of the current line after speaking the line itself.

Script SayLine ()
SayLine ()
QueueFunction ("SayWord ()")
EndScript

Code Sample 2

In the below code sample, each time the user presses INSERT+UpArrow to have the current line in Notepad spoken, JAWS is queued to speak the word, "Hello", after speaking the line itself. Notice that the parameter for the SayString function has a backslash (\) before the quotation marks. This is because JAWS needs the backslash prior to the quotation marks in order to interpret the quotation marks properly when they are being used in the manner shown by this sample.

Script SayLine ()
SayLine ()
QueueFunction ("SayString (\"Hello!\")")
EndScript

Code Sample 3

In the below example, the code queues the SayToCursor script. If the dollar sign were omitted, QueueFunction would look for a function to queue instead of a script. For testing in Notepad, place the cursor at different locations on the text you have written. Then press INSERT+UpArrow. You will hear the line spoken, and then spoken again but only up to the current cursor location (not including it) as if you had pressed INSERT+Home.

Script SayLine ()
SayLine ()
QueueFunction ("$SayToCursor ()")
EndScript

Keyword: ScheduleFunctionAfterWindowGainsFocus

 

Description

This function is probably most useful when you know the handle of an application that will soon gain focus and you want something specific to happen when it does. For instance, you might use it in a situation where a configuration setting is modified for an application that will soon gain focus and where the changed configuration should result in some specific behavior. So use this function to schedule a function to run the next time a given window gains focus.

The function is scheduled using the same mechanism that is used by a call to ScheduleFunction . In effect, ScheduleFunction is called to schedule the function specified by the FunctionName parameter the next time a Focus Changed Event occurs and the window handle of the window that just gained focus is the same as the window handle specified by the hwnd parameter.

Also, keep in mind that while the ScheduleFunction time parameter is in tenths of a second, the ScheduleFunctionAfterWindowGainsFocus time parameter is in milliseconds.

Syntax

 ScheduleFunctionAfterWindowGainsFocus (hwnd, "FunctionName", Timeout)
 
 

hwnd is the window handle of the window to wait to gain focus before scheduling the function.

FunctionName is the name of the function to be executed. It must be enclosed in quotation marks.

TimeOut is an integer value representing the maximum amount of time in milliseconds that the function should wait before canceling the scheduled function.

Returns

Returns an integer TRUE when the specified function was scheduled successfully .

Returns an integer FALSE when the function was not scheduled successfully.

Remarks

Unlike the value returned by a ScheduleFunction call, the value returned by a ScheduleFunctionAfterWindowGainsFocus call is not an ID. So you cannot use the return value from ScheduleFunctionAfterWindowGainsFocus for a latter call to UnScheduleFunction. The value returned by ScheduleFunctionAfterWindowGainsFocus indicates whether the function was scheduled successfully. Currently there is no mechanism for unscheduling a function that is scheduled using ScheduleFunctionAfterWindowGainsFocus.

Another key difference between using ScheduleFunctionAfterWindowGainsFocus and using ScheduleFunction is that only one function can be scheduled at a time using ScheduleFunctionAfterWindowGainsFocus. If you call ScheduleFunctionAfterWindowGainsFocus when a function that was previously scheduled using this function has not yet been called, the function will not be scheduled, and ScheduleFunctionAfterWindowGainsFocus will return FALSE. The function specified by the FunctionName parameter is scheduled at the end of focus change event processing after any necessary scripts have been loaded and the FocusChangedEvent function has been called.

ScheduleFunctionAfterWindowGainsFocus returns immediately without waiting for the specified amount of time. Instead, whenever a FocusChanged event is processed, JAWS checks to determine whether there is an unprocessed request to schedule a function after a given window gains focus. If there is such a scheduled function call, and if the function has timed out, the scheduled function is canceled.

Code Sample

In the below example, since the function is scheduled when the window gains focus, it will only run if the window looses and regains focus within the time limit set by the third parameter. We overwrite FocusChangedEvent in the Notepad script. but of course, this may be tested elsewhere. The function first calls the default FocusChangedEvent function using the "Scope" capabilities of the Scripting language. We use ScheduleFunctionAfterWindowGainsFocus so that when Notepad gains focus into its document window, SayAll automatically starts, but only if not in an active dialog. The scheduled call is canceled after five seconds.

Const
            fn_GoToTopAndSayAll = "GoToTopAndSayAll",
            FiveSec = 5000
Void Function GoToTopAndSayAll ()
JAWSTopOfFile ()
SayAll ()
EndFunction
Void Function FocusChangedEvent (Handle hwndFocus, Handle hwndPrevFocus)
default::FocusChangedEvent (hwndFocus, hwndPrevFocus)
If Not DialogActive () then
            ScheduleFunctionAfterWindowGainsFocus (hwndFocus, fn_GoToTopAndSayAll, FiveSec)
EndIf
EndFunction

Keyword: SetFocusToWindowAndScheduleFunction

 

Description

Use this function to set focus to a window and schedule a function to run after that window gains focus. This function first uses ScheduleFunctionAfterWindowGainsFocus to schedule the function, and then uses the SetFocus function to set focus to the window. All the comments in the description of the ScheduleFunctionAfterWindowGainsFocus function apply to SetFocusToWindowAndScheduleFunction.

Syntax

 SetFocusToWindowAndScheduleFunction (hwnd, "functionName", Timeout)
 
 

·         hwnd is the window handle of the window to wait to gain focus before scheduling the function.

·         FunctionName is a string representing the name of the function to be executed. the function name must be enclosed in quotation marks.

·         TimeOut is an integer value representing the maximum amount of time in milliseconds that the function should wait before canceling the scheduled function.

Returns

Returns an integer TRUE when the function was successfully scheduled and focus was set to the window.

Returns an integer value of FALSE if the function was not scheduled successfully.

Remarks

SetFocusToWindowAndScheduleFunction returns immediately without waiting for the specified amount of time. Instead, whenever a Focus Changed event is processed, JAWS checks to determine whether there is an unprocessed request to schedule a function after a given window gains focus. If there is, and the function has timed out, the scheduled function is canceled.

Code Sample

The below code sample overwrites FocusChangedEvent in the Notepad script. but of course, this may be tested elsewhere. The function first calls the default FocusChangedEvent function using the "Scope" capabilities of the Scripting language. Then we test for a dialog to be active. If so, we use SetFocusToWindowAndScheduleFunction so that when a dialog gains focus, the current control is repeated. The scheduled call is canceled after five seconds.

Function FocusChangedEvent(Handle hwndFocus, Handle hwndPrevFocus)
default::FocusChangedEvent(hwndFocus, hwndPrevFocus)
If DialogActive () then
            SetFocusToWindowAndScheduleFunction (hwndFocus,"SayObjectTypeAndText",50000)
EndIf
EndFunction

Additional Resources

Calling Scripts and Functions

Reference Guide

Keywords: Pause, Delay

Description

Sometimes Pause and/or Delay statements are needed for slower PCs to process your scripts and functions efficiently. When you pass keystrokes from within your scripts or functions, or when you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait to continue processing. However, Pause and Delay statements should only be used where events are not available, or where scheduling a function is undesirable. So the code samples below are for illustration only.

The Pause and Delay functions differ in how much time and how much control they allow for the system to catch up with your script or function. The Pause function forces your script or function to stop processing so that other applications can complete tasks, but you cannot control the amount of time of that forced stop. Alternatively, the delay function lets you specify the amount of time in tenths of a second your script or function should wait before continuing to process instructions.

Pause

A pause statement causes JAWS to yield to the time requirements of other applications. Once other applications complete their tasks, JAWS resumes processing the script or function.

Syntax

 Pause ()
 

Remarks

Never place a Pause statement inside a While loop as it will cause very unpredictable results and may even result in a JAWS crash.

Code Sample

The below code sample passes a keystroke through to the application, and waits for a menu to be activated. Before JAWS performs the TypeKey function, the MenusActive function must determine if the menu bar is open. Once the menu is activated, it passes another specific keystroke. But if the menu is not activated, the code causes an error message to be processed.

TypeKey (skMyMenuKeystroke) ; Open the File menu.
Pause () ; Allow system to open the menu.
If MenusActive () then ; Make sure the menu bar opened.
            TypeKey (skMyOptionKeystroke) ; Activate the option desired .
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; menu bar did not open error message.
EndIf

 

Delay

A Delay statement gives you much more control than the Pause statement to wait to continue processing your script. Since the Pause function relies on other system processes, the amount of time your script is stopped can vary from system to system. If this amount of time is not enough for your script to process correctly and consistently, use Delay statements.

Syntax

 Delay (nTimeValue, nNoEvents)
 
 

nTimeValue is required. It is a positive integer value, indicating the length of time in tenths of a second that the script or function should wait before continuing to process its instructions.

nNoEvents is an optional second parameter. It is a numeric value, indicating to JAWS whether to suppress checking for, and processing, FocusChangedEvent and NewTextEvent functions before returning from the delay. When you pass this second optional parameter as TRUE, JAWS suppresses any processing of the FocusChanged or NewText events. But when you pass the parameter as FALSE, JAWS does not suppress the processing of these two events.

Code Samples

In the first code sample, the first TypeKey function activates the menu. JAWS then performs the Delay function to allow three tenths of a second for the menu to open. The MenusActive function then determines if the menu is open. If it is open, then JAWS performs the second TypeKey function and the menu option is activated. Otherwise, JAWS processes an appropriate error message.

TypeKey (skMyKeystroke) ; Open the File menu.
Delay (3) ; Allow system to open the menu.
If MenusActive () then
            TypeKey (skMyMenuOptionKeystroke) ; Activate the menu option.
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; The menu bar did not open.
EndIf

The second code sample is similar, except that the second optional parameter is used in the Delay statement. This forces JAWS to wait at least the three seconds for the menu to open because the nNoEvents parameter is set to TRUE. If it were set to FALSE, JAWS would not force the time limit to expire before continuing to process the function. In that case, JAWS simply would wait for focus changes to occur, and if the menu became active prior to the three seconds' time limit set by the first parameter, processing of function instructions would just continue. But setting the second parameter to TRUE ensures that JAWS will wait at least those three seconds before continuing to process function instructions.

TypeKey (skMyKeystroke) ; Open the File menu.
Delay (3, TRUE) ; Allow system to open the menu but do not suppress event changes.
If MenusActive () then
            TypeKey (skMyMenuOptionKeystroke) ; Activate the menu option.
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; The menu bar did not open.
EndIf

Enumerator Functions

The purpose of an enumerator function is to call a callback function, which may process the window optionally, and either stop or continue the enumeration, depending on what the callback function tests and returns. There are several built-in enumerator functions that ship with JAWS. Only a couple are shown below with brief descriptions. But we also include a code sample to show how an enumeration function may be implemented.

For a complete list of enumerator functions, see Reference Guide.

Example 1: EnumerateChildWindows

Description

This function calls a specified function for each child of the starting window. You must define it as an integer function with a handle parameter.

Syntax

EnumerateChildWindows (hWnd, FunctionCallback)

hWnd is the handle of the window from which to start enumeration.

FunctionCallback is a string containing the name of the function to call for each child window.

 

Returns

Returns an integer value of true if the enumeration completes.

Returns an integer value of false if the enumeration terminates when the callback function returns false for a window.

Example 2: EnumerateTypeAndTextStringsForWindow

 

Description

This function obtains information about each control using MSAA. The order in which items are enumerated is dictated by how they appear in the MSAA hierarchy. The callback function takes the following parameters: Int typeCode, Int stateCode, String name, String value, String Description. If the callback function returns 0, the enumeration stops. If it returns 1, the enumeration continues.

Syntax

EnumerateTypeAndTextStringsForWindow (hWnd, CallbackName)

hWnd is the handle of the window containing the controls to be enumerated.

CallbackName is a string containing the name of the function to call for each control.

 

Returns

Returns an integer value for the number of controls enumerated.

Code Sample

The below nonsense code sample checks any dialog in Notepad for the Open button. if the Open button is not found in the active dialog, the JAWS indicates an error message. if the Open button is found, the JAWS indicates that it found it.

Notice that the constants declared for the messages include a replaceable parameter %1 symbol. This is for use with the FormatString function in order to control part of the message depending on the item you wish to place into the message.

Finally, notice the use of the gbNotFound flag. If the error message for not finding the Open button were part of the callback function, then the JAWS would indicate the error message repeatedly as the callback function continues to search for the Open button. By using the flag, it is the script that determines whether to indicate the error message.

Const
            sOpenBtn= "Open", ;Open button in Open dialog
            sOpenDlg = "Open", ; real window name of Open dialog
            fn_LookForOpenButton = "LookForOpenButton", ; callback function name
            smsgFound = "I found the %1 button.",
            smsgNotFound = "I can't find the %1 button."
Globals
            Int gbNotFound ; for the script to determine whether to speak the error message.
Int Function LookForOpenButton (Int iType, Int nState, String sName, String sValue, String sDescription)
;This is the callback function for the EnumerateTypeAndTextForWindow test in the below script.
If iType == wt_button
&& sName == sOpenBtn
            SayFormattedMessage (ot_JAWS_message, FormatString(smsgFound,sName))
            gbNotFound = FALSE
            Return FALSE ; Stop looking.
Else
            gbNotFound = TRUE
            Return TRUE ; Keep looking.
EndIf
EndFunction
Script MyTest ()
Var
            Handle hReal
hReal = GetRealWindow (GetFocus())
If DialogActive ()
            EnumerateTypeAndTextStringsForWindow (hReal, fn_LookForOpenButton)
EndIf
If gbNotFound then
            gbNotFound = !gbNotFound ; Reverse the flag.
            SayFormattedMessage (ot_error, FormatString(smsgNotFound,sOpenBtn))
EndIf
EndScript

Redirecting Function Calls Using Scope

The scope qualifier is used to specify the location where JAWS should search for a function or script. Unqualified function calls behave exactly as in the standard calling hierarchy for calling scripts and functions.

The syntax for using scope qualifiers is this: To call a specific instance of a script or function, precede its name by the basename of the file in which it resides, followed by two colons (::). If the base name contains spaces, replace the spaces in the call with the underline character (_).

Be careful when specifying scope. If you restrict a function to a specific scope, all of the calls made from that function are also restricted to that scope. For instance, if you make the following restriction:

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 then any function calls in the default FocusChangedEvent are also restricted to default.

 

Also be careful when specifying scope that you do not bypass any functions that may be layered in script binary (jsb) files between your script file and default. For instance, in a Microsoft Word script, specifying

Default::GetCustomTutorMessage ()

 would skip over the version of that function in the Office script binary (jsb) file. that binary file is part of the Microsoft Word script set. Generally, when restricting scope, it is safer to restrict it to Self rather than to Default unless you are sure that default is really the intended scope.

 

The search for a qualified name only occurs within the scope of the file to which the qualification refers. So if you call Default::SayString from within an application script source file, only default.jsb is searched for SayString. If that function also exists within the application script source file, it is ignored.

In addition to specifying a qualification by script file name, you may also specify that a built-in function be called. For example,

Builtin::SayLine ()

 specifies that the built-in SayLine function be called, not an overwritten SayLine function.

 

You may use as a qualifier, meaning that the name of the current script file should be searched. So, if you are writing script code in "MyApplication.jss", the following are identical qualifiers specifying that the search for SayCell should begin in the "MyApplication.jsb script binary file:

MyApplication::SayCell ()
Self::SayCell ()

Web App Scriptability

Since JAWS 17, the Freedom Scientific Scripting language supports scripting specifically for a Web App in a browser. When referring to a browser, it is always assumed that browser is supported by JAWS. Hence, a scripter may create domain-specific scripts for a web page or web application. When a specific domain is viewed in a supported browser, the domain-specific scripts are loaded in addition to the host application scripts. Thus, the behavior in the domain-specific app supersedes application behaviors.

The ability to customize a Web app through the Freedom Scientific Scripting language allows you to:

·         Associate a script set (.jss/.jsb, .jkm, .jcf and .jdf) with a given domain name by adding an entry in the [Domains] section of confignames.ini, which associates the website domain with the name of the script set for the domain.

·         Obtain well-formed XML from the DOM Server which represents Freedom Scientific's view of the browser webpage or application at any given point in its execution. Note that, while the FS XML DOM is based on the application's DOM, extra FS attributes have been added to the nodes.

·         Use the Scripting language, along with a Com Object such as the MSXML engine and XPath queries, to parse and interact with the XML as a node tree.

·         Request that the DOM Server act upon a particular element in that node tree by finding the equivalent node in the real DOM and invoking an action.

·         Write custom scripts based on the information in this node tree (e.g., find the nth heading on the page and read it, find the following table, add up the numbers in the last row of the table, and speak the total, all without moving the virtual cursor).

 

Definitions

 

·         DOM Server - Freedom Scientific’s module which is used to construct a virtual view of a document hosted in a web browser.

·         Layering - When one script set is loaded on top of another such that scripts in the set loaded later supersede scripts loaded in an earlier set. Scripts which are not overridden in a set loaded later are inherited from a set loaded earlier.

·         Supported Browser - Currently Freedom Scientific supports the following web browsers:

o   Firefox.

o   Google Chrome.

o   Microsoft Edge Chromium

o   Internet Explorer.

·         Web Application - An application hosted in a web browser.

·         Well-formed XML - XML which may be parsed by the MSXML Com object without errors.

·         XML (Extensible Markup Language) - A well-formed markup language for describing complex documents.

·         XPath: An XML query language that allows the parsing and querying of information in an XML document.

 

Examining a Webpage with the XMLDom Browser

 

 JAWS has extensive tools you can use in addition to, or instead of, writing functions to obtain XML information about a particular webpage. From the page you want to inspect:

1.    Toggle the Script Utility on with JAWSKey+WINDOWS+NumpadMINUS.

2.    Press ALT+X. The entire page XML information is presented in the virtual viewer for you to examine.

3.    Use the keystrokes normally used for determining window classes, control types, and so on - namely: F3 and F1, except that now these keystrokes provide information such as nodename, tag info, number of children (elements), etc. TAB and SHIFT+TAB move to next/prior siblings of an element if they exist. F2 and SHIFT+F2 move down and back up through the tree of nodes. You can use the cursor to examine more closely the text that is displayed in the virtual viewer for the current node.

4.    Toggle the XMLDom browser mode off when done examining the webpage by pressing ALT+X and by toggling off the Script Utility itself with JAWSKey+WINDOWS+NumpadMINUS. If you toggle off the Script Utility before toggling off the XMLDom browser mode, it immediately reverts to a normal view of the webpage.

 

Designing a Custom Script Using Special Functions

You must enable your custom scripts to load within any of the supported browsers by adding a section and certain lines to Confignames.ini. Note that this is not the same as the information presented in Domain-Specific Utilities where you are using the existing JAWS utilities such as Settings Center to specify how you prefer JAWS to behave for a certain domain. For example, you want JAWS to speak your bank site's numbers differently than the way you want JAWS to speak numbers everywhere else. So you choose to change some text Processing options in Settings Center just for that site. Your ConfigNames.ini file contains a section called [Confignames] and entries in that section refer specifically to that bank site. A .jcf file gets created with the same name as your bank's site to match the entry in ConfigNames.ini.

For the present discussion however, let's assume that your custom scripts are the sample provided by Freedom Scientific for the Sharepoint Web app from Microsoft. For this and any other custom scripts to run within your browser, you must create or add to the ConfigNames.ini file in your User\Settings(language-specific) folder with the section called [Domains]. The entries in this section must be in the form: specific Web domain = (equals sign) followed by the name of your custom script set. So in this example, your Confignames.ini file would show this:
 

[Domains]
fsservices-my.sharepoint.com=SharePointWeb

 

Note: This particular entry already exists but is commented out in the Shared ConfigNames.ini file located in Program Data\Freedom Scientific\JAWS\Version\Settings\Language-specific folder.

Using Regular Expressions for ConfigNames.ini Entries

'Regular expression' entries were introduced in JAWS 2020 for use in the ConfigNames.ini file. Regex is short for regular expression, a string of text used to create patterns to help match, locate, and manage text. Programming languages utilize this basic concept for searches, etc. to manage patterns such as wildcards.

Suppose that you develop a set of custom scripts for your specialized Web-based application, but you do not want the custom scripts to load everywhere within the application, or you want every domain that includes your application's name in some way always to load your custom scripts. A regular expression entry in the ConfigNames.ini [domains] section may be very helpful to control when custom scripts load or do not load.

Use the following guidelines and syntax for regular expression entries where "Custom Script" is the actual name of your custom script set, domain.com is the URL, and subpath is a subset of that domain:
 

·         Custom script loads for any domain matching the URL obtained from the address bar:
 

regex:domain.com=CustomScript

·         Custom script loads for URLs matching the given domain and subpath instead of matching just the domain:
 

regex:.*domain.com/subpath/.*=CustomScript

·         Custom script should not load and JAWS loads browser default settings and scripts:
 

regex:URL=

·         Custom script loads for a local file within a supported browser matching the name of your local file:
 

regex:file:.*MyFile.html=Custom Script

 Or only for my local file in a specified path:
 

regex:file:C:\path1\path2\MyFile.html=CustomScript

 

 

Functions for Customized Web App Scripts

Some of the functions you can use to customize your Web Aps include:
 

·         GetDocumentXML - returns XML for the current virtual document. It obtains well-formed XML for the entire document from the Dom Server for parsing using the MSXML com object.

·         GetElementXML - returns XML for the current virtual element. It obtains well-formed XML for the current element and its direct ancestors, depending on parameters passed to the function, from the Dom Server for parsing, using the MSXML com object. Passing a 0 retrieves only the current elemet's information. Passing 1 retrieves the element's parent; passing 2 retrieves the element's grandparent, etc. Passing -1 retrieves all ancestors of the element.

·         PerformActionOnElementWithTagAndAttribute - finds an element in the DOM by tag and attrib/value pair and performs an action on it such as setFocus, makeVisible or doDefaultAction.

·         PerformActionOnElementWithId - finds an element in the DOM by its unique ID and performs an action on it such as setFocus, makeVisible or doDefaultAction.

 

For example, let's say you want to create a custom script for the Freedom Scientific site itself. Use the function GetDocumentXML or GetElementXML to determine what content to utilize to pass parameters to the functions that perform one of the actions described above. Then return the string from either function into the User Buffer in the virtual viewer or copy the string to the clipboard. Paste the copied string into a text editor like Notepad where you can save the content and examine it at leeisure.

Special Note:
 In order to pass the FSID parameter to the function, PerformActionOnElementWithId, the FSID must be obtained for the current session of the page. It is a dynamically changing value, much like a window handle that changes each time the Web page loads. Therefore, you must use the FSId returned by GetDocumentXML or GetElementXML just before you pass it to PerformActionOnElementWithId. Clearly, it is less convenient to use PerformActionOnElementWithId rather than PerformActionOnElementWithTagAndAttribute. But both functions can be very useful. See the sample script set for Sharepoint that ships with JAWS, and is presented below for your convenience.

Once you have the various values you need from the XML code, you may add to the browser's .jss file or simply create your own special script source file that, when compiled, will generate the custom script set for you. Add your script set's name to the ConfigNames.ini file section called, [Domains] as described above. For example, your custom script set could be for the Freedom Scientific site and be called "MyFSWeb". The entry in the Confignames.ini file in the [Domains] section would be something like this:
 

www.freedomscientific.com=MyFSWeb

 

The default scripts load "FSXMLDomFunctions.jsb". This file contains a set of functions which can be called to perform some routine tasks without having to write the code from scratch each time it is needed. You can read the documentation in the FSXMLDomFunctions.jsd file, and the source code is available in the FSXMLDomFunctions.jss file.

Code Samples

Some samples are provided below based on the Freedom Scientific main webpage for illustration purposes only. clearly, you can easily make JAWS start reading or hide elements from a particular point through the Flexible Web feature, or simply by using quick keys. Nevertheless, these samples illustrate how these functions can help you determine the information you need to customize your web app scripts.

Example 1: Moving to the Search Button

Suppose all you want to do is to be able to move with your own custom script key to the Search button on the freedom Scientific page. First obtain the element's XML info either by using the GetDocumentXMl function or better yet with the newer function, GetElementXML. Here's how:

1.    From the www.freedomscientific.com webpage, move directly onto the button called "Search".

2.    Write a script that obtains the XML information for this element:
 

Script GetElementInfo ()
Var
            String eXMLInfo
;initialize
eXMLInfo = cscNull
eXMLInfo = GetElementXML ()
If  eXMLInfo () != cscNull
            SayString "Found info")
            CopyToClipboard (eEXMLInfo)
Else
            SayString ("element info not found")
EndIf
EndScript

 

Now examine the XML information just retrieved by pasting it into a text editor like Notepad. You should then be able to write a script that contains a call to PerformActionOnElementWithTagAndAttribute like this:
 

PerformActionOnElementWithTagAndAttribute (Action_SetFocus, "Button", "id", "BtnG")

 

Example 2: Moving to the Search Query edit field

Suppose instead that you want to move with your own custom script key to the Search edit query field on the freedom Scientific page. First obtain the element's XML info by moving to the element and then using a script test just like the one shown in stepd 2 of Sample 1 above. Paste the resulting XMl info into a text editor like Notepad and examine its contents. You can then write a script that puts focus directly on the field, as in the following:
 

PerformActionOnElementWithTagAndAttribute (Action_SetFocus, "INPUT", "name", "q")

 

Example 3: Activating the Shop Link

Finally, let's go shopping for products and services at the Freedom Scientific EStore. Again, you may use the script shown in Example 1 or a variant of it to obtain the XML of the Shop link on the Freedom Scientific webpage. You may need to vary the script slightly by passing it a parameter of 1 to get more useful data from an ancestor of the element. You could then write a script that activates this particular link as follows:
 

PerformActionOnElementWithTagAndAttribute (action_DoDefaultAction, "A", "href", "http://sales.freedomscientific.com/")

 

Running a Custom Script Set for your Web App

For the Sharepoint scripts that ship with JAWS, if the scripts are not working - that is, the toolbars cannot be activated by the JAWSKey+CTRL+F8 keystroke, or whatever other custom scripts you have coded, check the address of the current domain. If necessary, add another line to your confignames.ini file so that your custom scripts load for that specific domain.

Sample Code for SharePoint

Below is a sample script which may be used to interact with the xml on a page. This script finds and lists toolbar controls in the Sharepoint web application and allows the user to click the chosen control. The script set is included with JAWS since JAWS 17. It is available when you uncomment the entry for SharepointWeb found in Confignames.ini - as described above.

Additional Resources

From the Microsoft Developer Network pages:

·         Sampel of XPath syntax

·         Sampel of using parser though script syntax will be slightly different, principle is same

 

From Wikipedia for Regular Expressions:  

 

Domain-Specific Utilities

As of JAWS 17 and later, several of the Freedom Scientific utilities allow for customizing by domain Web-based applications, even those not specifically within a browser. The utilities supported for this type of customization include:

·         Dictionary Manager

·         Keyboard Manager

·         Settings Center

·         Script Manager

 

Utilities such as the Frame Viewer and Graphics Labeler are not customizable for specific domains and continue to behave as always. If you do nothing to customize domain-specific settings, JAWS continues to behave as always by default as well as for all supported applications.

Domain Option in the Files menu of the Utilities

The Script, Keyboard, and Dictionary managers have a menu item added to their respective File Menus to open or create domain-specific files.

Dictionary Manager

When the active application is Web-based, the Dictionary Manager has a menu item added to the File Menu that allows you to open the domain dictionary file. This action creates the dictionary as needed and opens it for you to customize just for that domain.

Script Manager

The Script Manager also allows you to create or open an existing domain-specific script source .jss file through the File Menu when the current application is web-based, and allows for assigning a script key in the domain-specific keymap .jkm file. When a script is assigned in a domain script file, any key assignments made in the New Script or Script Information dialogs writes the assignment to the domain keymap file. When a script is deleted with a key binding, the Script Manager deletes the key binding.

Keyboard Manager

The Keyboard Manager allows you to open the domain-specific .jkm keymap file through the File Menu when the current application is web-based. When the active document is the domain keymap file, the right pane shows domain, application, and default keystrokes, depending on the settings of the Key Filter. For practical purposes, domain-specific keystrokes are essentially an addition to the application keystrokes. Therefore, when you select an application in the Key Filter and a domain file is active, the keystrokes for the domain and application should be displayed. When you add a keystroke through the Add Keystroke Action dialog, the keystroke is added to the domain .jkm keymap file if a domain-specific .jkm keymap file is active.

Settings Center

When the current application is web-based, the Settings Center utility adds a list item to the applications list. The list item includes the file name followed by “(Domain).” Selecting this item creates the domain settings as needed and opens the domain configuration file.

ConfigNames.ini and .jcf Files

Your User\Settings\(Language) folder contains .jcf files for domains you set through Settings Center, as well as a ConfigNames.ini file. The domain-specific .jcf files are named by the domain name itself (e.g., www.freedomscientific.com.jcf. The ConfigNames.ini file contains a section called [ConfigNames]. Entries in this file are of the form domain-speicific .jcf filename followed by the Equals sign (=) followed by the filename again (e.g.,
 www.freedomscientific.com.jcf=www.freedomscientific.com.jcf
 Note that domain-specific .jdf, .jkm, and .jsb files are not included in the ConfigNames.ini file, only the domain-specific .jcf files you create.

Localization: JAWS Folder Restructure

Special Note: Please read the below explanations thoroughly. More restructuring has occurred in versions of JAWS since JAWS 17 to reduce duplication of files for multi-language builds of the product.

Since JAWS 17, the Freedom Scientific Scripting language file structure has been updated in the Shared root and ProgramData folders to facilitate localizing message strings and constants to a desired language. This file structure has no effect on your ability to customize scripts though. For example, when you add an Include statement for a known file such as HJConst.jsh, JAWS can still determine how to find that file so that your script source .jss file compiles properly into a binary .jsb file.

The Script Manager is able to find files in the structure for you. But if you are using a different text editor and you need to examine an existing source file, message file, or header file, the file structure in the JAWS 17 and later Shared folder is explained below. Each of the folders in the file structure contains a folder whose name corresponds to the three-letter abbreviation of the currently installed build of JAWS. If the build you have installed is a non-English build that includes both English and say, Spanish, for the JAWS UI, or you have installed several languages, each of the below described folders will contain as many folders whose names correspond to the three-letter abbreviations of the languages your build of JAWS supports (e.g., Enu and Esn for an English/Spanish build of JAWS). For the explanations below, it is assumed you have an English U.S. build of JAWS installed. Therefore, you will have Enu folders and other folders in the AllUsers\Freedom Scientific\JAWS\Version root folder and the ProgramData\Freedom Scientific\JAWS\Version folders as follows:

Locale - This folder contains an Enu folder which in turn contains a folder for JAWS Help .chm files, another for Manuals, and another called Resources. All the files in these folders are in English. It is unlikely that you will need to access the Locale for any reason. but if you do, please see the section below that specifically discusses the contents of the Locale folder.

Scripts - This is the folder you may access the most if you need to find a particular file. Like the Locale folder, it contains an Enu folder. In it are all the documentation .jsd, key map .jkm, and Braille structure .jbs files with which you may already be familiar. At the same level as the Enu folder, you will find all the source .jss, message .jsm, and header .jsh files along with the binary .jsb compiled files that ship with JAWS.

Settings - Like the other two major folders, Settings also contains an Enu folder in which are all the configuration .jcf files and the folders for PersonalizedSettings, Rules, Sounds, etc., as well as the symbol .sbl files for the myriad speech synthesizers. These are all files that ship with JAWS. At the same level as the Enu folder are other folders:

Init is used to help JAWS keep track of what file to access and when to do so for various tasks.

SymbolDescriptions contains files for the various languages supported by JAWS. These files contain descriptions for characters and symbols defined by the Unicode standard that are not already spoken by speech synthesizers. Take great care if you elect to edit these files since they require UTF-8 formatting when they are saved. For more information about UTF-8 formatting, see
 Formatting Script Files for UTF-8.

In JAWS 18, the .sbl and .chr files were moved out of the language-specific folder to avoid duplication of the same files in each language-specific folder.

VoiceProfiles is the folder that may be of most interest to script developers in this particular set of folders. It contains all the voice profile .vpf files that ship with JAWS.

Custom Localization

PO and MO files are part of the JAWS install process for non-English languages. These files are used to ensure that JAWS messages appearing in the JAWS UI or elsewhere are properly localized to the languages you have installed. But if you have your own custom scripts or a need to customize these files, tools are available online for modifying PO files. Find the POEdit Gettext Translations Editor at: PoEdit.net.

DialogLayouts and LC_MESSAGES Subfolders

When you have a non-English build of JAWS installed or several languages installed, the Locale folder mentioned above that is in ProgramData\Freedom Scientific\JAWS\(version)\Locale contains a folder for each installed language: One is the Enu (english folder), the others are the folders whose three-letter abbreviation correspond to the languages installed. The language-specific folders in turns contain subfolders including DialogLayouts and LC_MESSAGES. Assuming you have and are familiar with the tools used to customize PO files, you can use those tools to modify the existing messages or to add your own, then build the corresponding MO files to be used by JAWS.

Caveat: Whenever a repair or update to JAWS is performed, you will lose these customized versions of the .po and .mo files unless you have the appropriate compiled scripts that use your localization instructions. See

Finding Files with the Script Manager

To find the builtin.jsd file, for example, which resides in the Shared folder, you need to find it within the folder structure. When you choose the "Open Shared" option from the Files menu of the Script Manager, use the File types combo box to select All Files. Then use the folder view control in the dialog to navigate to the correct folder where .jsd files now reside. For an English build of JAWS, this is within the Enu folder. The process is just like the manner in which you find files in the Open dialog of Notepad or any other standard application.

Compiling Older Script Sets or Localizing Script Sets with JAWS 17 and Later

You may have customized scripts prior to JAWS 17 that you wish to add to the current version of JAWS and/or that you need to customize further in the current version of JAWS. Or you may have your own localized instructions you wish JAWS to detect. To do this, you need to use a special ";#Pragma" comment in your script source file. The comment should not be inside a specific script or function.

A scripting language pragma is a specially formatted comment that begins with ";#pragma." The new pragma is usePoFile pragma. This pragma may be used to specialize whether or not insPushLocalizedString instructions are inserted by the compiler. The supported values are as follows:

·         0, false, no, off: Do not insert the localization instructions.

·         1, true, yes, on: Insert the localization instructions. This is the default if the usePOFile pragma is not used.

 

Thus, when the following line is found in the script source .jss file, the script compiler will not insert the localization instructions, and therefore the compiled script binary .jsb file will be backwards-compatible.
 

 ;#pragma usePoFile 0 ; Do not use localization instructions.

 On the other hand, when you use the comment:
 

 ;#pragma usePoFile 1 ; Use localization instructions.

 you ensure that JAWS 17 or later localization instructions are honored.

 

Again, only use this special comment when:

·         You need scripts to be backwards-compatible and also you need another set to honor localization instructions later than JAWS 17.

·         You have custom scripts that make use of your own additions to the .po and .mo files mentioned in the section above called Custom Localization.

 

If all you need are scripts for JAWS 17 and later, or you do not have custom localizations to consider, you can just compile in the usual way without the need for the ;#Pragma comment at all.

Control Flow

The Freedom Scientific Scripting language allows for sequential and decision-making control flow processing. when a script or function performs statements step by step regardless of any situations that may arise during the execution of the script or function, it is called sequential flow control. If you create statements that perform an evaluation, it is called branching, conditional, or decision-making.

For details on working with evaluation and looping statement structures, see:

Conditional Statement Structures,

Looping Functions,

Return Statements.

 

Conditional Statement Structures

Unlike other programming languages, the Freedom Scientific Scripting language does not allow for case or switch statement structures. However, the If-ElIf-Else-EndIf statement structure is a very powerful tool, described below in its various forms and syntax, along with some code samples.

Description

The If keyword marks the beginning of an If-EndIf statement. A fully formulated conditional If statement structure includes: If...ElIf...Else...EndIf. Any expressions appearing after the If are used to evaluate whether condition(s) is(are) true. Expressions after any ElIf statements do the same. For example, can a certain graphics character be found in the active window?

Every If statement structure must begin and end with the keywords, If and EndIf. But the keywords, Then and Else, are optional.

If-ElIf-Else-EndIf statement structures always ask whether a condition or set of conditions is true or false . When a condition is not met (false), then the actions that follow the Else are processed.

The statements processed when conditions are met typically are calls to other functions. But also, a common statement to place within an If-EndIf statement structure is a Return statement. That is, if a condition is true and processing is performed as a result, you may not wish to perform any further evaluation of conditions within the current statement structure. In that situation, place a Return statement after the function calls you do wish to perform when a condition is true.

 For more details on working with Return statements, see Return Function.

 

Syntax

 
 

If Condition 1
            Statements
ElIf Condition 2
            Statements
ElIf Condition #N
            Statements
Else
            Statements
EndIf

 

If Condition 1 is the statement that marks the beginning of the conditional statement structure. When this condition evaluates to true, all statements following the If Condition 1 statement are processed and any ElIf or Else conditions are skipped.

ElIf Condition #n statements are optional for evaluating further conditions beyond the first condition evaluated by the If Condition 1 statement. #N refers to any number because it is possible to have many conditional ElIf statements after the first If statement.

Else statement is optional and is processed only if all prior conditional If and/or ElIf statements have evaluated to false.

EndIf is the statement that marks the end of the conditional statement structure.

Compound Conditions

You may have compound conditions in an If-EndIf statement structure. For ease of readability, you should place each statement of a compound condition statement on its own line. Compound conditions may be "and" as well as "or" conditions. use the "&&" and "||" operators for this purpose.

When you make an "and" compound condition, all the conditions in the compound statement must evaluate to true in order for statements following the compound condition to be processed. Conversely, when you use an "or" compound condition, any one of the conditions within the compound condition may evaluate to true in order for statements following the compound condition to be processed.

Nested Conditional Statement Structures

You may nest If-EndIf statement structures. But take care that each begins and ends with the If-EndIf statements in order that the compiler does not return an error or that processing yields unpredictable results. For readability, each nested If-EndIf statement structure should be indented the appropriate level.

Remarks

When making compound conditional statements and nested statements, make sure to indent the statements between each set of conditions. This greatly improves ease of readability as well as making sure you are keeping track of what statements you intend to process when a certain condition evaluates to true.

Use Return statements judiciously to ensure that you test all conditions you need to evaluate. Guard against returning prematurely, thus short-circuiting any code that runs after the If-ElIf-Else-EndIf block. This may or may not be desirable, depending on what you want to accomplish. The order in which you test conditions is critical.

Code Samples

Single Condition

Since "Then" is optional, the following two code blocks are equivalent:

If MyCondition then ; true
            Statement
EndIf
If MyCondition ; true
            statement
EndIf

If you need statements to be processed when all prior conditions evaluate to false, your code should look like this:

If MyCondition ; true
            Statement
Else ; false
            Statement
EndIf

Multiple Conditions

The below code block shows additional conditions testing.

If MyCondition 1 ; true
            Statements)
ElIf MyCondition 2 ; true
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Compound Conditions

The below code blocks show both "and" condition testing as well as "or" testing.

If MyCondition 1 ; true
&& MyCondition 2 ; also true
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, #n being however many && condition statements exist in the ElIf code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf
If MyCondition 1 ; true
|| MyCondition 2 ; or true, one or the other must be true.
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, both must be true.
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Adding parentheses around conditions ensures testing is even clearer:

If (MyCondition 1
&& MyCondition 2) ; both must be true.
            Statements)
ElIf (MyCondition 3
&& MyCondition 4) ; both must be true,
|| MyCondition 5 ; or this condition by itself must be true.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Nested Conditions

The below code block shows nesting.

If MyCondition 1 ; true
            If My NestedCondition A ; true
                        Statements)
            EndIf ;end of level 1 nesting
            Return ; no further processing.
ElIf MyCondition 2 ; true
            Statements)
            If MyNestedCondition B
            && MyNestedCondition C ; both must be true.
                        Return ; no further processing.
            ElIf MyNestedCondition D
                        Statements
                        Return ; no further processing.
            Else ; my nested conditions evaluate to false.
                        Statements
            EndIf ; end of nesting conditions level 1.
Else ; false, none of the above conditions evaluated to true, and so testing continued.
            Statement
EndIf

Negative Conditions

The below code block evaluates to true if a condition is not met. Sometimes it is easier to test for a condition not to be true.

If Not MyCondition 1 ; true
            Statements)
EndIf

Looping Functions

The Freedom Scientific Scripting language supports three major types of looping functions:

While-EndWhile

For-EndFor

ForEach-EndForEach

CAUTION: If you get into an infinite loop, you can dump JAWS. Assuming that your code does not start running again when JAWS restarts, you can modify your code and fix the problem with the infinite loop before running the code again.

Keywords: While-EndWhile

Description

The While and EndWhile keywords begin and terminate a While loop. Follow the While keyword by a conditional statement, optionally enclosed in parentheses. As long as the condition(s) in that statement evaluate to true, the loop allows a given set of actions to be performed repeatedly.

While loops may be nested, but each nesting level must begin and terminate with the While-EndWhile keywords.

Syntax

 

While (Condition)
            Statement(s) ; Call functions.
EndWhile

 

·         Condition is the code that causes the loop to execute as long as it evaluates to true.

·         Statement(s) are the actions to be performed as long as the loop continues.

 

Remarks

You can use While loops to save space and programming time. However loops can be dangerous. If the tested condition is not met at least once, the code inside the loop never runs.

Most critical of all: You must take care to avoid creating an infinite loop at run-time. Ensure that the tested condition eventually evaluates to false. And ensure that any compound conditions for a While loop also eventually evaluate to false.

Unlike For loops, While loops do not increment or decrement automatically. So if you use an iterator in the test condition of the While loop, you must initialize the iterator and take care to increment or decrement the iterator inside the loop.

Never use a Pause statement from inside a While loop as it will cause very unpredictable results or an infinite loop.

Code Samples

The first code sample simply counts from 1 to 10 when the script is run no matter where it is run from within the application. The second sample adds a conditional test inside the loop. If that condition is met, the function exits, thus terminating the loop in the function.

Of course, an even more efficient way to handle this scenario is never to run the loop in the first place. So the third sample tests for the condition first and returns if the conditions are true. This way, the looping function is never called.

Script MyLoopTest () ; no conditions inside the loop to bail out early.
Var
            Int iCounter,
            String smsgDone
smsgDone = "I'm done!"
iCounter = 1 ; Initialize iterator.
While iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayMessage (ot_JAWS_message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed while a menu or dialog is active.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
            ;Test to bail out early if a menu or dialog is active:
            If MenusActive ()
            || DialogActive ()
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript
Script MyLoopTest () ; with a test to stop processing before ever calling the looping function if the key assigned to the script is pressed from an active menu or dialog.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
;Test to bail out early if a menu or dialog is active:
If MenusActive ()
|| DialogActive ()
            SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
            Return
EndIf
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: For, To, Descending, EndFor

 

Description

The For and EndFor keywords begin and terminate a For loop. Follow the For keyword by an iterator assigned to an integer range statement, specifying the initial value through the final value of the iterator.

For loops may be nested, but every For loop must begin and terminate with the For and EndFor keywords.

For loops allow a given set of actions to be performed repeatedly as long as the iterator specified in the For loop ranges from the initial value of the iterator through the final value. By default, the iterator starts at the initial value and increments by 1 until it reaches the final value. Using the optional Descending keyword specifies that the iterator starts at the initial value and decrements by 1 until it reaches the final value.

Syntax

 

For x = Start to End Descending
            Statements(s) ; Call functions.
EndFor

 

·         X is an integer variable to be iterated in the loop.

·         Start is the initial value, either an integer variable or integer constant, of X in the loop.

·         End is the final value, either an integer variable or integer constant, of X in the loop.

·         Descending is an optional keyword, specifying that X should be decremented instead of incremented in the loop.

 

Remarks

Like While loops, For loops may be used to save space and programming time. However they can also be dangerous. If the iterator is set to an initial value that is greater than the final value, and the iterator is set to increment through the loop, the code inside the For loop is never run. Likewise, if the iterator is set to an initial value that is less than the final value, and the iterator is set to decrement through the loop, the code inside the For loop is never run.

Most critical of all: Avoid creating an infinite loop at run-time. In a typical For loop, you should not modify the iterator inside the loop; instead, allow the For loop to increment or decrement the iterator automatically. Do not modify the iterator inside the For loop so that it never reaches the final value. If you want the iterator to decrement instead of increment, you must initialize the iterator in order that the starting value is greater than the ending value.

Code Sample

The first code sample is a very simple For-EndFor loop that counts from 1 to 10. The second code sample reverses the count. the third code sample has a condition inside the loop that halts counting early if it is met.

Script MyLoopTest () ; Count from 1 to 10.
Var
            Int iStart,
            Int iEnd,
            String sMsgDone
smsgDone = "I'm done!"
iEnd = 10 ; final value of iterator
For iStart = 1 to iEnd
            Sayinteger(iStart) ; iterates automatically.
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; Reverse the count.
Var
            Int iStart,
            Int iEnd,
            String smsgDone
smsgDone = "I'm done!"
iEnd = 1
For iStart = 10 to iEnd Descending
            Sayinteger(iStart)
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed twice quickly.
Var
            Int iStart,
            Int iEnd,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iEnd = 10
For iStart = 1 to iEnd
            Sayinteger(iStart)
            If isSameScript () ; Key assigned to script is pressed twice quickly.
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndFor
SayFormattedMessage (ot_JAWS_Message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: ForEach, In, EndForEach 

 

Description

The ForEach and EndForEach keywords begin and terminate a ForEach loop. Follow a ForEach keyword by a string variable to access the keys for each member of the collection, and the collection to be accessed.

ForEach loops allow enumerating each member of a collection through its key. ForEach loops may be nested, but every ForEach loop must begin and end with the ForEach and EndForEach keywords.

Syntax

 

ForEach k in col
            ... ;k is the key for each member.
            ... ;col[k] is the member in the collection matching the key.
            Statements()
EndForEach

 

·         K is a string variable that is the key for a member in the collection.

·         Col is the collection to be accessed.

·         Statement(s) are the actions (function calls) to be performed within the ForEach loop.

 

Remarks

The ForEach loop accesses the members of the collection by alphabetical order of the member keys.

The string variable contains the key for each member in the collection. To access the collection member, use the name of the collection followed by the key variable in square brackets.

Code Sample

The below code sample names flowers by color and types each message on a separate line into Notepad using ForEach looping. You save code statements in the calling function by placing the initialization of each flower's name and color into its own function. You save code statements in the script by making the function that gathers the collection and performs the loop. Also in this way, you may add other statements to the script to call CollectionOfFlowers under one set of conditions and call, for example, CollectionOfFruit, for a different condition.

Additionally, the extent of the collection in the function is determined only by how many statements it has. If you make the collection bigger, the ForEach loop does not need to change because it is already set to handle however many items exist in the collection.

Void Function FlowersInit(collection Flowers, String Name, String Color)
;Initialize each flower's name and color, ppassed by the calling function, CollectionOfFlowers.
Let Flowers.Name = Name
Let Flowers.Color = Color
EndFunction
Void Function CollectionofFlowers()
Var
            Collection Plants,
            Collection Flowers,
            String Key,
            String smsgPlantInfo
Let sMsgPlantInfo = "I am a %1 %2." ;%1 is the color, %2 is the name of each flower in the collection.
Let Plants = new collection
Let Flowers = new collection
FlowersInit(Flowers,"lily","white")
Let Plants.lily = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"daffodil","yellow")
Let Plants.daffodil = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"orchid","purple")
Let Plants.orchid = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"iris","blue")
Let Plants.iris = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"rose","red")
Let Plants.rose = Flowers
Let Flowers = new collection
ForEach Key in Plants
            SayFormattedMessage (ot_JAWS_message,FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name))
            TypeString(FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name)
                        +CscBufferNewLine)
EndForEach
;Remove the collections using built-in functions.
CollectionRemoveAll (Flowers)
CollectionRemoveAll (Plants)
EndFunction
Script MyLoopTest ()
;This script calls the function that names each flower in the collection by color.
CollectionOfFlowers ()
EndScript

Keyword: Return

Description

A Return statement is used to terminate execution of the function or script in which it appears.

Use a Return statement within a function to shift control (and the value of an expression if you provide one) to the calling function or script. To define return values, precede the name of the function by the return type.

Since a script cannot return a value, never follow a return statement in a script by a value.

Syntax

Returning a Function Value

"function type" Function "function name" ("parameter list")

 

·         "function type" - returns one of the following types of values to the calling script or function:

o   Int - an integer value.

o   String - a string value.

o   Handle - a window handle.

o   Object - an object.

o   Variant - a variant value.

o   Void - no value.

 

·         Function - the keyword, Function, must follow the function type.

·         "function name" - the name of the function.

·         "Parameter list" - Parameters for the function must be enclosed in parentheses, each one declared and separated by commas, except for the last one. Each parameter declaration must include its type, the keyword, ByRef, if it is obtained by reference when the function is called, and its parameter name. Required parameters must always precede optional ones. All parameters declared after the keyword, Optional, are assumed to be optional. Parameters may be declared as being passed by reference whether they are required or optional.

 

Returning a Value/Expression

Return "value/expression"

When the Return keyword is used to shift control to a calling script or function with a value or expression (as from a conditional statement structure, the value and/or expression must match the function type. The only exception to this is where the function type is Void or Variant. An example of such a code fragment would be something like the following:

Return (GetWindowClass (hwnd) == cwc_RichEdit20
            && GetWindowName(hwnd) == wn_MyWindowName)
Or
Return ( ! StringIsBlank (gsMyDlgName)
            || ! StringIsBlank (gsMyDlgText) )

Remarks

If a Return statement is not followed by a value, its value is assumed to be Null.

A Return statement may return the result of evaluating the expression following it. The expression may be a simple value, or it may include a complex series of conditional tests or function calls. No matter how simple or complex the expression, the expression is evaluated and its result is returned to the calling function. The expression must evaluate to the type expected by the return statement.

Code Samples

The following examples illustrate how the Return statement may be used to shift control from a calling script or function, and how a Return statement may be used to shift control from within a conditional statement structure. although these examples are rather simplistic in nature, they show how the syntax is applied to a real block of code.

Assigning the Output of a Function to a Variable

When a function returns a value to the calling script or user-defined function, you may store that value in either a local or global variable. You can then use that variable to make decisions on what the calling script or user-defined function should do next.

String Function GetMyWorkPlace ()
Return "Freedom Scientific"
EndFunction
Script SayMyWorkplace ()
Var
            String sText
Let sText = GetMyWorkplace () ; store the return value of the called function in sText.
If sText != cscNullThen ; the function returned a value other than null or nothing.
            SayMessage (ot_Message, sText)
EndIf
EndScript

Using a Function as a Parameter For Another Function

You can use the return value of one function as the parameter for another. Using the previous example, the return value from the user-defined function, GetMyWorkplace, may be passed directly to the SayMessage function without storing it in a local variable first. The only disadvantage to this approach is that the function may not retrieve any text, causing JAWS to say nothing when the SayMessage function is called from the script.

String Function GetMyWorkPlace (Int iAnswer)
If iAnswer == TRUE then
            Return "Freedom Scientific"
Else
            Return cscNull
EndIf
EndFunction
Script SayMyWorkplace ()
Var
            Int iYes
; JAWS will never speak when the below function call to GetMyWorkplace is used in the SayMessage function
; because no value is assigned to the parameter passed to the function.
; Use the return value from GetMyWorkplace as the message text for SayMessage.
SayMessage (ot_message, GetMyWorkplace (iYes))
EndScript
Script SayMyWorkplace ()
; JAWS will always speak when the below function call to GetMyWorkplace is used in the SayMessage function ;
; because a value is assigned to the parameter passed to the function.
; Use the return value from the function, GetMyWorkplace, as the message text for SayMessage.
SayMessage (ot_message, GetMyWorkplace (TRUE))
EndScript

Returning Conditionally

The below sample is a very basic example of returning conditionally. The function is a string function because the values it returns are strings. Although you could hard-code the strings within the function as quoted strings, it is best practice to avoid hard-coding anywhere because you may need to use the constants elsewhere.

Const
            sUnchecked = "unchecked",
            sChecked = "checked",
            sPartially = "partially checked"
String Function GetStatusString (Int iState)
If iState == 0
            Return sUnchecked
ElIf iState == 1
            Return sChecked
ElIf iState == 2
            Return sPpartially
EndIf
Return cscNull ; "", that is, nothing.
EndFunction

Returning from a Script

The Return statement in the below nonsense script ensures that processing stops when the script is performed from within an active dialog. Otherwise, the confirming message that you are not in a dialog is processed and spoken if the script is performed outside of an active dialog.

Script MyDialogTest ()
Var
            String smsgNoDialog
Let smsgNoDialog = "not in a dialog"
If DialogActive () then ; built-in function that test for whether a dialog is active.
            Return ; do not continue processing at all; a dialog is active.
EndIf
; Only process this if not in a dialog.
SayMessage (ot_message,smsgNoDialog)
EndScript

Objects

The Freedom Scientific Scripting language supports working with objects, and with attaching and detaching COM events to application pointers in order to provide access to application user interfaces that may not be user-friendly out of the box to assistive technology such as screen readers. For the purpose of this topic, when referring to screen readers, you may assume that other assistive technology products apply to the discussion.

Microsoft Windows provides numerous tools you may utilize in order to make COM objects accessible to screen readers. A brief overview appears within this summary. Since this highly technical subject is far beyond the scope of the Freedom Scientific Developer Network, a few reference sources are listed at the end of this summary for your convenience. But we assume that you have general knowledge of the terminology and concepts of working with objects.

 

MSAA

 Microsoft Active Accessibility (MSAA) became part of the Microsoft Developer's Kit in 1997. It has been included as a part of Windows operating systems since that time, with numerous updates. but as of Windows Vista, Microsoft introduced a more robust accessibility component to serve a similar purpose. This is called User Interface Automation (UIA). Newer applications tend to favor UIA over MSAA.

 

MSAA was developed to provide a programmatic communication mechanism for products like screen readers, and Microsoft Windows and applications that run on Windows operating systems. Basically, MSAA gives screen readers the ability to provide information for Windows controls, and thus gives you, the end user, the ability to interact with those controls. The properties of controls are exposed to inform you about a control's name, prompt, location on screen, type, value, state, etc. A control's state reflects whether the control is selected, checked or unchecked, enabled or disabled, expanded or collapsed, and so on.

An accessible object is represented by an IAccessible COM interface and an integer ChildId, allowing applications to expose a tree hierarchy. Each element of this tree structure exposes a set of properties and methods for the object. Those properties and methods allow you to manipulate the corresponding user interface element. MSAA clients can access the programmatic user interface information through a standard API.

The Freedom Scientific Scripting language supports MSAA and UIA with over 70 functions. For a complete listing of objects, see the summary in the screen reader'sFunctions book of the Reference Guide.

For more details on working with object-related event functions, see the topics under Events in this General Scripting Concepts book called Object Model and MSAA Events
 and
 Object Model and MSAA Event Helpers.

UIA

For the most part, since Windows Vista, Microsoft UI Automation has replaced MSAA to support screen readers. Like MSAA, UI Automation is a component of all operating systems, and it supports Windows Presentation Foundation (WPF). Its purpose is to provide a programmatic means for screen readers to expose information about the user interface, thus allowing you, the end user, to interact with applications through keyboard commands or other non-standard input devices.

The Freedom Scientific Scripting language provides a primary FSUIA object which is accessible to the scripts via the CreateObject built-in script function with the object ID “FreedomSci.UIA”. The primary object provides for creating of all other script API objects.

In touch.jss, you can see how UIA is used to implement gesture support and the touch cursor. The scripts in default.jss use touch.jss functions to implement the touch cursor support. The touch cursor is completely implemented via scripts.

Office.jss and Outlook.jss have some functions where UIA is used to do things which could not be accomplished via MSAA or Window structure. TWinUITouch.jss (used by TwinUI) gives some support from UIA to the scripts for the Windows 8 start screen. But do be careful not to confuse it with the iAccessible object methods used in TwinUI. In JAWS 14, iAccessible object methods were utilized in areas where they were needed for Windows 8 support, and IAccessible objects are still in use in several areas. Windows.ui.search.jss also has UIA to support the Windows 8 search for the Start screen. All of this is greatly enhanced and updated for Windows 10 support and going forward.

Note: As of JAWS 16, some code may still be in use where the screen reader detaches events from the UIA object before removing it. This is no longer necessary. Simply nulling a UIA object (or the object going out of scope because it is local) disposes of all events attached to it. That is why all UIA objects used for attaching events are global.

Scripts for Microsoft Office use UIA to perform specific tasks rather than as a large part of the scripting support. You can find functions in the source (.JSS) files for MS Office where UIA is used by searching for "FreedomSci.UIA". Also, the function, CreateUIAFocusElement, in touch.jss illustrates how application scripts get a temporary UIA object.

 

As of JAWS 18.0.xxx and JAWS 2018 and later, UIA.jss has a set of functions which use a global FSUIA object and treewalker, available for convenience and reduced overhead when all you need to do is a routine UIA task such as get focus, parent, etc. As of JAWS 2018, two functions have been added: FSUIAGetNextSiblingOfElement and FSUIAGetPriorSiblingOfElement.

 

Script API Object Interfaces

When describing the return values of UIA object methods, the term “true” indicates an integer value of -1, and the term “false” indicates an integer value of 0. The terms “Object”, “Handle”, and "Int” refer to the built-in Freedom Scientific script function types.

Definitions

·         Control - a component of the user interface with specific properties and potential interactions; for example: buttons, links, text, and so on.

·         Object - an object as implemented by the Freedom Scientific script language.

·         Method - a member function call, taking a set of parameters, which performs an operation on an object or returns requested data from it.

·         Property - a data member of an object which can be used in assignment operations and dereferenced using the "." (dot) operator if the data member is itself an object.

·         UIA condition - a UIA mechanism for determining which UIA elements match a given set of criteria. These are used to find elements in the UIA tree and can be used to customize the behavior of a UIA tree walker.

·         UIA element - the UIA interface which provides properties and actions for a single control.

·         UIA property - a piece of information about a UIA element such as its name or type.

·         UIA tree - a hierarchical collection of UIA elements.

·         UIA tree walker - a UIA provided mechanism for traversing a UIA tree. These can be customized using UIA conditions to include or exclude UIA elements with certain properties.

Examining Objects on the Fly

1.    Turn on Script Utility Mode - Ins+Windows+NumpadMinus.

2.    Route to current window - F5.

3.    Press Alt+Ctrl+Windows+O to activate the object tree UIA browser.

4.    Now use the script utility mode keys normally used to navigate windows hierarchy. Instead, you will be navigating by objects.

5.    Press Alt+Ctrl+Windows+O again to turn off the object tree UIA browser, and press Ins+Windows+NumpadMinus to turn off Script Utility Mode.

 

You may also wish to write test scripts using the function GetUIAObjectTree (hwnd) to get the top level object associated with the window. Then use o.FindByKeyboardFocus(1) to get the item at the deepest focus, not just the list box but the list item inside it.

All other methods and properties are detailed in the file, HomeRowUIAObject.jss. Also, see SkypeWatch.jss for real-time usage of accessing objects.

Additional Resources

For a complete discussion of Objects, MSAA, UIA, and IAccessible objects, see the topics in Freedom Scientific's own page and the Microsoft Developer Network as follows:

JAWS UIA Script API Documentation

COM Objects and COM Interfaces

Microsoft Active Accessibility

UIA Automation

UI Automation API

IAccessible Interface

Events

Microsoft Windows is constantly processing events. There are many types, not all of which are necessary for screen readers to utilize. But without the ability to identify which events are running and what their output is, screen readers could not function at all.

The Freedom Scientific Scripting language supports many event functions. In other words, JAWS must be able to tap into what events are doing in order to decide whether to pass or suppress information to synthesizers and Braille displays.

Often, there are timing issues to consider when working with event functions. For example, there may be timing issues when windows are created and destroyed as applications gain and lose focus or open and close (focus change events). there may be timing issues when popup information interrupts while JAWS is speaking and displaying something (new text event).

In addition, JAWS may suppress an event from firing at all unless a setting is enabled. By default, there are many events whose settings appear as disabled in the JAWS Settings Center user interface. Notifying you about mouse cursor shape changes is one example of such an event. If you enable any setting associated with an event, JAWS detects the firing of the event by processing the default and/or application-specific script configuration (.jcf) file. When the event is detected, the related event functions in the associated script binary files fire and determine what to speak and display in Braille.

The technical discussion of how the Windows operating system processes events is beyond the scope of the Freedom Scientific Developer Network. But you may find complete information on working with Windows events at the Microsoft Developer Network for Microsoft Windows Events.

For diagnostic purposes only, you may use an event trace hook type when adding and removing a hook. When a hook of type event trace is in place, it is called before every script event is run. An event trace hook receives as parameters The path and name of the script binary (.jsb) file that runs the event, the name of the event that runs, and any parameters received by that event. But an event trace hook does not prevent script events from running.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

The Scripting language utilizes many event functions in the default script source file (.jss) as well as in many other script source files. The categories of event functions and their helper event functions include:

·         Application Info Events

·         Clipboard Events

·         Connection Events

·         Cursors Events

·         Cursors Event Helpers

·         Dialogs Events

·         Help Events

·         HTML Events

·         HTML Event Helpers

·         Keyboard Events

·         Keyboard Event Helpers

·         Menus Events

·         Menus Event Helpers

·         Mouse Events

·         Mouse Speech Events

·         Object Model And MSAA Events

·         Object Model and MSAA Event Helpers

·         Optical Character Recognition Events

·         SayAll Events

·         Screen Text Events

·         Screen Text Event Helpers

·         Scripts Events

·         Selection Events

·         Selection Event Helpers

·         Settings Events

·         Window Events

·         Window Event Helpers

Application Info Events

An Application Info event function provides information about the application, such as when it starts or closes. JAWS uses this information to determine whether to speak and display application information, initialize or nullify object pointers and variables, for comparison purposes, etc. In this case, to display information refers to showing it in Braille.

Some examples of Application Info event functions include:

·         AutoStartEvent

·         AutoFinishEvent

For a complete listing of application info event functions, see the category book in the Reference Guide.

Unlike other functions, AutoStartEvent and AutoFinishEvent should not call down the stack. AutoStartEvent and AutoFinishEvent functions run when script binary files are loaded and unloaded, which means that each binary file will run its own version of these functions, if they exist, and it is unnecessary for these events to call down the stack. In fact, AutoStartEvent and AutoFinishEvent should not call down the stack because doing so will cause the events to run when they should not, and therefore introduce buggy behavior. Since normally, you should call down the stack when overwriting events, avoid doing so in the case of these two functions.

Clipboard Events

A Clipboard event function provides information about the clipboard, such as whether it has been changed or updated. JAWS uses this information to determine whether to speak and display it, for comparison purposes, etc. In this case, to display information refers to showing it in Braille.

An example of a Clipboard Event function is ClipboardChangedEvent. For a complete listing of functions related to the clipboard, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ClipboardChangedEvent function is overwritten in order to determine whether the Clipboard contains new text. Every time you copy, cut, overwrite, or append to the Clipboard, the ClipboardChangedEvent function fires and lets you know that there is new text in the clipboard. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function ClipboardChangedEvent ()
;Speak whether I have text.
If GetClipboardText () != cscNull
            SayMessage (ot_JAWS_message, "You have text in the clipboard.")
EndIf
ClipboardChangedEvent ()
EndFunction

Connection Events

A Connection event function provides information about a Tandem Connection, such as whether it is connected or disconnected. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, etc.

Some examples of Connection event functions include:

·         TandemConnectionEvent

·         ControllerModeChangedEvent

For a complete listing of connection event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, if a Tandem event occurs,a debug statement saying "99" is spoken. Of course, the function that ships with JAWS does not have this debug statement in it but we have used the function from the default.jss script source file as a sample and have added the debug statement here.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function TandemConnectionEvent(int nTandemApp, int nConnectionEvent)
Var
            Int bShouldPlaySound
SayInteger (99) ; This is the debug statement added to the original function from default.jss.
Let bShouldPlaySound = GetDefaultJCFOption (OPT_USE_SOUNDS_TO_INDICATE_TANDEM)
If nConnectionEvent == Tandem_Status_Connected then
            Let GlobalTandemMode = Tandem_Mode_Connected
            ;Note that the controller will hear the message spoken on the target side when the connection is made,
            ;so it is not necessary to speak the message for the controller as well.
            If bShouldPlaySound
            && GlobalTandemConnectSound then
                        PlaySound(GlobalTandemConnectSound)
            EndIf
            If nTandemApp == Tandem_Target then
                        SayMessage(ot_status,cmsg_TandemConnected)
                        BrailleMessage (cmsg_TandemConnected)
            EndIf
Elif nConnectionEvent == Tandem_Status_Disconnected then
            Let GlobalTandemMode = Tandem_Mode_NotConnected
            If bShouldPlaySound
            && GlobalTandemDisconnectSound then
                        PlaySound(GlobalTandemDisconnectSound)
            EndIf
            If nTandemApp == Tandem_Controller then
                        SayMessage(ot_status,cmsg_TandemDisconnectedFromTarget)
                        BrailleMessage (cmsg_TandemDisconnectedFromTarget)
            Elif nTandemApp == Tandem_Target then
                        SayMessage(ot_status,cmsg_TandemDisconnectedFromController)
                        BrailleMessage (cmsg_TandemDisconnectedFromController)
                        If gbLockedKeyboard then
                                    SetKeyboardLock(false)
                        EndIf
            EndIf
EndIf
EndFunction

Cursor Events

A Cursor event function provides information about system cursors and about the JAWS cursors. These differ in some cases since JAWS has some special cursors of its own. And since JAWS 2020, this includes UIA Scan cursors for modern Windows 10 applications and areas of Microsoft Office 365. A cursor event may provide information about whether a cursor is changing shape, appearing or disappearing, etc. JAWS uses this information to determine whether to track information with speech and in Braille, for comparison purposes, etc.

Some examples of Cursor event functions include:

TopEdgeEvent

BottomEdgeEvent

CursorShapeChangedEvent

For a complete listing of cursor event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, if a cursor changes shape, JAWS informs you. By default, this feature is disabled but you can toggle it on/off through Settings Center.

To set up the example and have the event function fire in Notepad, from within the Notepad.jss script source file, enable "Notify When Mouse Cursor Changes Shape" through the Settings Center user interface. The code sample simply overwrites the function in Notepad so that the active cursor and position are spoken ahead of processing the default function for announcing cursor shape changes.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it. It just requires that the setting to detect the event is enabled in JAWS.

Void Function CursorShapeChangedEvent (string CursorType)
PerformScript SayActiveCursor ()
Delay (10)
CursorShapeChangedEvent (CursorType)
EndFunction

Cursor Event Helpers

A Cursors event helper function is used to assist a cursor event. JAWS uses this information to determine whether to speak and display something, or to play a sound when a particular type of cursor event occurs. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

An example of a Cursors event helper function is the ProcessBoundaryStrike function. For a complete listing of Cursors event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, if you navigate to the top or bottom edge of an edit window, JAWS informs you by playing a sound. By default, this feature is disabled and is application-specific. So it appears in the JAWS Quick Settings user interface.

To set up the example and have the TopEdgeEvent and BottomEdgeEvent functions fire in Notepad, from within the Notepad.jss script source file, enable the setting called "Top and Bottom Edge Alert" in Quick Settings. The code sample simply overwrites the ProcessBoundaryStrike function in Notepad so that the PC cursor position is spoken after processing the default function.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize. It just requires that the setting to detect the event is enabled in JAWS.

Void Function ProcessBoundaryStrike(handle hWnd, int edge)
ProcessBoundaryStrike(hWnd, edge)
SayMessage (ot_JAWS_message,GetCursorPosString (Cursor_PC,smmInches))
EndFunction

Dialog Events

A Dialog event function provides information about a dialog, such as whether it has changed or IS updated. JAWS uses this information to determine whether to speak and display it, for comparison purposes, etc. In this case, to display information refers to showing it in Braille.

An example of a Dialog Event function is DialogPageChangedEvent. If you can find an application that contains a multi page dialog (e.g., Internet Explorer, Microsoft Word, etc.), you may try overwriting the function in the application's script source file and adding, say, a debug statement in it so that you can see how this function works. to avoid unpredictable results, make sure that there is not an overwritten version of DialogPageChangedEvent already in the application's script source file.

For a complete listing of functions related to dialogs, see the category books in the Reference Guide.

Help Events

A Help event function provides extra help messages about user interface activity. This may be especially helpful for newer users of JAWS unfamiliar with keyboard commands. So Help messages may be about what keys you may press when a control is activated, the name of the access key of the control, and so on. JAWS uses this information to determine whether to speak and display Help messages. In this case, to display information refers to showing it in Braille.

An example of a Help event function is TutorMessageEvent. For a complete listing of related Help functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the TutorMessageEvent function is overwritten for Notepad to indicate some information it does not indicate normally when a dialog gains focus into an edit combo control like the FileName edit control in the Open or Save-As dialog. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file. The GetCustomTutorMessage helper function (which is not an event function) is used to populate the message desired for this code sample.

To set up the example, ensure that you have tutor help enabled in JAWS. The feature is on by default and is found in the Basics dialog of the JAWS Options user interface. The feature has three modes:

·         Announce Menu and Control Help

·         Announce Custom Messages Only

·         Turn off Menu and Control Help

In the sample code, both of the enabled options work. If you have the feature set to Announce Custom Messages Only, when you encounter an edit combo control in a dialog in Notepad, the custom message shown here speaks. However, if you have the feature set to Announce Menus and Control Tutor Help, the custom message shown here speaks, and then is followed by the default tutor help message JAWS provides for an edit combo control.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgHello
I am a test message for TutorMessageEvent to demonstrate how it works.
@@
EndMessages
String Function GetCustomTutorMessage ()
If DialogActive ()
&& GetObjectSubtypeCode () == wt_editCombo
            Return msgHello
Else
            Return default::GetCustomTutorMessage ()
EndIf
EndFunction
Void Function TutorMessageEvent (Handle hWnd, Int nMenuMode)
If DialogActive ()
&& !nMenuMode ; a menu is not active.
            If GetObjectSubtypeCode () == wt_editCombo
                        SayMessage (ot_tutor,self::GetCustomTutorMessage ())
            EndIf
EndIf
TutorMessageEvent (hWnd, nMenuMode)
EndFunction

HTML Events

An HTML event function provides information about user interactions or events that occur in HTML applications. Based on the information the event function provides or returns, JAWS determines what to speak and display. In this case, to display information refers to showing it in Braille.

Some examples of HTML event functions include:

DocumentLoadedEvent

DocumentUpdated

FormsModeEvent

For a complete listing of HTML event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the DocumentLoadedEvent function that is already overwritten in Chrome.jss from the function in the default.jss script source file is changed slightly. After all the calls in the function occur, a nonsense message saying, "hello", is added to illustrate how DocumentLoadedEvent works when a new Web page is loaded. It is assumed that the function is being compiled in the Chrome.jsb script binary file in your root folder of the JAWS user Settings\(language) folder.

Note: To avoid unpredictable results, never change the files located in any folder of the JAWS shared folders structure.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgHello
Hello.
@@
EndMessages
Void Function DocumentLoadedEvent ()
SetUpStuffForNewPage ();Personalized Settings
SpeakPersonalizeSettingsChange ()
Let giReturnPositionFromFrameUpdate = 0
Let gICheckByActiveItem = FALSE
DocumentLoadedEvent ()
SayMessage (ot_JAWS_message,msgHello)
EndFunction

HTML Event Helpers

An HTML event helper function assists an HTML event that occurs in an HTML application. Based on the information the HTML event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of HTML Event helper functions include:

·         DocumentLoadedAtFormField

·         DoDefaultDocumentLoadActions

·         ProcessDocumentLoadAppAlerts

For a complete listing of HTML Event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the DocumentLoadedAtFormField function is overwritten in the Chrome.jss script source file from the function in default.jss. Before the default function is called, a nonsense message is added to speak and display in Braille under certain conditions to illustrate how DocumentLoadedEvent uses this helper function when a new Web page is loaded. It is assumed that the function is being compiled in the Chrome.jsb script binary file in your root folder of the JAWS user Settings\(language) folder.

Note: To avoid unpredictable results, never change the files located in any folder of the JAWS shared folder structure.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function DocumentLoadedAtFormField ()
Var
            Int iSubtype,
            String msgTestFormfield
msgTestFormfield = "I am a formfield."
Let iSubtype = GetObjectTypeCode()
If iSubtype == WT_EDIT
|| iSubtype == wt_Multiline_Edit
|| iSubtype == wt_PassWordEdit
|| iSubtype == wt_EditCombo
|| iSubtype == wt_ComboBox
|| iSubtype == wt_ListBox
|| iSubtype == wt_MultiSelect_ListBox
|| iSubtype == wt_ExtendedSelect_ListBox then
            SayMessage (ot_JAWS_Message,msgTestFormfield)
EndIf
Return Default::DocumentLoadedAtFormfield()
EndFunction

Keyboard Events

A Keyboard Event function provides information about PC keyboard or Braille display keyboard user interaction. The information may include key names, whether the key press is coming from a PC keyboard or from a Braille display, the key scan code, etc. JAWS uses this information for comparison purposes, and so on.

A key scan code is a number (or sequence of numbers) sent by a computer keyboard to the operating system on your computer. The scan code reports what key is being pressed. Each and every key on your keyboard, whether it is a standard PC keyboard, a fancy wireless keyboard, or a keyboard that is part of your Braille display is assigned a unique scan code.

Some examples of Keyboard Event functions include:

KeyPressedEvent

KeymapChangedEvent

QuickKeyNavigationModeChanged

For a complete listing of Keyboard Event functions, see the category book in the JAWS Reference Guide.

Code Sample

In the below code sample, the KeyPressedEvent function is overwritten for Notepad to announce the number of the key scan code of any key you press from the Notepad main edit window. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

This test can serve as a method to obtain the key scan code for a particular key so that you may utilize that scan code for comparison purposes in KeyPressedEvent or elsewhere. For example, you may place the key scan code information into a global variable and use that variable in some other function or in a script where you want JAWS to speak or display something in Braille.

Key scan codes can vary according to localization. So do not assume that any key code will be the same for all localizations. For example, for US English, the key scan code for ENTER is 28. But this may not be the case for other localizations.

Suppose you want JAWS to speak a special message when the ENTER key is pressed. First run the code sample to determine what the key scan code is for ENTER. For purposes of the example, we assume the standard US English key scan code set. so ENTER is 28. Assuming this, you can change the condition in the function (or in some other function or script) so that when the key is pressed, JAWS indicates your special message. This can be very useful when an application uses common keys in nonstandard ways, such as for a Call Center or other customized application.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Globals
            Int gbEnterKeyWasPressed
Void Function KeyPressedEvent (int nKey, string strKeyName, int nIsBrailleKey, int nIsScriptKey)
Var
            String msgEnter
msgEnter = "Hello, I am the Enter key."
KeyPressedEvent (nKey, strKeyName, nIsBrailleKey, nIsScriptKey)
If ! (DialogActive ()
|| MenusActive ()) ; Neither a dialog or a menu is active.
            If GetObjectSubtypeCode () == wt_Multiline_edit
                        SayInteger (nKey)
                        If nKey == Key_Enter ; 28
                                    SayMessage (ot_smart_Help, msgEnter)
                                    Let gbEnterKeyWasPressed = TRUE
                                    Return
                        EndIf
            EndIf
            Let gbEnterKeyWasPressed = FALSE
EndIf
Let gbEnterKeyWasPressed = FALSE
EndFunction

Additional Resources

For a complete discussion of the Freedom Scientific Scripting language support for keyboard management - including key maps, hook, and key layering functions, see Key Management.

For more details on working with key scan codes, refer to the Microsoft Developer Network in the section called Key Scan Codes.

Keyboard Event Helpers

A Keyboard Event helper function assists a Keyboard Event. Based on the information the Keyboard Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Keyboard Event helper functions include:

PreProcessKeyPressedEvent

ProcessHJDialogKeyPressed

ProcessKeyPressed

 

For a complete listing of Keyboard event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ProcessSpaceBarKeyPressed function is overwritten in the Notepad.jss script source file from the function in default.jss. Before the default function is called, a nonsense message is added to speak and display in Braille under certain conditions to illustrate how KeyPressedEvent uses this helper function.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function ProcessSpaceBarKeyPressed (Int nKey, String strKeyName, Int nIsBrailleKey, Int nIsScriptKey)
Var
            String msgSpaceBarKeyPressTest
msgSpaceBarKeyPressTest = "I am a checkbox and the %1 key was just pressed."
If DialogActive ()
&& GetObjectSubtypeCode () == wt_checkbox
            SayFormattedMessage (ot_help,FormatString(msgSpaceBarKeyPressTest,strKeyName))
EndIf
Return ProcessSpaceBarKeyPressed (nKey, strKeyName, nIsBrailleKey, nIsScriptKey)
EndFunction

Menu Events

A Menu event function provides information about any type of menu activity. The information may be for a menu in an application such as Notepad or Microsoft Word, but also for context menus in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a menu event function to determine what to speak and display. This includes whether a menu is being activated, which option is selected, or whether the menu is being deactivated. In this case, to display information refers to showing it in Braille.

An example of a Menu event function is MenuModeEvent. For a complete listing of Menu event functions, see the category book in the JAWS Reference Guide.

Code Sample

In the below code sample, the MenuModeEvent function is overwritten for Notepad to announce some information it does not indicate normally when a menu is activated or deactivated. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgInactive
I was a menu.
@@
@msgActive
I am an active menu.
@@
@msgMenuBar
I am a menu bar.
@@
EndMessages
Void Function MenuModeEvent (handle WinHandle, int mode)
MenuModeEvent (WinHandle, mode)
If Mode == Menu_Inactive
            SayMessage (ot_status, msgInactive)
ElIf Mode == Menu_Active
            SayMessage (ot_status,msgActive)
ElIf Mode == Menubar_Active
            SayMessage (ot_status,msgMenubar)
EndIf
EndFunction

Menu Event Helpers

A Menu event helper assists a Menu Event that may occur in any application or a feature of the Windows operating system. Based on the information the Menu Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Menu Event helper functions include:

·         ContextMenuProcessed

·         MenuActiveProcessed

·         MenuBarActiveProcessed

For a complete listing of Menu event helper functions, see the category book in the JAWS Reference Guide.

Code Sample

In the below code sample, the MenuActiveProcessed function is overwritten in the Notepad.jss script source file from the function in default.jss to announce extra information the function does not speak normally when MenuModeEvent fires. It is assumed that the function is being compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function MenuActiveProcessed (Int mode, Handle hWnd)
Var
            String sFirstOption
sFirstOption = "New"
If StringContains (GetObjectName (),sFirstOption)
            ;Speak the names of all the options in the menu.
            Say (GetWindowText (hWnd, FALSE), ot_line)
EndIf
Return MenuActiveProcessed (mode, hWnd)
EndFunction

Mouse Events

A Mouse event function provides information about any type of Mouse activity. The information may be for a Mouse in an application such as Notepad or Microsoft Word, Google Chrome, etc. But it might also be for more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Mouse event function to determine whether to speak and display whether a Mouse movement or activity is occurring. In this case, to display information refers to showing it in Braille.

Some examples of Mouse Event functions include:

·         MouseButtonEvent

·         MouseMovedEvent

For a complete listing of Mouse event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the MouseButtonEvent function is copied from the one in default.jss into a Notepad.jss script source file for JAWS to indicate some information it does not provide normally when you use a Mouse wheel.

Unlike most event functions overwritten from default.jss, there is no need to call MouseButtonEvent because the one in default.jss simply provides you with instructions about how to utilize the function. Basically, if you place any statements within the function in default.jss and recompile, whatever you have added to this event function is processed across the board in any application. By contrast, if you copy the function from default.jss into an application's script source file (e.g., Notepad.jss), whatever statements you include in the function are only processed when Notepad is running and has the focus.

 The "event Id" identifiers for each of the mouse activities that cause MouseButtonEvent to fire are listed in the file called HJConst.jsh that ships with JAWS.

 

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgMouseWheel
I am using the wheel on the mouse.
@@
@msgNoMouseWheel
I am using my mouse but not its wheel.
@@
EndMessages
Void Function MouseButtonEvent (Int eventID, Int x, Int y)
If EventId == WM_MOUSEWHEEL
            SayMessage (ot_smart_help, msgMouseWheel)
Else
            Pause () ; Avoid double-speaking the error message.
            SayMessage (ot_error, msgNoMouseWheel)
EndIf
EndFunction

Mouse Speech Events

A Mouse Speech event function provides information about any type of mouse activity that is spoken. The information may be for a mouse in an application such as Notepad or Microsoft Word, Google Chrome, etc. But it might also be for more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Mouse Speech event function to determine whether to speak and display whether a mouse movement or activity is occurring. In this case, to display information refers to showing it in Braille.

An example of a Mouse Speech event function is MouseSpeechTimerEvent. For a complete listing of functions related to Mouse Speech events, see the category book in the Reference Guide.

Object Model and MSAA Events

An Object Model and MSAA event function provides information about any object activity in the Object Model and MSAA architecture (object hierarchy) that the Freedom Scientific Scripting language supports. Object events are not limited to dialogs and menus. These events may include such activities as whether a dialog item change in a list or a state change in a checkbox has occurred, whether a main document window has gained focus, etc. JAWS uses the information from such an event function to determine whether to speak and display it. In this case, to display information refers to showing it in Braille.

Some examples of Object Model and MSAA event functions include:

·         ActiveItemChangedEvent

·         DescriptionChangedEvent

·         NameChangedEvent

·         ObjStateChangedEvent

For a complete listing of Object Model and MSAA event Functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ActiveItemChangedEvent function is overwritten for Notepad to announce some information it does not indicate normally when an item change occurs from user interaction in a dialog control that causes this event to fire. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function ActiveItemChangedEvent (handle curHwnd, int curObjectId, int curChildId,
            handle prevHwnd, int prevObjectId, int prevChildId)
Var
            String smsgCurrent
smsgCurrent = "This confirms that the current item is %1."
Say (FormatString(smsgCurrent,GetObjectName (curObjectId)),ot_line)
ActiveItemChangedEvent (curHwnd, curObjectId, curChildId, prevHwnd, prevObjectId, prevChildId)
EndFunction

Additional Resources

For more information on the types of Objects the Freedom Scientific Scripting language supports, see the General Scripting Concepts topic called Objects.

For more details on working with Object Model and MSAA in general, refer to the Microsoft Developer Network in the section called Microsoft Active Accessibility and UI Automation Compared (Windows).

Object Model and MSAA Event Helpers

An Object Model and MSAA Event helper function assists an Object Model and MSAA Event. such an event may occur in any application or a feature of the Windows operating system. Based on the information the Object Model and MSAA Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

An example of an Object Model and MSAA event helper function is HJDialogObjStateChangeSpoken. For a complete listing of Object Model and MSAA event functions, see the category book in the Reference Guide.

Additional Resources

For more information on the types of Objects the Freedom Scientific Scripting language supports, see the General Scripting Concepts topic called Objects.

For more details on working with Object Model and MSAA in general, refer to the Microsoft Developer Network in the section called Microsoft Active Accessibility and UI Automation Compared (Windows)

Optical Character Recognition Events

An Optical Character Recognition (OCR) event function provides information about OCR activities, such as whether recognition is valid or has completed. JAWS uses this information to determine whether to speak and display OCR information in Braille, for comparison purposes, etc.

Some examples of OCR event functions include:

OCRCompletedEvent

OCRDataInvalidatedEvent

For a complete listing of functions related to OCR events, see the category book in the Reference Guide.

Code Sample

In the below code sample, the OCRCompletedEvent function is overwritten in Notepad.jss from the function in default.jss. The overwritten function simply adds an extra message when an OCR activity is completed with a successful result. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply run an OCR script using the standard key layer assignments for OCR for the current window in Notepad. The key assignment is JAWSKey+SPACE followed by the letter "o", then by the letter "w".

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function OCRCompletedEvent (Int iJobID, Int iResult)
Var
            String smsgOCRTest
smsgOCRTest = "OCR completed successfully."
OCRCompletedEvent (iJobID, iResult)
If iResult
            SayMessage (ot_status, smsgOCRTest)
EndIf
EndFunction

SayAll Events

A SayAll event function provides information about SayAll activities that JAWS may have performed automatically or from user interaction. For example, a SayAll event may have started, stopped, or have been interrupted. JAWS uses this information to determine what to speak and display, whether to sstop speaking and move the Braille cursor to the point where the SayAll has stopped, etc. In this case, to display information refers to showing it in Braille.

SayAll event functions include:

·         SayAllStarted

·         SayAllStoppedEvent

For a complete listing of functions related to SayAll events, see these category books in the reference guide:

·         Screen Text

·         Voices.

Code Sample

In the below code sample, the SayAllStoppedEvent function is overwritten in the Notepad.jss script source file from the function in default.jss. Whenever a SayAll is stopped in Notepad, JAWS indicates in speech and in Braille a nonsense message that the SayAllStoppedEvent function fired. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

 

To set up the test, write several lines of text in a Notepad file. Then initiate a SayAll with the JAWSKey+DOWNARROW key combination. Allow SayAll to complete, or interrupt it by pressing CONTROL or some other key. Either way, SayAllStoppedEvent should fire and indicate the test message from the code in this sample, along with a beep.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function SayAllStoppedEvent ()
Var
            String smsgSayAllStatus
smsgSayAllStatus = "SayAll stopped."
SayAllStoppedEvent ()
Beep () ; Produce a system sound.
SayMessage (ot_status, smsgSayAllStatus)
EndFunction

Screen Text Events

A Screen Text event function provides information about any type of screen text activity. The information may be for a screen text event within an application such as Notepad or Microsoft Word, but also for a screen text event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Screen Text event function to determine what to speak and display. This includes whether new text is occurring, for example, and whether that new text should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

Some examples of Screen Text event functions include:

·         CaretMovedEvent - only triggers under certain types of edit windows

·         CellChangedEvent

·         NewTextEvent

For a complete listing of Screen Text event functions, see the category book in the Reference Guide.

Note that the function called SelectionContextChangedEvent is a Screen Text event, not a Selection event. This is because Selection events involve the process of selecting text or graphics, files, or folders, etc.; whereas, examining the context in which a selection has occurred is a screen text activity. For example, in Microsoft Word, you may select text in the main document window, of course. But you may also select text in a comment, a footnote, and endnote, revised text, and so on. Therefore, in that application, it is critical for JAWS to recognize the context in which the selection event is occurring in order to determine what exactly to speak and display in Braille relative to the selection. So Selection events and ScreenText events are closely tied together but are not the same events.

Labelled Graphics Passed to NewTextEvent

For many years, the scripting language had no functionality to detect whether a graphic changed in a window. Thus you could not script JAWS to detect automatically a graphic change, or to make a frame speak a graphic change indicating a change in the app.

Starting with the May 2017 release of JAWS 18, a JCF option became available to JAWS for controlling if graphics are also included in the NewTextEvent function. It is:
 

IncludeGraphicsInNewTextEvent=0

 Previously only text was included. This meant that a script could not detect changes in graphics in the OSM. By enabling this JCF option, you can now monitor changes in graphics via NewTextEvent. You can label graphics and then use NewTextEvent to monitor changes in the graphic.

 

Before this enhancement, for example, a graphic was used to indicate if the EchoLink Ham software was in transmit or receive mode. There was no other way of knowing other than via this graphic. Since graphics were not passed to NewTextEvent, JAWS could not provide any feedback when the application changed from tx to rx, etc.

Normally, graphics are not passed to NewTextEvent. Setting the IncludeGraphicsInNewTextEvent option to 1 allows changes in graphics to be passed to NewTextEvent, thus enableing scripts to detect changes in visible graphics automatically. Examples include:

Labelled graphics which indicate a change in status.

Frames used to speak changes in graphics automatically.

 

Code Sample

In the below code sample, the NewTextEvent function is overwritten for Notepad to announce how many characters are in the buffer when focus is in the document window. If the user types any text in the document window, NewTextEvent fires and announces the nonsense message. If the user performs some other activity that causes new text to appear (e.g., activating a menu or dialog), the nonsense message is not triggered. It is only triggered conditionally when focus is in the document window and text is typed or otherwise edited.

Take time to examine the function in default.jss. The NewTextEvent function is often responsible for suppressing extraneous information as well as for speaking it, depending on the type of information that causes NewTextEvent to fire in the first place.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function NewTextEvent (Handle hwnd, String buffer, Int nAttributes,
            Int nTextColor, Int nBackgroundColor, Int nEcho, String sFrameName)
Var
            String smsgBufferMessage
smsgBufferMessage = "The buffer now has %1 characters."
NewTextEvent (hwnd, buffer, nAttributes, nTextColor, nBackgroundColor, nEcho, sFrameName)
;Say the number of characters in the buffer but only if in the document window.
If GetObjectSubtypeCode () == wt_multiline_Edit
            SayFormattedMessage (ot_screen_message, FormatString (smsgBufferMessage,IntToString(StringLength(buffer))))
EndIf
EndFunction

Additional Resources

For more details on Selection events, see the topics under the Events topic area of the General Scripting Concepts book called Selection Events and Selection Event Helpers

Screen Text Event Helpers

A Screen Text event helper function assists a Screen Text event that may occur in any application or a feature of the Windows operating system. Based on the information the ScreenText Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Screen Text event helper functions include:

MonitorNewTextEventAlerts

NewTextEventShouldBeSilent

For a complete listing of Screen Text event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the NewTextEventShouldBeSilent function is overwritten in the Notepad.jss script source file from the function in default.jss to announce some debug statements the function does not indicate normally when the related NewTextEvent function fires. Notice that the function fires multiple times even though the debug statements are conditional. This is one reason this function is critical to ensuring that speaking text multiple times does not occur.

It is assumed that the function is being compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function NewTextEventShouldBeSilent (Handle hFocus, Handle hwnd, String buffer, Int nAttributes,
            Int nTextColor, Int nBackgroundColor, Int nEcho, String sFrameName)
Var
            Int iSubtype,
            String smsgFocus,
            String smsgHighlight
iSubtype = GetObjectSubtypeCode ()
smsgFocus = "The window with the focus is "
smsgHighlight = "the window with the highlight is "
If iSubtype == wt_editcombo
            ;The window with focus and the window with the highlighted text may not be the same.
            ; Use the debug statements here to check whether the window with focus and the window
            ;with the highlighted text are the same.
            say (smsgFocus + IntToString (hFocus), ot_line)
            say (smsgHighlight + IntToString (hwnd), ot_line)
            Return
EndIf
NewTextEventShouldBeSilent(hFocus, hwnd, buffer, nAttributes, nTextColor, nBackgroundColor, nEcho, sFrameName)
EndFunction

Scripts Events

A Scripts event function provides information about certain types of scripts activity. The information may be for a script event within an application such as Notepad or Microsoft Word, but also for a script event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Scripts event function to determine what to speak and display. In this case, to display information refers to showing it in Braille with respect to JAWS.

Some examples of Scripts event functions include:

·         Unknown

·         UserBufferActivatedEvent

·         UserBufferDeactivatedEvent

For a complete listing of functions related to Scripts events, see the category book in the Reference Guide.

Special Note:

The script process does not support recursion. A script or function may call a version of itself lower down in the script binary file stack, but not at the same level or at a higher level.

Code Sample

In the below code sample, the Unknown function is overwritten from the function in default.jss for Notepad to announce an Unknown function call made by a nonsense script. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that a nonsense script calls the function that is not written anywhere. theUnknown function Scripts event fires from the overwritten Unknown function to provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgUnknownFunction
This function is unknown. Check to see if you have misspelled its name or failed to write the function in your script source file where you are calling the function.
@@
EndMessages
Void Function Unknown (String TheName, Int IsScript, Optional Int IsDueToRecursion)
If StringContains (TheName, "CallMyFunction") != 0
            SayUsingVoice (VCTX_MESSAGE, TheName, OT_SPELL)
            SayMessage (ot_error, msgUnknownFunction)
            Return
EndIf
Unknown (TheName, IsScript, IsDueToRecursion)
EndFunction
Script MyScriptsEventTest ()
; Call a dummy function that is not declared or written anywhere in the screen reader's scripting code.
CallMyFunction ()
EndScript

Selection Events

A Selection event function provides information about any type of selection activity. The information may be for a selection event within an application such as Notepad or Microsoft Word, but also for a selection event in more general operating system features like Windows Explorer or the Start menu. A Selection event may even occur in a Web browser where a portion of the content of a Web page is selected for copying to the Clipboard. JAWS uses the information from a Selection event function to determine what to speak and display. This includes whether text is being selected or unselected, for example, and whether that activity should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

Some examples of Selection event functions include:

·         SelectionChangedEvent

·         TextSelectedEvent

For a complete listing of Selection event functions, see the category book in the Reference Guide.

Note that the function called SelectionContextChangedEvent is a Screen Text event, not a Selection event. This is because Selection events involve the process of selecting text or graphics, files, or folders, etc.; whereas, examining the context in which a selection has occurred is a screen text activity. For example, in Microsoft Word, you may select text in the main document window, of course. But you may also select text in a comment, a footnote, and endnote, revised text, and so on. Therefore, in that application, it is critical for JAWS to recognize the context in which the selection event is occurring in order to determine what exactly to speak and display in Braille relative to the selection. So Selection events and ScreenText events are closely tied together but are not the same events.

Code Sample

In the below code sample, the TextSelectedEvent function is overwritten for Notepad to say and spell the text that is currently selected when focus is in the document window. If the user selects any text that is more than a single character, TextSelectedEvent fires and announces the selected text as well as spells it. Otherwise, the default TextSelectedEvent function behaves normally.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply type some text in the Notepad document window and then begin selecting and unselecting it by different selection units - by character, word, etc.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function TextSelectedEvent (String strText, Int bUnSelecting, Optional Int bContainsSpeechMarkup)
TextSelectedEvent (strText, bUnSelecting, bContainsSpeechMarkup)
If GetObjectSubtypeCode () == wt_multiline_edit ; Focus is in the document window.
            If ! bUnselecting
            && StringLength (strText) > 1 ; Selected text is more than one character.
                        SayUsingVoice (vctx_message, strText, ot_spell)
            EndIf
EndIf
EndFunction

Additional Resources

For more details on ScreenText events, see the topics under the Events topic area of the General Scripting Concepts book called Screen Text Events and Screen Text Event Helpers.

Selection Event Helpers

A Selection event helper function assists a Selection event that may occur in any application or a feature of the Windows operating system. Based on the information the Selection Event helper function provides or returns, JAWS determines what to speak and display from the related event In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Selection event helper functions include:

·         ProcessSelectText

·         SayHighLightedText

 

For a complete listing of Selection event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the SayHighlightedText function is overwritten in the Notepad.jss script source file from the function in default.jss. The overwritten function spells the highlighted text in edit combo controls when the related NewTextEvent function fires.

It is assumed that the function is being compiled in the Notepad.jsb script binary file.

To set up the example, simply activate the Open or Save-As dialog in the Notepad application and start typing text in the Filename edit combo control.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Void Function SayHighLightedText (Handle hwnd, String buffer)
SayHighLightedText (hwnd, buffer)
If GetObjectSubtypeCode () == wt_editcombo
            SpellString (buffer)
EndIf
EndFunction

Settings Events

A Settings event function provides information about settings changes that occur automatically as applications are loaded and unloaded, or settings changes that occur by user interaction with the screen reader's user interface. JAWS uses this information to determine whether to speak and display something, depending on a setting change or a script configuration change. In this case, to display information refers to showing it in Braille.

Numerous scripts are assigned for handling settings changes through the Settings Center and Quick Settings user interface in JAWS.

Starting with JAWS 15, an example of a Settings event function is ConfigurationChangedEvent. For a complete listing of functions related to Settings events, see the category books in the Reference Guide called Settings Events and also Settings.

Windows Events

A Windows event function provides information about any type of changes that occur with respect to the windows hierarchy. The information may be for a windows event within an application such as Notepad or Microsoft Word, but also for a windows text event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Windows event function to determine what to speak and display. For example, this includes whether focus has changed and whether that focus change should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

 

The Freedom Scientific Scripting language supports many functions and events related to the windows structure and hierarchy. But a discussion of the windows architecture of the Windows operating system is outside the scope of the Freedom Scientific Developer Network.

Some examples of WindowsEvent functions include:

·         FocusChangedEventEx

·         ForegroundWindowChangedEvent

·         HelpBalloonEvent

For a complete listing of Windows event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the FocusChangedEventEx function is overwritten for Notepad to announce a debug statement JAWS does not indicate normally when focus changes.

Take time to examine this powerful function in default.jss. The FocusChangedEventEx function is responsible for suppressing extraneous information as well as for speaking it, depending on the type of activity that causes a focus change to occur.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply perform any activity in Notepad that changes the focus, such as activating a menu or a dialog, tabbing through the controls in a dialog, etc.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function FocusChangedEventEx (Handle hwndFocus, Int nObject, Int nChild,
            Handle hwndPrevFocus, Int nPrevObject, Int nPrevChild,
            Int nChangeDepth)
Var
            String smsgDepth
FocusChangedEventEx (hwndFocus, nObject, nChild, hwndPrevFocus, nPrevObject, nPrevChild, nChangeDepth)
sMsgDepth = "changed level is "
If nChangeDepth != 0
            SayMessage (ot_help, sMsgDepth + IntToString (nChangeDepth))
EndIf
EndFunction

Additional Resources

For a full discussion of the windows structure and how it is implemented by Microsoft, refer to the Microsoft Developer Network topic called ChildWindow Class (System.Windows.Controls).

Windows Event Helpers

A Windows event helper function assists a Windows event that may occur in any application or a feature of the Windows operating system. Based on the information the Windows event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Windows event helper functions include:

·         FocusChangedEvent

·         ProcessSayAppWindowOnFocusChange

·         HandleNoCurrentWindow

For a complete listing of Windows event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ProcessSayFocusWindowOnFocusChange function is overwritten in the Notepad.jss script source file from the function in default.jss to announce a debug statement the function does not indicate normally when the related FocusChangedEventEx function fires. In this case, the object subtype code is announced whenever focus changes in the Open or Save-As dialog.

It is assumed that the function is being compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Void Function ProcessSayFocusWindowOnFocusChange (String RealWindowName, Handle FocusWindow)
ProcessSayFocusWindowOnFocusChange (RealWindowName, FocusWindow)
If RealWindowName == "Open"
|| RealWindowName == "Save As"
            SayInteger (GetObjectSubtypeCode ())
EndIf
EndFunction

Keywords and Non-Required Keywords

The Freedom Scientific Scripting language supports the use of many keywords. But not all are required. Below is a listing of required and non-required keywords you may use in your scripts and functions.

Required Keywords

 The below list of required keywords are reserved for use by the Scripting language and cannot be used as variable names, function names, or script names. The list is broken out into areas of usage in level 3 headings and the keywords themselves in level 4 headings within the level 3 headings. Links direct you to relevant summary pages or overview pages for a more in-depth discussion of complex concepts.

 

·         Keywords for Functions and Scripts

·         Keywords for Control Flow

·         Keywords for Variables and Constants

·         Keywords for Compiler Directives

 

 

Keywords for Functions and Scripts

 The keywords in this section are for function and script code blocks. For more details on how to utilize Return statements, parameters, and function types, see Calling Scripts and Functions.

Function and EndFunction

Begins and terminates the definition of an individual function, whether it is a built-in, default, or user-defined function. Each function must begin and terminate with the keywords, Function and EndFunction.

When you use the Script Manager's "New Script" dialog to create a user-defined function, the Script Manager automatically places the keywords, Function and EndFunction into your file, separated by several blank lines for you to fill with your source code. But if you check the control in the dialog that refers to assigning a keystroke, the Script Manager automatically changes the keywords placed into your file to Script and EndScript. (See below.)

You may need to precede the Function keyword by the return type of the function. The name of the function is followed by a parameter list, whether those parameters are required or optional, and parameters that must be passed to the function by reference. The parameter list is enclosed in parentheses. For example a function might be called something like:

Void Function SpeakNames(String sMyName)

 

Script and EndScript

Begins and terminates the definition of an individual script, whether it is a default script or a user-defined script. Each script must begin and terminate with the keywords, Script and EndScript.

When you use the Script Manager's "New Script" dialog to create a user-defined script, the Script Manager automatically places the keywords, Script and EndScript, along with several blank lines into your file for you to fill in your source code. But if you uncheck the control in the dialog that refers to assigning a keystroke, the Script Manager automatically changes the keywords placed into your file to Function and EndFunction. (See above.)

The keyword, Script, must be followed by the name of the script and end with opening and closing parentheses. If using the Script manager "New Script" dialog, the Script manager automatically does this for you. Scripts can take parameters in a very specific format and manner, although most of the time they do not. For example, the following statement is valid:

Script MyTestScript ()

 But the following statement is in an invalid format for declaring a script or a function with parameters:

Script MyTestScript ("hello")

 

Return

Terminates execution of the script or function in which it appears. When used to return a particular value from within a function, add the information to be returned immediately after the Return keyword in the format the calling script or function expects. Doing so shifts control, along with any value, to the calling script or function.

Since a script cannot return values, using the Return keyword within a script terminates the script at the point the keyword is used.

For more details on how to utilize Return statements, see Return Statements.

Optional

Used to declare optional function parameters in a parameter list. All parameters you declare after the keyword, Optional, are assumed to be Optional parameters. For example, the following statement shows that the first parameter of the function is required when calling the function but the second is not:

Function SpeakNames (String sMyName, Optional Int iMyAccountNumber)

 

ByRef

 Used to declare that a parameter is to be passed by reference in a function. The following example shows that the parameter is to be passed by reference when the function is called rather than a copy being passed to the function when the function is called:

Function SpeakNames (String ByRef sMyName)

 

It is possible to list parameters such that some are passed by reference and some are not, regardless of whether the parameters are required or optional. The following example shows that a copy of the string is passed to the function, but the account number is passed by reference when the function is called:  Function SpeakNames (String sMyName, Int ByRef iAccountNumber)

Back to list of Required Keywords for Functions and Scripts
 

Keywords for Control Flow

For more details on working with conditional statement structures and looping functions, see the following:

 

Control Flow

Conditional statement Structures

Looping Functions

If, ElIf, Else, and EndIf

Used to create one form of a conditional control-flow code statement structure. The keywords, If and EndIf, are required to begin and terminate the statement structure. But unless more than one condition is being tested, ElIf, and Else are not necessary for an If-EndIf statement structure to be processed. The keyword, Then, is optional. (See the section on Non-Required Keywords below).

The ElIf keyword is an optional part of an If-EndIf statement structure. It allows you to create a second conditional branch in an If-EndIf statement structure. As with the If condition in the first branch, when the ElIf condition evaluates to true, the screen reader performs any statements following it.

The Else keyword is an optional part of an If-EndIf statement structure. It allows you to create another conditional branch that is processed only when any preceding conditions in theIf-EndIf statement structure have evaluated to false.

A completely formulated If-EndIf statement structure looks like the following sample:

If (My condition1) then
            ; process Statements
ElIf (My next condition) then
            ; process statements
; further ElIf conditions if needed...
            ;process statements for each ElIf condition
Else
            ; process statement when all above conditions are false.
EndIf

 

For, To, Descending, EndFor

The keyword, For, begins the For loop statement structure, and the keyword, EndFor, terminates the block. The keyword, To, is required. But the keyword, Descending, is required only to iterate in descending order.

Following the keyword, For, in the For loop statement block, you must have a statement that dictates how many times the loop should execute. As long as the condition in the For part of the statement block evaluates to TRUE, the loop continues processing any statements placed within the loop. When the condition becomes FALSE, the loop terminates. But the loop statement block must terminate with the keyword, EndFor, in order to compile properly.

ForEach, In, EndForEach

The keyword, ForEach, begins the ForEach loop statement structure, and the keyword, EndForEach terminates the statement block. The keyword, In, specifies which structure to process.

Following the keyword, ForEach, you must have a statement that dictates the structure whose items are to be processed. Any statements placed within the loop are processed for every item in the structure named in the ForEach part of the statement. The loop statement structure must terminate with the EndForEach keyword in order to compile properly.

While-EndWhile

Begins and terminates the While loop statement structure. A While loop must begin and terminate with the keywords, While and EndWhile.

The While keyword begins the While loop statement structure. It must be followed by a conditional statement that is evaluated each time the loop is repeated. As long as the condition in the While statement structure evaluates to true, the loop continues processing any statements placed within the loop. When the condition becomes false, the loop terminates. But the loop statement structure must terminate with the EndWhile keyword in order to compile properly.

 Back to list of Required Keywords for Control Flow 

Keywords for Variables and Constants

For more details on working with variables and constants, see the following:

 

·         Variables and Constants

·         Constants.

·         Non-aggregate Variables.

·         Collections

·         Arrays

Const

Begins a declaration section of constant values. All constant declarations follow on subsequent lines, each ending with a comma except for the last one.

The Const keyword and its declarations must appear outside of any individual script or function. Constant declarations are typically located at the top of a script source file or within a screen reader script header file.

Globals

Begins a declaration section of global variables. All global variable declarations follow on subsequent lines, each ending with a comma except for the last one.

The Globals keyword must appear outside of any individual script or function. Global variable declarations are typically located at the top of a script source file or within a screen reader script header file.

Var

Begins a declaration section of local variables. All local variable declarations follow on subsequent lines, each ending with a comma except for the last one.

The Var keyword must appear within an individual script or function where local variables are declared. The first line of a script or function usually contains the Var keyword, followed by at least one local variable declaration since local variables must be declared before they can be used.

Handle

Begins the definition of a handle variable type. The name of the variable follows: for example, Handle hwnd.

Int

Begins the definition of an integer variable type. The name of the variable follows: for example, Int iMyAccountNumber.

Object

Begins the definition of an object variable type. The name of the variable follows: for example, Object oMyObject.

String

Begins the definition of a string variable type. The name of the variable follows: for example, String sMyName.

Variant

Begins the definition of a variant variable type. The name of the variable follows: for example, Variant vMyVariant.

Keywords for Aggregate Variable Types

 The following keywords apply specifically to aggregate variable types. They include:

·         Collection

·         New

·         IntArray

·         StringArray

·         HandleArray

·         ObjectArray

·         VariantArray

 

Keywords for Compiler Directives

 The following are keywords for compiler directives. For more details on their usage, see Compiler Directives.

·         Include

·         Use

·         Import

·         #Pragma StringComparison

·         Prototype

·         ScriptFile

·         ScriptFileVersion

 Back to list of Required Keywords for Compiler Directives
 

Non-Required Keywords

The below list contains a few keywords that are no longer required but often make readability easier.

Then

Follows the condition being evaluated in either an If statement or and ElIf statement. For example the following two statements are evaluated in the same manner:

If (MyCondition) then
If (MyCondition)

Not

Reverses the condition of a statement that evaluates conditions in an If-EndIf statement structure. The keyword is placed between the keyword that begins an evaluation statement and the condition being evaluated.

The Not keyword is often replaced by the exclamation (!) operator, which is processed in the same manner when compiled. for example, the following two statements are evaluated in the same manner:

If Not (MyCondition)
If !(MyCondition)

Let

Begins the assignment of a variable to a value. The variable name followed by a single equals (=) sign followed by the value completes the statement. If the variable type is a string, the value must be enclosed in quotation marks.

For example, the following two statements are evaluated in the same manner:

Let sMyWorkplace = "Freedom Scientific"
sMyWorkplace = "Freedom Scientific"
and
let iMyAccountNumber = 12345
iMyAccountNumber = 12345

Void

Used to declare a function type as returning no value when returning to a calling script or function. A function that is declared as being of a type like Integer or String returns a value of that type to the calling script or function. If a function is not declared to be of any specific type, it is assumed to be of type Void.

Compiler Directives

The Freedom Scientific Scripting language supports the use of several compiler directives to facilitate how files are compiled and utilized at run-time. Compiler directives employ specific keywords and are as follows:

Include

Use

Import

Prototype

;#Pragma StringComparison

;#Pragma UsePoFile

ScriptFileVersion and ScriptFile

Include Statement

Adds the contents of a JAWS script header or message file to a script source file when compiled. This also means that such a file can be "included" in multiple source files.

For more information about variable, constant, and message header files that may be added to a script source file through the Include statement, see Variables and Constants.

For more details on the usage and syntax of the Include statement, see Include Directive.

Use Statement

Creates a link between the binary version of one script source file with the binary of another . the resulting linkage between the two binary files allows JAWS to call functions from the binary file in the Use statement as if those functions had been part of the original script source file where the Use statement appears.

For example, the statement, Use "UIA.jsb", is in the JAWS default script source file, default.jss. Along with several other Use statements, this statement is located near the top of the file after all the Include statements. The Use "UIA.jsb" statement tells JAWS to create a link between the compiled JAWS default script binary file, Default.jsb, and the UIA.jsb binary file. The resulting linkage between these two binary files allows the JAWS default binary file to make function calls from the UIA.jsb file as if those functions had been created in the JAWS default script source file or were part of the JAWS built-in functions.

For more details on the usage and syntax of the Use statement, see Use Directive.

Import Statement

Directs the compiler to refer to the script and/or function definitions in a script documentation file (.jsd) when compiled. Actually, both use and import statements make the definitions in a .jsd documentation available at compile time. The difference is that the Use statement links the binary files while the Import statement does not link them. In other words, the Import statement makes the actual script and function definitions from a specified script documentation file available to the compiler during compilation. But the binary files are not linked. Therefore, function types and parameter definitions from that script documentation file are processed when compiled.

Linking a script binary file more than once in multiple source files for the same script set may cause problems at run-time. If you have a script set that requires function definitions from a binary file at run-time other than the file you are compiling, and if the compiler needs access to the function definitions in the script documentation file associated with that binary file so that it can compile, employ the Import statement instead of the Use statement. In this way, you are directing the compiler to access the script and function definitions in the script documentation file instead of linking the binary file more than once.

For more details on the usage and syntax of the Import statement, see Import Directive.

Prototype Statement

Used in lieu of the Import statement to add a particular function definition from a script documentation (.jsd) file to a script source (jss) file. When the function definitions from the entire file are not needed, the Prototype statement omits the need for the entire script documentation file to be imported.

The Prototype statement is added outside of any script or function, as long as it precedes the location in the script source file where you call the function.

For more details on the usage and syntax of the Prototype directive, see Prototype Directive.

;#Pragma StringComparison Statement

Used to determine how string comparisons with the == and != operators should be processed by the compiler. The ;#Pragma statement must be followed either by the keywords, StringComparison full, or the keywords, StringComparison partial. Place the statements outside of any script or function code in a script source file.

Since JAWS 13, all string comparisons using the == and != operators behave as if the ;#Pragma StringComparison functionality were set to full. This is default behavior. But prior to JAWS 13, string comparisons were processed such that the comparison ended when the shorter of the two strings matched the longer of the two.

The scripter may direct the compiler as to how to process string comparisons: ;#Pragma StringComparison set to full or set to partial. If set to full, succeeding string comparisons using the == and != operators ensure that the compiler processes string comparisons fully regardless of which is shorter. If set to partial, the compiler processes string comparisons using the older method used in versions of JAWS prior to JAWS 13.

For more details on the usage and syntax of the ";#Pragma StringComparison" statement, see ;#Pragma StringComparison Directive.

;#Pragma UsePoFile Statement

Used to determine whether a script source file should be processed by the compiler to be backwards-compatible to versions of JAWS prior to 17. This specially formatted comment statement must reside outside of any script or function in the source .jss file. You only need to add the statement at all when you are creating or editing a script source file with JAWS 17 or later, and you need that script to work properly in a version of JAWS older than JAWS 17.

For more details on the usage and syntax of the ";#Pragma UsePoFile" statement, see ;#Pragma UsePoFile Directive.

ScriptFileVersion and ScriptFile

Used to version-lock the script source file to a specific version of the product. For more details on the usage and syntax of the "ScriptFileVersion" and "ScriptFile" statements, see ScriptFileVersion and ScriptFile Directives.

Keyword: Use

Description

The Use keyword directs the compiler to link code from one script binary (.jsb) file to another during compilation of the script source file where the statement is added. In other words, when the scripts run, all the code in the binary file processed by the compiler is from both the script source file and from the script binary file linked to that script source file by the Use statement.

A Use keyword must be followed by a binary script file name and its extension enclosed in quotes.

Syntax

 Use "filename"

Filename is the name of the script binary file loaded at run-time along with the script binary file being generated during compilation of the script source file where the Use statement is added.

Remarks

The binary file specified in the Use statement need not exist at the time the scripts are compiled, but it must exist at the time that the scripts run. If the binary file does not exist at runtime, JAWS displays an error message that the file could not be loaded.

The compiler loads the script and function definitions in the script documentation file associated with the script binary file specified in the Use statement, and refers to these definitions during compilation when performing type and parameter checking.

Linking a script binary file more than once may cause problems at run-time. If your script set requires a script binary file at runtime, and if the compiler needs access to the function definitions in its associated script documentation file when compiling multiple source files, employ the Import statement to direct the compiler to access the script documentation file instead of linking the script binary file more than once with the use statement.

Since JAWS 14, the Use statement grants the ability to overwrite selective scripts and/or functions in script files distributed with the product's release. If the Use statement specifies a script binary file by the same name as the binary file name of the current file, JAWS links the script binary file from the shared settings folder. Doing so means that a script binary file in the user settings folder may contain selected scripts and functions that are actually overwritten versions of the ones in the script binary file in the shared settings folder.

Since JAWS 18, JAWS offers the ability to migrate script sets from JAWS 17 and later with caution. If a script binary in the JAWS 17 User\Settings\(Language) folder links to the one in shared via the Use statement, then it is considered to be a valid script set; it is available for migrating forward. This is because, apart from the functionality you may add/ or override in the script set, the rest of the shared functionality is still active. Consequently, if a JAWS 18 or later shared script binary has new functionality, it is active and valid with the old user script binary because it links to it. If any new functionality in JAWS 18 or later were not to link, that new functionality would be lost by migrating the older script set, leading to unpredictable behavior.

Keyword: Import

Description

The Import keyword directs the compiler to refer to the script and/or function definitions in a script documentation (.jsd) file during compilation.

An Import keyword must be followed by a script definition filename and extension enclosed in quotes.

Syntax

 Import "filename"

Filename is the name of a script documentation file containing script and/or function definitions to be accessed by the compiler as the script source file is being compiled.

Remarks

The compiler loads the script and function definitions in the script documentation file specified in the Import statement, and refers to these definitions during compilation when performing type and parameter checking.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to the function definitions in the script documentation file when compiling more than one script source file, employ the Import statement to direct the compiler to access the script documentation definitions instead of linking the script binary file more than once with the Use statement.

Keyword: Prototype

Description

The Prototype keyword directs the compiler to refer to a specific function definition from a script documentation (.jsd) file during compilation.

A Prototype keyword must be followed by a function definition, including its return type, and the parameters the function expects.

Syntax

 Prototype "function type" "the keyword, Function" "function name" ("parameter type" "parameter name", ...)
 

Function type is the return type of the function being defined (e.g., Int for an Integer function, String for a String function, etc.)

The keyword, "Function", must follow the function return type.

Function name is the name of the function being defined.

The parameters for the function being defined must be enclosed in parentheses.

Each parameter type and its name must be defined, with each one separated by commas except for the last one.)

Code Sample

 Prototype String Function SpeakNames (String sMyName, Int iMyAccountNumber)
 

Remarks

Each Prototype statement must precede any call to that function in the current script source file. The compiler loads the function definition in the script source file specified by the Prototype statement, and refers to that function definition during compilation when performing type and parameter checking.

Unlike some programming languages, the Freedom Scientific Scripting language requires that variable parameter types be defined as well as their names when a function definition is defined with the Prototype statement.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to one or just to a few function definitions in a script documentation file, employ the Prototype statement to direct the compiler to access just the needed function definition(s) instead of directing it to access the entire script documentation definitions file through the Import statement.

Keyword: ;#Pragma StringComparison

Description

The ;#Pragma StringComparison directive is used to determine how string comparisons with the == and != operators should be processed by the compiler. A ;#Pragma statement must be followed either by the keywords, "StringComparison full" or "StringComparison partial" without quotation marks. Place the statements outside of any script or function code in a script source file.

Syntax

;#Pragma StringComparison Full
Or
;#Pragma StringComparison Partial

·         The semicolon and number sign (;#) are the first two characters of the keyword, ;#Pragma.

·         ;#Pragma StringComparison Full directs the compiler to process any string comparisons with the == and != operator fully.

·         ;#Pragma StringComparison Partial directs the compiler to process any string comparisons with the == and != operators only until the shorter of the two strings is matched.

Code Samples

Set to Full

;#Pragma StringComparison Full
Script TestStrings()
Var
            String sMyName,
            String sYourName,
            String sMsgMatch,
            String sMsgNoMatch
let sMyName="Mary Smith"
let sYourName = "Mary Smith-Jones"
let sMsgMatch = "Found it!"
let sMsgNoMatch = "Not found"
If sMyName == sYourName then
            SayMessage(ot_JAWS_message,sMsgMatch) ; should not work with ;#Pragma StringComparison set to Full
else
            SayMessage(ot_JAWS_message,sMsgNoMatch) ; should work because ;#Pragma StringComparison set to Full
EndIf
EndScript

 

Set to Partial

;#Pragma StringComparison Partial
Script TestStrings()
Var
            String sMyName,
            String sYourName,
            String sMsgMatch,
            String sMsgNoMatch
let sMyName="Mary Smith"
let sYourName = "Mary Smith-Jones"
let sMsgMatch = "Found it!"
let sMsgNoMatch = "Not found"
If sMyName == sYourName then
            SayMessage(ot_JAWS_message,sMsgMatch) ; should work with ;#Pragma StringComparison set to Partial
else
            SayMessage(ot_JAWS_message,sMsgNoMatch) ; should not work because ;#Pragma StringComparison set to Partial
EndIf
EndScript

 

Remarks

Since JAWS 13, all string comparisons using the == and != operators behave as if the ;#Pragma StringComparison functionality were set to full. This is default behavior. But prior to JAWS 13, string comparisons were processed such that the comparison ended when the shorter of the two strings matched the longer of the two.

The scripter may direct the compiler as to how to process string comparisons: ;#Pragma StringComparison set to full or set to partial. If set to full, succeeding string comparisons using the == and != operators ensure that the compiler processes string comparisons fully regardless of which is shorter. If set to partial, the compiler processes string comparisons using the older method used in versions prior to JAWS 13.

Keyword: ;#Pragma UsePoFile

Description

You may have customized scripts prior to JAWS 17 that you wish to add to the current version of JAWS and/or that you need to customize further in JAWS 17 or later. To do this, you need to use a special ";#Pragma" comment in your script source file.

Note: The comment should not be inside a specific script or function.

A scripting language pragma is a specially formatted comment that begins with ";#pragma." The pragma comment introduced in JAWS 17 is usePoFile. This comment may be used to specialize whether or not insPushLocalizedString instructions are inserted by the compiler. The supported values are as follows:

·         0, false, no, off: Do not insert the localization instructions.<

·         1, true, yes, on: Insert the localization instructions. This is the default if the usePOFile pragma is not used.

 

Thus, when the following line is found in the script source .jss file, the script compiler will not insert the localization instructions, and therefore the compiled script binary .jsb file will be backwards-compatible.

;#pragma usePoFile 0 ; Do not use localization instructions.

 

On the other hand, when you use the following comment, you ensure that JAWS 17 localization instructions are honored.

;#pragma usePoFile 1 ; Use localization instructions.

 

To be clear, the only time you need to use this special comment is when you need scripts to be backwards-compatible and also you need another set to honor JAWS 17 localization instructions. If all you need are scripts for JAWS 17 and later, you can just compile in the usual way without the need for the ;#Pragma comment at all.

Keywords: ScriptFileVersion and ScriptFile

Description

The ScriptFileVersion and ScriptFile statements direct the compiler to lock the version of the script source file to a specific version of the product.

Syntax

ScriptFileVersion Number
 Number is the only version of JAWS where the scripts should run.

ScriptFile "filename"
 Filename is the script source and associated binary files that should run exclusively in the specific version of JAWS referred to by the number in the ScriptFileVersion statement.

The following example statements ensure that the only default.jss and its associated default.jsb that run in JAWS 2020 are only those files that contain these statements. If you replaced these files with another default.jss and default.jsb - say from a prior version of JAWS, those files wil not work in JAWS 2020.

ScriptFileVersion 2020
ScriptFile "Freedom Scientific Default Script"

Remarks

Do not employ either of the directivs referred to above unless you are very certain that the script set should be run only in that version of JAWS.

Key management

The Freedom Scientific Scripting language offers numerous methods for controlling JAWS behavior through your scripts. For more information on working with the various methods, see the following:

·         Key Map Files

·         Hooks

·         Key Layers

Hooks

You may utilize hooks in your scripts. An example of a hook you may use often without realizing that it is a hook occurs whenever you instruct JAWS to spell each word or pronounce each character phonetically as you navigate by word or character until you press a different key.

Whenever you add a hook, you must also remove it. Otherwise, JAWS cannot determine when to remove the hook.

For a complete list of hook types, see the HJConst.JSH header file that ships with JAWS.

Using Default Hooks

Although you may certainly create your own, you may use any of the default hook functions in your scripts. Some of the hook functions include:

·         KeyboardHelpHook

·         PhoneticSpellHook

·         SpellWordHook

·         CharacterValueHook

A Hook function returns an integer value of TRUE for the hook function if the script is allowed to execute, or it returns an integer value of FALSE for the hook function if the script is not allowed to execute.

AddHook

Description

This function installs a hook function. When a hook of type script is in place, it is called right before every script is run, and it is passed the name of the script that activates the hook. If the script is attached to a frame, the frame name is also passed to the hook function.

Syntax

AddHook (HookType, FunctionName)

·         HookType is an integer value representing The type of hook to be installed. For example, use HK_SCRIPT for a script type hook, or HK_EVENT_TRACE for an event trace hook.

·         FunctionName is a string of characters enclosed in quotation marks or a variable containing the name of a function to be installed as a hook.

RemoveHook

 

Description

This function removes a hook function put in place by AddHook.

Syntax

RemoveHook (HookType, FunctionName)

·         HookType is an integer value representing the type of hook to be removed. You must use the same hook type that you used in the AddHook for this parameter.

·         FunctionName is a string enclosed in quotation marks or a variable containing the name of the function to be removed as a hook.

Code Sample

The below code sample assigns the two nonsense scripts to the left and right arrow keys. If the left or right arrow keys are pressed two or more times quickly, the character under the cursor is announced, followed by the word, "hello". Pressing any other key removes the nonsense hook. the nonsense hook is performed by the user-defined nonsense function called "MyHook".

Int Function MyHook (String ScriptName)
If ScriptName == "MyHookTestForward" then
            SayMessage (ot_message,"hello")
            NextCharacter()
            SayCharacter()
            Return False
EndIf
If ScriptName == "MyHookTestBackward" then
            SayMessage (ot_message,"hello")
            PriorCharacter()
            SayCharacter()
            Return False
EndIf
RemoveHook (HK_SCRIPT, "MyHook")
Return TRUE
EndFunction
Script MyHookTestForward ()
If IsSameScript () >= 2
            AddHook (hk_Script,"MyHook")
            Return
EndIf
PerformScript SayNextCharacter()
EndScript
Script MyHookTestBackward ()
If IsSameScript () >= 2
            AddHook (hk_Script,"MyHook")
            Return
EndIf
PerformScript SayPriorCharacter ()
EndScript

Key Layers

A key layer makes it possible to expand the number of keys you may assign to run scripts. It is a mechanism that lets you assign an initial key to activate a group of mapped key assignments. The keys in the layer do not take on the behavior for the layer until the user activates the layer by pressing the initial key in the sequence.

In JAWS, you may choose whether to set assigned keys in the layer to keep the layer active. So if you set keys in a layer not to keep the layer active, it means that the entire key sequence must be used for each key in the layer to perform the script assigned to the keys in the layer. On the other hand, if you set keys in the layer to keep the layer active, it means that the layer remains active after the first key in the layer is used until one of two things occur:

·         a key specifically set to deactivate the layer is pressed.

·         a key not assigned to anything in the layer is pressed.

As long as a key layer is active, only the final key in the sequence need be pressed in order to run the script assigned to it.

A key layer may consist of keys set to keep the layer active, keys not set to keep the layer active, or a combination of both. And, a key layer may contain keys set to activate an additional nested layer. If you set a key in a nested layer not to keep the key layer active, all layers are deactivated after the key is pressed. All layers are also deactivated if a key is pressed that is not assigned in the nested layer.

You create key layers by using a special syntax in the JKM file when assigning a key to a script, and you must use a text editor like Script Manager to edit the JKM file manually.

Syntax

 

InitialKey&SecondaryKey=ScriptToRun
InitialKey&SecondaryKey*=ScriptToRun
InitialKey&SecondaryKey&TertiaryKey=ScriptToRun
InitialKey&SecondaryKey&TertiaryKey*=ScriptToRun

 

InitialKey is the key or key combination assignment to activate the key layer. It is the first key in the sequence to be pressed.

SecondaryKey is the key or key combination assignment inside the layer. It is the second key in the sequence to be pressed.

TertiaryKey is the key or key combination assignment inside a nested layer. It is the third key in the sequence to be pressed. The second key activated the nested layer inside the first layer.

ScriptToRun is the name of the script assigned to the entire key sequence.

Remarks

Use the ampersand to separate key assignments and create the layer. The key mapping preceding the first ampersand is the initial key that activates the layer. The key mapping following the ampersand is the key inside the layer. Use a third or fourth ampersand to create a nested layer. The nesting limit is four.

Use the asterisk to set the initial key to keep the layer active. If you use the asterisk, it must be the final character in the key mapping.

The KeyMapChangedEvent function fires for each key pressed. You can use this event to code key layer behavior, including playing a sound when a layer is deactivated. For more details on working with events, see Events.

Code Sample

In the below code sample, we first show two key assignments for a nonsense set of scripts that simply announce that they are layered key sequences. In other words, you cannot activate either script other than by the layered sequence. It is assumed that Notepad is the application in use.

The Notepad file shows the following two key assignments:

[Desktop Keys]
Control+j&N&1*=MyLayerTest1
Control+j&N&2*=MyLayerTest2

The below code shows an overwritten KeyMapChangedEvent function that speaks the statement when the first key that starts the layer is followed by the correct test layer key. Then the two nonsense scripts show simply the code that speaks what keys have been pressed in the sequences.

So to run this test code, you first have to press Ctrl+j. When you follow this key by the letter n, KeyMapChangedEvent speaks the text that it is waiting for a layer key to be pressed. As long as you press the letter "n", you may then press either 1 or 2 to cause the scripts in the layer to run. You may continue to press the numbers 1 and 2 repeatedly because the key assignments for this layer test have the asterisk at the end of each assignment. If however you press any key other than a 1 or a 2, the layer exits and you return to normal functionality.

Const
            ks_MyTestLayerKey = "Control",
            KeyLayer_myTest = "N"
Messages
@msgWaitingForLayerKey
Please press a layer key.
@@
@msgLayerTestKey
My layer key name is %1 followed by %2, and my current key name is %3.
@@
EndMessages
Void Function KeymapChangedEvent (int iKeyCode, string sKeyName, int iKeyStatus)
If iKeyStatus == KeySequencePending then
            If StringCompare (sKeyName,KeyLayer_myTest) == 0
                        SayMessage(ot_help,msgWaitingForLayerKey)
            EndIf
EndIf
KeymapChangedEvent(iKeyCode, sKeyName, iKeyStatus)
EndFunction
Script MyLayerTest1 ()
SayFormattedMessage (ot_JAWS_message,
            FormatString (msgLayerTestKey, ks_MyTestLayerKey,KeyLayer_MyTest,GetCurrentScriptKeyName()))
EndScript
Script MyLayerTest2 ()
SayFormattedMessage (ot_JAWS_message,
            FormatString (msgLayerTestKey, ks_MyTestLayerKey,KeyLayer_MyTest,GetCurrentScriptKeyName()))
EndScript

Key Map Files

Key Map (.jkm) files contain a list of keystrokes assigned to JAWS scripts. Below are a listing of the major sections that you may include in a key map file with a brief explanation of the types of entries each section may contain. Not every key map file need contain all the sections discussed below. But all key map sections must refer to a particular section in order that key map entries be honored.

New sections may be added to a key map file such as the default.jkm file that ship with JAWS when new types of functionality and features are included. So the below discussion may not include all the sections that are currently in the JAWS version you are using. The list of sections described here is a comprehensive, not all-inclusive, list.

If you need to disable a key manually from a key map file, you must delete everything after the equals sign (=) on the line where the key is defined. This is true regardless of what section contains the entry where the key is defined. Always save such a modified file in your User\Settings\(language) folder.

Keyboard Layouts

A keyboard layout is a set of keystroke assignments designed to provide the best fit for the design of a hardware keyboard. They include:

·         Desktop (default)

·         Laptop

·         Classic Laptop

·         Kinesis

·         MAGic keyboard

You may switch to a keyboard layout other than the default Desktop layout through the JAWS user interface. Find the "Use Keyboard Layout" combo box in the "Basics" dialog under the "Options" menu of the JAWS main window.

Each keyboard layout has a corresponding section in the key map file. In addition, the "common keys" section contains entries used by all the keyboard layouts. You should add most new keystroke entries to this section.

Braille Keys

Many common Braille displays have sections in the Default.JKM file. Section names refer to Braille display short names, which are noted for each installed Braille display in JFW.INI.

Braille displays often have keys that must be assigned to JAWS scripts. Entries for Braille displays must be in the form of the word, "Braille" followed typically by the word "Dots", followed by a dot pattern for that display's unique keystroke assignments. However, where a dot pattern is not needed or is only part of the key assignment, you may use other keywords. These include words like, "Wheel", "Shift1"/"Shift2", "Advance1"/"Advance2", and so on. It depends on the keys that exist for that particular display.

Some examples of entries for the Freedom Scientific line of Focus® Braille displays include:

Braille Dot45 Chord=Tab

Braille Dots 1 2 5 6 Chord=TouchCursor

Braille Dots 1 2 4 5 6 Chord=SayAll

Braille Advance2=BraillePanRight

As mentioned above, each entry for a Braille keystroke assignment must begin with the word "Braille". The exact names of the Braille function keys vary from manufacturer to manufacturer. For reference, when a key is pressed on a Braille display while Keyboard Help is enabled, the JAWS keyboard help announces the key name and what the key does on the Braille display just as it announces the key names on a standard keyboard.

Virtual Keys

Use the virtual keys section of a key map file to specify those keyboard commands available only when the JAWS Virtual cursor is active. For more information on working with virtual cursors and virtual environments in general, see Implementing a Virtual Viewer Window.

Quick Navigation Keys

Typically, the keystrokes for JAWS commands assigned to scripts consist of a modifier key like the INSERT key plus an alphanumeric key or a navigation key like UpArrow. However, when assigning keystrokes to scripts for navigating a virtual window where alphanumeric characters have no native functionality, you may simply assign single keystrokes (referred to as "Quick keys") to JAWS commands mnemonically. An HTML window is an example of a window that JAWS usually virtualizes.

Place quick key assignments in the "Quick Navigation Keys" section of a key map file. Note that Quick keys are disabled when JAWS enters forms mode.

Quick Navigation Keys Manager Data

Use this section to populate the list view in the JAWS user interface for the Quick Navigation Keys Manager. The format of each item must be as follows without the quotation marks used here for readability:
 "Name of forward movement script"|"Name of backwards movement script"="Text to be displayed in the column 0 of the list view"

Note: The "Text to be displayed in column 0 of the list view" is localizable.

SayAll Keys

Keyboard commands placed in the "SayAll Keys" section of a key map file function while JAWS is speaking as a result of a SayAll command. Keystrokes specified in this section override standard keystrokes while JAWS is reading. Examples include the right and left arrow keys to fast forward and rewind through text as well as the PageUp and PageDown keys to decrease and increase speech rate.

The JAWS Key

The JAWS key serves as a movable modifier key for the JAWS commands. Like other modifier keys, you must use this key in combination with other keys. To include a JAWS modifier key, add the word "JAWSKey" to any key map entry. Set the JAWSKey to the Insert, CapsLock, or ScrollLock key in the JAWS user interface. Use the Settings Center option called "Keyboard" for this purpose.

Touch and Object Navigation

Since JAWS 15, the default.jkm file contains sections specifically for the Windows 8 and above Touch and Object Navigation features. Unlike other sections whose entries are typically a keystroke combination or sequence, or a Braille dot pattern, entries in the Touch section of a key map file are written as a number of fingers plus a gesture that JAWS supports. For example,
 TwoFingers+FlickDown=TouchSayAll.
 For more information on working with Touch and Object Navigation scripts and functions, see the summary and category book in the Functions book of the Reference Guide called Touch Navigation.

Key Names

This section has entries that show the names used to designate keys. The JAWS default.jkm file has an extensive list of entries in this section. Key names are not case-sensitive. They include the Insert, CapsLock, ScrollLock, and NumPad keys, for example. For a complete current listing, see the JAWS default.jkm file.

Modifiers

This section in the default.jkm file contains the entries that define the modifier keys JAWS may use in conjunction with other keys. Modifier keys include the Control and Alt keys, for example.

Creating custom key map overlays

Since JAWS 15, you can define your own key map section and load or unload it using script calls to the functions, LoadKeymapSection and UnloadKeymapSection. If a key map is loaded by calling LoadKeyMapSection, the key map remains loaded until it is unloaded by calling UnloadKeymapSection, or until the configuration changes - whichever happens first. The name of a key map to load must match a section in the .jkm file, excluding the trailing portion of the section name that specifies the section as a key map. For example, LoadKeyMapSection ("Custom") loads the key map section called "[Custom Keys]" in the .jkm file.

Creating Research It Rules

JAWS 11 introduced the Research It feature, providing quick access to data but at the same time making it easy to return to your primary task. Research It utilizes a "Lookup" source from the Internet, and presents findings in the JAWS virtual Results Viewer.

You may launch Research It from any application. The Research It user interface provides you with an edit field to type in a word or phrase to search, along with a list of Lookup resources from which to search, as well as numerous other controls that let you customize how to search. Once you press ENTER to begin a search, the virtual Results Viewer displays either an error message if nothing was found, or information from the chosen Lookup resource relevant to your search term. the information presented in the virtual Results Viewer is in a highly condensed format, thus eliminating all of the extra elements that clutter up a Web page - graphics, Flash objects, links to unrelated materials, etc.

When Research It finds results from a search term, the virtual results viewer window presents only the links and starting text for each relevant item found. From any of these links, you can press Enter to navigate to a condensed version of the Web page where the entire content of that particular link is located but without all the extraneous material that is normally displayed on that Web page utilizing a standard Web search engine.

For more details on working with the virtual viewer window and the virtual results viewer, see Implementing a Virtual Viewer Window.

Research It is customizable through its user interface, as mentioned above. You may choose from numerous Lookup resources that ship with JAWS. These include Wikipedia, WikiDictionary, various news sources, and so on. You may even choose which source should be the primary Lookup resource for search terms.

But in addition to the Research It user interface, you may customize Research It for application-specific Lookup resources that do not ship with JAWS. The xQuery language and the Freedom Scientific scripting language work hand-in-hand for customizing Live Resource Lookup (LRL) functionality. Over the years, some lookup sources initially provided with JAWS for Research It have had to be removed due to the everchanging dynamic redesign of some websites. Nevertheless, there is much you can do with rule sets of your own as well as with the currently shipping available lookup sources provided with JAWS.

Definitions

·         Lookup Module Raw Name - The name of a Lookup module as it appears in the file system without the path and extension.

·         Lookup Module Friendly Name - The localized name of a Lookup module. This name is used in the Settings Center user interface, as well as in the list of Lookup resources in the Research It user interface dialog.

·         Rule Set - An optional set of instructions for a Lookup Module. The rule set follows the Syntax defined by the Lookup module. A rule set allows a Lookup module to contain generic code that may be manipulated externally by the rules defined in the rule set.

·         The PrimaryLookupModule key is stored in the [Research It Options] section of the default JAWS configuration (jcf) file. The primary key may be application-specific.

Defining a Rule Set: The RUL and QRY Files

A Research It rule set contains two files that share a common filename with extensions .rul and .qry:

·         .rul - the Rule file containing the basic information needed to run the Research It query through the JAWS user interface.

·         .qry - the Query file containing the program that accesses an Internet website, sends any query data to that site, locates the desired data, and returns it to the JAWS virtual Results viewer.

For more details on working with the Rule (.rul) file, see The Rule File.

For more details on working with the Query (.qry) file, see The Query File.

Creating Rule Sets Within the JAWS Research It User Interface

Rather than using the tools discussed in the file referenced above, you may prefer to build your queries directly as rule sets that run in the JAWS Research It user interface. Simply create your .rul file, and then write your query in an editor like notepad and save it as your .qry file. If there are errors in the query code when you run the query from Research It, JAWS just reports that no results were found.

To obtain error and debugging information within Research It, you must use the JAWS Utility Mode, as described in "Research It: Creating Rule Sets for JAWS (Word file)". Download the file from the link located at: Creating Research It Rules for JAWS.

Running Queries Within the JAWS Research It user Interface

The fact that JAWS can utilize certain query tools (XQuery/XQilla) is due to the inclusion of a Freedom Scientific lookup module called LiveResourceLookup.dll. this module ships with JAWS since JAWS 11. It is located in the root folder of the JAWS LookupModule subfolder. This API allows the queries to run as a feature of JAWS. The module supports multiple lookup sources, those created by Freedom Scientific that ship with JAWS, and those created by third-party developers for their own queries. The three-letter prefix, lrl, used in the filenames of our own Research It files comes from the name of this module. It is useful to prefix the filenames this way to indicate the particular lookup module with which they should be associated. But if you are interacting with a lookup source that does not support XQuery, if you must protect proprietary data, or if your lookup source requires user authentication, you must create your own lookup module as a .dll API. For more details on this, see: Research It DLL API.

Research It Scripting Functions

There are numerous functions you may use for customizing Research It rules in your own applications. See to the LiveResourceLookup.jsd script documentation and its associated LiveResourceLookup.jss script source files that ship with JAWS. These files are located in the shared folders as follows:

LiveResourceLookup.JSS in the Shared Scripts folder, and

LiveResourceLookup.JSD in the Shared Scripts\Language folder.

 

For a complete listing of Research It functions, see the relevant category book of the Reference Guide.

The Rule File

The rule (.rul) file contains information that populates the JAWS Research It user interface so that the Lookup Resource shows up in the list of available Lookup resources. The rule file usually contains three or four entries:

·         Friendly Name - a string of characters representing the title of the query the user sees in the JAWS Research It user interface. This required entry has a maximum length of 100 characters.

·         Description - an optional string containing a detailed description of the query. This entry has a maximum length of 500 characters. You may use it to provide any information that may help the user of the query to understand its purpose. For example, in an application that is non-standard, you might explain what the query does and what the format is for inputting data.

·         Timeout - an optional integer value for the timeout in milliseconds that the query should wait to receive a response from the target Web site. Any query using the rule set you are defining is aborted if the time exceeds the timeout you specify. The default timeout is 15000 milliseconds (15 seconds). This timeout value is assumed if no timeout value is specified. You may need to define a longer timeout value if the Web site being queried is slow, if a large amount of data is returned from the query, or if the query is complicated.

·         Version - an optional entry containing the version information for the rule set.

Code Sample

The below code sample is for a fictitious application that finds valid Freedom Scientific serial numbers.

[Details]
FriendlyName=Freedom Scientific Serial Number Lookup
Description=Enter your full name to find your Freedom Scientific Serial number. Example: Type in "Mary Smith" without the quotation marks. If your account is current, the query reports your serial number as XXXX in the virtual Results viewer. This query is only available for valid Freedom Scientific serial numbers.
Timeout=15000
Version=1.0.0

The Query File

When you use the Internet to search for a term on a Website that accepts searches, the Website generates a page containing search results. Depending on the search engine the site utilizes, this mayh or may not be data embedded in the site's HTML or XML code. You can usually tell if the site was created dynamically and is searchable by an external tool such as Research It if the Search Results page contains the search term sought in the URL displayed on the address bar. If you want to utilize a tool like Research It to search a page of this type, the tool must supply the search term and locate and return the search results to the tool's user interface.

In some cases, a Website may change dynamically and automatically based on ongoing events without any input from you. such a site can also contain data subject to an external query. The CNN Headlines, Fox News, and BBC top news stories are some examples. For this type of site, the external query only needs to return to the Research It user interface the relevant search results without you having to provide any search terms. For this type of site, the Rule file must submit any search data necessary for the Website search to take place, parse the search results returned by the site, retrieve them, and report them to the JAWS virtual Results Viewer.

The Research It JAWS feature utilizes three programming tools to locate the specific set of relevant search results generated by your query within all the HTML or XML code that comprises the Website in order to return them to the JAWS virtual Results Viewer. They are:

·         XQuery - a programming language specifically designed to query an XML data set and to locate specific data of interest. It contains the required functions and other tools necessary to parse and navigate an XML website to locate the desired data. It requires that the website format be XML rather than HTML.

·         XQilla - an open-source implementation of XQuery that allows you to parse an HTML file as an XML file, thus making HTML websites searchable by an external tool like Research It. XQilla also contains a number of additional functions you may use in a query. Developers creating rule sets for Research It may use XQilla functions in their rule sets.

·         XPath - an XML path language that allows you to locate specific nodes on an XML page. XPath is analogous to a DOS path statement that allows you to find a particular file or file set by specifying the series of nodes (i.e., subdirectories or folders) you must traverse to get to the target. XML and HTML files are, in effect, a series of tags embedded within tags embedded within other tags, etc. Embedded somewhere within this tag structure is the data containing the search results for the query from Research It. If you view an XML file as a tree view of parent and child tags branching out from one parent tag, then your goal is to locate the branch of interest, the one containing the desired search results, and traverse that branch of parent and child tags until you reach the tag containing the exact search results desired. Thus, an XPath statement contains a path of tags as opposed to a DOS path statement that contains a path of folders.

A comprehensive book on XQuery by Priscilla Walmsley (XQuery, Sebastopol, CA: O'Reilly Media, 2007) is available at bookshare.org for Bookshare subscribers. For basic tutorials about XQuery, XPath, XML, and HTML, refer to W3Schools.com. These tutorials provide overviews, while the book covers XQuery comprehensively.

 

XQilla functions are documented at XQilla Extension Functions.

The Research It Debugger

Once you create your own Research It rule set, you can run the debugger to find out what errors it may contain and how you may correct them. Bring up the debugger by pointing to your rule set files and activating the HomeRow Utility with Insert+WindowsKey+NumpadMinus, and then pressing Insert+WindowsKey+d. The output results show pressing the Home in a virtual viewer window, not the regular Research It Results viewer, so that you can examine closely what you may need to fix. Make sure to deactivate the HomeRow Utility by toggling it off with Insert+WindowsKey+NumpadMinus.

For a complete discussion on working with Query files, find the link for "Research It: Creating Rule Sets for JAWS (Word file)" and download the file from this link located at: Creating Research It Rules for JAWS.

Customized Quick Settings

As of JAWS 11.0, the JAWS user interface for changing options in its many features changed from the Configuration Manager dialogs to the Settings Center dialog. In JAWS 13.0, this concept was extended with the introduction of the "Quick Settings" feature. This user interface replaced the AdjustJAWSOptions dialog available in prior versions of JAWS, providing easier navigation and searching of the myriad options JAWS offers. The older functions for developing AdjustJAWSOptions dialog remained in the product for legacy reasons.

The Freedom Scientific Scripting language supports customization of Quick Settings using special files and functions. To distinguish the files used for quick settings from other types of script files, there are two files with special extensions:

·         .qs - Quick Settings XML file containing all the information required to populate the Quick Settings user interface

·         .qsm - the associated Quick Settings XML message file containing all help messages for the user interface

A set of Quick Settings files must have the filename for the application to which the set belongs. So as with any other application-specific script files you develop, name your customized quick Settings files accordingly. For example, if your script source file has the name, MyApp.jss, then its associated Quick Settings files (if they exist) should have names like MyApp.qs and MyApp.qsm. Both .qs and .qsm files must exist in order for JAWS to process your customized Quick Settings correctly at run-time.

Data passed between the QuickSettings user interface and JAWS scripts is in XML format. You must use the Script Manager or another text editor that supports working with XML in order to edit existing XML files, or to create your own .qs and .qsm files.

In addition, the Scripting language provides numerous functions to assist with the manipulation of Quick Settings XML files. To use these functions in your own script source file, you must add the following statement after any "Include" statements at the top of your script source file:

Import QuickSet.jsd

 

For more details on working with the "Import" directive, see Import Directive.

For more information about working with compiler directives in general, see Compiler Directives.

The functions for working with Quick Settings files are all located in the QuickSet.jsd file that ships with JAWS in the root folder of the shared settings\(language) folder. You may also refer to the QuickSet.jss script source file located in the same folder to see how to apply functions for Quick Settings, and to the ddefault.qs and default.qsm files to see exactly how to format a Quick Settings .qs and .qsm file. Some examples drawn from these files are shown below.

When the user toggles an option within the Quick Settings user interface, JAWS saves the user's settings in user-specific configuration (.jcf or .mcf) files and at times also in .jsi or .ini files. The user-specific JAWS configuration files are located in the JAWS root folder of the user's Settings\(language) folder. Any user-specific .jsi files are located in the PersonalizedSettings folder, which is under the JAWS root folder of the user's Settings\(language) folder. Some .ini files - for example, those for voice settings, are located in the JAWS root folder of the user's Settings folder.

The .jcf, .jsi and .ini files all have section names whose entries apply to a particular type of setting. So it is critical that the .qs and .qsm files correctly indicate to what section a setting belongs and which functions or events apply to a setting.

The QS File

JAWS ships with numerous .qs files for various applications. The default.qs file contains the settings available to all applications JAWS supports.

If you are creating Quick Settings for your own applications, the .qs XML file you create must contain the following parts that must be coded properly for JAWS to process the file:

Category

A category is the heading for a group of settings, representing the tree node in the Quick Settings user interface. Each category contains a list of settings. Categories can be nested to any depth.

The .qs file must contain descriptions of each category and its contents. A category is represented by an ID, a unique string within the .qs file. The syntax for naming IDs is “CategoryName.SettingName”. If a category is nested, you must use the full category path in the ID name.

For example, GeneralOptions.UserVerbosity is the ID User Verbosity setting under the category of General Options.

Settings

A setting is represented by an ID. Like a category, a setting must have a unique string within the .qs file. A setting also must have an associated type that dictates how the user interface displays the setting at run-time. The types supported include:

·         List - to display a list of values, one of which may be selected.

·         Boolean - to display an option that may be toggled On or Off.

·         Information - to display the resultant of a setting. For example, to have the JAWS user interface display that cell monitoring is ON, use the information type for the setting to display which cell is being monitored.

A setting can be static or dynamic. For a static setting, the scripts do not determine the list of possible values of the setting. You can make a setting static by associating a setting section and a setting name. But within a static setting, both the section name and the file name may be dynamic.

The section name can be a variable set in the variable block. Variable blocks contain variables that you may substitute for names. A variable has an associated callback function to populate its value. When the QuickSettings feature loads, it calls the associated callback function and populates the variable.

A setting is dynamic if the scripts must supply its value or set of values rather than the value or values being stored in the .qs file. A setting can be enabled or disabled dynamically.

You may make a setting dynamic by associating callback events in the setting. When a dynamic setting needs to be loaded, JAWS requests a possible list of values from the callback event. Every time the user toggles a dynamic setting, the callback event is notified. The callback event is responsible for writing the setting.

A setting can have a list of dependent settings. When the setting value changes, each of the dependent settings is called to update its value based on the value of the parent setting.

You may also set variables as dependent entries in the .qs file. But there can be only one level of dependency processing. So if there are any dependents of the dependents, they are not called.

SettingsFile Section

JAWS uses the .jcf, .jsi, and .ini files to read setting changes and write to update those settings based on user interaction. The .jcf, .jsi, and .ini files have section names whose entries must correspond to the appropriate type of setting being read or written. For example, if the setting in the .qs file is not related to a .jcf option or a value event, you must specify the SettingsFile section accordingly. Section names may be for Non-JCFOptions, OSM, etc.

The section called "NonJCFOptions" is used for scripted settings which are not known to the internals of JAWS. These are settings that are unknown to the internal functions, SetJCFOption and GetJCFOption. So, for a non-JcFOption setting, the syntax is:

<SettingsFile Section="NonJCFOptions" Name="MySettingFunction"/>

For a setting that belongs to the OSM section, the syntax is:

<SettingsFile Section="OSM" Name="MyOSMSettingFunction"/>

For a setting that belongs to read/write events, the syntax is:

<SettingsFile ReadValuesEvent="GetMySettingsFunction" WriteValuesEvent="setMySettingsFunction"/>

The QSM File

The .qsm file allows you to associate label text and help text based on the ID of the category or the setting in the .qs file. The IDs must match. At run-time, the quick settings merges any application-specific settings with the default.qs and default.qsm files. JAWS Quick Settings user interface places your application-specific categories at the top of the tree. Likewise, if your application-specific .qsm file is adding to an existing category, whatever that .qsm file adds appears at the beginning of the existing category.

You may format messages you plan to pass as parameters in functions that read to and write from a .qs file as XML messages. Rather than trying to remember the exact XML syntax for a parameter that you must pass to a .qs XML function, it is easier to generate messages with meaningful names such that the text of the messages have all the correct formatting. For detailed examples, refer to the QuickSet.jss file that ships with JAWS. These are the files used by the default.qs file.

Code Samples for Messages

The below code samples show how to create messages with proper XML formatting. These are drawn from the QuickSet.jss file, the default script source file for the default.qs and default.qsm files - all of which ship with JAWS.

Messages
@ListReadResponseStart
<ReadResponse ID="ListItems">
@@
@ListValuesStart
<ListValues SettingsID="%1" SelectIndex="%2">
@@
@ListValue
<ListValue Text="%1"/>
@@
@ListValuesEnd
</ListValues>
@@
@ListReadResponseEnd
</ReadResponse>
@@
;\037 is the % character used to keep from interfering with formatted strings.
@VariableReadResponse
<ReadResponse ID="VariableResult">
<VariableValue ID="\037%1\037" Value="%2" />
</ReadResponse>
@@
EndMessages

Functions for Working with QS XML Files

Below is a sampling of the list of functions you may use to read from and write to .qs XML files for your own application-specific settings. For the complete list, refer to the QuickSet.jsd file that ships with JAWS.

Function: qsxmlMakeBooleanState

Description

This function returns the proper state string for use with Quick Settings xml since atomic types and values in xml are case-sensitive.

Syntax

qsxmlMakeBooleanState (nJAWSState)

nJAWSState is an integer value representing either TRUE or FALSE.

Returns

A string for the xml state (without the quotes) that represents the JAWS-usable TRUE/FALSE state constants.

Function: qsxmlMakeList

Description

Use to format xml creating list of available options to submit to the QuickSettings engine.

Syntax

qsxmlMakeList (SettingID, nSelectIndex, ListItems, nArraySize, Optional bDisabledSetting)

SettingID is a string representing the ID that came as a parameter to your custom callback function.

nSelectIndex is an integer value representing the item in the array to make the default list position.

ListItems is a StringArray representing the array of items, or available settings, for the callback function. Most common list items are integers or strings written to xml as strings.

nArraySize is an integer value representing the size or elements count in the listItems array.

Optional bDisabledSetting is an integer value you may set to TRUE to add the attribute to disable the setting. This leaves it in the window but renders it unavailable.

Returns

A string representing the QuickSettings callback function's response string for list items callbacks.

Function: qsxmlMakeBoolean

Description

Use to format xml creating the state of the checkbox to submit to the QuickSettings engine. Is used for settings of type Boolean which correspond to check boxes in QuickSettings.

Syntax

qsxmlMakeBoolean (SettingID, State, Optional bDisabledSetting)

SettingID is a string representing the Setting ID given as parameter to the callback function.

State is a string representing either the string literal "true" or "false" for xml formatting.

Optional bDisabledSetting is an integer value you may set to TRUE to add the attribute to disable the setting. This leaves it in the window but renders it unavailable.

Returns

A string representing the xml for the boolean callbacks.

Function: qsxmlMakeVariable

Description

This function returns xml format for the callback function associated with a variable in the qs xml.

Syntax

qsxmlMakeVariable (SettingsID, sValue

·         SettingID is a string representing the ID supplied as parameter to your custom callback function.

·         sValue is a string representing the variable's value.

Returns

A string representing the xml for the callback function associated with the variable.

Function: GetNonJCFOption

Description

Gets the "NonJCF" setting, similar to GetJCFOption except that the settings are gotten from the NonJCFOptions section of the JCF file. Just like GetJCFOption, the load order is: Get from application-specific file, and if not present, get from default file. Uses standard JAWS Settings layering.

Syntax

GetNonJCFOption (sOption, Optional nReadSource)

sOption is a string representing the string name of the option to retrieve, this is the key name.

Optional nReadSource is an integer representing the source from which to read: Constants in hjConst.jsh: rsStandardLayering, rsSession, rsFocus, or rsNoTransient

Returns

An integer representing the value of the setting in the current or default jcf file but only if it is in the NonJCFOptions section.

Function: LoadNonJcfOptions

Description

Loads settings from the default and application JCF files that are in the NonJCFOptions section. These are settings which are implemented solely through scripts, and are therefore unknown to internal JAWS functions. LoadNonJCFOptions should run each time an application gains focus so that script-implemented options in the JCF file load along with internal JCF options. If a script has customized options for an application, overwrite this function to load the application's customized options and then call this function for default handling of script-implemented options.

Output types

The Freedom Scientific Scripting language supports the use of many output types in order to control what is spoken and displayed in Braille at any given time. Output types are constants that represent numeric values indicating how and under what circumstances to output any content you specify in your scripts and functions.

When determining which output type to use in a function call that requires an output type parameter, you need to consider the context of the message, and also whether the message may be turned off from within JAWS Settings Center. For example, the output type for error messages is typically set to OT_ERROR, although this output type may be turned off from within Settings Center.

Definitions of Output Types

The output type constants are all listed in the default constant file, HJConst.jsh. Their values range from screen messages to help messages and smart help messages to tutor help messages, and more.

Note: The settings for the user verbosity of some output types are off by default. For example, tool tips are off by default in JAWS. Generally speaking, forcibly enabling an output type for one that the user could otherwise normally turn off from within Settings Center is not recommended because it disables the user's ability to control that setting. Therefore, be judicious when applying the following logic and do so only for very specific situations. We use the tool tip output type as an example. Tool tip is one of the output types that you may control from within Settings Center:

1.    Save the status of the setting for tool tips verbosity in a local variable.

2.    Test that status for whether it is on or off. If it is off, turn it on.

3.    Under the conditions of the event where you want to cause a message to be announced no matter how the user normally has tool tips set to output, call the function containing the tool tip output type parameter for that message to be announced just for the specific scenario you need announced.

4.    Restore the status of the tool tips verbosity to how it was set prior to turning it on to ensure that your message is processed correctly and gets announced. This is where you may use the value stored in that local variable as shown in Step 1 above.

Most of the names of the output type constants are self-explanatory. The Below list contains brief descriptions where a definition may clarify how to utilize the output type. Unless the description specifies Braille, no Braille flash message is processed from an output type. The following output type constants are available:

·         OT_BUFFER

·         OT_NO_DISABLE: Used to ensure that content is spoken regardless of what user verbosity settings and message lengths for output are in effect

·         OT_HELP: Braille output is "help" followed by content

·         OT_APP_START

·         OT_JAWS_MESSAGE: Braille output is "jm" followed by content that is not on screen but meant to convey something from JAWS specifically

·         OT_SCREEN_MESSAGE: Content is intended to convey screen message that is typically not a part of content at the cursor location but is visually on screen elsewhere, or is related to what is at the cursor location

·         OT_CONTROL_NAME

·         OT_CONTROL_TYPE

·         OT_DIALOG_NAME

·         OT_DIALOG_TEXT

·         OT_DOCUMENT_NAME

·         OT_SELECTED_ITEM

·         OT_ITEM_STATE

·         OT_POSITION

·         OT_ERROR: Braille output is "err" followed by an error message

·         OT_ITEM_NUMBER

·         OT_TOOL_TIP

·         OT_STATUS

·         OT_CONTROL_GROUP_NAME

·         OT_SMART_HELP: Braille output is "shlp" followed by content

·         OT_SELECT

·         OT_TUTOR

·         OT_ACCESS_KEY

·         OT_HELP_BALLOON: Braille output is "hbln" followed by content, for Windows XP

·         OT_USER_REQUESTED_INFORMATION: Braille output is "usr" followed by content that user requests on demand

·         OT_CONTROL_DESCRIPTION

·         OT_DEBUG

·         OT_TOASTS: Braille output is "tst" followed by auto-play notofications of thumb drives; available as of JAWS 17.0.1377 and later in Windows 8.1, and JAWS 18 in Windows 10

The following are duplicates:

·         OT_HELP_BEGINNER

·         OT_WINDOW_NAME

·         OT_APP_NAME

·         OT_MESSAGE

·         OT_STATIC

·         OT_SELECTED

Use this one only for internal testing:
 OT_STRING: Used only for debugging

·         OT_GRAPHIC

·         OT_CHAR: Uses speech markup appropriate to speaking by character. Uses pitch change for capitalization if voices are set to change pitch for capitalization.

·         OT_WORD: Uses speech markup appropriate to speaking by word. Speaks a string of spaces as "space".

·         OT_CHUNK: Speaks a specified chunk of information based on the particular parameters of the calling function utilizing the output type

·         OT_LINE: Uses speech markup appropriate to speaking by line. Speaks a string of spaces as "blank".

·         OT_SPELL

·         OT_SAYALL

·         OT_KEYBOARD

·         OT_USER_BUFFER: Used to redirect SayMessage and SayFormattedMessage strings to the User Buffer

·         OT_PHONETIC_CHAR: Speaks characters phonetically

·         OT_BRAILLE_MESSAGE: Used only for debugging

·         OT_HIGHLIGHTED_SCREEN_TEXT

·         OT_NONHIGHLIGHTED_SCREEN_TEXT

·         OT_MOUSE_SPEECH

·         OT_MOUSE_SPEECH_CONTROL_TYPE

·         OT_MOUSE_SPEECH_ITEM_STATE

·         OT_ANNOUNCE_POSITION_AND_COUNT

The following are depricated output modes:

·         OT_TEXT

·         OT_WINDOW_INFORMATION

·         OT_DIALOG_INFORMATION

·         OT_APP_INFORMATION

·         OT_FONT

·         OT_CURSOR

Code Samples of Output Type Usage

Following are several code samples to illustrate the power of output types.

Message Length Verbosity

This code sample makes use of the long and short message verbosity capabilities of JAWS:

Script TestOutputTypes ()
; This silly message speaks a message that is not on screen and displays it as a flash message in Braille as long as the Braille flash message and Braille message verbosity is set to the default values.
; Depending on whether the user verbosity is set to process long or short messages, either the long message or the short one is spoken and Brailled.
; By default, long messages are always processed.
Var
            String msgMyLongMessage_l,
            String msgMyShortMessage_s
Let msgMyLongMessage_l = "Hello, I am a long message."
Let msgMyShortMessage_s = "Hello."
SayMessage (OT_HELP, msgMyLongMessage_l,msgMyShortMessage_s)
EndScript

Setting the Output Type for Proper Processing

This code sample places the setting of the output type to spell text phonetically into a local variable. It then tests for whether that option is on or off; if off, it turns on the output type. It processes a nonsense message using the "spell" output type. Then it restores the setting for the output type to its former state if necessary. Finally, it processes the message again, this time with the output type in its normal state.

Script TestChangingOutputTypeStatus ()
Var
            String msgMyLongMessage_l,
            String msgMyShortMessage_s,
            Int iSpellPhonetic
msgMyLongMessage_l = "Hello there."
msgMyShortMessage_s = "Hello."
iSpellPhonetic = GetJCFOption(OPT_spell_phonetic)
If !iSpellPhonetic then
            SetJCFOption(OPT_spell_phonetic,on)
EndIf
; Spell the message phonetically.
SayMessage(ot_spell,msgMyLongMessage_l,msgMyShortMessage_s)
If GetJCFOption(OPT_spell_phonetic) != iSpellPhonetic then
            SetJCFOption(OPT_spell_phonetic,iSpellPhonetic) ; restore to prior state
EndIf
; Spell the message normally.
SayMessage(ot_spell,msgMyLongMessage_l,msgMyShortMessage_s)
EndScript

Output Type for use in the Virtual Viewer

This code sample places the text of the message into the virtual viewer. Press Esc to exit the virtual viewer if you run this sample in a script.

SayMessage(ot_user_buffer,"Hello, world.")

Implementing a Virtual Viewer Window

JAWS offers a unique method for viewing certain types of documents and for displaying certain types of information on the screen. A "virtual document" is a simplified and logically displayed, navigable representation of a complex document which itself may not be directly navigable. JAWS automatically virtualizes the user's experience in the supported browsers: Google Chrome, Edge Chromium, Firefox, and Internet Explorer, and applications such as Adobe Acrobat Reader, and Microsoft Outlook read-only messages. Braille tracks what JAWS announces as you navigate through a virtualized message or document, Web page or HTML help window. Since UIA support is ever more robust, there are situations where you can have one browser window automatically virtualized and another not. An example where not virtualizing a browser window works best is the Google web-based EMail application. and, in some cases, JAWS provides a mixture of virtualized and un-virtualized options within the same browser application - for example, Google Docs.

The Virtual Viewer Window

The Freedom Scientific Scripting language lets you create virtual viewer windows using scripts and built-in functions. The virtual viewer is also referred to as the user buffer. And numerous functions and constant definitions refer to the "user buffer".

The virtual viewer window (user buffer) displays text and other elements reformatted so you may peruse the content without affecting the current application. For example, JAWS utilizes the virtual viewer to display on demand hotkey help, general Windows help, screen-sensitive help, and more. Once the virtual viewer window has the focus, you may examine its content by using any standard reading commands and with SayAll.

Typically, you may dismiss a virtual viewer window by pressing ESCAPE or ALT+F4. And if it contains links to non-virtualized environments, you may dismiss a virtual viewer window by pressing ENTER on those links.

 When JAWS displays information in the virtual viewer, the virtual cursor is active. As mentioned above, you can use normal navigation keystrokes to read all the text in the virtual viewer window. But you may also select any part of that text and copy it to the clipboard.

 

By default, when a script or function generates text to be displayed in the user buffer, that text is displayed in the virtual viewer as black on a white background, has a font size of 12 and a font type of Arial. The text displayed in the virtual viewer is identical to text found in any word processor or text editor. But you may control how the text is displayed, and even whether it is visually displayed at all, depending on what functions you use to place text into the virtual viewer, and whether certain JAWS options are enabled.

At Times, you may prefer virtualized text to be invisible in order not to distract from what is visually on screen. If the option to show virtual viewer on screen is turned off, the virtual viewer does not appear visually on screen; however, the virtual viewer does appear to the speech and Braille user as if it were actually on the screen. Examples of this occur in Microsoft Excel and in Microsoft PowerPoint slide shows.

The Results Viewer

Since JAWS 11.0, JAWS offers an application called the Results viewer, which is an extension of the virtual viewer concept. But a Results viewer window is actually a separate application that runs as part of the extensive JAWS features. A virtual viewer window typically exists as a direct user request for information specifically from the current application. Screen-sensitive help is an example.

Some differences between the virtual viewer and the Results Viewer application are that the virtual viewer window closes when it looses focus. The Results Viewer application remains open until you close it, which means that it may remain open when focus is switched away from it to another application. You may use the mouse to click links in the Results Viewer but not in the virtual viewer. And you can have only one instance of a Results Viewer window at a time.

The Results Viewer is an application that you invoke to gather information from the Internet or from specific applications. JAWS populates a Results Viewer window with the content gathered for you to navigate, copy and paste, etc. Information shown when you invoke the Research-It feature is an example of a Results Viewer window, and it typically displays HTML elements - e.g., links. Speech History is another, but it has no HTML, just text.

So again, the Results Viewer can display HTML; whereas, the Virtual Viewer cannot. Thus, the Results Viewer can display headings, links, tables, etc. You must enter it as HTML, programmatically or statically. JAWS does not include HTML functions. If you include HTML tags when sending text to the Results Viewer, the Results Viewer application interprets the whole string as HTML. In summary: you must be familiar with HTML coding practices if you wish to generate complex content with HTML elements to display in a Results Viewer window.

Displaying Text in a Virtual Viewer or Results Viewer Window

For all virtual viewer code to work properly, your script source file must contain at least the following three Include statements:
 

Include "hjconst.jsh"
Include "hjglobal.jsh"
Include "common.jsm"

 

Checking the Virtual Viewer Status

Before you display text in the virtual viewer, ensure that the virtual viewer is not already running through another script or function. If the virtual viewer is already active, you should deactivate it. Deactivating the virtual viewer before you display new information in it prevents the text from running together. To do this, you should either:

·         Place the function, EnsureNoUserBufferActive(), before any other function calls that activate and display text in the virtual viewer.

·         Use built-in or default functions to test for whether the user buffer is already active and clear it if it is not.

Use the built-in function, UserBufferIsActive, to check the status of the virtual viewer. The function returns an integer value of 1 when the virtual viewer is active, and returns an integer value of 0 when the viewer is not active. When the virtual viewer is active, you use the built-in function, UserBufferDeactivate, to close the virtual viewer. This function closes the virtual viewer just as if you had pressed ESCAPE from the keyboard.

As with the call to EnsureNoUserBufferActive, always place both the UserBufferIsActive and the UserBufferDeactivate functions within a conditional statement before calling any function that activates the virtual viewer. And again, unless you really want to append to already existing text in the user buffer, make sure to clear the user buffer so that the virtual viewer displays only the text you direct it to display.

Code Samples

In below code samples, the first two are equivalent but the third one is not. the first two clear the user buffer so that you may populate the virtual viewer with new content. The third code sample lets you append to existing content in the user buffer.

;Checks for whether the user buffer is active and if so, deactivates and clears its content.
If UserBufferIsActive () Then
            UserBufferDeactivate () ; close the virtual viewer
            UserBufferClear ()
EndIf
;By default, checks for and clears the user buffer if it is active. If the optional parameter passed to this function is set to TRUE, the buffer content is retained.
EnsureNoUserBufferActive () ; Closes the virtual viewer and clears its buffer content if the viewer is already active.
; Allows for appending to the user buffer that already exists in the virtual viewer
EnsureNoUserBufferActive (TRUE) ; Closes the virtual viewer but does not clear its buffer content.

Checking the Active Cursor

Checking if the virtual cursor is active is different from determining whether the user buffer is active. The Returns are the same in that:

·         Returns an integer value of TRUE if the Virtual PC cursor is enabled, or if the user virtual buffer is active.

·         Returns an integer value of FALSE if the virtual PC cursor is disabled, or if the virtual user buffer is not active.

 

IsVirtualPCCursor () ; Checks to see if the Virtual PC cursor is being used to navigate within the window with focus.
UserBufferIsActive () ; Determines if the User Virtual Buffer is currently active.

Creating and Displaying the Messages

To display messages in the virtual viewer, you should store them as constants in a message (.jsm) file. Use JAWS message formatting conventions. You may format the text of messages to be displayed in the virtual viewer with spaces, hard returns, tab stops, etc. JAWS retains the format of your messages when processing them for displaying in the virtual viewer.

For messages you plan to use to speak or flash in Braille, you may create a long and a short version of the same message. But for messages you plan to display in the virtual viewer, you must test for whether to display a long or a short message because the virtual viewer functions do not take both long and short message parameters in the same function call. So although you can still create a long and a short version of the same message, you must test for whether to display one or the other before calling the function that places the text into the virtual viewer.

You can also use placeholders in messages to be displayed in the virtual viewer. Using placeholders allows for text to be added to the message at the time JAWS processes the script.

After you have created your messages and determined that the virtual viewer is not active, you are ready to display text in the virtual viewer. You can use numerous functions for this purpose. But some of the more common methods include calls to:

·         SayMessage

·         SayFormattedMessage

·         UserBufferAddText

·         UserBufferAddFormattedMessage

For the SayMessage and SayFormattedMessage functions, The first parameter is the output type that directs JAWS how to speak or display the message. Use the output type constant, OT_USER_BUFFER, in either function to direct JAWS to display your message in the virtual viewer.

The second parameter for SayMessage and SayFormattedMessage is the text of the message you wish JAWS to speak or display. Since the output type parameter passed in the current scenarios is for displaying text in the virtual viewer,this parameter can be a quoted string of text, a string variable containing the text or a message constant contained within a JAWS message (.jsm) file.

The functions that allow more parameters and thus give you more control over the text and how it is displayed in the virtual viewer allow for things like the type of font, its color, and so on. All these functions are listed in the Reference guide in the section on Virtual Viewer Functions.

Code Sample 1: Simple Virtual Viewer Functions

The below code sample checks for whether the user verbosity level is higher than beginner level. If it is, the short message is passed to the user buffer. If not, the long message is passed. This is a very simple example of how to test and control the length of the message passed to the user buffer.

If you want very specific control over the length of the message passed to the user buffer, you may need to overwrite built-in message functions or functions that pass messages to the user buffer with your own particular tests in order to determine whether a long or short message should be passed to the user buffer for displaying in the virtual viewer.

If GetJcFOption (Opt_User_Mode) >= intermediate ; user verbosity is set to intermediate or advanced for the current application.
            SayMessage (ot_user_buffer, msgHello_s)
Else
            SayMessage (ot_user_buffer, msgHello_l)
EndIf

Code Sample 2: Using SayMessage and SayFormattedMessage

The below code sample uses calls to both SayMessage and SayFormattedMessage functions to display text in the user buffer, passing it a message that is formatted with a string that may change depending on conditions you determine.

If the key assigned to the script is pressed twice quickly, then several messages are passed to the user buffer to be displayed in the virtual viewr, including the very commonly displayed message, "Press Esc to close this message". That message is found in the common.jsm message file that ships with JAWS and so you need an include statement for "common.jsm" in your script source file, as shown here.

Also, notice that the test message to be displayed in the virtual viewr has an extra blank line in the message definition. Any information you place into a message constant using the Messages ... EndMessages format allows you to include formatting: spaces, tabs, hard returns, etc., as mentioned above. Alternatively, you may add the constant, cscBufferNewLine, to force a blank line in the virtual viewer.

Finally, the script is written in such a way that if you press the key assigned to the script just once after the virtual viewer is already displaying the test message, nothing happens.

Messages
@msgTestMessage
Hi. I am a test message.
@@
@msgMyUserBufferTestMessage
I am %1.
@@
@msgNotVirtual
not %1
@@
EndMessages
Script MyUserBufferTest ()
If IsSameScript ()
            EnsureNoUserBufferActive ()
            SayMessage (ot_user_buffer, msgTestMessage)
            SayFormattedMessage (ot_user_buffer,
                        FormatString (msgMyUserBufferTestMessage, cmsgVirtualViewer))
            SayMessage (ot_user_buffer, cmsgBuffexit)
            Return
EndIf
If Not UserBufferIsActive ()
            SayFormattedMessage (ot_JAWS_message,
                        FormatString (msgNotVirtual, cmsgVirtualViewer))
EndIf
EndScript

Code Sample 3: Using Functions that Control How Text is Displayed

The below code sample shows how you might take advantage of the UserBufferAddText function to populate the virtual viewer window with very specific control of the way the text is displayed. In the code sample where the optional parameters are used, note that the parameters passed to the function are from constants found in the common.jsm file that ships with JAWS. Also, note that when optional parameters are passed, all of them must be passed up to the point where you no longer need to make a change from the default parameters.

You may mix calls to SayMessage, SayFormattedMessage, and UserBufferAddText. But for purposes of clarity, the two sample scripts below call the function, UserBufferAddText.

The first example shows very simple calls to the function but passes the required string parameter in different ways.

Messages
@msgMyTest
Hello, I am a test.
@@
@msgMyVirtualViewer
I am a message in the virtual viewer.
@@
EndMessages
String Function MyUserBufferText ()
Return msgMyVirtualViewer
EndFunction
Script MyUserBufferTest ()
; Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
;The below three function calls populate the text to be displayed in the virtual viewer when the script is run.
; You may call SayMessage and SayFormattedMessage instead of UserBufferAddText; but notice the extra control you have by utilizing this function call.
; Pass a simple message constant as the first parameter, which is required. But pass nothing else as aalll other parameters are optional.
UserBufferAddText (msgMyTest)
; Pass a function that returns a string as the first parameter, which is required. but pass nothing else as all other parameters are optional.
UserBufferAddText (MyUserBufferText ())
; Pass some text as the first parameter, which is required.
; Then for the optional parameters, pass nothing for the next two parameters, the font name as Aerial, size as 12, no attributes, and foreground color of black and background color of white.
; This level of specificity dictates that JAWS should display the text of the first parameter in the virtual viewer with these conditions applied.
UserBufferAddText (MyUserBufferText, cScNull, cScNull, cFont_Aerial, 12, 0, rgbStringToColor(cColor_BLACK), rgbStringToColor (cColor_White))
; Pass the message constant from common.jsm for closing the virtual viewer.
; Pass a blank line.
UserBufferAddText (cscBufferNewLine)
UserBufferAddText (cmsgBuffExit)
; Now activate the user buffer to receive the user buffer text just populated.
If ! UserBufferIsActive ()
            UserBufferActivate ()
EndIf
; Ensure that the virtual cursor begins at the top of the virtual viewer window.
JAWSTopOfFile ()
; Say the first line of text.
SayLine ()
EndScript

In the next example, we call UserBufferAddText again but passing it many of the optional parameters with different information from the defaults that the function expects. This shows how to control the way text is displayed in the virtual viewer. We also call RedirectToUserBuffer as the last function call so that a SayAll from the top of the virtual viewer window begins when the script is run.

Const
            iAccount1 = 12345,
            iAccount2 = 54321,
            sMary = "Mary",
            sJohn = "John"
Messages
@msgMyAccountTitle
Account Numbers by First Name
@@
@msgMyAccount
I am %1 and my account is %2.
@@
@msgUnknownAccount
I don't have a name for %1 account.
@@
EndMessages
String Function MyFunctionTest (Int iNum)
If iNum == iAccount1
            Return FormatString (msgMyAccount, sMary, IntToString (iNum))
ElIf iNum == iAccount2
            Return FormatString (msgMyAccount, sJohn, IntToString (iNum))
Else
            Return FormatString (msgUnknownAccount, IntToString (iNum))
EndIf
EndFunction
Script MyAccountUserBufferTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
; The below function calls populate the text to be displayed in the virtual viewer when the script is run.
; Pass the title to be displayed as the first line in the virtual viewer..
UserBufferAddText (msgMyAccountTitle)
; Pass a function name for a function that returns a string, then nothing for the next two parameters, then the font type, size, and foreground and backgbround colors to be displayed in the virtual viewer.
; The function itself passes a hard return by default. but for readability in the virtual viewer, add an extra blank line to the first parameter of each call.
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount1), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount2), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (0), cScNull, cScNull, cFont_Times, 12, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
; Pass a blank line along with the message constant from common.jsm for closing the virtual viewer, and cause a SayAll to begin from the top when the script is run.
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
EndScript

Displaying Keystrokes as Links

In addition to text, you can create keystroke links in the virtual viewer. To do this, you add the KeyFor function within the body of any individual message stored in a JAWS message file. The KeyFor function requires the name of a script as its only parameter.

When JAWS displays the message containing the KeyFor function in the virtual viewer, JAWS retrieves the keystroke for the script named passed as a parameter to the function. The keystroke is displayed as a link that you can activate by pressing ENTER on the line containing the keystroke. The keystroke is displayed in underlined, blue text on the same white background as other text contained within the virtual viewer.

The syntax for using the KeyFor function in a message is:
 %KeyFor (ScriptName)
 
 The percent sign preceding the function name acts as a placeholder for the keystroke within the message. The script name does not include the parentheses and can be located in either the default or an application-specific script source file.

Code Sample: Creating a Link to be Displayed in the Virtual Viewr

The below code sample shows a very simple message and a link to JAWS hotkey help as you would display it in the virtual viewer.

Messages
@msgHelpMessage
Below is a link to common helpful JAWS commands.
@@
@msgKeyForFunctionTest
To see a list of general JAWS hot keys, press %KeyFor (HotKeyHelp).
@@
EndMessages
Script MyKeyForFunctionTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
EnsureNoUserBufferActive ()
;The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
;The below function calls populate the text to be displayed in the virtual viewer when the script is run.
UserBufferAddText (msgHelpMessage + CscBufferNewLine)
; The below call passes the name of the message containing the link. It must be called by the FormatString function to be processed properly.
;The next parameter is a string representing the function name, including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
; The third parameter is a string representing the name to be used in the list links dialog when it is invoked with the Virtual viewer active.
; The rest of the optional parameters are not necessary because the defaults already handle them.
UserBufferAddText (FormatString(msgKeyForFunctionTest), cFuncHotKey, cMsgHotKeysFunc)
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Checking Whether the Virtual Viewer window is Displayed Visually

By default in most applications, text displayed in the virtual viewer is visible on the screen. But there may be times when you wish to suppress the text from showing visually because it interferes with the actual visible data. An example of this is when you display a chart in Excel in the virtual viewer. You would not want the virtual viewer version of the chart to obscure the visual version of the chart.

You may turn off displaying of virtual viewer text in general through the JAWS user interface in the Settings Center dialog. But you may also handle this through your scripts and functions for special cases.

Code Sample

The below code sample checks for whether the virtual viewer is set to be displayed visually. if it is, we turn it off temporarily, show virtual viewer text, and then turn it on again. If it is not set, perhaps the user had disabled the feature. so we leave it as is.

Script ShowVirtualViewerTest ()
Var
            Int iVirtViewer,
            String sText
iVirtViewer = GetJCFOption(OPT_VIRT_VIEWER)
sText = "This text is not displayed on screen because the option to display text in the virtual viewer visually is off."
If iVirtViewer == TRUE ; Virtual viewer is visible.
            SetJCFOption (OPT_VIRT_VIEWER, 0) ; Turn it off.
EndIf
UserBufferClear ()
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
If iVirtViewer == TRUE ; Virtual viewer was on before displaying text in the virtual viewer.
            SetJCFOption (OPT_VIRT_VIEWER, iVirtViewer) ; Turn it back on.
EndIf
EndScript

Giving a Title to the Virtual Viewer Window

By default, when JAWS displays text in a virtual viewer window for something like screen-sensitive text, if the user requests the title of the window, JAWS provides a generic message, "Virtual Viewer". That message is spoken and flashed in Braille. But there may be times when you want your virtual viewer text to be displayed with a special name for the virtual viewer window in which it appears. For example, in Microsoft Excel charts, if the user requests the title of the chart being displayed in the virtual viewer, JAWS provides this information specifically instead of indicating the generic message.

In order to make your scripts and functions behave properly for this special case, you must do two things:

1.    Overwrite the default script called SayWindowTitle so that it knows under what special circumstance to indicate the window name of your special virtual viewer window.

2.    Use the special function, UserBufferActivateEx instead of the more general function, UserBufferActivate, to activate the user buffer in your script that displays the special virtual viewer window.

The UserBufferActivateEx function takes four required parameters. The first parameter is a string containing the window name for your special virtual viewer window. This parameter passes a window name to be used internally by your overwritten SayWindowTitle script. It is not a window name that appears at all in the text of your special virtual viewer window. The second parameter is also a string, indicating the type of window you are generating. You may leave this string blank by using the constant, cscNull, which in effect is an empty string. The third and fourth parameters are integer values representing the window type code and control ID for your special virtual viewer window. You may use 0 for each of these parameters.

Code Sample

The below code sample overwrites the default script called SayWindowTitle for the special case of your special virtual viewer window. You may restrict the conditions even further than what is shown here to ensure that only the window name for your special virtual viewer window is processed. but this code sample simply test for whether the window name of the virtual viewer is not empty.

Script SayWindowTitle ()
Var
            String sVirtWindowName
sVirtWindowName = UserBufferWindowName ()
If UserBufferIsActive ()
            If sVirtWindowName != cscNull
                        SayMessage (ot_user_requested_information, sVirtWindowName)
                        Return
            EndIf
EndIf
PerformScript SayWindowTitle ()
EndScript
Script WindowTitleVirtualViewerTest ()
Var
            String sTitle,
            String sText
sTitle = "My Virtual Viewer Window"
sText = "I am a message in this special virtual viewer window that has a name."
EnsureNoUserBufferActive ()
UserBufferActivateEx (sTitle,cscNull,0,0)
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Results Viewer Functions

Starting with JAWS 11.0, the Results Viewer application has been available for customization through your own scripts and functions. Its functions behave in a very similar manner to the functions for displaying text in the virtual viewer.

Additional Resources

For more details on working with all types of functions for the Virtual Viewer and Results Viewer, see the category books and summaries in the JAWS Functions book of the Reference Guide.

Structured Braille Functionality

JAWS offers two methods for showing information on any Braille display installed on your system: Line Mode and Structured Braille Mode.

Line Mode shows text on a Braille display literally as it appears on the screen - white space and all. This may seem to be the most desirable on the surface, but actually, it presents quite a challenge for Braille users. Very often, information is formatted with a lot of spaces or tabs so that it lines up in the most aesthetically visually pleasing manner. The Braille reader may find it difficult at best to navigate the information in a meaningful way, or to discern its format, due to the extraneous white space that appears on the Braille display.

Structured Braille Mode parses information about the current object on the screen so that it takes up as little room as possible on the Braille display. Even on larger Braille displays that have 80 cells for showing text, it is often difficult to show formatted information in a way that it can be understood efficiently and quickly. Structured Braille provides a means whereby the components of an object can be "structured" to show the most information with the least amount of characters.

Many types of objects lend themselves readily to a component-based system for presenting information. Rather than displaying information strictly in a linear manner. So again, Structured Braille uses a consistent method to show as much information as possible about an object while taking up as little room as possible on a Braille display.

Objects include textual information such as lists, tables, HTML elements such as links and heading levels. But objects also include controls in dialogs, such as buttons, list views, tree views, checkboxes, and so on. Additionally, objects may have states such as being checked or unchecked, being collapsed or expanded, etc.

The Freedom Scientific Scripting language, together with its internal code, makes it possible to show many components of objects through Structured Braille. And in fact, you can manipulate how many or how few of the components are shown for any particular type of object.

JAWS ships with Structured Braille mode enabled by default. You can toggle between Line and Structured modes from the PC keyboard or from the Braille display with the keys assigned to handle this. Or you can use the JAWS Settings Center user interface. In fact, you can use the Settings Center to define specifically how much or how little of each component you want shown.

Take time to examine some of the functions in the Braille script source file that ships with the JAWS screen reader to see how functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

The .jbs File

JAWS handles Structured Braille components through the JAWS Braille Structure (.jbs) files that ship with the screen reader. The default.jbs file handles the most common types of objects, and application-specific .jbs files handle many of the applications the screen reader supports. These files are set up in a very specific format in order for the components to be shown properly on your Braille display. You can edit them manually through a text editor like the Script Manager, or your own text editor. And you may utilize the many functions that ship with JAWS to read from and write to such INI-style files, or to enhance for your own purposes what the existing .jbs files do. You may even add your own application-specific .jbs files other than those that ship with JAWS.

However, it is recommended that you do not change any of the .jbs files that ship with JAWS in the Freedom Scientific root folder of the Shared Settings\(language) folder. Rather, if you wish to experiment manually or through functions with any of these files, do so in your own user Settings\language) folder.

For more details on working with a .jbs file, see the topic under Settings and Configurations called Script File Types.

Components of Structured Braille

The control types and components recognized by Structured Braille are quite numerous. Moreover, you may also add your own custom control types for your own applications. You can work with the existing standard control types and add your own custom components for them through functions or through the JAWS Settings Center. And you can work with many functions that let you manipulate what information components show, and when they show that information.

When you add a custom control type, you add sections for custom controls to the JBS file, in the form:

[CustomControl1]
[CustomControl2]
...

 In the function, BrailleCallbackObjectIdentify, CustomControl1 evaluates to WT_CUSTOM_CONTROL_BASE+1, CustomControl2 evaluates to WT_CUSTOM_CONTROL_BASE+2, etc. WT_CUSTOM_CONTROL_BASE is a constant in HJConst.jsh.

 

It is critical to understand that the standard control types are numbered in a very specific manner tied to their subtype codes for the most part. They have both internal and scripting references. Should you attempt to add your own control type in hjConst.jsh, you will generate very unpredictable Braille results.

Valid Components

Components recognized by JAWS for customizing controls include:

Name

Type

State

Value

Position

Level

ContainerName

ContainerType

dlgName

dlgType

dlgText

dlgPageName

Other

LiveRegion

 

LiveRegion

As of the JAWS 18 December 2016 update and later, LiveRegion provides a generic means for you to add the contents of an ARIA live region to data for controls on a webpage. This is analogous to adding a screen frame, a region of the visible screen, which has been available since JAWS 4.0.

An ARIA live region is a portion (often a region) of a webpage or web application which is dynamically updated and whose content may be automatically spoken. Such a region is typically used for providing real-time status information on a webpage that may or may not be related to the focused control. An example of this is the Google Sheets web application. It uses a Live Region to present the data and coordinates of the currently focused spreadsheet cell, while focus remains on a control which inherently presents no meaning to the end user. Thus, Google Sheets works for a speech user but would be totally unuseable for a Braille user without a component such as LiveRegion.

The LiveRegion component is relevant only when a webpage or web application has focus and the application hosting the webpage or web application supports ARIA. Browsers that support ARIA include Internet Explorer, Firefox, Chrome, or modern applications using a web interface. When you add the LiveRegion component to a control type section of a JBS file, the text of the specified ARIA live region is added to the Braille structured data in the order specified by the component list, if that control type gains focus on the webpage. The format of the component name is “liveRegion”, or “liveRegion:xxx” where xxx specifies the HTML ID string attribute of a specific ARIA live region to include. If the colon is omitted, the content of the last live region updated will be included for the LiveRegion component of the structured data.

Note: By allowing the specification of an ID, multiple Live Regions may be supported in multiple components for the same structured data - e.g., one tracking row totals and another tracking column totals in a spreadsheet.

 

 When Braille is updated, and a valid LiveRegion component exists, the script function BrailleAddLiveRegion is called in processing of the defined components for the focused control type, just as BrailleAddObjectName might be called, etc. The parameters of the BrailleAddLiveRegion function include the control type of the focused control, the id of the LiveRegion, and the text of the LiveRegion. You can use this information to fine-tune an overridden instance of BrailleAddLiveRegion, just as JAWS scripts specific to certain applications already do for the various BrailleAddObject functions.

 

General Remarks about Structured Braille Components

Since the purpose of Structured Braille is mainly to take up as little room as possible on your Braille display, some of the components shown for an object abbreviate the information, and localizes the abbreviation to the language in use. For example, a control that is of type button is shown as "btn" in English. Note though that Structured Braille never abbreviates the value or descriptive information, such as the name of a file in an edit control.

You may arrange Components of a control to show or be hidden on your Braille display. As of JAWS 15, the order in which components are shown by default takes advantage of the status cells on most Braille displays. So as of JAWS 15, the default arrangement of components is the type of the control in the status cells, its state (if applicable), its name, its value (if any), and its description (if available). If the control is part of a dialog, the name of the dialog appears as the rightmost component with the abbreviation, "dlg", following it.

For Microsoft Office ribbons in particular, if a hotkey is available, it is displayed as the last component of a ribbon control. Dialog controls however do not display their hot keys by default.

You can change whether components show, and how they are arranged on the display, through the JAWS Settings Center user interface by checking or unchecking them. You can even reverse the order in which dialog names appear. Some examples of how a control is shown by default include:

·         btn Open Open dlg - The Open dialog with focus on the Open button

·         chk < > Bold Font dlg - Font dialog with focus on the Bold checkbox which is currently unchecked

·         lrbn Bold btn Ctrl+B; Alt, H, 1 - lower ribbon Bold button in an Office application ribbon

Alternatively, you may edit a .jbs file manually. You may decide not only to rearrange the order but to hide certain components altogether, or to show ones that do not show by default, such as the hotkey components for dialog controls. The following sections of this overview explain how a .jbs file is arranged and how you may edit it manually to suit your own needs.

Sections of a .jbs File

A .jbs file is arranged by section. Each section name is contained in brackets and represents a control type JAWS supports in Structured Braille. As mentioned above, you may add custom control types for your own controls as long as you also add script code in the function, BrailleCallbackObjectIdentify, and the functions for the braille components to handle the components. That is, if you need to create a custom arrangement or component list for a particular control type in your custom application, you may add custom control types as sections to a .jbs file. and you may even add your own custom components.

[Component Aliases]

This section is for component alias names as they appear in the JAWS Settings Center user interface. They include items such as:

·         dlgText=Dialog Text

·         dlgPageName=Dialog Page Name

·         dlgName=Dialog Name

·         ContextHelp=Insert F1 Help

·         urbn=Upper Ribbon

·         lrbn=Lower Ribbon

The alias maps the component alias name to the script function that controls the alias. The alias name, to the right of the equal sign, is what appears in Settings Center. The entry to the left of the equals sign is the function name suffix that scripts use to output the component. The suffix is appended to the function, BrailleAddObject, to get the full function name. So for example, for DlgText, the function name is BrailleAddObjectDlgText.

If you need to add a custom component for your own application, add its alias name in this section. So you could add something like,:
 

MyCustomButtonName=Custom Button

 

[State Aliases]

This section is for component State Aliases as they appear in the JAWS user interface. It contains information such as:

csChecked=Checked

csUnchecked=Unchecked

csSubmenu=Submenu

[Control States]

This section is for component Control States as they appear on the Braille display when they are available. Not all states for controls have Braille equivalents. Control states include information such as:

·         csChecked=<x>

·         csUnchecked=< >

·         csSubmenu=->

·         csPressed=<=>

Standard Control Types

The next sections are numbered by the subtype code of the control. For example, the control subtype code for a standard button is 1. Therefore, the section for button is called [SubtypeCode1]. A comment above the bracketed section name clarifies its meaning. Other examples of standard section names for control subtype codes include:

·         [SubtypeCode3] - Edit. Note that multi-line edit controls always use line mode rather than Structured Braille mode if not in a dialog.

·         [SubtypeCode19] - radio button

·         [SubtypeCode20] - Checkbox

·         [SubtypeCode95] - upper ribbon

Custom Control Types

This section is for components to be mapped to standard component categories for treatment by the internal code. For example, if you wish a custom component to be treated as a control's value, the mapping should be:
 CustomComponentName=Value

This affects how the JAWS user interface displays and allows you to show or hide the display of a given component on your Braille display. Examples of custom components would be something like for a table, as in components for Table number/Row/Column (where the cursor is within a table cell).

 

Entries of a Section in a .jbs File

The map for each entry for a control type, whether standard or custom, must include the key name of the entry, followed by an equals sign (=), followed by whatever contents you wish the entry to have. Parts with examples for each include:

·         Components - a list separated by commas of the components to be included for the current control subtype.
 Components=type,state,value,hotkey,description

·         Type - the abbreviation to appear in the status cells representing the control type
 Type=lrbn

·         Removed - the information to be hidden if you prefer not to show it. This is usually left blank unless you have removed something through the JAWS Settings Center.
 Removed=

·         Displayname - the actual name to be shown in the JAWS Settings Center for the current control subtype.
 DisplayName=Lower Ribbon

·         AlignmentPriority - the order in which components should be arranged, starting from leftmost component to rightmost component.
 AlignmentPriority=type,state,value

Code Samples - Custom Controls

Below are two samples of how you would customize a control. First, a customized lower ribbon control is shown, and then a custom control for an object for which you have created your own information to be shown when the cursor is on that object.

For the first example, note that the numbering here is the same as that in the default.jbs file. The difference is that you are creating this section in your own application-specific .jbs file and placing it in your own user Settings\(language) folder.

;Section for Custum Control 96, my special ribbon control.
[subtypecode96]
Components=Type,State,Value,Hotkey,Description
Type=lrbn
Removed=
DisplayName=My Lower Ribbon
AlignmentPriority=Type,State,Hotkey

The second example shows a custom control for your own custom control type, not one normally associated with the standard control types. And notice that the section for this object begins with the number 1. This does not indicate that its subtype is button. Rather, it is the first custom control in this special .jbs file that is associated with your own custom application. Remember! You can create custom controls for your own custom types as long as you add sections to the .jbs file for the custom controls, and handle them with the function, BrailleCallbackObjectIdentify, along with any custom component functions as needed. Standard, that is, non-custom control types, must be one of the recognized control subtype codes listed in hjConst.jsh. They have specific numbers. You cannot add your own subtype code number and expect JAWS to recognize that subtype code because JAWS uses the subtype code numbers both in the Scripting language and internally.

[Component Aliases]
MyObjName=My Object Name
MyObjValue=My Object Value
;for custom control 1, my custom control type
[CustomControl1]
Components=Type,MyObjName,MyObjValue
Type=obj
Removed=
DisplayName=My Object
AlignmentPriority=Type,MyObjName

To make your special custom control be recognized and work properly, you need to overwrite the BrailleObjectCallbackIdentify function and add your own special code in that function as it applies to your special object. Then you need to write functions for your special object to be applied by the callback function when the cursor in your application is on the object.

For example, in Microsoft Word, there are special functions for the objects that are footnotes and endnotes. These functions call the BrailleAddString and other Braille functions to present a footnote or endnote properly in Braille when the cursor lands on such an object in a Microsoft Word documentt.

 

 If Braille is showing the controls in structured mode, use BrailleAddObjectName to show a customized name for a control. Structured braille is used almost everywhere, except in multiline edits of a document or in a command window. You can find examples of BrailleAddObjectName in many script files. The WordBrl.jss and Excelbraille.jss files contain this and many other functions customized to handle specialized braille output for the Word and Excel applications.

 

If you do customize adding a Braille component yourself (for example, by using BrailleAddString in the BrailleAddObjectName function), you must return true. Returning true indicates to JAWS that the scripts handled the component so that the internal braille doesn't also attempt to handle it. Always return by calling down the stack to the next brailleAddObjectName to pass control to internal JAWS for handling everything that you didn't handle yourself.

If you need to define special types of controls which aren't handled in the normal way, for instance, you want to create an entirely new type of Braille structure, you can use the BrailleCallbackObjectIdentify function to tell Braille that this is a new type of control. If you define a new type of control you must define the custom control in the .JBS file for the application. You can see examples of this in word.jbs and excel.jbs. But, if all you needd to do is tell Braille to use a specific name for controls, you don't need to overwrite BrailleCallbackObjectIdentify or define anything in the .JBS file.

Each type of component used by Braille - name, value, state, etc. - has a function which can be overwritten to send specific text to the display. Since Braille is so frequently updated, you want to make sure that the code you add in the function for adding the component doesn't tie up the system with too much processing.

For more details on working with Braille functions, and particularly those that show information in Braille, see the summary in the JAWS Functions book of the Reference Guide called Braille Output.

Reference Guide of JAWS Scripts and Functions

The Freedom Scientific Scripting Reference Guide for JAWS consists of many major category books. Each book contains a summary of the category it represents, along with code samples where appropriate. And the tree structure for each book lists all the scripts and functions for that category. Check the category books that have been added since the last published version of the FSDN, including: Annotations and Aggregate Data Types. In fact, even familiar category books are likely to have new functions for you to explorer - e.g., Cursors.

For example, the Cursors category book now includes information about the Scan cursors introduced in JAWS 2020. So this summary page provides a brief overview of what the cursor scripts and functions do. The tree structure for the Cursors category book includes the entire list of scripts and functions related to cursors at the next level down from the Cursors book summary.

To examine the details about any script or function in the tree structure list, arrow to a script or function name, and press ENTER. This causes the function's details to appear in the right pane. Press F6 to move to the right pane. Then use standard virtual key navigation to read the contents. Press F6 again to return to the tree structure.

As you navigate within a particular category book, you may find duplicate entries. This occurs where a script and function have the same name. An example is the SayAll script and the SayAll function, both of which appear under the category book called "Screen Text". So be sure to check out the summaries of both instances of any entries in the tree structure that appear twice.

When viewing a topic page for a particular script or function, be sure to read the version information for when it became available. This is important to avoid unexpected results in the version of JAWS for which you are coding. At times, a topic page for a script or function may present the entry twice, each entry with slightly different information. The information may vary especially with respect to the ranges of the versions of JAWS where the entry became available. For example, if a function is available through a particular version of JAWS and then gains an additional parameter for newer versions of JAWS, then the topic page for the function displays the function twice. Each entry has its specific parameters and the versions of JAWS in which it is available. An example is the FindString function. So it is critical to know in what version of JAWS the function you are working with is supported, and its expected behaviors.

Finally, take care when working with a source file that already ships with JAWS, such as the Notepad.jss or the Wordpad.jss script source file. Such files already contain scripts and functions by default. Place your sample code at the very bottom of the file. And make sure to remove this overwritten .jss and its associated overwritten .jsb and .jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the .jss script source file and compiled in the .jsb script binary file.

Aggregate Data Types Functions

JAWS supports collections and arrays as data types. Collections and arrays are called aggregate data types because each collection or array is a single entity which is capable of holding multiple pieces of data.

For a complete listing of functions that can be used with collections or arrays, see the topics in this category book of the Reference Guide

Function: ArrayLength 

Description 

 

Returns 

Type: int
 Description: the length of a dimension of the array
 

Parameters 

Param 1: 

Type: variant
 Description: the array for which the length is desired
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: CollectionCompare 

Description 

 

Returns 

Type: int
 Description: True if the two collections have identical contents, False otherwise
 

Parameters 

Param 1: 

Type: collection
 Description: the first of the collections to compare
 Include: Required
 

Param 2: 

Type: collection
 Description: the second of the collections to compare
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: CollectionCopy 

Description 

Normally when you assign a variable containing a collection to another variable, both variables then point at the same collection. This function allows making a copy of a collection so that each variable points at a unique copy of the collection. This means that if the elements of one collection are changed, these changes will not be reflected in the contents of the other collection.

Returns 

Type: Collection
 Description: a new collection with contents identical to that which was copied
 

Parameters 

Param 1: 

Type: collection
 Description: a variable containing the collection to be coppied
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: CollectionItemCount 

Description 

 

Returns 

Type: int
 Description: The number of items in the collection.
 

Parameters 

Param 1: 

Type: collection
 Description: the Collection for which an item count is desired
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: CollectionItemExists 

Description 

 

Returns 

Type: int
 Description: True if ItemName is in the collection, False otherwise.
 

Parameters 

Param 1: 

Type: collection
 Description: the Collection to be searched
 Include: Required
 

Param 2: 

Type: String
 Description: the name of the item to be looked up
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: CollectionRemoveAll 

Description 

 

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: collection
 Description: the Collection from which all items should be removed
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: CollectionRemoveItem 

Description 

 

Returns 

Type: int
 Description: True if ItemName was in the collection and was removed, False otherwise.
 

Parameters 

Param 1: 

Type: collection
 Description: the Collection from which an item is to be removed
 Include: Required
 

Param 2: 

Type: String
 Description: the name of the item to be removed
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: StringArrayCompact 

Description 

Creates a new stringArray containing only the non-null members of the array parameter.

Returns 

Type: stringArray
 Description: The newly created array containing a compacted version of the array parameter.
 

Parameters 

Param 1: 

Type: stringArray
 Description: The array from which a compacted array will be created.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: StringArrayConcat 

Description 

Creates a new stringArray, and copies the members from array1 followed by the members of array2 into the new array. If the optional parameter for compacting has not been specified as true, null members will be copied into the new array.

Returns 

Type: stringArray
 Description: The newly created array containing the concatenation of the two array parameters.
 

Parameters 

Param 1: 

Type: stringArray
 Description: The array whose members will appear first in the returned array.
 Include: Required
 

Param 2: 

Type: stringArray
 Description: The array whose members will appear after the first array parameter in the returned array.
 Include: Required
 

Param 3: 

Type: int
 Description: True if the returned array should be compacted to contain only the non-null members of arrays 1 and 2, false otherwise. Default is false. Uncompacted, the length is the sum of the length of the two array parameters; compacted, the array length is the sum of the length of the compacted arrays.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Annotations Functions

 

 Starting with JAWS 2020, Annotations functions enable you to gain access to auxiliary text for comments, footnotes, and endnotes, revisions, etc. exposed by UIA in applications that contain such types of text.

 

In other words, annotations refer to auxiliary text which is referred to by the main document via a footnote or endnote reference or comment association. The text itself is not part of the document flow but is accessible via various functions when the caret is within the reference mark or associated text to which a comment applies. JAWS can expand such annotations inline after the footnote or endnote marker or after the associated text. Or you can ask JAWS to read the annotation and its other associated detail such as author, date, etc, on demand.

An example of an Annotation function is GetAnnotationAtCaret.

For a complete listing of Annotations functions, see the topics in this category book of the Reference Guide.

Function: GetAnnotationAtCaret 

Description 

returns ref mark, author, text, date and time, and description of an annotation at the cursor. Note that there may be multiple annotations associated with the character at the cursor, e.g. comment plus comment replies.

Returns 

Type: int
 Description: The UIA AnnotationType constant representing the annotation object's type, or 0 if there is no annotation object at the caret.
 

Parameters 

Param 1: 

Type: int
 Description: index 0-based index of annotation to retrieve
 Include: Required
 

Param 2: 

Type: string
 Description: the reference mark or name of the annotation
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: string
 Description: author the author of the annotation
 Include: Required
 

Param 4: 

Type: string
 Description: The text of the actual annotation e.g. comment, footnote or endnote text.
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: string
 Description: The date and time of the annotation if available.
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: string
 Description: A string description of the annotation type if available.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: GetAnnotationCountAtCaret 

Description 

returns the number of annotations at the cursor. The count is 1-based, the annotations list by index is 0-based.

Returns 

Type: int
 Description: the number of annotations such as comments, footnotes or endnotes at the caret
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Application Info Functions

An Application Info function returns information about the application, such as its name, path on your computer, version, etc. JAWS uses this information in order to speak and display it in Braille, for comparison purposes, and so on.

Some examples of Application Info functions include:

·         GetAppFileName

·         GetAppFilePath

·         GetAppTitle

·         GetProgramVersion

For a complete listing of Application Info functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script speaks and displays in Braille the name and version of the current application that has the focus. Note that this script is normally handled by the script that ships with JAWS called "SayAppVersion" and is bound to the key assignment, JAWSKey+CTRL+v. Our simpler example does not handle all scenarios; rather, this example just shows you how to use a couple of the application Info functions.

Script MyApplicationTest ()
Var
            String sMyAppInfo,
            String sMyAppName,
            Int iMyAppVersion
sMyAppInfo = "My application is called %1 and its version is %2."
sMyAppName = GetAppFileName ()
iMyAppVersion = GetProgramVersion (GetAppFilePath ())
If sMyAppName != cscNull
&& iMyAppVersion != 0
            SayFormattedMessage (ot_User_Requested_information,
                        FormatString (sMyAppInfo,sMyAppName,IntToString(iMyAppVersion)))
Else
            SayMessage (ot_help,cmsgUnknown)
EndIf
EndScript

Function: GetAppFileName 

Description 

Determines the file name of the active application program or an active component of that program that was subsequently executed. These file names are the actual program files that are executed by Windows. The file name of the application is used when naming script files.

Returns 

Type: String
 Description: Provides a filename.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetAppFilePath 

Description 

The GetAppFilePath is used to get the fully qualified path name of the currently running application. When used in combination with GetFileDate, the results can be used to surmise an application version.

Returns 

Type: String
 Description: A string containing the fully qualified path name of the currently running application. This includes drive, directory, file name, and extension.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetAppTitle 

Description 

This obtains the title of the active application program. To have the application title spoken, you must use this function as a parameter for the SayString function.

Returns 

Type: String
 Description: The string is the title of the application.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFixedProductVersion 

Description 

GetFixedProductVersion gets the application's fixed product version.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The path of the program for which you want the information. You can get the path by using GetAppFilePath.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the variable to receive the major version value.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: Int
 Description: Type the variable to receive the minor version value.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: Type the variable to receive the update version value.
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: Int
 Description: Type the variable to receive the build number value.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: GetLotusProgramVersion 

Description 

This function returns the major version of Lotus Notes application. For example, if the full version of Lotus Notes 6.5.20.4091, GetLotusProgramVersion would return 6.

Returns 

Type: Int
 Description: An integer specifying the major version of the Lotus Notes program.
 

Parameters 

Param 1: 

Type: string
 Description: The path of the Lotus Notes program for which you want the version. You can get the path by using GetAppFilePath.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: GetLotusVersionInfoString 

Description 

GetLotusVersionInfoString gets a requested string from the version table of Lotus Notes application. If version is lower than 6, this function get the string from String table of this application.

Returns 

Type: String
 Description: The requested string.
 

Parameters 

Param 1: 

Type: string
 Description: The path of the Lotus Notes program for which you want the information. You can get the path by using GetAppFilePath.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetMetroAppName 

Description 

Retrieves the name of the current application if it is a Universal/Modern/Metro app. (They're all the same thing renamed over the years.) This function should only be used if IsMetroApp returns true.

Returns 

Type: String
 Description: the app name. Note that the name may not correspond to anything that a user will see on screen.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetMetroAppVersion 

Description 

Retrieves the version of the current application if it is a Universal/Modern/Metro app. (They're all the same thing renamed over the years.) This function should only be used if IsMetroApp returns true.

Returns 

Type: String
 Description: Version of the form "17.0.50.0"
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetProgramVersion 

Description 

This function returns the major version of an application. For example, if the full version was 3.00.62, Get ProgramVersion would return 3.

Returns 

Type: Int
 Description: An integer specifying the major version of the specified program.
 

Parameters 

Param 1: 

Type: string
 Description: The path of the program for which you want the version. You can get the path by using GetAppFilePath.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetVersionInfoString 

Description 

GetVersionInfoString gets a requested string from the version table of an application.

Returns 

Type: String
 Description: The requested string.
 

Parameters 

Param 1: 

Type: string
 Description: The path of the program for which you want the information. You can get the path by using GetAppFilePath.
 Include: Required
 

Param 2: 

Type: string
 Description: Identifier string specifying which piece of information is requested. Identifiers must be contained within quotation marks. You can use the following identifiers: Comments, CompanyName, FileDescription, FileVersion, InternalName, LegalCopyright, LegalTrademarks, OriginalFilename, PrivateBuild, ProductName, ProductVersion, or SpecialBuild.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayAppVersion 

Description 

Announces the version of the currently running program. Useful if you are running multiple versions of an application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SayProgramComments 

Description 

Useful if you are running multiple versions of an application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Braille Device Functions

A Braille Device function provides or returns information about the currently connected and active Braille display. JAWS uses this information to determine whether to display information in Braille, for comparison purposes, and so on.

Some examples of Braille Device functions include:

·         BrailleInUse

·         BrailleGetCellCount

·         BrailleGetStatusCellCount

Take time to examine some of the functions in the Braille.jss script source file that ships with JAWS to see how these functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

For a complete listing of Braille Device functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script calls two functions to get the number of regular cells and status cells (if any). If a Braille display is attached and active, JAWS speaks and flashes the information in Braille. Otherwise, JAWS speaks and flashes an error message.

It is assumed that the function is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MyBrailleCellsTest ()
Var
            String sMsgMyCells,
            String sMsgNoDevice
sMsgNoDevice = "I' can't find a Braille display."
If ! BrailleInUse ()
            SayMessage (ot_error, sMsgNoDevice)
            Return
EndIf
; For sMsgMyCells, %1 is the number of cells, and %2 the number of status cells, if any.
sMsgMyCells = "I have %1 cells and %2 status cells."
SayFormattedMessage (ot_user_requested_information,
            FormatString (sMsgMyCells, IntToString (BrailleGetCellCount ()), IntToString (BrailleGetStatusCellCount ())))
EndScript

Function: BrailleGetCellCount 

Description 

this function returns the number of cells on the installed and active Braille display.

Returns 

Type: Int
 Description: The number of cells.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleGetDeviceInfo 

Description 

This function gets the Braille Display's driver library name, its model name and its port string.

Returns 

Type: Int
 Description: true if a Braille Display is found, False otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: Driver name.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: String
 Description: Display Name.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: Port String.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleGetStatusCellCount 

Description 

Returns the number of status cells on the currently attached Braille display.

Returns 

Type: Int
 Description: The number of status cells, or 0 if no Braille display is connected.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleInUse 

Description 

Checks to see if a Braille display is in use.

Returns 

Type: Int
 Description: TRUE if Braille display is being used, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetBrailleDisplayName 

Description 

Returns the name of the braille display that is currently in use.

Returns 

Type: String
 Description: The name of the braille display that is currently in use. If no braille display is attached, this function returns an empty string.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetBrailleKeyboardLayout 

Description 

Returns the keyboard layout for the braille display that is currently in use.

Returns 

Type: String
 Description: The keyboard layout for the braille display that is currently in use. If no braille display is attached, this function returns an empty string.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetDefaultBrailleDisplayInfo 

Description 

Retrieves information about the default braille display.

Returns 

Type: int
 Description: True if information about the default braille display could be retrieved, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: braille display short name.
 Include: Required
 

Param 2: 

Type: string
 Description: braille display long name.
 Include: Required
 

Param 3: 

Type: string
 Description: braille display driver.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.00 and later

Function: GetNavRowCellOffset 

Description 

Retrieves the position of the nav row key pressed on a Braille display, adjusted to the appropriate offset if status cells are on.

Returns 

Type: int
 Description: 1 through the number of cells on the display, minus th the number of status cells + 1 if status cells are active.
 

Parameters 

Param 1: 

Type: int
 Description: The actual nav row cell number.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Braille Keyboard Functions

A Braille Keyboard function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Braille Keyboard, such as the script for BrailleControlLeftMouseClick, for example. However, the focus of the present discussion is on functions related to Braille Keyboard that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Incidentally, functions for Keyboard other than those specifically for Braille merit their own category book and summary in the Reference Guide. So functions in the Braille Keyboard category book of the Reference Guide refer only to Braille displays.

Some examples of Braille Keyboard functions include:

·         BrailleGetTypeKeysMode

·         BrailleSetTypeKeysMode

·         ContractedBrailleInputAllowedNow

Take time to examine some of the functions in the Braille.jss script source file that ships with JAWS to see how these functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

For a complete listing of Braille Keyboard functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the ContractedBrailleInputAllowedNow function is overwritten in the Notepad.jss script source file from the function in default.jss. The overwritten function turns off Contracted Braille mode if it is enabled, in the Notepad document window.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, set the Braille display to allow input and output from the Braille display. Then just start typing in the Notepad document window using the Braille display. You are forced to type in Computer Braille, not in contracted English or Unified English Braille.

Int Function ContractedBrailleInputAllowedNow ()
If GetObjectSubtypeCode () == wt_multiline_edit
            Return FALSE ; Allow only Computer Braille to be typed.
EndIf
Return ContractedBrailleInputAllowedNow ()
EndFunction

Script: BrailleAltTab 

Description 

Allows you to control the Braille display. Passes the alt tab key combination to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleControlLeftMouseClick 

Description 

Does a control left mouse click at the point of the Braille cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleCyclePreferredTranslationTable 

Description 

To select which Braille tables this keystroke cycles between, in Settings Center select from the available Braille tables.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: BrailleEnter 

Description 

Lets you control the Braille display. Passes the Enter key to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleEscape 

Description 

Lets you control the Braille display. Passes the Escape key to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleGetTypeKeysMode 

Description 

When TypeKeys mode is enabled, characters typed using the display are inserted into the application with focus.

Returns 

Type: int
 Description: TRUE if TypeKeys mode is enabled, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.20 and later

Script: BrailleRightMouseClick 

Description 

Useful for activating context menus.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleRouting 

Description 

Press a cursor routing button over any cell to move the cursor to that location, or activate a control such as a link on a Web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleSelectBlock 

Description 

Start by using the keyboard to find the first character you want to select. Move the Braille Cursor to the last character and press this keystroke. All text must be visible on screen and in the same document window. The mouse pointer will select the text between the start and end position.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleSelectText 

Description 

The first time This keystroke is invoked, the coordinates of the beginning of the block of text to be selected are stored and remarked with a eight DOT Braille cursor. Then the user can move the Braille line to the end of the block and press the keystroke again to select. This action can be canceled by using the ClearValues script.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleSelectTextClearValues 

Description 

Turns off Braille selection and returns the cursor shape to its default.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleSetTypeKeysMode 

Description 

When TypeKeys mode is enabled, characters typed using the display are inserted into the application with focus.

Returns 

Type: int
 Description: TRUE if the value is properly set, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: Set to TRUE to enable TypeKeys mode, FALSE otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Script: BrailleShiftTab 

Description 

Performs a SHIFT+TAB and lets you control the Braille display.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleSupportsTypeKeysMode 

Description 

Determines whether or not TypeKeys mode is supported by at least one of the loaded Braille drivers.

Returns 

Type: int
 Description: TRUE if the mode is supported, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Script: BrailleTab 

Description 

Performs a tab and allows you control the Braille display.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ContractedBrailleInputAllowedNow 

Description 

Overwrite this function in your script file when you need to turn off Contracted Braille input in a scenario where it would otherwise be enabled. An example would be in Microsoft Word, where Quick Navigation Keys are enabled, CanEditNow should return false so the keyboard is used for navigation rather than editing This is called for the item with focus., and is not called for a window which does not support contracted input to begin with..

Returns 

Type: int
 Description: TRUE or False, script method for enabling or disabling contracted Braille input.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: FHPBrailleSelectText 

Description 

text is marked with routing keys

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsContractedBrailleInputSupported 

Description 

Returns TRUE or FALSE whether the control with focus supports Contracted Braille input in JAWS. Use ContractedBrailleInputAllowedNow function in the scripts to return control whether or not contracted input support should be allowable.

Returns 

Type: int
 Description: TRUE or FALSE whether or not contracted input is supported in JAWS
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SALModeButton 

Description 

Speaks the appropriate "SAL mode" representation of a braille cell

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: number Number of the braille cell to speak
 Include: Required
 

Param 2: 

Type: Int
 Description: 0 to speak the character at the cell location, 1 to speak and spell the word at the location.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Script: SpeakBrailleStudyCharacterInfo 

Description 

Speaks Braille Study information without the need to toggle Braille Study Mode on.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Script: SpeakBrailleStudyWordInfo 

Description 

Speaks Braille Study information without the need to toggle Braille Study Mode on.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Braille Navigation Functions

A Braille Navigation function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Braille Navigation, such as the script for BrailleAutoAdvance, for example. However, the focus of the present discussion is on functions related to Braille Navigation that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Incidentally, functions for navigation other than those specifically for Braille merit their own category book and summary in the Reference Guide. So functions in the Braille Navigation category book of the Reference Guide refer only to navigation for Braille displays or for the Braille Viewer.

Some examples of Braille Navigation functions include:

·         BrailleAutoAdvanceMode

·         BrailleNextLine

·         BraillePriorLine

·         BrailleRoutingButton

Take time to examine some of the functions in the Braille.jss script source file that ships with JAWS to see how these functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

For a complete listing of Braille Navigation functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the BrailleRouting script is overwritten in the Notepad.jss script source file from the function in default.jss. The overwritten script performs the default action; but if the routing key is pressed twice quickly, JAWS flashes a message to indicate the number of the routing button that was pressed.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script BrailleRouting ()
PerformScript BrailleRouting ()
If IsSameScript () >= 1 ; The routing key was pressed twice quickly.
            BrailleMessage (IntToString (GetLastBrailleRoutingKey ()))
EndIf
EndScript

Script: BrailleAutoAdvance 

Description 

When Auto Advance Mode is enabled, JAWS will automatically pan through documents at the specified speed. Panning stops either at the bottom of the document, focus changes or a routing button is pressed. If a Flash Message is displayed, Auto Advance is paused until the Flash message is manually or automatically cleared. The user may still pan left or right while the mode is active. the timer will be restarted so that the user may reread the new information.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: BrailleAutoAdvanceMode 

Description 

When Auto Advance Mode is enabled, JAWS will automatically pan through documents at the specified speed. Panning stops either at the bottom of the document, focus changes, a routing button is pressed or this function is called again with the iMode parameter set to FALSE. If a Flash Message is displayed, Auto Advance is paused until the Flash message is manually or automatically cleared. The user may still pan left or right while the mode is active. the timer will be restarted so that the user may reread the new information.

Returns 

Type: int
 Description: TRUE if the feature was successfully enabled or disabled.
 

Parameters 

Param 1: 

Type: int
 Description: Set to TRUE to turn the mode on, FALSE to turn it off.
 Include: Required
 

Param 2: 

Type: int
 Description: optional duration between pans, if not supplied, defaults to the value of OPT_BRL_AUTOADVANCE_INTERVAL.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: BrailleAutoAdvanceModeActive 

Description 

When Auto Advance Mode is enabled, JAWS will automatically pan through documents at the specified speed. Panning stops either at the bottom of the document, focus changes, a Flash Message is displayed or the feature is explicitly disabled. The user may still pan left or right while the mode is active. the timer will be restarted so that the user may reread the new information.

Returns 

Type: int
 Description: TRUE if the feature is active, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: BrailleBottom 

Description 

In Line mode, switches to the Braille cursor and goes to the bottom of the window. When in a structured line, pans right to show the end of the line.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleMoveLeft 

Description 

Moves the Braille display to the left without leaving the current line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleMoveRight 

Description 

Moves the Braille display to the right without leaving the current line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleNextLine 

Description 

Moves the Braille cursor one line down and shows the new line.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1,"WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleNextLine 

Description 

If Structured mode is active, forces the braille display into line mode and moves the braille cursor to the next line. If line mode is active, moves the braille cursor to the next line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BraillePanLeft 

Description 

Displays the prior group of Braille characters from the line with the active cursor. The characters that are displayed when this function is used are those that precede the first character on the current display of Braille characters. For example, the display moves or pans to the left to reveal additional text.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Int
 Description: true to move to the last segment of the prior line if no more text to the left, default value is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BraillePanLeft 

Description 

If there is more text to the left on the current line, display it. If not, display the final segment of the previous line.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BraillePanLeftBySegment 

Description 

Aligns the component to the first text cell on the braille display.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: BraillePanRight 

Description 

Displays the next group of Braille characters from the line with the active cursor. The characters that are displayed when this function is used are those that follow the last character on the current display of Braille characters. For example, the display moves or pans to the right to reveal additional text.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Int
 Description: true to move to the first segment of the next line if no more text to the right, default value is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BraillePanRight 

Description 

If there is more text to the right on the current line, display it. If not, display the first segment of the next line.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BraillePanRightBySegment 

Description 

Aligns the component to the first text cell on the braille display.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: BraillePriorLine 

Description 

Moves the Braille cursor one line up and shows the new line.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BraillePriorLine 

Description 

If Structured mode is active, forces the braille display into line mode and moves the braille cursor to the prior line. If line mode is active, moves the braille cursor to the prior line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleRoutingButton 

Description 

Attempts to move the PC cursor to the location designated by the braille cell.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The 1-based number of a braille cell.
 Include: Required
 

Param 2: 

Type: int
 Description: 0 route and click, 1 rout only. See constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BrailleTop 

Description 

In Line mode, switches to the Braille cursor and goes to the top of the window. When in a structured line, pans left to the beginning of the line.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: DecreaseBrailleAutoAdvanceSpeed 

Description 

This script decreases the Braille Auto Advance speed by half a second to a minimum of ten seconds.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: FHPBraillexEL2R 

Description 

EAB two steps right; handles different working modes

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: FSLeftRockerDown 

Description 

If the active cursor is not following the display, the display will move away from it. Otherwise, the active cursor will follow.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: FSLeftRockerUp 

Description 

If the active cursor is not following the display, the display will move away from it. Otherwise, the active cursor will follow.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FSRightRockerDown 

Description 

The Braille display and active cursor will both move at the same time, leaving the Braille display at the position of the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FSRightRockerUp 

Description 

The Braille display and active cursor will both move at the same time, leaving the Braille display at the position of the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: IncreaseBrailleAutoAdvanceSpeed 

Description 

This script increases the Braille Auto Advance speed by half a second to a maximum of half a second.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: LeftFocusWhizWheelDown 

Description 

When tracking focus, moves down when List Mode is on, or forwards through controls similar to pressing TAB. Also performs line, sentence, paragraph or display navigation. When tracking the Braille cursor, all Braille cursor and line settings are honored.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.5

Script: LeftFocusWhizWheelUp 

Description 

Moves up when List Mode is on, or backward through controls similar to pressing SHIFT+TAB. Also performs line, sentence, paragraph or display navigation. When tracking the Braille cursor, all Braille cursor and line settings are honored.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.5

Script: LeftWhizWheelDown 

Description 

Select the movement unit by pressing down on the whiz wheel. Each wheel's settings are stored and remembered separately, as they are locally in your note taker.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: LeftWhizWheelUp 

Description 

Select the movement unit by pressing down on the whiz wheel. Each wheel's settings are stored and remembered separately, as they are locally in your note taker.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RightFocusWhizWheelDown 

Description 

Moves down when List Mode is on, or forward through controls by use of tab. Also performs line, sentence, paragraph or display navigation. When tracking the Braille cursor, moves right on the current line. Lines do not wrap in Track Braill Cursor, so that you can visualize the layout of screens, windows and documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.5

Script: RightFocusWhizWheelUp 

Description 

Moves up when List Mode is on, or backward through controls by use of Shift tab. Also performs line, sentence, paragraph or display navigation. When tracking the Braille cursor, moves left on the current line. Lines do not wrap in Track Braill Cursor, so that you can visualize the layout of screens, windows and documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.5

Script: RightWhizWheelDown 

Description 

Select the movement unit by pressing down on the whiz wheel. Each wheel's settings are stored and remembered separately, as they are locally in your note taker.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RightWhizWheelUp 

Description 

Select the movement unit by pressing down on the whiz wheel. Each wheel's settings are stored and remembered separately, as they are locally in your note taker.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Braille Output Functions

A Braille Output function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Braille Output, such as the script for BrailleGrade2ExpandCurrentWord, for example. However, the focus of the present discussion is on functions related to Braille output that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Braille Output functions include:

·         BrailleAddObjectName

·         BrailleAddFocusLine

·         BrailleAddString

·         BrailleBuildStatus

·         BrailleMessage

Take time to examine some of the functions in the Braille.jss script source file that ships with JAWS to see how these functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

For a complete listing of Braille Output functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the BrailleAddObjectType function is overwritten to display extra information not normally displayed for a button in a Notepad dialog. The function, along with many other similar functions, is used by the BrailleCallbackObjectIdentify function to output the structured Braille components that appear whenever JAWS should display such information in Braille.

It is assumed that the function is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply activate a dialog in the Notepad application and TAB through the various controls. Notice what happens on theBraille display when a button control gains focus.

Int Function BrailleAddObjectType ( Int nSubtype)
If ! DialogActive () ; A dialog is not active.
|| GetMenuMode () < 0 ; A menu is not active.
            Return BrailleAddObjectType (nSubtype)
EndIf
If nSubtype == wt_button
            ; Add the nonsense "hello" highlighted text to the Braille display output
            ; of the control type.
            BrailleAddString ("hello", 0, 0, attrib_highlight)
EndIf
; Ensure that the normal control type information is also displayed.
Return BrailleAddObjectType (nSubtype)
EndFunction

Additional Resources

For more details on working with Structured Braille components, see the summary in the General Scripting Concepts book called Structured Braille Functionality.

Function: BrailleAddBrlCursorLine 

Description 

This function is used To add the contents of the line at the Braille cursor to the display in Structured mode. It is different to BrailleAddFocusLine because it uses the line at the Braille cursor rather than the PC cursor. It is primarily required in virtual documents when Brailling table data.

Returns 

Type: Int
 Description: True if successful, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleAddField 

Description 

Adds the field at the cursor to the Braille Structured data and allows cursor routing within the field.

Returns 

Type: int
 Description: true or false.
 

Parameters 

Param 1: 

Type: int
 Description: If true, and the cursor is at the offset just after the last character of text in the field, jaws returns the preceding field.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: BrailleAddFocusCell 

Description 

Used from within the BrailleAddObjectXX functions to Braille the contents of a table cell which may visually span multiple lines. This also allows proper tracking of the caret when editing the contents of a cell.

Returns 

Type: Int
 Description: True if successful, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: BrailleAddFocusItem 

Description 

Used from within the BrailleBuildLine function to add the contents of the current control to the data to be shown on the Braille display.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: JAWS 19 and later: Set to true to force no translation for text in the focused item. If false or not supplied, text is translated if appropriate.
 Include: Optional
 

Param 2: 

Type: int
 Description: JAWS 19 and later: Set to true if you do not want the space between segments. (If false or not supplied, a segment delimiter space is added).
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleAddFocusLine 

Description 

Used from within the BrailleBuildLine function to add the contents of the current line to the data to be shown on the Braille display.

Returns 

Type: Int
 Description: True if successful, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleAddFrame 

Description 

Used to Braille a frame.

Returns 

Type: Int
 Description: TRUE if the frame exists and was added, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: the name of the frame to be added.
 Include: Required
 

Param 2: 

Type: Int
 Description: attributes of text to include.
 Include: Optional
 

Param 3: 

Type: Int
 Description: text color of text to include.
 Include: Optional
 

Param 4: 

Type: Int
 Description: background color of text to include.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleAddString 

Description 

Used with in BrailleBuildLine to add text to the Braille display.

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: Text to be added.
 Include: Required
 

Param 2: 

Type: Int
 Description: The X position for the mouse to click if a routing button is pressed over any of the cells in this string. This value is used along with Y position to determine where to click. Make both values 0 if no click should happen.
 Include: Required
 

Param 3: 

Type: Int
 Description: the Y position for the mouse to click if a routing button is pressed over any of the cells in this string. This value is used along with X position to determine where to click. Make both values 0 if no click should happen.
 Include: Required
 

Param 4: 

Type: Int
 Description: Combination of the ATRIB_xxx values from HJCONST.JSH that indicate the attributes of the characters in this string.
 Include: Required
 

Param 5: 

Type: int
 Description: output this string directly without translation even if Grade II or UEB is turned on. (Available as of JAWS 10.0.)
 Include: Optional
 

Param 6: 

Type: int
 Description: JAWS 19 and later: Set to true if you do not want the space between segments. If false or not supplied, a segment delimiter space is added.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleAddStringWithCallback 

Description 

Like BrailleAddString, but rather than supplying a click point, supply a function to be executed if a routing button is clicked within this segment. The function may have parameters, e.g. BrailleAddStringWithCallback("hello", "sayString(\"hello\")", attrib_highlight)

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: the string to Braille.
 Include: Required
 

Param 2: 

Type: string
 Description: a function and its parameters.
 Include: Required
 

Param 3: 

Type: int
 Description: attributes such as attrib_highlight, etc.
 Include: Optional
 

Param 4: 

Type: int
 Description: noTranslation set to true to force no translation for text in the focused item. If false or not supplied, text is translated if appropriate.
 Include: Optional
 

Param 5: 

Type: int
 Description: noSegmentDelimiter set to true if you do not want the space between segments. If false or not supplied, a segment delimiter space is added.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: BrailleAddTextBetween 

Description 

This function adds the text between the specified coordinates to the Braille display. It is used in situations where you do not wish to show the entire line but do wish to show the cursor context as you edit in this area of the line. It is used for example in MSWord 2000 and above in table cells.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the starting coordinate on the line.
 Include: Required
 

Param 2: 

Type: Int
 Description: the ending coordinate on the line.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleBuildLine 

Description 

Build the line to be displayed on the Braille display.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleBuildStatus 

Description 

Builds the line of Braille to be displayed in the status cells.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleClearMessage 

Description 

This function clears the current Flash message.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: if TRUE and the message time is set to infinite, the message will not be cleared, it defaults to FALSE.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Script: BrailleDescribeFont 

Description 

This is the font style name and character size of the character corresponding to the routing key pressed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleDescribeItem 

Description 

Describes the item that the Braille cursor is currently located on. This is similar to screen sensitive help.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleG2StringLength 

Description 

Determines the length of the translation to grade two Braille of a given string.

Returns 

Type: Int
 Description: The length of the given string when translated to grade two Braille.
 

Parameters 

Param 1: 

Type: string
 Description: String of interest.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleGetCursorDots 

Description 

Retrieves the DOT pattern used to show the active cursor on the Braille display.

Returns 

Type: String
 Description: The DOT numbers used to show the active cursor. For example, "78."
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleGetDataOffsetFromDisplayOffset 

Description 

This function gets the offset into the original data (string) from a display offset (the offset as seen on the braille display). This is useful for getting the original position of a character, which is now at a different offset due to braille translation.

Returns 

Type: int
 Description: DataOffset the actual offset into the original data (string) sent to the display.
 

Parameters 

Param 1: 

Type: int
 Description: DisplayOffset the offset as seen on the braille display
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: BrailleGetStateString 

Description 

This function returns the state string as defined in the app or default jbs for the specified state flags. This may be a combination of strings. The state flags maybe any combinations of the CTRL_XX attributes defined in hjconst.jsh, eg CTRL_CHECKED etc.

Returns 

Type: String
 Description: the state string.
 

Parameters 

Param 1: 

Type: Int
 Description: the state flags.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleGetSubtypeDisplayName 

Description 

This function returns the type display name as defined in the app or default jbs for the specified type constant. Note that if no value is defined for a standard window type's displayname key in the jbs, the default string spoken for that type will be returned.

Returns 

Type: String
 Description: the type display name.
 

Parameters 

Param 1: 

Type: Int
 Description: either one of the wt_typeCode constants or a constant representing a custom control ie wt_custom_control_base+customControlCode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleGetSubtypeString 

Description 

This function returns the type string as defined in the app or default jbs for the specified type constant.

Returns 

Type: String
 Description: the type string
 

Parameters 

Param 1: 

Type: Int
 Description: either one of the wt_typeCode constants or a constant representing a custom control ie wt_custom_control_base+customControlCode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleGrade2ExpandCurrentWord 

Description 

This is only relevant when Braille grade two translation is active. When this option is turned on, the current line will be in grade two, with the exception of the current word, which will remain expanded. This option is On by default.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleIsMessageBeingShown 

Description 

This function Determines if a Flash message is currently being shown on the display, ie if the user has called BrailleMessage or internal code has called ShowMessage.

Returns 

Type: int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: BrailleIsStructuredLine 

Description 

Determines if the Braille line is a structured line. Only applicable when using Structured mode.

Returns 

Type: Int
 Description: True if line is structured, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleLine 

Description 

Sends the current line of text to a Braille display. It is automatically executed ten times per second and does not need to be routinely used by a script. It can be used in a script after the BrailleString function has been used and you are ready to display a line of information from the desktop.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If the entire line will not fit on the Braille display, then this indicates which portion to show. Should be one of the brlShowXXX constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleMessage 

Description 

This function sends a Flash message to the display which is held on the display for the specified length of time. You may append messages together by using the second optional parameter. If you do not specify the duration of the message or the append flag, the duration will default to the value of the OPT_BRL_MESSAGE_TIME JCF option and the message will replace any existing message.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: string
 Description: sMessage the message to send.
 Include: Required
 

Param 2: 

Type: int
 Description: if non-zero, the message will be appended to the existing message, if 0, the message will replace the current message.
 Include: Optional
 

Param 3: 

Type: int
 Description: the time in milliseconds to keep the message on the display before restoring the display to the prior content.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: BrailleMessageRepeatLast 

Description 

This function reshows the last Flash message that was sent to the Braille display. It is shown for the same duration as it was originally shown for and with the same prefix. This works even if Flash Messages have been disabled.

Returns 

Type: int
 Description: True if the last message was repeated, False if no messages have yet been shown.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: BrailleRefresh 

Description 

Used to refresh the Braille display and redisplay the appropriate text.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If the entire line will not fit on the Braille display, then this indicates which portion to show. Should be one of the brlShowXXX constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleSetCursorDots 

Description 

Sets the DOT pattern used to represent the active cursor on the Braille display.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The DOT numbers used to show the active cursor. For example, "78."
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleSetStatusCells 

Description 

Puts characters on the status cells of the Braille Display. This function should only be called from within a BrailleBuildStatus function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Characters to be placed in the Braille status cells.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleString 

Description 

Sends the specified string to the Braille display regardless of whether or not the line is visible.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: String to be sent to the Braille display.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleSwitchTransLanguage 

Description 

Switches to a Braille Translation engine appropriate for the specified language.

Returns 

Type: Int
 Description: true on success, false otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: language abbreviation, eg enu, deu, etc.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: FocusGDBHelpMessage 

Description 

Provides help for the user definable General Display Buttons located between the advance bars on your Focus Braille display. Press this keystroke to learn about using Keyboard Manager to assign commands to these buttons.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetBrailleCellColumn 

Description 

Retrieves the screen column at which the specified Braille cell is located.

Returns 

Type: Int
 Description: The horizontal pixel location of the cell.
 

Parameters 

Param 1: 

Type: Int
 Description: The number of the Braille cell of interest.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetBrailleCellRow 

Description 

Retrieves the screen row at which the specified Braille cell is located.

Returns 

Type: Int
 Description: The vertical pixel location of the cell.
 

Parameters 

Param 1: 

Type: Int
 Description: The number of the Braille cell of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLastBrailleRoutingKey 

Description 

Retrieves the position of the last routing key pressed on a Braille display.

Returns 

Type: Int
 Description: The position of the Braille cell with which the routing key is associated. 1 = "cell 1", 2 = "cell 2", and so on.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: NavRockersTracking 

Description 

Press this keystroke to toggle between the two settings. This temporary setting allows you to track focus, using line/sentence/paragraph and dialog navigation, or track the Braille Cursor. When tracking the Braille Cursor, the left nav rocker moves by lines, while the right nav rocker moves left and right. Since the right nav rocker does not wrap, you can realistically visualize the layout of your screen.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: NextBrailleString 

Description 

When the Braille device is in string mode, it displays the next string of Braille characters that are in the queue of strings that have been received by the Braille device.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1 (another string was available for display), "WAS_NOT_SUCCESSFUL" = 0 (another string was not displayed).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PointNeedsMarking 

Description 

This function determines if a character at a point on the screen should be marked. It is only called if the JCF Option OPT_BRL_CHECK_EXT_MARKING is on.

Returns 

Type: Int
 Description: True or False
 

Parameters 

Param 1: 

Type: Int
 Description:
 Include: Required
 

Param 2: 

Type: Int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: PriorBrailleString 

Description 

Displays the prior string of Braille characters that are in the queue of strings that have been received by the Braille device. This function is used when the Braille device is in string mode.

Returns 

Type: Int
 Description: WAS_SUCCESSFUL = 1 (another string was available for display),"WAS_NOT_SUCCESSFUL = 0 (another string was not displayed).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PushBrailleMathString 

Description 

This function is identical to PushBrailleString; however, the text is flagged as Math text, instead of plain text. The effect of this is that the braille translator will translate the string using special math rules, instead of the regular ones.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: string
 Description: Text the text to push to the braille display.
 Include: Required
 

Param 2: 

Type: int
 Description: CursorPosition the position of the cursor in the text.
 Include: Required
 

Param 3: 

Type: string
 Description: BreakableOffsets A string containing a comma delimited list of offsets at which the string can be broken for panning (i.e. "2,5,6").
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: PushBrailleString 

Description 

This function will push the given text to the braille display to be shown, setting the cursor at the given position. Strings can only be pushed to the display if the active braille mode is the Push mode. While in Push mode, only text sent by PushBraille methods will be shown on the display. Push mode can be enabled by calling SetJCFOption(OPT_BRL_MODE, BRL_MODE_PUSH). Make sure it is disabled appropriately, or else the user will be stuck in a mode where their normal braille isn't displayed.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: string
 Description: Text the text to push to the braille display.
 Include: Required
 

Param 2: 

Type: int
 Description: CursorPosition the position of the cursor in the text.
 Include: Required
 

Param 3: 

Type: string
 Description: BreakableOffsets A string containing a comma delimited list of offsets at which the string can be broken for panning (i.e. "2,5,6").
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Script: RepeatLastFlashMessage 

Description 

This script shows the last Flash message sent to the Braille display for the duration of the original message. This script may be called even with Flash messages disabled.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: SetBrailleMessageStatusText 

Description 

This function enables the user to define the text to be shown either in the status area of the Braille display or prepended to a Flash message during the display of a Flash message. If the string parameter is not supplied or is NULL, the default status message as defined in the jcf file will be restored and used.

Returns 

Type: int
 Description: TRUE if the function succeeds, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: sStatusMsg the text to be shown in the status cell area of the display or prepended to a Flash message if the display has no status cells.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: SuppressG2TranslationForNextStructuredModeSegment 

Description 

Suppresses the translation of the next Braille segment in a set of components for a structured line. Call from a BrailleAddObjectXX callback method which corresponds to a Braille structure component that precedes the component to always be untranslated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Script: SwitchTranslatorRule 

Description 

The braille translator is toggled on if it is not already on when the translator rule is toggled.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: WheelsTracking 

Description 

Press this keystroke to toggle between the two settings. This temporary setting allows you to track focus, using line/sentence/paragraph and dialog navigation, or track the Braille Cursor. When tracking the Braille Cursor, the left wheel moves by lines, while the right wheel moves left and right. Since the right wheel does not wrap, you can realistically visualize the layout of your screen.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 9.0 and later

Braille Settings Functions

A Braille Settings function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Braille Settings, such as the script for BrailleGrade2Translation, for example. However, the focus of the present discussion is on functions related to Braille settings that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Incidentally, functions for settings other than those specifically for Braille merit their own category book and summary in the Reference Guide. So functions in the Braille Settings category book of the Reference Guide refer only to settings for Braille displays or for the Braille Viewer.

Some examples of Braille Settings functions include:

BrailleVerbosity

ToggleOutputType

Take time to examine some of the functions in the Braille.jss script source file that ships with JAWS to see how these functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

For a complete listing of Braille Settings functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the current Braille verbosity for the currently attached display. It flashes the information in Braille but does not speak it.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script TestMyBrailleVerbosityLevel ()
; Passing the function call a parameter of TRUE changes the Braille verbosity.
; Passing it a parameter of FALSE simply returns the current Braille verbosity level.
; Using BrailleMessage to provide the information ensures that it is flashed in Braille and not spoken.
BrailleMessage (BrailleVerbosity (FALSE)) ;
EndScript

Script: BrailleChangeCursorShape 

Description 

If the Braille cursor is set to DOT 7 and 8, then DOTS 7 and 8 will be raised to indicate the location of the cursor. If all DOTS cursor is set, then all the DOTS in the cell are raised to indicate the cursor position.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleGetCurrentTranslatorMode 

Description 

Queries the active braille translator to see if it supports modes. If it does then the function gets the current mode setting.

Returns 

Type: Int
 Description: current mode of the braille translator if it supports modes, -1 otherwise. The first mode is always 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: BrailleGetTranslatorModeCount 

Description 

Queries the active braille translator to see if it supports mode setting, and if so returns the number of modes.

Returns 

Type: Int
 Description: number of modes if braille translator supports modes, 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: BrailleGetTranslatorModeID 

Description 

Returns the internal ID of the translator mode supplied by index.

Returns 

Type: int
 Description: The internal ID of the mode by index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille rules whose ID to return.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

Function: BrailleGetTranslatorModeName 

Description 

Queries the active braille translator to see if it supports operating more than one mode. If it does then the function retrieves the name of the mode whose index matches the parameter provided.

Returns 

Type: String
 Description: copy of the braille translator mode name from the braille translator, empty string otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: The index of the mode name desired - the index starts at 0.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Script: BrailleGrade2Translation 

Description 

Turns On or Off grade 2 Translation when you desire.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleLineCursorShapeOff 

Description 

Turns off all DOTS or DOTS 7 and 8 in the Braille display depending on what mode you are in as far as the cursor is concerned.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleSet6DOTS 

Description 

This keystroke sets six DOTS mode on a Braille display Usful for older Braille displays.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleSet8DOTS 

Description 

Sets 8 DOT mode on the Braille display.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BrailleSet8PixelsPerSpace 

Description 

Show one empty space on the Braille display for each 8 pixels of blank space on the screen.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleSetTranslatorMode 

Description 

Queries the active braille translator to see if it supports mode setting. If it does then the function sets the mode using the parameter provided.

Returns 

Type: Int
 Description: TRUE if switching to the desired braille translator mode was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: The index of the desired mode - the index starts at 0.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Script: BrailleSetUnlimittedPixelsPerSpace 

Description 

Shows one empty space on the Braille display for every group of consecutive blank pixels on the screen, regardless of how wide that space is.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggle8DOTS 

Description 

Toggles between eight and six DOT mode on a Braille display. Eight DOT Braille indicates upper case and highlighted text with DOTS 7 and 8.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggle8PixelsPerSpace 

Description 

With 8 pixels per space, you will see the formatting as it appears on the screen or in the document. With unlimited pixels per space, you will see all the text conveniently lined up on your display.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleBrailleLineMode 

Description 

Line mode is useful for reviewing text on the current line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleCharactersAndAttributes 

Description 

When attributes is selected, the Braille display shows the attributes of each character instead of the actual characters. The patterns for each attribute are set up in the Settings Center. When characters is selected the Braille display shows regular characters. Note that in JAWS 12 or later, Settings Center replaces Configuration Manager.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleMarking 

Description 

Attributes are marked with DOTS seven and eight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleMode 

Description 

Line mode displays text that is on the current line. Structured mode allows having information from different parts on the screen displayed in a single Braille line. Attributes mode shows the attributes of the current line. Speech Output mode displays whatever was spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleSpeechHistory 

Description 

Speech History mode allows you to review what was previously spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BrailleToggleSpeechInterrupt 

Description 

Toggles speech interrupt for the Braille device. When Speech interrupt is toggled to the on position, JAWS will interrupt the Braille display when a new action is performed so that the Braille display reflects the new action. This is similar to the Speech interrupt for normal speech without Braille.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BrailleToggleTableHeaders 

Description 

Toggles whether to display row titles, column titles, both or none.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BrailleTurnMarkingOff 

Description 

Turns Off displaying of the markings in DOTS seven and eight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleVerbosity 

Description 

When in structured mode varies the amount of descriptive information shown on the Braille display.

Returns 

Type: String
 Description: description of value to be displayed as value of Braille Verbosity.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ChangeContractedBrailleSetting 

Description 

Cycle between Off, Contracted Braille On for Display, and Contracted Braille On for Input.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: GetBrailleMode 

Description 

Can be either line, structured, or speech box modes.

Returns 

Type: Int
 Description: An integer value that signifies the current Braille mode of JFW. The return value is equal to one of the Braille Mode constants defined in HJConst.jsh.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetBrailleModeForModeId 

Description 

Returns the information about the mode or translation rule set associated with the supplied mode ID. it is broken up into parts separated by a | (vertical bar). In order, the parts for the mode information are mode ID, mode friendly name, three-letter language abbreviation and language friendly name.

Returns 

Type: string
 Description: The information for the mode, or translation rule set, associated with the supplied mode ID.
 

Parameters 

Param 1: 

Type: int
 Description: the ID of the mode whose information is to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetBrailleModesForLanguage 

Description 

Returns a list of modes, or available sets of rules, for the selected language. List items are separated by # (number sign), and parts of the list item are separated by a | (vertical bar). In order, the parts for each list item are mode ID, mode friendly name, three-letter language abbreviation and language friendly name.

Returns 

Type: string
 Description: The list of available modes for the selected language.
 

Parameters 

Param 1: 

Type: string
 Description: The three-letter abbreviation of the language whose modes are to be returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetBrailleTableDisplayName 

Description 

Given a Braille table file name, GetBrailleTableDisplayName returns the corresponding localized display name. If there is no display name, then the file name is returned.

Returns 

Type: string
 Description: the localized display name corresponding to the provided file name.
 

Parameters 

Param 1: 

Type: string
 Description: the Braille table file name. This is the name of the file containing the Braille table definition without the path and file extension.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetBrailleTableFileName 

Description 

Given a Braille table display name, GetBrailleTableFileName returns the corresponding file name. This is the name of the file containing the Braille table definition without the path and file extension. If there is no file name, then the display name is returned.

Returns 

Type: string
 Description: the file name corresponding to the provided display name.
 

Parameters 

Param 1: 

Type: string
 Description: the Braille table display name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetBrailleTranslatorSupportedLanguages 

Description 

returns a list of the languages supported by the active Braille translator. The list items are separated by the # (number sign). Each list item is made up of two parts: the three-letter language code and the friendly name for the language. The parts are separated by a vertical bar (|).

Returns 

Type: string
 Description: The number-sign delimited list of languages supported by the Braille translator.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: NavRockersOnOff 

Description 

Press to turn the navigation rockers on and off.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Script: PressLeftFocusNavButton 

Description 

List Mode affects both nav rockers simultaneously. When sentence, paragraph and display panning navigation is possible, pressing this rocker only affects those settings for the left navigation rocker. This rocker scrolls vertically when tracking Braille Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Script: PressLeftFocusWheel 

Description 

List Mode affects both wheels simultaneously. When sentence, paragraph and display panning navigation is possible, pressing this wheel only affects those settings for the left whiz wheel. This wheel scrolls vertically when tracking Braille Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.5

Script: PressLeftWhizWheel 

Description 

Pressing this wheel only affects those settings for the left whiz wheel.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: PressRightFocusNavButton 

Description 

List Mode affects both rockers simultaneously. When sentence, paragraph and display panning navigation is possible, pressing this rocker only affects those settings for the right navigation rocker. This rocker scrolls horizontally, without wrapping lines, when tracking Braille Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Script: PressRightFocusWheel 

Description 

List Mode affects both wheels simultaneously. When sentence, paragraph and display panning navigation is possible, pressing this wheel only affects those settings for the right whiz wheel. This wheel scrolls horizontally, without wrapping lines, when tracking Braille Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.5

Script: PressRightWhizWheel 

Description 

Pressing this wheel only affects those settings for the right whiz wheel.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetBrailleMode 

Description 

Can be either line, structured, or speech box modes.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The mode that you wish to set.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SetBrailleVerbosity 

Description 

When in structured mode varies the amount of descriptive information shown on the Braille display.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ToggleOutputType 

Description 

This function cycles the spoken or Brailled output type message length from 0 (don't speak/Braille, 1 use long messages or 2 use short messages). You determine whether the cycling affects Speech or Braille by using the second optional parameter. If this parameter is not specified the function defaults to cycling the Speech message length.

Returns 

Type: int
 Description: the new value
 

Parameters 

Param 1: 

Type: int
 Description: the Output Type to cycle.
 Include: Required
 

Param 2: 

Type: int
 Description: 0 speech, 1 Braille
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: WhizWheelsOnOff 

Description 

Press to turn the whiz wheels on and off.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Clipboard Functions

A Clipboard function returns information about the clipboard, such as whether it contains any data, and if so what that data contains. JAWS uses this information in order to speak and display it in Braille, for comparison purposes, and so on.

Some examples of Clipboard functions include:

ClipboardHasData

GetClipboardText

GetTextFromClipboard - gets plain text only

For a complete listing of Clipboard functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines whether the clipboard has any data. Since data may be something like an entire file, group of files, or even a picture, the conditional test must also check for whether the data is textual. If it is, then a further test checks whether there is an active Virtual Viewer window. If there is, it is deactivated and the user buffer is cleared before any text is displayed in the Virtual Viewer.

Script MyClipboardTest ()
Var
            String sText
sText = GetClipboardText ()
If ClipboardHasData ()
&& sText != cscNull
            If UserBufferIsActive ()
                        UserBufferDeactivate ()
                        UserBufferClear ()
            EndIf
            SayFormattedMessage (ot_User_buffer,sText)
            UserBufferAddText (CscBufferNewLine+cmsgBuffExit)
Else
            SayMessage (ot_help,cmsgNoTextOnClipboard)
EndIf
EndScript

Additional Resources

For more details on working with the Virtual Viewer, see Implementing a Virtual Viewer Window.

Script: AppendSelectedTextToClipboard 

Description 

With the Freedom clipboard, text will be appended to the clipboard, adding it to the clipboard at the end of the previous clipboard content. Using a Copy To Clipboard command instead of an Append To Clipboard command will erase any previous clipboard content and replace it with the new content.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: AppendToClipboard 

Description 

The previous clipboard contents are retained and the new text added to the front or end. Appended items are separated by blank line space. Only plain text can be appended to the Clipboard.

Returns 

Type: Int
 Description: TRUE if the item was appended. FALSE if there was nothing to append to or if the clipboard update failed.
 

Parameters 

Param 1: 

Type: String
 Description: The string to append.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE if adding string to the End. FALSE if adding to the front.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: ClipboardHasData 

Description 

This function will return true if there is any data at all on the Windows clipboard.

Returns 

Type: Int
 Description: True if the clipboard contains data, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ClipboardUpdateInConsoleWindow 

Description 

Used by the updateClipboard function to perform the desired action if a cut or copy action was attempted while in a console window.

Returns 

Type: int
 Description: True if cut or copy keystrokes were used in a console window, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The clipboard update method requested, CLIPBOARD_CUT or CLIPBOARD_Copy.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Script: CopySelectedTextToClipboard 

Description 

Standard Windows copy command, usually found in the Edit menu, any selected text or items will be copied to the Windows Clipboard. The selected items or text can then be pasted into another window or application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: CopyToClipboard 

Description 

Puts a string of text onto the Windows clipboard erasing any previous clipboard contents. In order to copy multiple lines of text, these must be concatenated together into a single string before calling CopyToClipboard. In the concatenated string, lines should be separated with \r\n.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Text to be copied to the Windows clipboard.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: CutToClipboard 

Description 

Standard Windows cut command, usually found in the Edit menu, any selected text or items will be deleted and placed in the Windows Clipboard. Note that after doing so use paste command to move the items or text elsewhere.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetClipboardText 

Description 

Retrieves text from the clipboard that is in standard ANSI format. Each line ends with a carriage return/linefeed (CR-LF) combination.

Returns 

Type: STRING
 Description: The text found on the clipboard, or "" if the clipboard is empty.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: GetTextFromClipboard 

Description 

Retrieves plain text from clipboard.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: IsNoSelectionForClipboard 

Description 

Used by the updateClipboard function to determine if anything was selected for cut or copy.

Returns 

Type: int
 Description: True if nothing was selected for cut or copy, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: MayOnlyCopyToClipboard 

Description 

Used by the updateClipboard function to determine if the window may only allow copy and not cut.

Returns 

Type: int
 Description: True if a selection may be valid for copy but not for cut.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Script: PasteFromClipboard 

Description 

Standard Windows Paste command, usually found in the Edit menu, any text or items currently in the Clipboard is inserted at the position of the PC cursor. Note that you must have previously used the copy or cut commands to place the items on the Clipboard before using the paste command.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ShowClipboardTextInResultsViewer 

Description 

If there is text on the clipboard, displays it in the results viewr; otherwise, an error message is spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: updateClipboard 

Description 

Processes the script code for a cut or copy to clipboard action.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The method, CLIPBOARD_CUT or CLIPBOARD_Copy, by which the clipboard will be updated.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Script: ViewClipboardText 

Description 

The Clipboard Text Viewer displays all text that has been copied to the Windows Clipboard using the standard Windows Copy and Cut commands. It also displays text that has been added to the Clipboard using the "Copy Selected Text to FSClipboard" command. Paragraphs of text are typically separated by a blank line in the viewer. With the viewer open, you can select and copy specific text, and then paste it in other applications. When you close the viewer, the current content is deleted. Also, the Clipboard content is overwritten with new text when you use the Windows Copy or Cut commands. A message displays indicating that the current text in the viewer will be overwritten.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: WasTextAlreadyAppended 

Description 

Checks if text is already in the clipboard.

Returns 

Type: Int
 Description: TRUE if already exists.
 

Parameters 

Param 1: 

Type: String
 Description: The current collection of appended text.
 Include: Required
 

Param 2: 

Type: String
 Description: The text that is about to be appended.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: WillOverwriteClipboard 

Description 

If the clipboard has text resulting from an append to clipboard operation, asks the user if the clipboard text should be overwritten.

Returns 

Type: int
 Description: True if the clipboard does not has text resulting from an append operation or if the user answers yes to the query asking if they want to overwrite the clipboard text, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Colors Functions

A Colors function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of Color, such as the script for SayColor, for example. However, the focus of the present discussion is on functions related to Colors that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Colors functions include:

AddBrailleColors

ColorToRGBString

FindColors

For a complete listing of Colors functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the color at any point within the document window of a Wordpad document. Although the SayColor script can perform this with the default key assignment, JAWSKey+NumberRow5, the code sample script speaks and flashes a sentence about the foreground and background colors of the text at the current cursor position.

Take care when working with the Wordpad.jss script source file because it already contains scripts and functions by default that ship with JAWS. Place your sample code at the very bottom of the file. And make sure to remove this overwritten Wordpad.jss and its associated overwritten Wordpad.jsb and Wordpad.jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the Wordpad.jss script source file and compiled in the Wordpad.jsb script binary file.

To set up the example, from the Wordpad document window, type several lines of text. Then select some of the text, and using the font option for color in the Home ribbon, change the foreground color of some of the text to say, yellow, as in the code sample. Finally, position the PC cursor anywhere within the text whose color has been changed, or the text whose color has not been changed, and run the script.

WARNING! The code sample in the below script looks specifically for the color yellow with the hex value of 0xffff00, reported as the RGB string, "255255000". You can get the RGB string of the foreground and background colors by pressing Insert+NumberRow5 twice quickly on the text in the Wordpad document. If the foreground color of that text is not reported as having that exact RGB string, the yellow color will not be found. This code sample is meant only to illustrate how to apply some of the functions that work with colors. You may need to experiment a bit for your own specific situation.

Script MyColorTest ()
Var
            Int iColor, ; the integer value of the color
            String sMsgColorInfo,
            String sMsgColorNotFound
iColor = 0xFFFF00 ; Yellow in Hex from Colors.ini file.
; For sMsgColorInfo, %1 is the text color, %2 the background color.
sMsgColorInfo = "This text is %1 on %2."
; For sMsgColorNotFound, %1 is the color we are trying to find.
sMsgColorNotFound = "I can't find any more %1 text in this document."
; Find yellow text regardless of background color,
; searching from the current PC cursor position forward
; but only within the document window.
If FindColors (iColor, IgnoreColor, s_next, TRUE)
            SayFormattedMessage (ot_User_requested_information,
                        FormatString (sMsgColorInfo, GetColorName (GetColorText ()), GetColorName (GetColorBackground () )))
            RoutePCToJAWS () ; Bring the PC cursor to the text found.
            BrailleRefresh ()                      PCCursor () ; reactivate thePC cursor at the location where the text is found.
            SayLine ()
Else
            SayFormattedMessage (ot_Error,
                        FormatString (sMsgColorNotFound, GetColorName (iColor)))
EndIf
EndScript

Function: AddBrailleColors 

Description 

Brings up a dialog for the user to assign the colors on the screen to Braille marking.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Enter the variable containing the RGB string for the foreground color.
 Include: Required
 

Param 2: 

Type: String
 Description: Enter the RGB string for the background color.
 Include: Required
 

Param 3: 

Type: String
 Description: Enter the value for the app file name to be used.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleAddColorField 

Description 

Adds the current color field's line segment range to the Braille display's structured data including cursor tracking within the field. Note that this adds the current line segment falling within the color field, not the entire color field in the event that the color field spans multiple lines.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The maximum distince to look left. The default distance is 0 pixels.
 Include: Optional
 

Param 2: 

Type: Int
 Description: The maximum distance to look right. The default distance is 0 pixels.
 Include: Optional
 

Param 3: 

Type: int
 Description: If True, JAWS looks left first, otherwise JAWS looks right first. The default value is true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Script: BrailleColorMarkingAssign 

Description 

Opens a dialog where you can assign the colors on the screen to Braille marking.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BrailleSetColorsToMark 

Description 

This function allows the user to specify the foreground and background colors of up to 9 color pairs which should be marked in Braille with DOTS 7 and 8. This function also toggles the Braille Mark Colors to on. Supply an empty string to turn off color marking or set the JCF option to exclude marking colors.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: up to 9 pairs of text and background colors of the form rgb/rgb,rgb/rgb,... Supply empty string to turn off color marking.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ColorToRGBString 

Description 

Converts a color value to a string of the form "255255255" where the first three digits represent the proportion of red, the second three digits the proportion of green, and the third three digits the proportion of blue.

Returns 

Type: String
 Description: The color value converted to an RGB string.
 

Parameters 

Param 1: 

Type: Int
 Description: The color value to be used.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FindColors 

Description 

Searches for the occurrence of a specific combination of foreground and background colors. If the search is successful, the JAWS cursor is placed at the beginning of the text with the desired combination of colors.

Returns 

Type: Int
 Description: The number is 1 if the search was successful, 0 if it was not successful.
 

Parameters 

Param 1: 

Type: Int
 Description: Type in a variable name or function that can provide the color value to be used as the foreground color. RGBStringToColor is often used as a parameter. Use the constant IgnoreColor defined in the file HJConst.jsh to ignore the foreground color and search only for the occurrence of the background color.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type in a variable name or function that can provide the color value to be used as the background color. RGBStringToColor is often used as a parameter. Use the constant IgnoreColor defined in the file HJConst.jsh to ignore the background color and search only for the occurrence of the foreground color.
 Include: Required
 

Param 3: 

Type: Int
 Description: Type in one of the following constants defined in HJConst.jsh to indicate the direction of the search: s_top, to search from the top of the active window; s_bottom, to search from the bottom of the active window; s_next, to search forward from the position of the active cursor; s_prior, to search backward from the position of the active cursor.
 Include: Required
 

Param 4: 

Type: int
 Description: set this to TRUE to restrict the search to the window containing the active cursor, FALSE for an unrestricted search, if not supplied, defaults to FALSE, ie unrestricted. this optional parameter is only available in JAWS 6.0
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetColorApproximation 

Description 

This function takes a COLORREF and finds the closest color in our table for which we have a name. It also provides information as to whether the approximated color is lighter or darker than the color passed in.

Returns 

Type: int
 Description: The color approximately the same as the one past in.
 

Parameters 

Param 1: 

Type: int
 Description: the color to approximate.
 Include: Required
 

Param 2: 

Type: int
 Description: a positive number is returned if the approximated color is brighter than the original, 0 if it is the same or a negative number to indicate that the approximated color is darker than the original.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetColorAtPoint 

Description 

Retrieves the color at the specified location. This is the color RGB value in such as 000000000 or 255255255.

Returns 

Type: Int
 Description: The color value at the specified point.
 

Parameters 

Param 1: 

Type: Int
 Description: the column coordinate of the desired location. You can use GetCursorCol() to retrieve this value.
 Include: Required
 

Param 2: 

Type: Int
 Description: the row coordinate of the desired location. You can use GetCursorRow() to retrieve this value.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetColorBackground 

Description 

Retrieves the background color of the character at the current cursor location.

Returns 

Type: Int
 Description: The background color value.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

This function is available in the following releases:

JAWS 4.51-13.00  

JAWS 14.00 and later  

 Function: GetColorField 

Description 

Obtains the color field at the position of the active cursor. A color field is a section of information, usually text, that has a common combination of colors. For example, the combination might be white foreground on blue background. The use of the color combination must be contiguous. GetColorField is similar to GetField. However, the function GetColorField is based on color changes, while GetField is based on attribute changes.

Returns 

Type: String
 Description: The color field pointed to by the active cursor.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-13.00

 Function: GetColorField 

Description 

Obtains the color field at the position of the active cursor. A color field is a section of information, usually text, that has a common combination of colors. For example, the combination might be white foreground on blue background. The use of the color combination must be contiguous. GetColorField is similar to GetField. However, the function GetColorField is based on color changes, while GetField is based on attribute changes.

Returns 

Type: String
 Description: The color field pointed to by the active cursor.
 

Parameters 

Param 1: 

Type: int
 Description: The maximum distince to look left. The default distance is 0 pixels.
 Include: Optional
 

Param 2: 

Type: Int
 Description: The maximum distance to look right. The default distance is 0 pixels.
 Include: Optional
 

Param 3: 

Type: int
 Description: If True, JAWS looks left first, otherwise JAWS looks right first. The default value is true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Function: GetColorName 

Description 

Retrieves the textual name for the given color found in colors.ini.

Returns 

Type: String
 Description: The name of the color, or an RGB string if a name is not provided in colors.ini.
 

Parameters 

Param 1: 

Type: Int
 Description: The color value to be used.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetColorText 

Description 

Retrieves the text color of the character at the current cursor location.

Returns 

Type: Int
 Description: The text color value.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ReloadSystemColors 

Description 

JAWS monitors for palette change messages and reloads the system colors appropriately when this message is sent. If, however, an application changes the palette or system colors without broadcasting notification, this function can be used to force JAWS to recognize the modified colors.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RGBDecToHex 

Description 

This function converts a Decimal RGB string to a Hex RGB string.

Returns 

Type: string
 Description: The Hex RGB string.
 

Parameters 

Param 1: 

Type: string
 Description: the Decimal RGB string.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: RGBHexToColor 

Description 

This function converts a hex RGB string to its int color value.

Returns 

Type: int
 Description: the color
 

Parameters 

Param 1: 

Type: string
 Description: the hex string eg "#rrggbb" or "rrggbb"
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: RGBHexToDec 

Description 

This function converts a Hex RGB string to a Decimal RGB string.

Returns 

Type: string
 Description: the decimal string.
 

Parameters 

Param 1: 

Type: string
 Description: the hex string to convert.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: RGBStringToColor 

Description 

Converts a 9-digit string of the form "255255255" to a color value.

Returns 

Type: Int
 Description: A color value suitable for comparison with the values returned by GetColorText or GetColorBackground.
 

Parameters 

Param 1: 

Type: string
 Description: The 9-digit RGB value to be converted.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayColor 

Description 

Speaks the names of the foreground and background colors of the text at the location of the active cursor.

Returns 

Type: Int
 Description: "TRUE" = 1, Text was found. "FALSE" = 0, cursor was not pointing to text.
 

Parameters 

Param 1: 

Type: int
 Description: if true, speaks the RGB value of the colors, otherwise speaks the name. If an exact match on name isn't found, an approximation is used. This optional parameter is only available in JAWS 5.10 or higher.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayColor 

Description 

This keystroke says the foreground and background color of the text at the location of the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Connections

A Connection function returns information about a Tandem Connection, such as whether it is connected or disconnected. JAWS uses this information in order to speak and display it in Braille, for comparison purposes, and so on.

Some examples of Connection functions include:

·         IsTandemInstalled

·         TandemIsConnected

For a complete listing of Connection functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below nonsense code sample, the script determines whether the Tandem connection exists, and if not, lets you know.

Script MyConnectionTest ()
Var
            String smsgNoTandemConnection
smsgNoTandemConnection = "You are not running a Tandem session."
If ! TandemIsConnected ()
            SayMessage (ot_error, smsgNoTandemConnection)
EndIf
EndScript

Function: IsTandemInstalled 

Description 

Checks to determine if the Tandem feature is installed.

Returns 

Type: int
 Description: Returns one if the Tandem feature is installed, zero otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Script: PauseTandemVideo 

Description 

This keystroke is used in a Tandem session on the controlling computer to toggle transmission of video from the target system to the controller on or off. When video is on, it lets sighted users watch JAWS Tandem activity.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: RemoteAccessIsConnected 

Description 

This function returns JAWS is running in a remote session such as a Terminal Services session or a Citrix session or is being controlled via PAC Mate Remote. This function returns FALSE otherwise. returns int True if JAWS is running in a remote session. Returns FALSE otherwise.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: SetJTControllerMode 

Description 

In Window mode, the Tandem Controller window has a system menu and can be sized according to the user's preferences. In Full Screen mode, Tandem Window consumes the entire screen. Pass one of the following values to SetJTControllerMode. JTCONTROLLER_MODE_WINDOW sets the mode to Window Mode. In this mode, system keys are passed through to the controller system. JTCONTROLLER_MODE_FULL sets the mode to Full. In this mode, only the Alt+Control+Break (ToggleTandemMode) keystroke is handled by the controller. All other keystrokes are passed to the target. JTCONTROLLER_MODE_SLEEP allows all keystrokes to be process by the controller. JTCONTROLLER_MODE_TOGGLE toggles the Tandem Controller mode.

Returns 

Type: int
 Description: TRUE if the mode was successfully set. Returns FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: StartOrEndTandemSession 

Description 

Starts a tandem session for the target computer through the Tandem Center, or ends a tandem session for both the controller and target computers. The controller must start the tandem session through the JAWS Utilities menu.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: TandemAcceptConnections 

Description 

Initiates a Tandem target session. Same as going to JAWS menu - Utilities - Tandem - "Allow Control Of My PC".

Returns 

Type: int
 Description: returns zero in case of failure, non-zero otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: TandemDisconnect 

Description 

Break current Tandem connection. Same as going to JAWS menu - Utilities - Tandem - Disconnect.

Returns 

Type: int
 Description: Returns zero in case of failure, and non-zero otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: TandemIsConnected 

Description 

Checks if any type of Tandem session is in progress.

Returns 

Type: int
 Description: Returns zero is there is no connections, non zero otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: TandemStart 

Description 

Initializes variables and performs setup when JAWS starts for anything related to JAWS Tandem.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: ToggleTandemMode 

Description 

Available only on the controler system, this keystroke suspends or resumes a JAWS Tandem session in order to toggle between the target system's desktop and the controller system's desktop.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Cursor Functions

A Cursor function returns information about cursors, such as which cursor is active, its type, and so on. The screen reader uses this information to determine whether to track the cursor in speech and Braille. (Tracking refers to speaking and displaying in Braille while moving the cursor.)

Some examples of Cursor functions include:

·         GetActiveCursor

·         PCCursor

·         JAWSCursor

·         InvisibleCursor

·         IsInvisibleCursor

·         IsJAWSCursor

·         IsVirtualPCCursor

·         CaretVisible

JAWS utilizes the system cursors from Windows, but also has cursors of its own. These include the JAWS cursor, Invisible cursor, and Virtual cursor, and as of JAWS 2020, the UIA Scan cursors. The JAWS cursor follows the mouse, which may not be where the PC cursor is currently located. The Invisible cursor allows you to roam areas of the screen where system cursors and mouse cursors cannot move to by normal keyboard or mouse movements. The Virtual cursor is active when JAWS is displaying a document or a message you have generated through scripts and functions in a Virtual Viewer window. This includes viewing web sites using a browser like Google Chrome, reading documents with Adobe Acrobat Reader, and reading EMail messages with programs like Windows Mail or Microsoft Outlook from Office 365.

Since the JAWS cursor is equivalent to the mouse cursor, moving the JAWS cursor is equivalent to moving the mouse. Moving the JAWS cursor is visible to the user, and is generally considered undesirable especially for low vision users. Moving the JAWS cursor around may also cause events such as screen tips or help balloons to appear. Note that this is also the case for the UIA Scan cursors.

The invisible cursor, because it is invisible, can roam freely without causing any side effect. So if cursor manipulation is needed, whenever possible, it is preferable to use the invisible cursor. In most situations, routing the PC cursor to the invisible cursor is equivalent to performing a left Mouse click. If you need to move the PC cursor to the invisible cursor location without performing a mouse click, you can get the cursor coordinates of the invisible cursor and move the PC cursor to that location but offset by a couple of pixel points.

Note: By default, the voice that JAWS uses for the JAWS cursor is different from the voice it uses for the PC cursor. But the voice that JAWS uses for the invisible cursor is the same as the voice it uses for the PC cursor. If you are in doubt as to which cursor is active, you can use the SayActiveCursor script, Alt+Delete, to announce the active cursor.

If you call a function that activates a cursor other than the active cursor, always remember to save the active cursor's location and restore it after processing the task that required activating the other cursor. Also, there are some not-so-obvious consequences of calling certain functions that activate the JAWS cursor. Unless you deliberately choose not to return to the PC cursor after processing the desired task with such function calls, failing to return to the PC cursor can yield unpredictable results.

Some functions that activate the JAWS cursor but which may not be obvious include:

·         FindWindow

·         FindDescendantWindow

·         FindColors

·         MoveToWindow

For a complete listing of Cursor functions, see the topics in this category book of the Reference Guide.

Code Samples

The first script shows what happens when you forget to deactivate the JAWS cursor after a function call that activates it. This script assumes that you have a dialog active in Notepad. Type some text into the Filename edit control. then execute the script. The button is found, and its window type and text are spoken. But the JAWS cursor remains active. So any activity you try to perform yields strange results.

Script MyCursorTest ()
Var
            Handle hwnd
If DialogActive ()
            hwnd = FindWindowWithClassAndId (GetRealWindow (GetFocus ()), cwc_button, 1) ; 1 is the Control ID of the button.
            If hwnd ; The window handle exists.
                        SayWindowTypeAndText (hwnd)
                        MoveToWindow (hwnd) ; Move the mouse to the control.
                        SayActiveCursor () ; The JAWS cursor should be active.
                        Return
            EndIf
EndIf
EndScript

You can fix the problem in a couple of ways. If all you want to do is speak the information about the button but not move to it, remove the call to MoveToWindow. This keeps the PC cursor active because FindWindowWithClassAndID does not activate a different cursor from the active cursor. On the other hand, if you really do want to move to and click the button control with this script, then you should route the PC cursor to where the JAWS cursor is after you make the call to MoveToWindow and that call succeeds. then routing the PC cursor to the JAWS cursor clicks the mouse, which is already on the control. And finally, re-activating the PC cursor ensures that the JAWS cursor is no longer active.

Script MyCursorTest ()
Var
            Handle hwnd
If DialogActive ()
            hwnd = FindWindowWithClassAndId (GetRealWindow (GetFocus ()), cwc_button, 1)
            If hwnd ; The window handle exists.
                        SayWindowTypeAndText (hwnd)
                        MoveToWindow (hwnd) ; Move the mouse to the control.
                        RoutePCToJAWS () ; Click the mouse to open the file.
                        PCCursor () ; Re-activate the PC cursor.
                        SayLine () ; Speak the first line of the document.
                        Return
            EndIf
EndIf
EndScript

Additional Resources

Implementing a Virtual Viewer Window

Script: ActiveMovesBraille 

Description 

By default the Braille display will follow the active cursor. If this feature is turned Off, the Braille display can be left in one location.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: BrailleCursor 

Description 

Turns on the Braille cursor. This cursor is only used internally by the Braille scripts and should never be left on after a script completes its work.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleMovesActive 

Description 

Toggles whether or not the active cursor follows the Braille cursor when the front panel keys on a Braille display are pressed.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleCursor 

Description 

Sets the opposite cursor active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: CaretVisible 

Description 

Indicates whether an insertion point or a caret is visible in the active window. The function returns a constant value of TRUE to indicate that a caret is visible and a value of FALSE to indicate that it is not visible.

Returns 

Type: Int
 Description: "TRUE" = 1, "FALSE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ClearSavedLocation 

Description 

This function clears the location saved by a prior call to SaveCurrentLocation.

Returns 

Type: void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: ConvertCursorShape 

Description 

Takes the cursor shapes reported by MSAA and converts them to more meaningful names.

Returns 

Type: String
 Description: Returns name of the cursor as a string.
 

Parameters 

Param 1: 

Type: string
 Description: takes the name of the type of cursor.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindCaret 

Description 

allows the user to specify the coordinates of the system caret when JAWS is unable to locate it.

Returns 

Type: Int
 Description: TRUE if the function is determining the correct caret location, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: set to x coordinate of caret.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: set to y coordinate of caret.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetActiveCursor 

Description 

Returns the type of the active cursor. If the detailed type is requested, and the generic type is CURSOR_PC, the more detailed type of cursor is returned.

Returns 

Type: Int
 Description: (JAWS Values) CURSOR_JAWS = 0, CURSOR_PC = 1, CURSOR_INVISIBLE = 2, CURSOR_Braille = 3.
 

Parameters 

Param 1: 

Type: int
 Description: TRUE-returns the detailed cursor type, FALSE-returns the generic type. Defaults to FALSE.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetActiveCursorName 

Description 

This function returns the name of the active cursor.

Returns 

Type: string
 Description: the name of the active cursor.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetActiveCursorRestrictionName 

Description 

Retrieves the name of the restriction of the active cursor.

Returns 

Type: string
 Description: The name of the restriction of the active cursor.
 

Parameters 

Param 1: 

Type: int
 Description: One of the constants message_long or messages_short, to retrieve a long or short message.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetBrailleRestriction 

Description 

Gets the restriction value for the Braille cursor. These values are located in HjConst.jsh and start with Restrict.

Returns 

Type: Int
 Description: a constant representing the current level of cursor restriction. These constants begin uncder the heading Restriction types, and can be found in hjconst.jsh. They are: RestrictNone to allow the cursor to roam the screen, RestrictAppWindowto restrict to the application window, RestrictRealWindow to restrict to the real window or RestrictWindow to restrict to the current window.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCursorCol 

Description 

This determines the horizontal position or column where the active cursor is located. It returns an integer that can be spoken with the SayInteger script function. The value returned is based upon the number of pixels that the active cursor is from the left edge of the screen.

Returns 

Type: Int
 Description: the value of the active cursor column position.
 

Parameters 

Param 1: 

Type: Int
 Description: Optional parameter that designates whose cursor position is to be retrieved. If this parameter is not specified, then the active cursor is used.
 Include: Optional
 

Param 2: 

Type: Int
 Description: The prefered coordinate system in which the value should be returned This is only a recommendation and will not work in all places. See the COORDSYS_xxx constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCursorColString 

Description 

This gets the appropriate string describing the cursor position relative to the left of the page or sccreen.

Returns 

Type: string
 Description: The cursor column position.
 

Parameters 

Param 1: 

Type: int
 Description: Type the constant value that represents a cursor, type a variable name, or choose a script function. Cursor constants are: CURSOR_JAWS, CURSOR_PC, CURSOR_INVISIBLE, CURSOR_Braille. A script function such as GetActiveCursor also can provide the constant.
 Include: Optional
 

Param 2: 

Type: int
 Description: desired units of measure, see hjconst.jsh smmUnitsOfMeasure constants.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: GetCursorPos 

Description 

This gets the cursor position relative to the top of the page or sccreen.

Returns 

Type: int
 Description: TRUE if the coordinates were obtained in the desired unit of measure, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that represents a cursor, type a variable name, or choose a script function. Cursor constants are: CURSOR_JAWS, CURSOR_PC, CURSOR_INVISIBLE, CURSOR_Braille. A script function such as GetActiveCursor also can provide the constant.
 Include: Required
 

Param 2: 

Type: int
 Description: desired units of measure, see hjconst.jsh smmUnitsOfMeasure constants.
 Include: Required
 

Param 3: 

Type: Int
 Description: set to x coordinate of caret in desired unit of measure (if supported).
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: set to y coordinate of caret in desired unit of measure (if supported).
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetCursorPosString 

Description 

This gets the appropriate string describing the cursor position relative to the top and left of the page or sccreen.

Returns 

Type: String
 Description: The cursor column and row position.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that represents a cursor, type a variable name, or choose a script function. Cursor constants are: CURSOR_JAWS, CURSOR_PC, CURSOR_INVISIBLE, CURSOR_Braille. A script function such as GetActiveCursor also can provide the constant.
 Include: Required
 

Param 2: 

Type: int
 Description: desired units of measure, see hjconst.jsh smmUnitsOfMeasure constants.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetCursorRow 

Description 

This determines the vertical position or row where the active cursor is located. It returns an integer that can be spoken by the SayInteger script function. The value returned is based upon the number of pixels that the active cursor is from the top of the screen.

Returns 

Type: Int
 Description: the value of the active cursor row position.
 

Parameters 

Param 1: 

Type: Int
 Description: Optional parameter that designates whose cursor position is to be retrieved. If this parameter is not specified, then the active cursor is used.
 Include: Optional
 

Param 2: 

Type: Int
 Description: The prefered coordinate system in which the value should be returned This is only a recommendation and will not work in all places. See the COORDSYS_xxx constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCursorRowString 

Description 

This gets the appropriate string describing the cursor position relative to the top of the page or sccreen.

Returns 

Type: string
 Description: The cursor row position.
 

Parameters 

Param 1: 

Type: int
 Description: Type the constant value that represents a cursor, type a variable name, or choose a script function. Cursor constants are: CURSOR_JAWS, CURSOR_PC, CURSOR_INVISIBLE, CURSOR_Braille. A script function such as GetActiveCursor also can provide the constant.
 Include: Optional
 

Param 2: 

Type: int
 Description: desired units of measure, see hjconst.jsh smmUnitsOfMeasure constants.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: GetCursorShape 

Description 

Gets the current shape of the mouse cursor.

Returns 

Type: String
 Description: The shape of the current cursor. It may be one of the following values; Arrow Cursor, I beam cursor, Hour Glass, or cross hair cursor.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetRestriction 

Description 

Gets the restriction value for the current cursor. These values are located in HjConst.jsh and start with Restrict.

Returns 

Type: Int
 Description: a constant representing the current level of cursor restriction. These constants begin uncder the heading Restriction types, and can be found in hjconst.jsh. They are: RestrictNone to allow the cursor to roam the screen, RestrictAppWindowto restrict to the application window, RestrictRealWindow to restrict to the real window or RestrictWindow to restrict to the current window.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetRestrictionName 

Description 

Says the current level of restriction for the active cursor. All cursors besides the PC cursor can have their restriction changed.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The first parameter requires a constant indicating the current level of cursor restriction. The function GetRestriction can provide a constant for this value.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HandleWebDialogRestriction 

Description 

Toggles virtual cursor restriction on and off within a web dialog. Outside of the web dialog, speaks an error message.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: InARIAGrid 

Description 

Used to determine if the cursor is inside an ARIA grid on a web page. An ARIA grid is generated by the role="grid" attribute on an HTML element.

Returns 

Type: Int
 Description: 1 (True) or 0 (false).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

This function is available in the following releases:

1.    JAWS 4.51-20.0  

2.    JAWS 21.0 and later  

 Function: InvisibleCursor 

Description 

Activates the Invisible cursor and deactivates other cursors. The mouse pointer does not move along with the Invisible cursor. The Invisible cursor can be used in situations where movements of the JAWS cursor and mouse pointer can cause the window display to change.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51-20.0

 Function: InvisibleCursor 

Description 

Activates the Invisible cursor and deactivates other cursors. The mouse pointer does not move along with the Invisible cursor. The Invisible cursor can be used in situations where movements of the JAWS cursor and mouse pointer can cause the window display to change.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If true, allows activation of the Invisible Scan cursor; otherwise, the OSM Invisible cursor will be activated.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: IsBrailleCursor 

Description 

Determines whether the Braille cursor is active. It can be used in an If...Then...Else...statement to verify the active status of a cursor.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsFormsModeActive 

Description 

Checks to determine if Forms Mode is active within the window containing the active cursor.

Returns 

Type: Int
 Description: TRUE if the Forms Mode is active, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: IsInsideARIAApplication 

Description 

Used to determine if the virtual PC cursor is inside an ARIA application on a web page. An ARIA application is generated by the role="application" attribute on an HTML element.

Returns 

Type: Int
 Description: 1 (True) or 0 (false).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: IsInvisibleCursor 

Description 

Used to determine whether the invisible cursor is active. It can be used in an If...Then...Else...statement to verify the active status of a cursor.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsInvisibleUIACursor 

Description 

Determines whether the active cursor is the invisible UIA cursor, otherwise known as the Invisible Scan cursor. This can be used, if necessary, to determine if the currently active cursor is the UIA version of the invisible cursor.

Returns 

Type: int
 Description: True if the active cursor is the Invisible Scan cursor, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: IsJAWSCursor 

Description 

Determines whether the JAWS cursor is active. It can be used in an If...Then...Else...statement to verify the active status of a cursor.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsJAWSCursorInMenu 

Description 

Determines if the JAWS cursor is active and in a menu.

Returns 

Type: int
 Description: true if the JAWS cursor is active and in a menu, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: IsJawsUIACursor 

Description 

Determines whether the active cursor is the JAWS UIA cursor, otherwise known as the JAWS Scan cursor. This can be used, if necessary, to determine if the currently active cursor is the UIA version of the JAWS cursor.

Returns 

Type: int
 Description: True if the active cursor is the JAWS Scan cursor, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: IsPCCursor 

Description 

Determines whether the PC cursor is active. It can be used in an If...Then...Else...statement to verify the active status of a cursor.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsUIAReviewCursor 

Description 

Determines whether the active cursor is the JAWS or invisible cursor supported by UIA, otherwise known as the JAWS Scan cursor or Invisible Scan cursor.

Returns 

Type: int
 Description: True if the active cursor is either the JAWS Scan cursor or Invisible Scan cursor, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: IsVirtualPCCursor 

Description 

Checks to see if the Virtual PC cursor is being used to navigate within the window with focus.

Returns 

Type: Int
 Description: TRUE if the Virtual PC cursor is active, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 4.51-20.0  

2.    JAWS 21.0 and later  

 Function: JAWSCursor 

Description 

This activates the JAWS cursor and deactivates other cursors.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-20.0

 Function: JAWSCursor 

Description 

This activates the JAWS cursor and deactivates other cursors.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If true, allows activation of the JAWS Scan cursor; otherwise, the OSM JAWS cursor will be activated.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Script: JAWSCursor 

Description 

The JAWS cursor can be used to move to items on the screen that cannot be moved to using the PC cursor, such as toolbar information. The mouse pointer follows along with the JAWS cursor when it is moved. If pressed twice quickly, it will activate the Invisible cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveTo 

Description 

Moves the active cursor to the specified location on the screen. The location is specified in the form of a pixel position, where the top left hand corner of the screen is the point (0,0) and any point to the right and/or down has a positive x and y value. It is wise to be careful when using this function. This is because the pixel position of items in an application vary widely, depending upon the screen resolution on the computer that is running the application and the restored or maximized state of the application. It is always best to obtain the parameters that this function requires by searching for a particular object or string of text in the application and using GetCursorCol and GetCursorRow to store its position information in variables. Pass those variables to the function rather than a set integer value.

Returns 

Type: Int
 Description: TRUE if move was successful, FALSE if one or both coordinates are off the edge of the screen.
 

Parameters 

Param 1: 

Type: Int
 Description: X-coordinate.
 Include: Required
 

Param 2: 

Type: Int
 Description: Y-Coordinate.
 Include: Required
 

Param 3: 

Type: Int
 Description: The Coordinate System to be used to interpret X and Y. The default is to interpret them as pixel locations on the screen. See the COORDSYS_xxx constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PCCursor 

Description 

This activates the PC cursor and deactivates other cursors.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: PCCursor 

Description 

The PC cursor can be used for editing purposes, maneuvering menus, and using other specific controls depending on the active application. When Forms Mode is on, this command exits Forms Mode and returns to the Virtual PC Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RestoreCursor 

Description 

Reactivates the cursor that was saved when the SaveCursor function was last used. If the cursor being restored is the JAWS cursor, Invisible cursor, or Braille cursor, then the cursor is also returned to its previous position on the desktop. If the cursor currently in use is different than the cursor that was in use when the SaveCursor function was used, then it is deactivated and the previous cursor is reactivated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RestrictBrailleCursor 

Description 

Toggles the restriction of the Braille cursor on or off. This is similar to the restriction of the JAWS cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: RestrictCurrentCursor 

Description 

If the JAWS or Invisible cursor is on, you can toggle between real window restriction, current window restriction, focus window restriction, Unrestricted, Frame restriction, and Application Window restriction.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RestrictCursor 

Description 

It is now recommended when restricting the JAWS or Invisible cursors, to use the SetRestriction function. This function has been kept to avoid causing errors in older JFW scripts

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Determines whether restriction should be turned Off or On.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RestrictJAWSCursor 

Description 

Sometimes you want to read only within a small window or control, like a list box, and sometimes you need to read all around the application window or a dialog box.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RouteBrailleToActiveCursor 

Description 

Repositions the Braille cursor so that it is in the same position as the active cursor.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RouteBrailleToJAWS 

Description 

Repositions the Braille cursor so that it is in the same position as the JAWS cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: RouteBrailleToJAWS 

Description 

Repositions the Braille cursor so that it is in the same position as the JAWS cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RouteBrailleToPc 

Description 

Repositions the Braille cursor so that it is in the same position as the PC cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RouteBrailleToPC 

Description 

Repositions the Braille cursor so that it is in the same position as the PC cursor.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: index of the braille display routing button assigned to this script
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RouteCursorToMouse 

Description 

Attempts to moves the cursor position to the mouse location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: RouteInvisibleToJAWS 

Description 

Moves the Invisible cursor to the location of the JAWS cursor and activates the Invisible cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RouteInvisibleToPc 

Description 

Moves the Invisible cursor to the location of the PC cursor and activates the Invisible cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RouteJAWSCursorToPc 

Description 

Routes the JAWS cursor, or the Invisible cursor if it is active, to the location of the PC cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RouteJAWSCursorToTouch 

Description 

If possible, moves the JAWS cursor to the element at the touch cursor location. The touch cursor must be on an element with a clickable point for the move to be successful.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: RouteJAWSToBraille 

Description 

Repositions the JAWS cursor so that it is in the same position as the Braille cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RouteJAWSToInvisible 

Description 

Moves the JAWS cursor to the location of the Invisible cursor and activates the JAWS cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: RouteJAWSToPc 

Description 

This repositions the JAWS cursor so that it is in the same position as the PC cursor. The JAWS cursor is usually connected to the mouse pointer, so when this function is used, it places the mouse pointer on top of the caret or the highlighted selection cursor, or on whatever other type of pointer that is currently being used.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RouteJAWSToTouch 

Description 

If possible, routes the JAWS cursor to the touch cursor location and activates the JAWS cursor. The touch cursor must be on an element with a clickable point for the route to be successful.

Returns 

Type: int
 Description: True if the JAWS cursor could be routed to the touch cursor location, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: RouteMouseToCursor 

Description 

Moves the mouse to the cursor position.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: RouteMouseToTouch 

Description 

If possible, moves the mouse to the element at the touch cursor location. The touch cursor must be on an element with a clickable point for the move to be successful.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: RoutePCCursorToJAWS 

Description 

Routes the PC cursor to the location of the JAWS cursor. The PC cursor is controlled by the application and it usually cannot go everywhere in the window as the JAWS cursor can.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: RoutePCToBraille 

Description 

Repositions the PC cursor so that it is in the same position as the Braille cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: RoutePCToInvisible 

Description 

Turns on the PC Cursor and moves it, if possible, to the position of the invisible cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RoutePcToJAWS 

Description 

This attempts to move the PC cursor to the position of the JAWS cursor. This function is the same as a single click of the left mouse button, which instructs Windows to move its insertion point to the position of the mouse pointer. The successful use of this function is related to the Windows operating system. There are often situations where Windows cannot move the PC cursor to the mouse pointer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RoutePCToVirtual 

Description 

This function moves the location of the aplication focus to the location of the virtual cursor.

Returns 

Type: Int
 Description: TRUE if the PC cursor's location was successfully moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Script: RoutePCToVirtual 

Description 

This function moves the location of the aplication focus to the location of the virtual cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Script: RouteTouchCursorToJAWS 

Description 

If possible, moves the touch cursor to the JAWS cursor location and activates the touch cursor in advanced object navigation mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: RouteTouchToJAWS 

Description 

If possible, routes the touch cursor to the JAWS cursor location and activates the touch cursor in advanced object navigation mode.

Returns 

Type: int
 Description: True if the touch cursor could be routed to the JAWS cursor location, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: RouteTouchToMouse 

Description 

If possible, moves the touch cursor to the mouse location and activates the touch cursor in advanced object navigation mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: RouteVirtualToMouse 

Description 

This function moves the Virtual cursor to the position of the Mouse cursor in documents that are supported by the FS DOM Server.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.10 and later

Script: RouteVirtualToMouse 

Description 

Moves the Virtual Cursor to the position of the mouse pointer. The Virtual Cursor is the reading cursor in web pages and other documents such as PDF.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: RouteVirtualToPc 

Description 

This function moves the Virtual cursor to the position of the PC cursor in an HTML document. For example, when a new page loads and a SayAll is initiated and you want to move back to the formfield with the focus, use this function.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: RouteVirtualToPc 

Description 

Routes the Virtual Cursor to the location of the PC cursor or focus. The Virtual Cursor is used for reading Web pages and Adobe PDF documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: SaveCurrentLocation 

Description 

This function remembers the current location for a subsequent operation such as selection between this and a subsequent location.

Returns 

Type: void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: SaveCursor 

Description 

Saves the name of the active cursor. If the JAWS cursor, Invisible cursor, or Braille cursor is being used, then the position of the cursor is also saved. Scripts that use the SaveCursor function usually use the RestoreCursor function.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayActiveCursor 

Description 

This speaks the name of the active cursor, for example, PC, JAWS, Invisible, or Braille.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayActiveCursor 

Description 

Says the name of the active cursor and its position by pixel.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayCursorPos 

Description 

This speaks the row and column position of a cursor. The row and column spoken is based upon the number of pixels of the active cursor position from the top left corner of the screen.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that represents a cursor, type a variable name, or choose a script function. Cursor constants are: CURSOR_JAWS, CURSOR_PC, CURSOR_INVISIBLE, CURSOR_Braille. A script function such as GetActiveCursor also can provide the constant.
 Include: Required
 

Param 2: 

Type: int
 Description: desired units of measure, see hjconst.jsh smmUnitsOfMeasure constants. (This optional parameter added in JAWS 9.0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayCursorType 

Description 

The shape of the mouse pointer indicates what the mouse can do at the current location. For example, if JAWS cursor is active and the mouse pointer shape is a hand pointing to a link, clicking the left mouse button opens the item at the mouse pointer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayObjectNavigationCursor 

Description 

Used by script SayActiveCursor to announce the active touch or touch text review cursor and its position. The clickable point is announced for the position if the touch cursor is active; if text review is active, the cursor position in the virtual viewer is announced.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: SetActiveCursor 

Description 

According to the constant definition defined in the HJCONST.JSH file, sets the active cursor.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: uses constant variable defined in the HJCONST.JSH file for setting the cursor.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetBrailleRestriction 

Description 

selects the area within which the Braille cursor is fre to move. Note has no effect if Tether Braille To Active is on.

Returns 

Type: Int
 Description: TRUE if the resttriction was set, false if the Braille cursor is tethered to another cursor.
 

Parameters 

Param 1: 

Type: Int
 Description: one of the constants beginning with Restrict defined in hjconst.jsh. Use RestrictNone to allow the cursor to roam the screen, RestrictAppWindowto restrict to the application window, RestrictRealWindow to restrict to the real window or RestrictWindow to restrict to the current window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SetRestriction 

Description 

For all cursors except the PC cursor, selects the area within which the cursor is fre to move.

Returns 

Type: Int
 Description: FALSE when the PC cursor is on, TRUE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of the constants beginning with Restrict defined in hjconst.jsh. Use RestrictNone to allow the cursor to roam the screen, RestrictAppWindowto restrict to the application window, RestrictRealWindow to restrict to the real window or RestrictWindow to restrict to the current window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetRestrictionToFrame 

Description 

For all cursors except the PC cursor, selects the area within which the cursor is fre to move.

Returns 

Type: Int
 Description: FALSE if the PC cursor is on or if the specified frame does not exist, TRUE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the frame whose borders will serve as restricting boundaries for the cursor.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetRestrictionToRect 

Description 

For all cursors except the PC cursor, selects the area within which the cursor is fre to move.

Returns 

Type: Int
 Description: FALSE if the PC cursor is on or if the rectangle is invalid, TRUE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: Left edge of rectangle.
 Include: Required
 

Param 2: 

Type: Int
 Description: top edge of rectangle.
 Include: Required
 

Param 3: 

Type: Int
 Description: right edge of rectangle.
 Include: Required
 

Param 4: 

Type: Int
 Description: bottom edge of rectangle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: TetherJAWSToPC 

Description 

If the Tether option is on, the JAWS Cursor will follow the PC cursor as it moves. You can still navigate and explore with the JAWS Cursor independently, but if the PC cursor moves, the JAWS Cursor will follow. To save your current setting so JFW will remember it the next time you restart, press twice quickly within a second. When you save, JAWS will announce the current setting being stored.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ToggleRestriction 

Description 

This toggles JAWS between restricted and unrestricted mode. These modes do not affect the movement of the PC cursor. When unrestricted mode is used, the other cursors can be freely moved within the active application window. When restricted mode is used, the movement of these cursors is limited to a child window. When the function is used, it returns a constant value representing the new setting. ON indicates that the restriction is on, and OFF indicates that the restriction is off.

Returns 

Type: Int
 Description: "ON" = 1, "OFF" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: TouchCursor 

Description 

When the Touch cursor is active, the cursor keys navigate through the elements in the application in a manner similar to gestures on a tablet. Press PC cursor or JAWS cursor to turn off the Touch cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: TULSwitchToRuleSet 

Description 

This function switches the TextUnitLocator module to use the named rule set for the currently active cursor. If the name is empty, the default rules set for the current cursor and window class will be used. When switching to the default, the following search is performed: attempt to switch to a set for the current cursor and window class, if not found, switch to the rule for the current cursor, if not found, switch to the default rule. See default.jcf sections whose names begin with TextUnitRuleSet for details. The string following the first part of the section name is used as the rule set name for this function. For example, to switch to the rule set for the section whose name is "TextUnitRuleSet joe", use TULSwitchToRuleSet("joe"). See default.jcf for details about the keys for a rule.

Returns 

Type: int
 Description: TRUE or FALSE depending on whether the switch succeeded.
 

Parameters 

Param 1: 

Type: string
 Description: of rule to switch active cursor to or empty string to switch back to default for current situation.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 8.00 and later

Script: VirtualPCCursorToggle 

Description 

This command toggles the Virtual cursor off or on. By default, the Virtual cursor is on when navigating Web pages, e-mail messages, and PDF documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-9.0

Dialog Controls Functions

A Dialog Controls function returns information about a specific dialog control, such as its name, state, attributes, hotkey, etc. JAWS uses this information to determine whether to speak and display it in Braille.

Some examples of Dialog Controls functions include:

·         GetControlName

·         GetControlAttributes

·         GetCurrentItem

·         GetHotkey

For a complete listing of Dialog Controls functions, see the topics in this category book of the Reference Guide.

Note: SDM (Standard Dialog Manager) dialogs are handled somewhat differently from most Microsoft Windows controls. They are discussed in the Object Model and MSAA category book summaries of the Reference Guide. They are now far less frequently used since most applications have moved toward UIA controls instead.

Code Sample

The below code sample checks for a dialog to be active. If so, then the GetHotkey function is called. If a hotkey is found, JAWS speaks and flashes it in Braille. If not, JAWS speaks and flashes an error message.

Note that the default key assignment for checking on a hotkey (access key) is Shift+Numpad5. but you may assign it to any key desired for the purpose of running the test script.

Script TestHotkey ()
Var
            String sHotkey
If DialogActive ()
            sHotKey = GetHotkey ()
            If sHotkey != cscNull
                        SayMessage (Ot_User_Requested_information, sHotkey)
                        Return
            Else
                        SayMessage (ot_error, cmsg124_L) ; no hotkey
            EndIf
EndIf
EndScript

Additional Resources

For more details on working with SDM dialogs beyond the scope of the Freedom Scientific Developer Network, refer to the Microsoft Developer Network at Appendix B: Standard Dialog Manager Support (Windows).

Function: ClickToolbarItemByIndex 

Description 

Clicks a button on a toolbar.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the toolbar.
 Include: Required
 

Param 2: 

Type: int
 Description: The index of the button on the toolbar.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Script: CloseListBox 

Description 

Sends an ALT+UP ARROW to the system, which usually closes a list.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ControlCanBeChecked 

Description 

Determines whether or not the current control can be checked.

Returns 

Type: Int
 Description: 0 if cannot be checked or 1 can be checked.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ControlIsChecked 

Description 

Determines whether or not the current control is checked.

Returns 

Type: Int
 Description: Returns true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FindHotKey 

Description 

Searches for the hotkey and prompt of the current window.

Returns 

Type: string
 Description: The hotkey, if found.
 

Parameters 

Param 1: 

Type: string
 Description: Include this parameter if the window prompt should also be retrieved.
 Include: Optional
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetControlAttributes 

Description 

This function returns an integer value indicating the attributes of the current control.

Returns 

Type: Int
 Description: The control attributes, as defined in HJconst.jsh. The values returned may be one of the following; CTRL_NONE = 0, CTRL_CHECKED = 1, CTRL_UNCHECKED = 2, CTRL_GRAYED = 4, CTRL_DISABLED = 8, CTRL_SUBMENU = 16, or CTRL_PRESSED = 32.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, do not use cached MSAA state
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetControlName 

Description 

Gets the name of the current control.

Returns 

Type: String
 Description: The name of the control.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCurrentItem 

Description 

Retrieves the 1-based index of the item in a ListView or combobox which has focus. This function expands the functionality of lvGetFocusItem to also work for comboboxes.

Returns 

Type: Int
 Description: index number of the Current item.
 

Parameters 

Param 1: 

Type: Handle
 Description: The ListView or combobox window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetCurrentListViewItemName 

Description 

Attempts to determine and return the name of the current item in the focus listview, based on whether the listview is customized, and on whether MSAA is being used for the focus listview.

Returns 

Type: string
 Description: the name of the current item in the focus listview.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: GetHotKey 

Description 

Retrieves the first underlined character in the chunk of text on which the active cursor is positioned. This is especially useful in menus and dialog boxes where an accelerator key for a particular item has been defined and is displayed on the screen as a underlined letter in the name of the control.

Returns 

Type: String
 Description: The first underlined character if one exists, otherwise an empty string.
 

Parameters 

Param 1: 

Type: Handle
 Description: The Handle of the window for which you would like to find the hot key. If a handle is not provided, the handle of the current window will be used.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetItemCount 

Description 

Retrieves a count of items in a ListView, Toolbar, or combobox. This function expands the functionality of lvGetItemCount to also work for comboboxes and ToolBArs.

Returns 

Type: Int
 Description: the count of items.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetListViewText 

Description 

Retrieves into a string the text for all items in a listview.

Returns 

Type: string
 Description: The retrieved list text.
 

Parameters 

Param 1: 

Type: handle
 Description: the window handle of a listview.
 Include: Required
 

Param 2: 

Type: int
 Description: a 32-bit flagset specifying which columns to retrieve, default is all if flagset is 0.
 Include: Optional
 

Param 3: 

Type: int
 Description: Boolean specifying whether an empty list item should be skipped in the output. A list item can be empty if only certain columns are specified for output and not all listview items contain text in the specified columns.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: GetProgressBarInfo 

Description 

This function returns the handle, the name and the value of the first progress bar in the current real window.

Returns 

Type: handle
 Description: the progress bar handle if any.
 

Parameters 

Param 1: 

Type: string
 Description: the prompt of the Progress Bar.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: the value of the progress bar as a percentage.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetSingleBitControlAttributeString 

Description 

get the text for a single-bit control attribute.

Returns 

Type: string
 Description: The text describing the control attribute.
 

Parameters 

Param 1: 

Type: int
 Description: An integer representing a single bit control attribute.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: GetToolBarButtonList 

Description 

Retrieves a list of buttons on a toolbar.

Returns 

Type: string
 Description: A list of buttons on the toolbar.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the toolbar whose buttons will be in the list.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetTreeViewLevel 

Description 

Obtains the indent level of the item in a tree view that has focus. The root of the tree has the level 0.

Returns 

Type: Int
 Description: The level of the item with focus.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HotKeyHelpDefaultLoop 

Description 

Loops through all the controls in a dialog box, reads the underlined hot key letter associated with the control.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HotKeyHelpDefaultLoopHelper 

Description 

This function is called by HotKeyHelpDefaultLoop to return the text from the dialog windows.

Returns 

Type: String
 Description: The string to post to the user buffer.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the starting child window in the dialog.
 Include: Required
 

Param 2: 

Type: Int
 Description: True if intro is to be spoken, false otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IsSliderControl 

Description 

Determines if the type code is one of the slider controls type codes.

Returns 

Type: int
 Description: True if the type code is one of the slider control type codes.
 

Parameters 

Param 1: 

Type: int
 Description: The typecode to check.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 16.0 and later

Function: IsToolbarWindow 

Description 

Determines if a window is a toolbar window.

Returns 

Type: int
 Description: True if the handle belongs to a toolbar window, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window to test.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: JavaReadBoxInTabOrder 

Description 

Used by the ReadBoxInTabOrder script to read java windows.

Returns 

Type: int
 Description: True if the window is a java window and was read, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: the handle of the java window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: lvGetCRC 

Description 

This function is used for listview customization. This hex value corresponds to the [Listview Options] section's keys.

Returns 

Type: string
 Description: a unique hex string for a listview.
 

Parameters 

Param 1: 

Type: handle
 Description: the handle to the listview.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: lvGetFocusItem 

Description 

Retrieves the 1-based index of the item in a ListView which has focus. (Superceeded by GetCurrentItem.)

Returns 

Type: Int
 Description: index number of the focused item.
 

Parameters 

Param 1: 

Type: Handle
 Description: The ListView window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: lvGetGroupName 

Description 

Retrieves the name of the grouping that contains an item in a listview.

Returns 

Type: String
 Description: The name of the group
 

Parameters 

Param 1: 

Type: Handle
 Description: to the window containing a ListView.
 Include: Required
 

Param 2: 

Type: Int
 Description: 1-based index of the item in the ListView of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.20 and later

Function: lvGetItemCount 

Description 

Retrieves a count of items in a ListView. (Superceeded by GetItemCount.)

Returns 

Type: Int
 Description: the count of items.
 

Parameters 

Param 1: 

Type: Handle
 Description: The ListView window
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: lvGetItemRect 

Description 

Gets the bounding rectangle of the specified item in a listview.

Returns 

Type: Int
 Description: TRUE if the bounding rectangle is successfully retrieved.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the ListView of interest.
 Include: Required
 

Param 2: 

Type: Int
 Description: index of the item desired.
 Include: Required
 

Param 3: 

Type: Int
 Description: The left edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 4: 

Type: Int
 Description: The right edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 5: 

Type: Int
 Description: The top edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 6: 

Type: Int
 Description: The bottom edge of the bounding rectangle after the function is called.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: lvGetItemState 

Description 

Detects the current selection state of the item within a ListView. Refer to the return states for more information.

Returns 

Type: Int
 Description: LVIS_FOCUSED = 1. The item has the focus, so it is surrounded by a standard focus rectangle. Although more than one item may be selected, only one item can have the focus. LVIS_SELECTED = 2. The item is selected. The appearance of a selected item depends on whether it has the focus and also on the system colors used for selection. LVIS_CUT = 4. The item is marked for a cut-and-paste operation. LVIS_DROPHILITED = 8. The item is highlighted as a drag-and-drop target.
 

Parameters 

Param 1: 

Type: Handle
 Description: window handle of the List View.
 Include: Required
 

Param 2: 

Type: Int
 Description: 1-based index of the item.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: lvGetItemText 

Description 

Retrieves the text of an item in a ListView. Does not work for Owner-Drawn items.

Returns 

Type: String
 Description: The contents of the requested item.
 

Parameters 

Param 1: 

Type: Handle
 Description: to the window containing a ListView.
 Include: Required
 

Param 2: 

Type: Int
 Description: 1-based index of the item in the ListView of interest.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1-based index of the column of interest (applies only to multicolumn ListViews).
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: lvGetSelectionCount 

Description 

Retrieves a count of the selected items in a ListView.

Returns 

Type: Int
 Description: the count of selected items.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: lvGetUserDefinedItemText 

Description 

If a listview has been customized to speak or be Brailled in a particular manner, this function retrieves the text of the specified item as rendered by the customization.

Returns 

Type: string
 Description: the user selected column headers and column data.
 

Parameters 

Param 1: 

Type: handle
 Description: the handle to the listview.
 Include: Required
 

Param 2: 

Type: int
 Description: a 1-based item whose text you want.
 Include: Required
 

Param 3: 

Type: int
 Description: use 0 for speech customization, 1 for Braille customization, if not present, assumes speech.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: lvIsCustomized 

Description 

this function determines if the listview pointed to by the hwnd parameter has a speech or Braille customization defined for it, this includes whether there is a default customization defined as well. This function is used to determine whether or not SayHighlightedText should be used to speak a listview or whether custom code should be executed.

Returns 

Type: int
 Description: true or false.
 

Parameters 

Param 1: 

Type: handle
 Description: the handle to the window.
 Include: Required
 

Param 2: 

Type: int
 Description: 0 for speech, 1 for Braille, if not present, defaults to speech.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: lvMoveByLineUnit 

Description 

Use with listview controls which may be manipulated with the lv functions but which need special scripting for navigation.

Returns 

Type: int
 Description: true if the move was successful, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: One of the lvLineMoveUnit constants defined in HJConst.jsh-- lvLineMoveUnitFirst, lvLineMoveUnitLast, lvLineMoveUnitPrior or lvLineMoveUnitNext.
 Include: Required
 

Param 2: 

Type: int
 Description: bMayWrap True if requests to move to prior or next line may wrap past the beginning or end of the list.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 8.10 and later

Function: lvSelectItem 

Description 

Select an item within the listview.

Returns 

Type: Int
 Description: True indicates that the item was selected successfully and FALSE indicates that the action failed.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of list view.
 Include: Required
 

Param 2: 

Type: Int
 Description: 1-based index of the item.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 to select, 0 to unselect.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: lvSetFocusItem 

Description 

Moves focus to a specified item in a ListView. Note that this does not bring the ListView window into focus, it simply causes a specific item within a ListView to be the focused item in that window. (Superceeded by SetCurrentItem.)

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window containing a ListView.
 Include: Required
 

Param 2: 

Type: Int
 Description: The 1-based index of the row in the ListView to receive focus.
 Include: Required
 

Param 3: 

Type: Int
 Description: TRUE-Clears focus and selection states of all items before setting focus. FALSE-leaves states untouched. Defaults to TRUE.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: MoveSliderPos 

Description 

Moves the position of a slider control to a different value.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: windows handle to the slider control that you want to change the value on.
 Include: Required
 

Param 2: 

Type: Int
 Description: the PERCENTAGE to increase from the present position too. Negative percentages decrease the slider control.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: MoveToControl 

Description 

Moves the active cursor to a specific control within a window. Although primarily useful inside dialog boxes, the function can be used in any window where child controls have unique identifiers obtained with GetControlID. It can also be used in SDM windows with the identifiers obtained using SDMGetFirstControl, SDMGetLastControl, SDMGetFocus, and so on. If the PC cursor is on when this function is called, the JAWS cursor is turned on automatically. Otherwise, the active cursor is used

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window containing the control of interest.
 Include: Required
 

Param 2: 

Type: Int
 Description: ID of desired control.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToFirstSdmControl 

Description 

Moves the focus to the first SDM control that is found within a dialog box.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToNextSdmControl 

Description 

Moves the focus to the next SDM control within a dialog box.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: OpenListBox 

Description 

Sends an ALT+DOWN ARROW to the system which usually opens a list.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PositionInGroup 

Description 

returns a string describing the focused control's selection's position relative to the collection, eg 1 of 10 items etc.

Returns 

Type: String
 Description: of the format 1 of 10 or 0 items.
 

Parameters 

Param 1: 

Type: handle
 Description: As of JAWS 12.0, Handle to the window for which information is desired. If not provided, defaults to the focussed control.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ProcessCloseListBox 

Description 

Used by the CloseListBox script to process closing of the list box.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the listbox window.
 Include: Required
 

Param 2: 

Type: int
 Description: The subtype code of the listbox window.
 Include: Required
 

Param 3: 

Type: int
 Description: Boolean to determine if forms mode was active before the listbox is closed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: ProcessOpenListBox 

Description 

Used by the OpenListBox script to process opening of the list box.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window which will open a listbox.
 Include: Required
 

Param 2: 

Type: int
 Description: The subtype code of the window which will open the listbox.
 Include: Required
 

Param 3: 

Type: int
 Description: Boolean to determine if forms mode was active before the listbox is opened.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Script: ReadListviewColumn 

Description 

This keystroke reads the current column header (from 1 to 9, 0 for column 10) for the currently selected multi-column listview item.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: ReadToolbarObjects 

Description 

Speaks the list of objects belonging to a toolbar window, announcing their name and type.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the toolbar window whose objects are to be read.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: SayControl 

Description 

Used in dialog boxes to speak the contents of a child window along with its prompt. It reads Edit fields, list boxes, check boxes, radio buttons, etc.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The information that is spoken by this function is determined by the window handle that is used as a parameter. Type a variable name or choose a script function that can provide a window handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayControlEx 

Description 

This function is designed to be used in the script language to speak a control that requires custom processing (any control for which SayWindowTypeAndText does not properly speak the name and type of the control). This function is designed to honor the user's output mode settings for each component of the control's description. This function takes nine parameters, eight of which are string parameters. The first parameter is the window handle of the control that is to be spoken. The next eight parameters include one parameter for each component of a control's description. Each string parameter has a corresponding Output Mode. The eight string parameters are String strControlName = Either OT_DIALOG_NAME, OT_DOCUMENT_NAME, or OT_CONTROL_NAME, depending on the type of window that is to be spoken, String strControlType = OT_CONTROL_TYPE, String strControlState = OT_ITEM_STATE, String strContainerName = OT_CONTROL_GROUP_NAME, String strContainerType = OT_CONTROL_TYPE, String strValue = OT_SELECTED_ITEM, String strPosition = OT_POSITION, String strDialogText = OT_DIALOG_TEXT. This function works by building a string based upon the five components of the control description, adding each component only if the user has specified that this item should speak in the current verbosity level. Then this function calls Say with the constructed string as the first parameter and OT_NO_DISABLE as the second parameter. If any portion of the control description is not specified, JFW will obtain the default value for that component of the control description and will add the default value of that component to the control description string. Therefore, if SayWindowTypeAndText speaks every part of a control correctly other than the Control Type, you can call SayControlEx and pass it the Window Handle and the text you would like to be spoken and pass a null string ("") to the function for the remainder of the parameters. SayControlEx will obtain the default values for the control type, control st. ate, container name, container type, control value, control positional information, and the dialog text if the specified window is the top level window of a dialog box using the same methods as SayWindowTypeAndText and it will include these values in the control description string that is spoken.

Returns 

Type: Int
 Description: Returns 1 if the function sucessfully assembled the control description string and spoke the control description (i.e. the length of the control description string was equal to 0). If for some reason the function failed to assemble the control description string, the function returns 0. One reason why this function would return 0 is that the user has specified that all the output modes be turned off in the current verbosity level.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the control.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the control. This parameter is assigned an Output Mode of either OT_DIALOG_NAME, OT_DOCUMENT_NAME, or OT_CONTROL_NAME, depending on the type of window that is to be spoken. If the window that is to be spoken has a window type of WT_DIALOG, this parameter is assigned an Output Mode of OT_DIALOG_NAME. If the specified window is the App Main Window or Real Window, it is assigned an Output Mode of OT_DOCUMENT_NAME. Otherwise it is assigned an Output Mode of OT_CONTROL_NAME.
 Include: Optional
 

Param 3: 

Type: String
 Description: The control type. This parameter is assigned an Output Mode of OT_CONTROL_TYPE.
 Include: Optional
 

Param 4: 

Type: String
 Description: The control state. This parameter is assigned an Output Mode of OT_ITEM_STATE.
 Include: Optional
 

Param 5: 

Type: String
 Description: The name of the control container box. For example, if this control is part of a group box, this paramater would be the name of the group box. This parameter is assigned an Output Mode of OT_CONTROL_GROUP_NAME.
 Include: Optional
 

Param 6: 

Type: String
 Description: The control type of the control container. This parameter is assigned an Output Mode of OT_CONTROL_TYPE. It is only spoken if the user has specified that both OT_CONTROL_GROUP_NAME and OT_CONTROL_TYPE are enabled.
 Include: Optional
 

Param 7: 

Type: String
 Description: The current value of the control. For example, if the specified control is a list box, the current value of the control is the text of the selected item in the list box. This parameter is assigned an output mode of OT_SELECTED_ITEM.
 Include: Optional
 

Param 8: 

Type: String
 Description: Any relevant positional information for the control. For example if the specified control is a list box, the relevant positional information for the control is the index of the selected item in the list box. This parameter is assigned an output mode of OT_POSITION.
 Include: Optional
 

Param 9: 

Type: String
 Description: If the specified control is the top level window of a dialog box, this parameter specifies the text that is to be spoken as the static text of the dialog box. This parameter is assigned an output mode of OT_DIALOG_TEXT.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayControlExWithMarkup 

Description 

This function is designed to be used in the script language to speak a control that requires custom processing (any control for which SayWindowTypeAndText does not properly speak the name and type of the control). This function is designed to honor the user's output mode settings for each component of the control's description. This function takes nine parameters, eight of which are string parameters. The first parameter is the window handle of the control that is to be spoken. The next eight parameters include one parameter for each component of a control's description. Each string parameter has a corresponding Output Mode. The eight string parameters are String strControlName = Either OT_DIALOG_NAME, OT_DOCUMENT_NAME, or OT_CONTROL_NAME, depending on the type of window that is to be spoken, String strControlType = OT_CONTROL_TYPE, String strControlState = OT_ITEM_STATE, String strContainerName = OT_CONTROL_GROUP_NAME, String strContainerType = OT_CONTROL_TYPE, String strValue = OT_SELECTED_ITEM, String strPosition = OT_POSITION, String strDialogText = OT_DIALOG_TEXT. This function works by building a string based upon the five components of the control description, adding each component only if the user has specified that this item should speak in the current verbosity level. Then this function calls Say with the constructed string as the first parameter, OT_NO_DISABLE as the second parameter and specifies that the string contains Speech Markup. If any portion of the control description is not specified, JFW will obtain the default value for that component of the control description and will add the default value of that component to the control description string. Therefore, if SayWindowTypeAndText speaks every part of a control correctly other than the Control Type, you can call SayControlExWithMarkup and pass it the Window Handle and the text you would like to be spoken and pass a null string ("") to the function for the remainder of the parameters. SayControlExWithMarkup will obtain the default values for the control type, control state, container name, container type, control value, control positional information, and the dialog text if the specified window is the top level window of a dialog box using the same methods as SayWindowTypeAndText and it will include these values in the control description string that is spoken. Note that this version of the function assumes that all parameters are using speech markup, ie they contain correct xml markup including symbol replacement (eg < with < etc. This allows a control's type or state or value to be marked up to play sounds, change voice etc.

Returns 

Type: Int
 Description: Returns 1 if the function successfully assembled the control description string and spoke the control description (i.e. the length of the control description string was equal to 0). If for some reason the function failed to assemble the control description string, the function returns 0. One reason why this function would return 0 is that the user has specified that all the output modes be turned off in the current verbosity level.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the control.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the control. This parameter is assigned an Output Mode of either OT_DIALOG_NAME, OT_DOCUMENT_NAME, or OT_CONTROL_NAME, depending on the type of window that is to be spoken. If the window that is to be spoken has a window type of WT_DIALOG, this parameter is assigned an Output Mode of OT_DIALOG_NAME. If the specified window is the App Main Window or Real Window, it is assigned an Output Mode of OT_DOCUMENT_NAME. Otherwise it is assigned an Output Mode of OT_CONTROL_NAME.
 Include: Optional
 

Param 3: 

Type: String
 Description: The control type. This parameter is assigned an Output Mode of OT_CONTROL_TYPE.
 Include: Optional
 

Param 4: 

Type: String
 Description: The control state. This parameter is assigned an Output Mode of OT_ITEM_STATE.
 Include: Optional
 

Param 5: 

Type: String
 Description: The name of the control container box. For example, if this control is part of a group box, this paramater would be the name of the group box. This parameter is assigned an Output Mode of OT_CONTROL_GROUP_NAME.
 Include: Optional
 

Param 6: 

Type: String
 Description: The control type of the control container. This parameter is assigned an Output Mode of OT_CONTROL_TYPE. It is only spoken if the user has specified that both OT_CONTROL_GROUP_NAME and OT_CONTROL_TYPE are enabled.
 Include: Optional
 

Param 7: 

Type: String
 Description: The current value of the control. For example, if the specified control is a list box, the current value of the control is the text of the selected item in the list box. This parameter is assigned an output mode of OT_SELECTED_ITEM.
 Include: Optional
 

Param 8: 

Type: String
 Description: Any relevant positional information for the control. For example if the specified control is a list box, the relevant positional information for the control is the index of the selected item in the list box. This parameter is assigned an output mode of OT_POSITION.
 Include: Optional
 

Param 9: 

Type: String
 Description: If the specified control is the top level window of a dialog box, this parameter specifies the text that is to be spoken as the static text of the dialog box. This parameter is assigned an output mode of OT_DIALOG_TEXT.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: SayControlInformation 

Description 

This function is designed to be used in the script language to speak a control that requires custom processing (any control for which SayWindowTypeAndText does not properly speak the name and type of the control). This function is designed to honor the user's output mode settings for each component of the control's description. This function takes six parameters, five of which are string parameters. The first parameter is the window handle of the control that is to be spoken. The next five parameters include one parameter for each component of a control's description. Each string parameter has a corresponding Output Mode. The 5 string parameters are String strControlName = Either OT_DIALOG_NAME, OT_DOCUMENT_NAME, or OT_CONTROL_NAME, depending on the type of window that is to be spoken, String strControlType = OT_CONTROL_TYPE, String strControlState = OT_ITEM_STATE, String strContainerName = OT_CONTROL_GROUP_NAME, and String strContainerType = OT_CONTROL_TYPE. This function works by building a string based upon the five components of the control description, adding each component only if the user has specified that this item should speak in the current verbosity level. Then this function calls Say with the constructed string as the first parameter and OT_NO_DISABLE as the second parameter.

Returns 

Type: Int
 Description: Returns 1 if the function successfully assembled the control description string and spoke the control description (i.e. the length of the control description string was equal to 0). If for some reason the function failed to assemble the control description string, the function returns 0. One reason why this function would return 0 is that the user has specified that all the output modes be turned off in the current verbosity level.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the control. This parameter is assigned an Output Mode of either OT_DIALOG_NAME, OT_DOCUMENT_NAME, or OT_CONTROL_NAME, depending on the type of window that is to be spoken. If the window that is to be spoken has a window type of WT_DIALOG, this parameter is assigned an Output Mode of OT_DIALOG_NAME. If the specified window is the App Main Window or Real Window, it is assigned an Output Mode of OT_DOCUMENT_NAME. Otherwise it is assigned an Output Mode of OT_CONTROL_NAME.
 Include: Optional
 

Param 2: 

Type: String
 Description: The control type. This parameter is assigned an Output Mode of OT_CONTROL_TYPE.
 Include: Optional
 

Param 3: 

Type: String
 Description: The control state. This parameter is assigned an Output Mode of OT_ITEM_STATE
 Include: Optional
 

Param 4: 

Type: String
 Description: The name of the control container box. For example, if this control is part of a group box, this paramater would be the name of the group box. This parameter is assigned an Output Mode of OT_CONTROL_GROUP_NAME.
 Include: Optional
 

Param 5: 

Type: String
 Description: The control type of the control container. This parameter is assigned an Output Mode of OT_CONTROL_TYPE. It is only spoken if the user has specified that both OT_CONTROL_GROUP_NAME and OT_CONTROL_TYPE are enabled.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayCurrentAccessKey 

Description 

Says the underlined letter in the name or prompt for the current item in a dialog box or window. Use this letter with the Alt key to choose that item even when it does not have the focus.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayLVItemCheckStatus 

Description 

If the listview contains checkable items, determines and says the check status of the listview item which has focus in the list.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The listview handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: SayTreeViewItem 

Description 

Speaks the active tree view item without the level or position information.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SayTreeViewLevel 

Description 

This function announces new tree view levels as they are encountered. 0 represents the left-most level of the tree view. This is usually the highest level in a tree view

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If true, only announces position information if treeview level has changed since previous call to SayTreeViewLevel.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayTVFocusItemExpandState 

Description 

Announces the open/closed state of the focus item of a treeview.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of a treeview.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: SDMGetControlActiveItem 

Description 

Used with SDM windows to get an item's text. This function is only used with SDM windows and not with regular dialog windows.

Returns 

Type: String
 Description: Provides the item's text. When an item's text is not present, the null value of "" is returned.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that provides the handle of the window that is to be read. The GetFocus function is often used to provide the handle of the SDM window.
 Include: Required
 

Param 2: 

Type: Int
 Description: Use the SDMGetFocus function to provide the control ID for the active child window of the dialog box.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SDMGetControlName 

Description 

Used with SDM windows to get an item's control name. This function is only used with SDM windows and not with regular dialog windows.

Returns 

Type: String
 Description: Provides the item's control name. When an item's text is not present, the null value of "" is returned.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that provides the handle of the window that is to be read. The GetFocus function is often used to provide the handle of the SDM window.
 Include: Required
 

Param 2: 

Type: Int
 Description: Use the SDMGetFocus function to provide the control ID for the active child window of the dialog box.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: SDMGetControlSubtypeCode 

Description 

Obtains the window subtype code number for the specified window and control ID.

Returns 

Type: Int
 Description: The window subtype number for the specified window and control ID.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function provides information for the window that is identified by a window handle. Type a variable name or choose a script function to provide the window handle it needs.
 Include: Required
 

Param 2: 

Type: Int
 Description: Use the SDMGetFocus function to provide the control ID for the active child window of the dialog box.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SDMGetControlValue 

Description 

Used with SDM windows to get an edit field's contents. This function is only used with SDM windows and not with regular dialog windows.

Returns 

Type: String
 Description: Provides the item's value
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that provides the handle of the window that is to be read. The GetFocus function is often used to provide the handle of the SDM window.
 Include: Required
 

Param 2: 

Type: Int
 Description: Use the SDMGetFocus function to provide the control ID for the active child window of the dialog box.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: SDMGetCurrentControl 

Description 

Retrieves the ID of the control on which the active cursor is positioned inside an SDM dialog box.

Returns 

Type: Int
 Description: The ID of the SDM control in which the active cursor is positioned, or 0 if not inside an SDM dialog box.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMGetFirstControl 

Description 

Obtains the control ID of the first dialog option in an SDM dialog box. It can provide the control ID that is needed by the SDMSayControl function.

Returns 

Type: Int
 Description: Provides control ID.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the SDM dialog box. The GetFocus function is often used to provide the handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMGetFocus 

Description 

Used to get the control ID of the active dialog option or control in an SDM dialog box. This function is most often used as a parameter for the SDMSayWindowTypeAndText function to provide it with a control ID.

Returns 

Type: Int
 Description: Provides The control ID within an SDM dialog.
 

Parameters 

Param 1: 

Type: Handle
 Description: Use the GetFocus function to obtain the handle of the current SDM window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMGetLastControl 

Description 

Provides the control ID for the last option in an SDM dialog box. It can provide the control ID that is needed by the SDMSayControl function.

Returns 

Type: Int
 Description: Provides control ID.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle of the SDM dialog. The GetFocus function is often used to provide the handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMGetNextControl 

Description 

Obtains the control ID for the next option in an SDM dialog box. It can provide the control ID that is needed by the SDMSayControl function.

Returns 

Type: Int
 Description: A control ID is returned when the next control ID is found, 0 is returned when a control ID does not exist.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle of the SDM dialog box. The GetFocus function is often used to provide the handle.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type a variable name or choose a script function that indicates the control ID for the child window which is the starting point for the script function in the SDM dialog.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMGetPrevControl 

Description 

Provides the control ID for the previous option in an SDM dialog box. It can provide the control ID that is needed by the SDMSayControl function.

Returns 

Type: Int
 Description: A control ID is returned when the previous control ID is found, 0 is returned when a control ID does not exist.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle of the SDM dialog box. The GetFocus function is often used to provide the handle.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type a variable name or choose a script function that indicates the control ID for the child window which is the starting point for the script function in the SDM dialog.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMSayControl 

Description 

Speaks the contents of a child window along with its prompt in an SDM dialog box. It reads edit fields, list boxes, check boxes, radio buttons, etc. This function is equivalent to SayControl, but is exclusively designed for SDM dialog boxes. All child windows in an SDM dialog box have the same window handle, and the control ID is used to distinguish between the various options in the dialog box.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the dialog box. The GetFocus function is often used to provide the handle.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type a variable name or choose a script function that can provide the control ID for the child window which is to be spoken. Various SDM control ID functions can be used to identify the child window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SDMSayStaticText 

Description 

Reads a type of text called static text that may be displayed in an SDM dialog box. It does not read the text in edit fields, check boxes, and so on, or the titles or prompts that are often associated with dialog options

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Use the GetFocus function to obtain the handle of the current SDM window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SDMSayWindowTypeAndText 

Description 

Used with SDM windows to read the window title (when one is present), the window type, the contents in the window, and related information about the current dialog box option. When this function is used, it marks the text it reads so that the SayNonHighlightedText and SayHighlightedText functions do not repeat the same information when they are triggered. This function is only used with SDM windows and not with regular dialog windows.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that provides the handle of the window that is to be read. The GetFocus function is often used to provide the handle of the SDM window.
 Include: Required
 

Param 2: 

Type: Int
 Description: Use the SDMGetFocus function to provide the control ID for the active child window of the dialog box.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetCurrentItem 

Description 

Moves focus to a specified item in a ListView or combobox. Note that this does not bring the ListView or combobox window into focus, it simply causes a specific item to be the focused item in that window. This function expands the functionality of lvSetFocusItem to also work for comboboxes.

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window containing a ListView or combobox.
 Include: Required
 

Param 2: 

Type: Int
 Description: The 1-based index of the row in the ListView or combobox to receive focus.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: ShouldSayFunctionsSpeakSlider 

Description 

Checks the focused slider control to see if it has a role of slider and a nonempty msaa value

Returns 

Type: int
 Description: True if the ValueChanged event will handle speaking of this control;False otherwise
 

Parameters 

Param 1: 

Type: int
 Description: The type of the focused object
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 16.0 and later

Function: SpeakProgressBarInfo 

Description 

Speaks the current status of the progress bar.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Enter TRUE to speak the progress bar's prompt text.
 Include: Required
 

Param 2: 

Type: int
 Description: true if you want progress bar percentage to be spoken when progress bar shows 0 percent, false otherwise. Defaults to false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: tbGetItemRect 

Description 

Gets the bounding rectangle of the specified item in a ToolBar.

Returns 

Type: Int
 Description: TRUE if the bounding rectangle is successfully retrieved.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the ToolBar of interest.
 Include: Required
 

Param 2: 

Type: Int
 Description: index of the item desired.
 Include: Required
 

Param 3: 

Type: Int
 Description: The left edge of the bounding rectangle after the function is called.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: The right edge of the bounding rectangle after the function is called.
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: Int
 Description: The top edge of the bounding rectangle after the function is called.
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: Int
 Description: The bottom edge of the bounding rectangle after the function is called.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: tbGetItemState 

Description 

Retrieves the state of an item on a ToolBar. Refer to the return states for more information.

Returns 

Type: Int
 Description: a combination of state flags. See the TBSTATE_* values in HJCONST.JSH.
 

Parameters 

Param 1: 

Type: Handle
 Description: window handle of the ToolBar.
 Include: Required
 

Param 2: 

Type: Int
 Description: 1-based index of the item.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: tbGetItemText 

Description 

Retrieves the text of an item in a Toolbar.

Returns 

Type: String
 Description: The contents of the requested item. If the item is a graphic, text will only be returned if that graphic has a JAWS graphic label.
 

Parameters 

Param 1: 

Type: Handle
 Description: to the window containing a ToolBar.
 Include: Required
 

Param 2: 

Type: Int
 Description: 1-based index of the item in the ToolBAr.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: tvCollapse 

Description 

Collapses the currently selected treeview node.

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: tvExpand 

Description 

Expands the currently selected treeview node.

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: tvGetFocusItemExpandState 

Description 

Use this function to get the expanded/collapsed state of the focus item in a treeview. This function does not use MSAA for determining the treeview item state.

Returns 

Type: int
 Description: -1 if the focus treeview item has no children, 1 if the focus treeview item is expanded, 0 if the focus treeview item is collapsed.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of a treeview.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: tvGetFocusItemText 

Description 

Retrieves the text of the focus item for a treeview.

Returns 

Type: string
 Description: The text of the focus item in the tree view.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of a treeview.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: tvGetItemStateImageIndex 

Description 

Use this function to distinguish between the differring state graphics that may be placed beside items in a tree view.

Returns 

Type: int
 Description: the state image index for the currently active treeview item. This value should change as the state graphic changes on the screen.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the treeview window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: tvGetItemText 

Description 

Returns a string for a specific tree item.

Returns 

Type: String
 Description: The HTREEITEM text.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Param 2: 

Type: int
 Description: Integer representing a specific HTREEITEM.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: tvGetParent 

Description 

Returns an integer, representing the HTREEITEM, for the parent of a specific tree item.

Returns 

Type: int
 Description: The parent HTREEITEM.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Param 2: 

Type: int
 Description: Integer representing a specific HTREEITEM.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: tvGetPathToSelection 

Description 

Retrieves the text of the tree nodes in the path leading to but not including the selected HTREEITEM.

Returns 

Type: string
 Description: The text of the tree nodes in the path leading to but not including the selected HTREEITEM.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: tvGetSelection 

Description 

Returns an integer, representing the HTREEITEM, for the current selected item.

Returns 

Type: int
 Description: The selected HTREEITEM.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: tvSelectNextItem 

Description 

Selects the next visible item depending on the current selected item.

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: tvSelectPriorItem 

Description 

Selects the prior visible item depending on the current selected item.

Returns 

Type: Int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The TreeView window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Dialogs Functions

A Dialog function provides or returns information about a specific dialog, such as its list of controls that may be activated, which page is gaining focus from a user action, etc. JAWS uses this information to determine whether to speak and display it in Braille.

Some examples of Dialog functions include:

·         DialogList

·         DialogListHelper

·         NextDocumentWindow

·         PreviousDocumentWindow

For a complete listing of Dialog functions, see the topics in this category book of the Reference Guide.

Note: SDM (Standard Dialog Manager) dialogs are handled somewhat differently from most Microsoft Windows dialogs. They are discussed in the Object Model and MSAA topic category book of the Reference Guide. For more details on working with SDM dialogs beyond the scope of the Freedom Scientific Developer Network, refer to the Microsoft Developer Network at Appendix B: Standard Dialog Manager Support (Windows).

Code Sample

Note: The script that reads a dialog box in tab order performs a different purpose from the below code sample that lists some of the controls in the dialog and allows you to activate one of the controls in the list. The script that handles reading a dialog box in tab order is JAWSKey+b. But there is no default script for displaying a dialog list of controls from which you may choose a control to activate. Nevertheless, utilizing the DialogList function may be handy in certain circumstances.

The below code sample checks for a dialog to be active. If so, then the DialogList function is called in order to present the dialog controls in a list from which you may select which control to activate. If you perform this code sample from the Open dialog in Notepad, for example, the dialog list only displays the controls that the DialogList function finds. The function does not present the entire list of controls; whereas, pressing the default key assignment for reading a dialog box in tab order announces all the controls in the dialog.

Script TestMyDialogList()
If DialogActive ()
            DialogList ()
            Return
Else
            SayMessage (ot_error, cmsg56_l,cmsg56_s); not in a dialog box/not in a dialog
EndIf
EndScript

Function: DialogActive 

Description 

Used to determine whether a dialog box is currently active. It returns a constant value to indicate the status: ACTIVE indicates that a dialog box is active, and INACTIVE indicates that a dialog box is not active. These constants can be used in If...Then...Else...statements.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DialogList 

Description 

This function, if activated from within a dialog, will present a list box containing the controls of the dialog box. Select a dialog control and press Enter to move to it, or press Alt+L to perform a left mouse click on the desired item. Note: This function is designed for use within standard Windows dialogs. It may not return complete information for nonstandard dialog boxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DialogListHelper 

Description 

Called by DialogList function, returns various parameters by reference for the DialogList function to use.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description:
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description:
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: string
 Description:
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: int
 Description:
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetDefaultButtonName 

Description 

Identifies the default button in a dialog box. This is the button that will be chosen when ENTER is pressed.

Returns 

Type: String
 Description: Provides the name of the default dialog button.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetDialogPageName 

Description 

If the active cursor is inside a multi-page dialog, retrieves the name of the current page.

Returns 

Type: String
 Description: The name of the current page.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetDialogStaticText 

Description 

Gets the static text in a dialog box.

Returns 

Type: String
 Description: The static text found in a Dialog box.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetGroupBoxName 

Description 

Gets the name of the current Group box.

Returns 

Type: String
 Description: The name of the Group box.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HandleWebDialogFocusTransition 

Description 

Manages web dialog restriction on focus change.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: IsMultiPageDialog 

Description 

Checks to see if the active cursor is positioned inside a multi-page dialog box.

Returns 

Type: Int
 Description: TRUE if this is a multipage dialog, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: NextDocumentWindow 

Description 

Used to switch between document windows or group windows, also switches between the different page tabs in Multi-page Dialog boxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: NextDocumentWindowByPage 

Description 

This is a keystroke recommended by Microsoft for changing dialog pages.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Script: PreviousDocumentWindow 

Description 

Used to switch between document windows or group windows. Also, switches between the different page tabs in multi-page dialog boxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: PreviousDocumentWindowByPage 

Description 

This is a keystroke recommended by Microsoft for changing dialog pages.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Script: ReadBoxInTabOrder 

Description 

Reads the controls in the dialog box in their correct Tab Order. This command may not work in every dialog box, especially those that are non-standard windows, such as SDM controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayDefaultButton 

Description 

Dialog boxes usually have a button that is the default, such as Okay or No. This button indicates the function that will be performed when you press the ENTER key, unless focus is on another button. Use This keystroke to determine which function will be performed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Event Functions

The Freedom Scientific Scripting language utilizes many event functions in the default script source file (.jss) as well as in many other script source files. The list of functions in this Reference Guide comprises all of the Event functions and their Helper functions. In the General Scripting Concepts book of the FSDN, the major topic that explains these types of functions is called Events.

The Events topic in the General Scripting Concepts book discusses each category of event and its helper functions in summaries, where applicable. Each summary includes some code samples. The categories of scripts and functions include:

·         Application Info Events

·         Clipboard Events

·         Connection Events

·         Cursors Events

·         Cursors Event Helpers

·         Dialogs Events

·         Help Events

·         HTML Events

·         HTML Event Helpers

·         Keyboard Events

·         Keyboard Event Helpers

·         Menus Events

·         Menus Event Helpers

·         Mouse Events

·         Mouse Speech Events

·         Object Model And MSAA Events

·         Object Model and MSAA Event Helpers

·         Optical Character Recognition Events

·         SayAll Events

·         Screen Text Events

·         Screen Text Event Helpers

·         Scripts Events

·         Selection Events

·         Selection Event Helpers

·         Settings Events

·         Window Events

·         Window Event Helpers

Function: AppWillNotSpeakEvent 

Description 

Produces the "Cannot speak in Restricted Mode" message when authorization is either not found or inaccurate.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: the name of the application that will not speak in restricted mode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: AutoFinishEvent 

Description 

The function is invoked when the application is closed by loosing focus when F4 is pressed. It also gets performed when the application is switched from or looses focus, as with ALT+TAB.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: AutoStartEvent 

Description 

When the application is started this event gets performed. It also gets performed when the application is switched to or gets focus, as with ALT+TAB.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ClipboardChangedEvent 

Description 

This event is called whenever the contents of the Windows clipboard is replaced.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ControllerModeChangedEvent 

Description 

Used to play a sound to notify the Tandem controller user when the session has been suspended or resumed.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The mode of the controller, full screen, minimized or UAC.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: RemoteControllerModeChangedEvent 

Description 

Used to notify the target user that the remote controller has suspended or resumed the tandem session.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The mode of the remote controller, minimized or full screen.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: TandemConnectionEvent 

Description 

Used to announce when a target or controller computer opens or closes a tandem session.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The tandem app, controller or target.
 Include: Required
 

Param 2: 

Type: int
 Description: The connection status, connected or disconnected.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: ProcessBoundaryStrike 

Description 

This function is called by TopEdgeEvent and BottomEdgeEvent to perform an action when a user tries to move past a boundary.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window where the edge was reached.
 Include: Required
 

Param 2: 

Type: int
 Description: The boundary edge which was reached. Currently TopEdge and BottomEdge are defined in HJConst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: BottomEdgeEvent 

Description 

When the active cursor attempts to move beyond the bottom edge of the active window, this function is called and receives the window handle as a parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window whose bottom boundary was reached.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: CursorShapeChangedEvent 

Description 

The name of the new shape is passed to this function via a string variable.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: the string value for the current cursor type.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FocusPointMovedEvent 

Description 

It is called when the pixel location of the blinking caret or highlight changes. Note that the pixel location is determined by video resolution as in row and column coordinates. Because this function will be called quite frequently, it is recommended that you avoid from intensive tasks that will be performed each time the PC cursor moves. For a list of parameters received by FocusPointMovedEvent and their descriptions, look at the Existing Parameters List box on the Parameters page.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Current horizontal coordinate of the PC cursor.
 Include: Required
 

Param 2: 

Type: Int
 Description: Current vertical coordinate of the PC cursor.
 Include: Required
 

Param 3: 

Type: Int
 Description: Previous horizontal coordinate of the PC cursor.
 Include: Required
 

Param 4: 

Type: Int
 Description: Previous vertical coordinate of the PC cursor.
 Include: Required
 

Param 5: 

Type: Int
 Description: The unit of movement as constant variables defined in HJConst.jsh.
 Include: Required
 

Param 6: 

Type: Int
 Description: The direction of movement as constant variables defined in HJConst.jsh.
 Include: Required
 

Param 7: 

Type: Int
 Description: The amount of time (milliseconds)that has elapsed since the movement occurred.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TopEdgeEvent 

Description 

When the active cursor attempts to move beyond the top edge of the current window, this function is called and receives the window handle as a parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window whose top boundary was reached.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DialogPageChangedEvent 

Description 

Called when switching between pages of a multipage dialog box.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the handle of the window containing the page of the dialog that is currently active.
 Include: Required
 

Param 2: 

Type: Handle
 Description: the handle of the window containing the page of the dialog that was previously active.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TutorMessageEvent 

Description 

this event is triggered after the FocusChangedEvent and when the focus moves between menu items. It is always called after NewTextEvent and hence SayHighlightedText.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the focus window.
 Include: Required
 

Param 2: 

Type: Int
 Description: the menu mode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

HTML Event Helpers

An HTML event helper function assists an HTML event that occurs in an HTML application. Based on the information the HTML event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of HTML Event helper functions include:

DocumentLoadedAtFormField

DoDefaultDocumentLoadActions

ProcessDocumentLoadAppAlerts

For a complete listing of HTML Event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the DocumentLoadedAtFormField function is overwritten in the Chrome.jss script source file from the function in default.jss. Before the default function is called, a nonsense message is added to speak and display in Braille under certain conditions to illustrate how DocumentLoadedEvent uses this helper function when a new Web page is loaded. It is assumed that the function is being compiled in the Chrome.jsb script binary file in your root folder of the JAWS user Settings\(language) folder.

Note: To avoid unpredictable results, never change the files located in any folder of the JAWS shared folder structure.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function DocumentLoadedAtFormField ()
Var
            Int iSubtype,
            String msgTestFormfield
msgTestFormfield = "I am a formfield."
Let iSubtype = GetObjectTypeCode()
If iSubtype == WT_EDIT
|| iSubtype == wt_Multiline_Edit
|| iSubtype == wt_PassWordEdit
|| iSubtype == wt_EditCombo
|| iSubtype == wt_ComboBox
|| iSubtype == wt_ListBox
|| iSubtype == wt_MultiSelect_ListBox
|| iSubtype == wt_ExtendedSelect_ListBox then
            SayMessage (ot_JAWS_Message,msgTestFormfield)
EndIf
Return Default::DocumentLoadedAtFormfield()
EndFunction

Function: AnnounceDocumentElements 

Description 

Used by DocumentLoadedEvent to announce the number of frames, heading and links on the current HTML page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: DocumentLoadedAtFormField 

Description 

Used by DocumentLoadedEvent to determine if the focus was on a form field when the document loaded.

Returns 

Type: int
 Description: True if the focus is on a form field, false otherwise
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: DoDefaultDocumentLoadActions 

Description 

Performs the default sequence of events when DocumentLoadedEvent fires.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: ProcessDocumentLoadAppAlerts 

Description 

used by DocumentLoadedEvent to allow special app-specific processing. If any app-specific alerts are shown in the virtual viewer, then the rest of the default DocumentLoadedEvent action will be delayed until the virtual viewer is dismissed.

Returns 

Type: int
 Description: True if alerts are being displayed in the virtual viewer, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

HTML Events

An HTML event function provides information about user interactions or events that occur in HTML applications. Based on the information the event function provides or returns, JAWS determines what to speak and display. In this case, to display information refers to showing it in Braille.

Some examples of HTML event functions include:

DocumentLoadedEvent

DocumentUpdated

FormsModeEvent

For a complete listing of HTML event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the DocumentLoadedEvent function that is already overwritten in Chrome.jss from the function in the default.jss script source file is changed slightly. After all the calls in the function occur, a nonsense message saying, "hello", is added to illustrate how DocumentLoadedEvent works when a new Web page is loaded. It is assumed that the function is being compiled in the Chrome.jsb script binary file in your root folder of the JAWS user Settings\(language) folder.

Note: To avoid unpredictable results, never change the files located in any folder of the JAWS shared folders structure.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgHello
Hello.
@@
EndMessages
Void Function DocumentLoadedEvent ()
SetUpStuffForNewPage ();Personalized Settings
SpeakPersonalizeSettingsChange ()
Let giReturnPositionFromFrameUpdate = 0
Let gICheckByActiveItem = FALSE
DocumentLoadedEvent ()
SayMessage (ot_JAWS_message,msgHello)
EndFunction

Function: ApplicationRegionEvent 

Description 

This function is activated whenever the cursor enters or exits an application region. It is passed a boolean value indicating which of these actions has taken place. If enteringRegion is equal to true, we are entering an application region. If enteringRegion is equal to false, we are leaving an application region.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: This is the boolean value indicating whether or not we are entering an application region
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: DocumentLoadedEvent 

Description 

When an internet explorer document is loaded it will automatically begin reading.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DocumentUpdated 

Description 

Fires when an already loaded document updates.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The line number where the document update starts.
 Include: Required
 

Param 2: 

Type: int
 Description: True if the change was due to user action, false otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: FormsModeEvent 

Description 

This function is activated whenever forms mode is entered or exited. It is passed a boolian value indicating which of these actions has taken place. If bEntering is equal to true, forms mode has been turned on. If bEntering is equal to false, forms mode has been turned off.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: This is the boolian value representing the current state of forms mode
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FrameLoadedEvent 

Description 

This function is fired when a web page loads content into a frame.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: handle
 Description: the handle to the parent document's window
 Include: Required
 

Param 2: 

Type: string
 Description: the name of the frame being updated
 Include: Required
 

Param 3: 

Type: int
 Description: The index of the frame being updated.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.00 and later

Function: JavaObjectChanged 

Description 

Since The Java UI does not lend itself to easy scripting like other UI elements this event has been created to monitor in particular, other non-focusable object changes so that these changes may be conveyed to the user.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Java role of object generating change notification.
 Include: Required
 

Param 2: 

Type: String
 Description: AccessibleContextInfo name.
 Include: Required
 

Param 3: 

Type: String
 Description: AccessibleContextInfo description.
 Include: Required
 

Param 4: 

Type: String
 Description: AccessibleValue
 Include: Required
 

Param 5: 

Type: String
 Description: string of all states applicable to the object.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PageChangedEvent 

Description 

This event fires when Internet Explorer switches to a new page tab.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the page.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the page of the foreground tab.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: PreProcessKeyPressedEvent 

Description 

Called by KeyPressedEvent to perform all processing which must be done before any keys are processed. Used to test for keys being trapped, and to clear globals not dependent on to specific keys.

Returns 

Type: int
 Description: True to stop any further processing in KeyPressedEvent, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Param 2: 

Type: String
 Description: the name as it would be used in a keymap.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 if this was a key on the Braille Display.
 Include: Required
 

Param 4: 

Type: Int
 Description: nIsScriptKey 1 if This keystroke is assigned to a script.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.00 and later

Function: ProcessBXModifiedKey 

Description 

This function is called by KeyPressedEvent to process modified keys for the BX when running JAWS remotely.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: the name of the key received by KeyPressedEvent.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.20 and later

Function: ProcessHJDialogKeyPressed 

Description 

Called by KeyPressedEvent to perform all processing when in an HJ dialog.

Returns 

Type: int
 Description: True to stop any further processing in KeyPressedEvent, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Param 2: 

Type: String
 Description: the name as it would be used in a keymap.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 if this was a key on the Braille Display.
 Include: Required
 

Param 4: 

Type: Int
 Description: nIsScriptKey 1 if This keystroke is assigned to a script.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.00 and later

Function: ProcessKeyPressed 

Description 

Called by KeyPressedEvent to perform all processing not previously performed by its other functions.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Param 2: 

Type: String
 Description: the name as it would be used in a keymap.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 if this was a key on the Braille Display.
 Include: Required
 

Param 4: 

Type: Int
 Description: nIsScriptKey 1 if This keystroke is assigned to a script.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.00 and later

Function: ProcessSpaceBarKeyPressed 

Description 

Called by KeyPressedEvent and contains all code processed when KeyPressedEvent acts upon the spacebar being pressed. Overwrite this function in your application with the code to use when space is pressed.

Returns 

Type: Int
 Description: true if spacebar was pressed and nothing further should be processed, false if spacebar was not pressed.
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Param 2: 

Type: String
 Description: the name as it would be used in a keymap.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 if this was a key on the Braille Display.
 Include: Required
 

Param 4: 

Type: Int
 Description: nIsScriptKey 1 if This keystroke is assigned to a script.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: ProcessUserBufferKeyTrapExemption 

Description 

Used by KeyPressedEvent to process all exemptions from key trapping when user buffer is active and trapping keys.

Returns 

Type: int
 Description: True if user buffer was active and trapping keys, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: KeymapChangedEvent 

Description 

Event fires when keys are pressed, and can be used to code processes for layered keys.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The key code.
 Include: Required
 

Param 2: 

Type: string
 Description: The key name.
 Include: Required
 

Param 3: 

Type: int
 Description: The status of the key sequence as it relates to the key mapping. See values in hjConst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: KeyPressedEvent 

Description 

All key presses cause this function to fire. If the key is assigned to a script, then KeyPressedEvent is called before the script itself. Because this function will be called quite frequently, it is recommended that you refrain from intensive tasks that will be performed each time a keystroke is pressed. For a list of parameters received by KeyPressedEvent and their descriptions, look at the Existing Parameters List box on the Parameters page.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Param 2: 

Type: String
 Description: the name as it would be used in a keymap.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 if this was a key on the Braille Display.
 Include: Required
 

Param 4: 

Type: Int
 Description: nIsScriptKey 1 if This keystroke is assigned to a script.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: QuickKeyNavigationModeChanged 

Description 

Event fires when quick key navigation mode changes to off or on.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: True if quick keys are being enabled, false otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: ContextMenuProcessed 

Description 

This function performs processes when MenuModeEvent fires and a context menu has gained focus.

Returns 

Type: int
 Description: True if in a context menu and the actions for the context menu were performed, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window passed to MenuModeEvent.
 Include: Required
 

Param 2: 

Type: Int
 Description: The mode received by MenuModeEvent.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: DoExtraMenuProcessing 

Description 

Performs processing for menus in MenuModeEvent where the menu mode is not one of the three menu modes, and the focus is not on a context menu.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: MenuActiveProcessed 

Description 

This function performs processes when MenuModeEvent fires and the mode is MENUS_ACTIVE.

Returns 

Type: int
 Description: True if menus are inactive and the actions for the menu mode were performed, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The current menu mode.
 Include: Required
 

Param 2: 

Type: handle
 Description: The handle of the window passed to MenuModeEvent.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: MenuBarActiveProcessed 

Description 

This function performs processes when MenuModeEvent fires and the mode is MENUBAR_ACTIVE.

Returns 

Type: int
 Description: True if the menu bar is active and the actions for the menu mode were performed, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The current menu mode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: MenuInactiveProcessed 

Description 

This function performs processes when MenuModeEvent fires and the mode is MENU_INACTIVE.

Returns 

Type: int
 Description: True if menus are inactive and the actions for the menu mode were performed, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The current menu mode.
 Include: Required
 

Param 2: 

Type: int
 Description: The previous menu mode.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: MenuModeHook 

Description 

Can be used in situations in which the application needs to perform specific actions when the menu mode changes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MenuModeEvent 

Description 

There are three menu modes as defined in HJCONST.JSH. They are: MENU_INACTIVE, MENUBAR_ACTIVE, and MENU_ACTIVE. This event receives the Handle of the menu and the mode of the menu as parameters.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the menu
 Include: Required
 

Param 2: 

Type: Int
 Description: The mode of the menu whose status has just changed
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MouseButtonEvent 

Description 

This function is passed an event identifier. See HJConst.h for a list of possible MouseButtonEvent identifiers.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The event identifier of the event.
 Include: Required
 

Param 2: 

Type: Int
 Description: The horizontal position of the mouse pointer in pixels.
 Include: Required
 

Param 3: 

Type: Int
 Description: The vertical position of the mouse pointer.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: MouseMovedEvent 

Description 

This function is passed two integers. The first value specifies the x-coordinate at the position of the mouse pointer. The second parameter specifies the y-coordinate and the position of the mouse pointer.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The horizontal position of the mouse pointer in pixels.
 Include: Required
 

Param 2: 

Type: Int
 Description: The vertical position of the mouse pointer.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Object Model and MSAA Event Helpers

An Object Model and MSAA Event helper function assists an Object Model and MSAA Event. such an event may occur in any application or a feature of the Windows operating system. Based on the information the Object Model and MSAA Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

An example of an Object Model and MSAA event helper function is HJDialogObjStateChangeSpoken. For a complete listing of Object Model and MSAA event functions, see the category book in the Reference Guide.

Additional Resources

For more information on the types of Objects the Freedom Scientific Scripting language supports, see the General Scripting Concepts topic called Objects.

For more details on working with Object Model and MSAA in general, refer to the Microsoft Developer Network in the section called Microsoft Active Accessibility and UI Automation Compared (Windows)

Function: HJDialogObjStateChangeSpoken 

Description 

called by ObjStateChangedEvent to perform any special processing of object state change occuring in an HJDialog.

Returns 

Type: int
 Description: true if any special handling of state change was processed for an HJDialog, false otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window whose state, or whose child object's state, has changed.
 Include: Required
 

Param 2: 

Type: int
 Description: The type of the object.
 Include: Required
 

Param 3: 

Type: int
 Description: The changed state, which is the difference between the old state and the current state.
 Include: Required
 

Param 4: 

Type: int
 Description: The current state.
 Include: Required
 

Param 5: 

Type: int
 Description: The old state.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 8.10 and later

Object Model and MSAA Events

An Object Model and MSAA event function provides information about any object activity in the Object Model and MSAA architecture (object hierarchy) that the Freedom Scientific Scripting language supports. Object events are not limited to dialogs and menus. These events may include such activities as whether a dialog item change in a list or a state change in a checkbox has occurred, whether a main document window has gained focus, etc. JAWS uses the information from such an event function to determine whether to speak and display it. In this case, to display information refers to showing it in Braille.

Some examples of Object Model and MSAA event functions include:

·         ActiveItemChangedEvent

·         DescriptionChangedEvent

·         NameChangedEvent

·         ObjStateChangedEvent

For a complete listing of Object Model and MSAA event Functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ActiveItemChangedEvent function is overwritten for Notepad to announce some information it does not indicate normally when an item change occurs from user interaction in a dialog control that causes this event to fire. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function ActiveItemChangedEvent (handle curHwnd, int curObjectId, int curChildId,
            handle prevHwnd, int prevObjectId, int prevChildId)
Var
            String smsgCurrent
smsgCurrent = "This confirms that the current item is %1."
Say (FormatString(smsgCurrent,GetObjectName (curObjectId)),ot_line)
ActiveItemChangedEvent (curHwnd, curObjectId, curChildId, prevHwnd, prevObjectId, prevChildId)
EndFunction

Additional Resources

For more information on the types of Objects the Freedom Scientific Scripting language supports, see the General Scripting Concepts topic called Objects.

For more details on working with Object Model and MSAA in general, refer to the Microsoft Developer Network in the section called Microsoft Active Accessibility and UI Automation Compared (Windows).

Function: ActiveItemChangedEvent 

Description 

The MSAAMode flag must be set to 2 in the [Options] section of your application-specific jcf file to enable this function. This function receives the following parameters: the handle for the window containing the current object, the iD of the object, the iD of the child object, the handle of the previous window, the iD of the previous object, and the iD of the previous child object.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the handle of the window containing the current object.
 Include: Required
 

Param 2: 

Type: Int
 Description: the iD of the current object.
 Include: Required
 

Param 3: 

Type: Int
 Description: the iD of the current child.
 Include: Required
 

Param 4: 

Type: Handle
 Description: the handle of the window containing the previous object.
 Include: Required
 

Param 5: 

Type: Int
 Description: The iD or the previous object.
 Include: Required
 

Param 6: 

Type: Int
 Description: the iD of the previous child.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: DescriptionChangedEvent 

Description 

This function receives the following parameters: The window handle of the window containing the current object, The ID number of the Object, The ID number of the Child Object, The type of the Object, The old Description of the object, and The current Description of the Object.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the window containing the current object.
 Include: Required
 

Param 2: 

Type: Int
 Description: The ID number of the Object.
 Include: Required
 

Param 3: 

Type: Int
 Description: The ID number of the Child Object.
 Include: Required
 

Param 4: 

Type: Int
 Description: The type of the Object.
 Include: Required
 

Param 5: 

Type: String
 Description: The old Description of the object.
 Include: Required
 

Param 6: 

Type: String
 Description: The current Description of the object.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: DesktopAttachEvent 

Description 

This is the place for scripts to reconnect any COM events that were previously disconnected in DesktopDetachEvent. This function is only called when JAWS is running as a service.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: DesktopDetachEvent 

Description 

This is the place for scripts to disconnect any COM events. This function is only called when JAWS is running as a service.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: IsReadOnlyEditObject 

Description 

Used by the Delete and Backspace scripts to test if focus is on a read-only edit area.

Returns 

Type: int
 Description: True if the focus object is detected to be a read-only edit, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: MSAAAlertEvent 

Description 

Captures and speaks MSAA alerts.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The current window handle
 Include: Required
 

Param 2: 

Type: int
 Description: The time of the alert
 Include: Required
 

Param 3: 

Type: string
 Description: The text spoken by the alert
 Include: Required
 

Param 4: 

Type: int
 Description: The level of the alert
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: NameChangedEvent 

Description 

This function receives the following parameters: The window handle of the window containing the current object, The ID number of the Object, The ID number of the Child Object, The type of the Object, The old name of the object, and The current name of the Object.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the window containing the current object.
 Include: Required
 

Param 2: 

Type: Int
 Description: The ID number of the Object.
 Include: Required
 

Param 3: 

Type: Int
 Description: The ID number of the Child Object.
 Include: Required
 

Param 4: 

Type: Int
 Description: The type of the Object.
 Include: Required
 

Param 5: 

Type: String
 Description: The old name of the object.
 Include: Required
 

Param 6: 

Type: String
 Description: The current name of the object.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: ObjStateChangedEvent 

Description 

By default, this function will now speak the checked and not checked status as the object's state changes. In doing so, we are no longer reliant on the KeyPressedEvent function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window whose state, or whose child object's state, has changed.
 Include: Required
 

Param 2: 

Type: int
 Description: The type of the object.
 Include: Optional
 

Param 3: 

Type: int
 Description: The changed state, which is the difference between the old state and the current state.
 Include: Optional
 

Param 4: 

Type: int
 Description: The current state.
 Include: Optional
 

Param 5: 

Type: int
 Description: The old state.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ProofingErrorDetectedEvent 

Description 

This event is generated by JAWS when UIA raises the ChangesEvent for one of the AnnotationType properties. By default, it'it plays a sound when the event is raised on a spelling error. AnnotationType values are referenced in UIA.jsh.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: One of the UIA_AnnotationType constants from UIA.jsh
 Include: Required
 

Param 2: 

Type: string
 Description: Information about the type of change that occurred. Provided by the application or UIA provider.
 Include: Required
 

Param 3: 

Type: string
 Description: Detailed information about the change that occurred. Provided by the application or UIA provider.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 20.0 and later

Function: UIANotificationEvent 

Description 

This event is generated by JAWS when UIA raises the NotificationEvent. All UIA parameters are passed to this event as is from the application or UIA provider.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: One of the NotificationKind constants from UIA.jsh.
 Include: Required
 

Param 2: 

Type: int
 Description: One of the notificationProcessing constants from UIA.jsh.
 Include: Required
 

Param 3: 

Type: string
 Description: The notification text.
 Include: Required
 

Param 4: 

Type: string
 Description: A unique non-localized string to identify an action or group of actions.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 20.0 and later

Function: ValueChangedEvent 

Description 

This function is triggered when a change of value of a MSAA object occurs.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the window containing the current MSAA object.
 Include: Required
 

Param 2: 

Type: Int
 Description: The ID number of the MSAA Object.
 Include: Required
 

Param 3: 

Type: Int
 Description: The ID number of the MSAA Child Object.
 Include: Required
 

Param 4: 

Type: Int
 Description: The type of the MSAA Object.
 Include: Required
 

Param 5: 

Type: String
 Description: The name of the MSAA object.
 Include: Required
 

Param 6: 

Type: String
 Description: The current value assigned to the MSAA Object.
 Include: Required
 

Param 7: 

Type: Int
 Description: TRUE if it's the object with focus that triggered this event, FALSE otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: OcrAcquisitionRotated 

Description 

Assuming that the optical character recognition module is installed, this function runs when an OCR acquisition has been rotated.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Recognition job identifier
 Include: Required
 

Param 2: 

Type: Int
 Description: Degrees of the rotation
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Function: OCRCompletedEvent 

Description 

Assuming that the optical character recognition module is installed, this function runs on completion of an OCR job.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Recognition job identifier
 Include: Required
 

Param 2: 

Type: int
 Description: Recognition job result
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: OCRDataInvalidatedEvent 

Description 

Event fires when the OCR'd data was invalidated due to cursor change, or due to application changing.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: OCRReportNoTextFound 

Description 

Assuming that the optical character recognition module is installed, this function runs to indicate that no text was found during a recognition.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Recognition job identifier
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: OcrStartedEvent 

Description 

Assuming that the optical character recognition module is installed, this function runs on start of an OCR job.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Recognition job identifier
 Include: Required
 

Param 2: 

Type: Int
 Description: Recognition job type
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

SayAll Events

A SayAll event function provides information about SayAll activities that JAWS may have performed automatically or from user interaction. For example, a SayAll event may have started, stopped, or have been interrupted. JAWS uses this information to determine what to speak and display, whether to sstop speaking and move the Braille cursor to the point where the SayAll has stopped, etc. In this case, to display information refers to showing it in Braille.

SayAll event functions include:

SayAllStarted

SayAllStoppedEvent

For a complete listing of functions related to SayAll events, see these category books in the reference guide:

Screen Text

Voices.

Code Sample

In the below code sample, the SayAllStoppedEvent function is overwritten in the Notepad.jss script source file from the function in default.jss. Whenever a SayAll is stopped in Notepad, JAWS indicates in speech and in Braille a nonsense message that the SayAllStoppedEvent function fired. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

 

To set up the test, write several lines of text in a Notepad file. Then initiate a SayAll with the JAWSKey+DOWNARROW key combination. Allow SayAll to complete, or interrupt it by pressing CONTROL or some other key. Either way, SayAllStoppedEvent should fire and indicate the test message from the code in this sample, along with a beep.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function SayAllStoppedEvent ()
Var
            String smsgSayAllStatus
smsgSayAllStatus = "SayAll stopped."
SayAllStoppedEvent ()
Beep () ; Produce a system sound.
SayMessage (ot_status, smsgSayAllStatus)
EndFunction

Function: SayAllStarted 

Description 

This function is called by the built in script function SayAll just before the Speak method of the SAYALL object is called for the first time. It is intended that this function be overridden in a given application's scripts to provide a method of performing actions (such as setting JCF options) just before a Say All is started. This complements the preexisting SayAllStoppedEvent which is called whenever a Say All process is stopped.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: SayAllStoppedEvent 

Description 

User-defined code can be added to an overwritten version of this function to run every time SayAll stops.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MonitorNewTextEventAlerts 

Description 

This module is called by NewTextEvent and contains all the logic to test whether text is an alert which should be spoken. An alert would be text generated by a programs such as a chat program, or some program to be monitored while it is not in focus. For most compatible results, overwrite this function rather than overwriting NewTextEvent to speak alerts.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Focus window handle.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Handle of the window containing the text that was written.
 Include: Required
 

Param 3: 

Type: String
 Description: String containing the text that was written.
 Include: Required
 

Param 4: 

Type: Int
 Description: The attributes of the text that was written.
 Include: Required
 

Param 5: 

Type: Int
 Description: The foreground color of the text that was written.
 Include: Required
 

Param 6: 

Type: Int
 Description: The background color of the text that was written.
 Include: Required
 

Param 7: 

Type: Int
 Description: The echo setting associated with this text.
 Include: Required
 

Param 8: 

Type: String
 Description: The name of the frame containing the newly written text if applicable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.00 and later

Function: NewTextEventShouldBeSilent 

Description 

This module is called by NewTextEvent and contains all the logic to test whether speaking of the new text should silenced. For most compatible results, overwrite this function rather than overwriting NewTextEvent to silence text.

Returns 

Type: int
 Description: True if NewTextEvent should exit without speaking the text, false otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Focus window handle.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Handle of the window containing the text that was written.
 Include: Required
 

Param 3: 

Type: String
 Description: String containing the text that was written.
 Include: Required
 

Param 4: 

Type: Int
 Description: The attributes of the text that was written.
 Include: Required
 

Param 5: 

Type: Int
 Description: The foreground color of the text that was written.
 Include: Required
 

Param 6: 

Type: Int
 Description: The background color of the text that was written.
 Include: Required
 

Param 7: 

Type: Int
 Description: The echo setting associated with this text.
 Include: Required
 

Param 8: 

Type: String
 Description: The name of the frame containing the newly written text if applicable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.00 and later

Function: ProcessSpeechOnNewTextEvent 

Description 

This module is called by NewTextEvent and contains all the logic to process speaking of text which is not spoken by the MonitorNewTextEventAlerts function. For most compatible results, overwrite this function rather than overwriting NewTextEvent to speak text.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Focus window handle.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Handle of the window containing the text that was written.
 Include: Required
 

Param 3: 

Type: String
 Description: String containing the text that was written.
 Include: Required
 

Param 4: 

Type: Int
 Description: The attributes of the text that was written.
 Include: Required
 

Param 5: 

Type: Int
 Description: The foreground color of the text that was written.
 Include: Required
 

Param 6: 

Type: Int
 Description: The background color of the text that was written.
 Include: Required
 

Param 7: 

Type: Int
 Description: The echo setting associated with this text.
 Include: Required
 

Param 8: 

Type: String
 Description: The name of the frame containing the newly written text if applicable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.00 and later

Function: SayCellFromCaretMovedEvent 

Description 

This function speaks the table cell moved to when SelectionChangedEvent determines that a selection movement by cell has occurred and table detection is disabled. When table detection is enabled, CellChangedEvent handles the speaking of table cell content.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayCharacterFromCaretMovedEvent 

Description 

This function speaks the character moved to when SelectionChangedEvent determines that a selection movement by character has occurred.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayFirstOrLastLineFromCaretMovedEvent 

Description 

This function speaks the line moved to when SelectionChangedEvent determines that a selection movement to the first or last line of the document or message has occurred.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayHomeOrEndFromCaretMovedEvent 

Description 

This function speaks the character at the start or end of the current line when SelectionChangedEvent determines that a selection movement to the start or end of the current line has occurred.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayLineFromCaretMovedEvent 

Description 

This function speaks the line moved to when SelectionChangedEvent determines that a selection movement by line has occurred.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: set to TRUE if calling from sayNext/Prior line to avoid speaking the prompt when arrowing over forms mode controls whose prompt is already spoeken from the prior line. This parameter is available starting with JAWS version 10 and MAGic version 12.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayNonHighlightedText 

Description 

Can be modified for application specific cases. Example: Reading of static text in dialog boxes.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: handle of the window in which the new text was written
 Include: Required
 

Param 2: 

Type: String
 Description: string containing the text that was written
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayPageFromCaretMovedEvent 

Description 

This function speaks the line moved to when SelectionChangedEvent determines that a selection movement by page has occurred.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayParagraphFromCaretMovedEvent 

Description 

This function speaks the paragraph moved to when SelectionChangedEvent determines that a selection movement by paragraph has occurred.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: SaySentenceFromCaretMovedEvent 

Description 

This function speaks the sentence moved to when SelectionChangedEvent determines that a selection movement by sentence has occurred.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SayWordFromCaretMovedEvent 

Description 

This function speaks the word moved to when SelectionChangedEvent determines that a selection movement by word has occurred.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: CaretMovedEvent 

Description 

This function is called whenever the caret moves, but not when text is selected.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: CellChangedEvent 

Description 

This event function is triggered when the cursor moves from one cell in a table to a new cell in either the same table or a nested table or parent table.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Required
 

Param 4: 

Type: int
 Description:
 Include: Required
 

Param 5: 

Type: string
 Description:
 Include: Required
 

Param 6: 

Type: string
 Description:
 Include: Required
 

Param 7: 

Type: int
 Description:
 Include: Required
 

Param 8: 

Type: int
 Description:
 Include: Required
 

Param 9: 

Type: int
 Description:
 Include: Required
 

Param 10: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: ItemNotFoundEvent 

Description 

Event called by JAWS when information can not be found in the Off Screen Model.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Integer argument. Handle of the window where the item was not found.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: NewTextEvent 

Description 

When this function is called, it receives information pertaining to the newly written text. If the text was written in a frame, then the text is spoken according to the frame's echo setting. Otherwise the text is sent to SayHighlightedText() or SayNonHighlightedText. For a list of parameters received by NewTextEvent and their descriptions, look at the Existing Parameters List box on the Parameters page. For most compatible results, overwrite one of the functions called by NewTextEvent rather than overwriting NewTextEvent itself.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window containing the text that was written.
 Include: Required
 

Param 2: 

Type: String
 Description: String containing the text that was written.
 Include: Required
 

Param 3: 

Type: Int
 Description: The attributes of the text that was written.
 Include: Required
 

Param 4: 

Type: Int
 Description: The foreground color of the text that was written.
 Include: Required
 

Param 5: 

Type: Int
 Description: The background color of the text that was written.
 Include: Required
 

Param 6: 

Type: Int
 Description: The echo setting associated with this text.
 Include: Required
 

Param 7: 

Type: String
 Description: The name of the frame containing the newly written text if applicable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PageSectionColumnChangedEvent 

Description 

For apps supporting SelectionContext events such as MSWord, announces changes in page, section, text columns, and text column counts.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Required
 

Param 4: 

Type: int
 Description:
 Include: Required
 

Param 5: 

Type: int
 Description:
 Include: Required
 

Param 6: 

Type: int
 Description:
 Include: Required
 

Param 7: 

Type: int
 Description:
 Include: Required
 

Param 8: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: SayColumnAndRowChangeOnCellChangedEvent 

Description 

Used by function CellChangedEvent to announce the new column and row position and headers when the event fires.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Required
 

Param 4: 

Type: int
 Description:
 Include: Required
 

Param 5: 

Type: string
 Description:
 Include: Required
 

Param 6: 

Type: string
 Description:
 Include: Required
 

Param 7: 

Type: int
 Description:
 Include: Required
 

Param 8: 

Type: int
 Description:
 Include: Required
 

Param 9: 

Type: int
 Description:
 Include: Required
 

Param 10: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: SayTableCellOnCellChangedEvent 

Description 

Used by function CellChangedEvent to announce the new cell when the event fires.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: ScreenStabilizedEvent 

Description 

This event is triggered after no screen writes have occured within a reasonable amount of time. The window handle of the last window to which text was written is passed as the parameter to this event.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the window handle where the last text write occured.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectionContextChangedEvent 

Description 

This event function is triggered when any of the enabled selection context data flags changes as one navigates in supported applications. Where extra contextual information is required to report the change in context, relevant flags and strings are filled in with data. For example, navigating into a formfield, nData1 will be the type(see WT_CONSTANTS), nData2 will be the state, sDesc1 the prompt, sDesc2 the value, sDesc3 the positional information and sDesc4 the extra help information if available. For comments, sDesc1 is the author's name, sDesc2 the initials, sDesc3 the text of the actual comment. For footnotes or endnotes, sDesc1 is the reference id and sDesc2 the text of the note. For bookmarks and smart tags, sDesc1 is the name of the item. For revisions, nData1 is the type of revision, sDesc1 the author, sDesc2 the initials and sDesc3 the text. For shapes or objects, nData1 is a type specifier, nData2 a builtin shape type, sDesc1 the name of the object, sDesc2 the text, and sDesc3 the dimentions. The units of measure used for the dimentions are in the current desired units of measure as defined by the smmSetDesiredUnitsOfMeasure function. For selCtxPageSectionColumnBreaks, nData1=column number, nData2=number of text columns sDesc1=page n, sDesc2=sectiony , sDesc3=z text columns (text column count) sDesc4= column j (where j is the number of the text column) For other contextual information such as spelling and grammar, the relevant bit of the context flags will be set in the new and cleared in the old to indicate moving into an error, or vice versa when exiting. Table info should be gathered from the table specific events. See hjconsnt.jsh for the selCtx constant bit values.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Required
 

Param 4: 

Type: int
 Description:
 Include: Required
 

Param 5: 

Type: string
 Description:
 Include: Required
 

Param 6: 

Type: string
 Description:
 Include: Required
 

Param 7: 

Type: string
 Description:
 Include: Required
 

Param 8: 

Type: string
 Description:
 Include: Required
 

Param 9: 

Type: string
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: ShouldExitcellChangedEvent 

Description 

Determines if the CellChangedEvent function should exit and not run code. This is used in default to prevent the default CellChangedEvent function from running when focus is moving into Microsoft Word, which has its own CellChangedEvent function.

Returns 

Type: int
 Description: True if the CellChangedEvent function should exit and not run code.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: TableEnteredEvent 

Description 

This event function is triggered when the cursor moves into a table from outside a table. When this event is fired, query for any relevant Braille info for cell text or row text etc if Braille in use and then use this in the BrailleAddObjectXX table functions in the scripts.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: Int
 Description:
 Include: Required
 

Param 3: 

Type: Int
 Description:
 Include: Required
 

Param 4: 

Type: Int
 Description:
 Include: Required
 

Param 5: 

Type: Int
 Description:
 Include: Required
 

Param 6: 

Type: Int
 Description:
 Include: Required
 

Param 7: 

Type: int
 Description: TRUE if titles are defined for this table, FALSE if none explicitly defined
 Include: Required
 

Param 8: 

Type: int
 Description: The column number of the column containing row headers (0 if undefined).
 Include: Required
 

Param 9: 

Type: int
 Description: The row number of the row containing column headers (0 if undefined).
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TableExitedEvent 

Description 

This event function is triggered when the cursor leaves a table and returns to the surrounding document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TabStopEvent 

Description 

This function gets called in supported apps when the tab key causes the position of the caret to change (ie to move to the next tab stop). It is to be used to automatically announce the new caret position. Currently this is only enabled in MSWord.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: UpdateTableCellCoordinatesOnCellChangedEvent 

Description 

Updates the cached row and column data for the current table cell.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The column number recieved by the event.
 Include: Required
 

Param 2: 

Type: int
 Description: The row number recieved by the event.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: GestureEvent 

Description 

Fires when a gesture is used.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The name of the gesture.
 Include: Required
 

Param 2: 

Type: int
 Description: True if gesture is assigned to a script, false otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: Unknown 

Description 

Will speak the name of the function or script.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Contains the name of the unknown script or function.
 Include: Required
 

Param 2: 

Type: int
 Description: True if the unknown function event is caused by a recursive call of a function. Recursion is not supported by the script processor; a script or function may call a version of itself lower down in the JSB stack, but not at the same level or higher.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferActivatedEvent 

Description 

Fires when user buffer is activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: UserBufferDeactivatedEvent 

Description 

Fires when user buffer is deactivated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: ProcessSelectText 

Description 

Called at the beginning of the NewTextEvent to determine if text is being selected/unselected.

Returns 

Type: Int
 Description: This function is called by NewTextEvent so that when text is selected or unselected it will be properly spoken.
 

Parameters 

Param 1: 

Type: Int
 Description: The character attributes of the text being processed.
 Include: Required
 

Param 2: 

Type: String
 Description: The text to be processed.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayHighLightedText 

Description 

Can be modified for application specific needs in many cases. Example: Non-standard list boxes, spell checkers and flashing title bars.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: handle of the window in which the text was written.
 Include: Required
 

Param 2: 

Type: String
 Description: String containing the text that was written.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShouldProcessSelectionChangedEvent 

Description 

This function returns true when in the document nav area of MS Word (any version) or Outlook 2007 and higher messages. It returns false if not in the nav document area, if the input source is a Braille device, or if a hook is in effect for phonetic pronunciation of characters or phonetic spelling of words.

Returns 

Type: Int
 Description: True if the source is the nav area of Word or the nav area of an Outlook 2007 or higher message dialog, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SelectionChangedEvent 

Description 

This function handles the processing of selected text in edit areas such as Microsoft Word.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SelectionRectChangedEvent 

Description 

When the selCtxSelectionRect flag is set in a call to SetSelectionContextFlags, this event is called when navigating or selecting text in MSWord or other event driven applications supporting Selection Context events.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: newLeft The top left x-screen coordinate of new caret or selection rect.
 Include: Required
 

Param 2: 

Type: int
 Description: newTop The top left y-screen coordinate of new caret or selection rect.
 Include: Required
 

Param 3: 

Type: int
 Description: newRight The bottom right x-screen coordinate of new caret or selection rect.
 Include: Required
 

Param 4: 

Type: int
 Description: newBottom The bottom y-screen coordinate of new caret or selection rect.
 Include: Required
 

Param 5: 

Type: int
 Description: oldLeft The top left x-screen coordinate of old caret or selection rect.
 Include: Required
 

Param 6: 

Type: int
 Description: oldTop The top left y-screen coordinate of old caret or selection rect.
 Include: Required
 

Param 7: 

Type: int
 Description: oldRight The bottom right x-screen coordinate of old caret or selection rect.
 Include: Required
 

Param 8: 

Type: int
 Description: oldBottom The bottom right y-screen coordinate of old caret or selection rect.
 Include: Required
 

Param 9: 

Type: int
 Description: navUnit The movementUnit which caused the change in rect.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: TextSelectedEvent 

Description 

Occurs whenever text is selected/unselected.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ConfigurationChangedEvent 

Description 

Fires when a new configuration is loaded.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The name of the newly loaded configuration.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: SpeechToggledEvent 

Description 

This function is called whenever speech is turned on or off. It is passed a boolean value indicating whether speech has been turned on or off.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: This is the boolean value whether speech has been turned on or off.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: FocusChangedEvent 

Description 

The window handles of the previous and current windows are passed to this function. This function calls either SayWindowTypeAndText SayFocusedWindow or SayFocusedObject in order to ensure that the active control is properly spoken.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: Handle
 Description: the handle of the window that previously had the focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FocusChangedEventProcessAncestors 

Description 

The default FocusChangedEvent calls this function when focus is in a WinForms window.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: Handle
 Description: the handle of the window that previously had the focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: FocusChangedEventShouldProcessAncestors 

Description 

Used by function ProcessEventOnFocusChangedEvent to determine whether or not to call FocusChangedEventProcessAncestors.

Returns 

Type: int
 Description: true is FocusChangedEventProcessAncestors should be called to process the focus change, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the focus window.
 Include: Required
 

Param 2: 

Type: handle
 Description: The handle of the previous focus window.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetWindowsNotificationTextFromHandle 

Description 

Given a window handle, determines if a Windows toast notification is showing in the window. If so, the notification text is passed back as a parameter and the function returns true.

Returns 

Type: int
 Description: True if notification text was retrieved, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The window handle which may contain a Windows 10 toast notification.
 Include: Required
 

Param 2: 

Type: string
 Description: byRef/Notification The notification text to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: HandleCustomAppWindows 

Description 

You can use this function instead of modifying the FocusChangedEvent function when modifying scripts. The AppWindow is the top frame window, and most of the time you won't need to modify it. Some wizard dialogs, among other things, present themselves as problems here.

Returns 

Type: Int
 Description: Return true when your logic is successful, FALSE when you want the default behavior of the FocusChangedEvent function at appWindow.
 

Parameters 

Param 1: 

Type: Handle
 Description: Enter the handle to the window which is the Application Window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HandleCustomRealWindows 

Description 

You can use this function instead of modifying the FocusChangedEvent function when modifying scripts. This can be convenient for wizard dialogs and other places where dialog and document name speaking is pretty ugly.

Returns 

Type: Int
 Description: Return true when your logic is successful, FALSE when you want the default behavior of the FocusChangedEvent function at RealWindow.
 

Parameters 

Param 1: 

Type: Handle
 Description: Enter the handle to the window which is the Real Window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HandleCustomWindows 

Description 

You can use this function instead of modifying the FocusChangedEvent or SayFocusedWinow function when modifying scripts. This will also prevent you from having to worry about insert tab, because if you use this function insert tab and the focus logic will now become seamlessly consistent.

Returns 

Type: Int
 Description: Return true when your logic is successful, FALSE when you want the default behavior of the FocusChangedEvent or SayFocusedWindow functions or the SayWindowPromptAndText script.
 

Parameters 

Param 1: 

Type: Handle
 Description: Enter the handle to the window which is the current window. Note that in FocusChangedEvent, we pass FocusWindow. In the SayWindowPromptAndText script, we use GetCurrentWindow, which respects the active cursor.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HandleNoCurrentWindow 

Description 

Checks to see if the focus window is nil, and if so notifies the user.

Returns 

Type: int
 Description: True if there is no focus window, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: MenuProcessedOnFocusChangedEventEx 

Description 

Used by function FocusChangedEventEx to perform any special processing associated with focus change on menu bars or in menus.

Returns 

Type: int
 Description: True if menus are active on focus change and processing occurred, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: handle
 Description: The handle of the window that previously had the focus.
 Include: Required
 

Param 3: 

Type: int
 Description: The subtype of the object with focus.
 Include: Required
 

Param 4: 

Type: int
 Description: The change depth, or number of levels effected by the change.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: MonitorFormsModeComboBox 

Description 

Monitors for forms mode combo boxes which were opened and forms mode turned on by use of Alt+DownArrow. If focus leaves the combo box without the box being closed and forms mode exited with Alt+UpArrow, turns off global variable used to watch for closing the box and exiting forms mode.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: hwndFocus from FocusChangedEventEx.
 Include: Required
 

Param 2: 

Type: handle
 Description: hwndPrevFocus from FocusChangedEventEx.
 Include: Required
 

Param 3: 

Type: Int
 Description: nChild from FocusChangedEventEx.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: PreProcessFocusChangedEventEx 

Description 

Used by FocusChangedEventEx to perform any necessary tasks that must come before all normal tasks associated with speaking as a result of focus change.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: int
 Description: The number of the object that has received the focus.
 Include: Required
 

Param 3: 

Type: int
 Description: The number of the current child object.
 Include: Required
 

Param 4: 

Type: handle
 Description: The handle of the window that previously had the focus.
 Include: Required
 

Param 5: 

Type: int
 Description: The number of the object that previously had the focus.
 Include: Required
 

Param 6: 

Type: int
 Description: The number of the child object which previously had focus.
 Include: Required
 

Param 7: 

Type: int
 Description: The change depth, or number of levels effected by the change.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: ProcessEventOnFocusChangedEvent 

Description 

Used by function FocusChangedEvent to choose which type of event change function should run and then run it.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the application window with focus.
 Include: Required
 

Param 2: 

Type: handle
 Description: The handle of the real window with focus.
 Include: Required
 

Param 3: 

Type: string
 Description: The name of the real window.
 Include: Required
 

Param 4: 

Type: handle
 Description: The handle of the window that has received the focus.
 Include: Required
 

Param 5: 

Type: handle
 Description: The handle of the window that previously had the focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: ProcessEventOnFocusChangedEventEx 

Description 

Used by function FocusChangedEventEx to choose which type of event change function should run and then run it.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: int
 Description: The number of the object that has received the focus.
 Include: Required
 

Param 3: 

Type: int
 Description: The number of the current child object.
 Include: Required
 

Param 4: 

Type: handle
 Description: The handle of the window that previously had the focus.
 Include: Required
 

Param 5: 

Type: int
 Description: The number of the object that previously had the focus.
 Include: Required
 

Param 6: 

Type: int
 Description: The number of the child object which previously had focus.
 Include: Required
 

Param 7: 

Type: int
 Description: The change depth, or number of levels effected by the change.
 Include: Required
 

Param 8: 

Type: string
 Description: The class of the focus window.
 Include: Required
 

Param 9: 

Type: int
 Description: the subtype of the object with focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: ProcessSayAppWindowOnFocusChange 

Description 

All FocusChangedEvent logic for testing and speaking the application window during a focus change are located in this function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The application window of the focus window received by FocusChangedEvent.
 Include: Required
 

Param 2: 

Type: handle
 Description: The focus window received by FocusChangedEvent.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: ProcessSayFocusWindowOnFocusChange 

Description 

All FocusChangedEvent logic for testing and speaking the focus window during a focus change are located in this function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The name of the real window of the focus window received by FocusChangedEvent.
 Include: Required
 

Param 2: 

Type: handle
 Description: The focus window received by FocusChangedEvent.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: ProcessSayRealWindowOnFocusChange 

Description 

All FocusChangedEvent logic for testing and speaking the real window during a focus change are located in this function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The application window of the focus window received by FocusChangedEvent.
 Include: Required
 

Param 2: 

Type: handle
 Description: The real window of the focus window received by FocusChangedEvent.
 Include: Required
 

Param 3: 

Type: string
 Description: The name of the real window of the focus window received by FocusChangedEvent.
 Include: Required
 

Param 4: 

Type: handle
 Description: The focus window received by FocusChangedEvent.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: ProcessTaskSwitchList 

Description 

Processes announcement of the items that appear in the task switch list when Alt+Tab is being used to switch between applications.

Returns 

Type: int
 Description: True if Alt+Tab is being used for switching apps and the announcement is being handled, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The window with focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: SetDepthForFocusChangedEventProcessAncestors 

Description 

This can be used in app-specific scripts to limit the depth of ancestors processed for specific conditions. The default is to process the depth of ancestors involved in the focus change.

Returns 

Type: int
 Description: The depth of ancestors to be processed by function FocusChangedEventProcessAncestors.
 

Parameters 

Param 1: 

Type: Handle
 Description: the handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: Handle
 Description: the handle of the window that previously had the focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: SpeakAnyVisibleWindowsNotification 

Description 

Detects if a windows 10 toast notification is visible, and if so speaks it.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: window which may contain a Windows 10 toast notification. If called from WindowResizedEvent, supply the window handle from that function; otherwise, do not supply a window handle--the appropriate handle will be searched for.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: FocusChangedEventEx 

Description 

Processes all types of focus change, and calls the proper event to handle the change according to the type of focus change which occurred.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window that has received the focus.
 Include: Required
 

Param 2: 

Type: int
 Description: The number of the object that has received the focus.
 Include: Required
 

Param 3: 

Type: int
 Description: The number of the current child object.
 Include: Required
 

Param 4: 

Type: handle
 Description: The handle of the window that previously had the focus.
 Include: Required
 

Param 5: 

Type: int
 Description: The number of the object that previously had the focus.
 Include: Required
 

Param 6: 

Type: int
 Description: The number of the child object which previously had focus.
 Include: Required
 

Param 7: 

Type: int
 Description: The change depth, or number of levels effected by the change.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: ForegroundIconicEvent 

Description 

This event function is fired when all apps are minimized or closed and the focus is not placed on the desktop. More testing is needed before it is implemented.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of current Foregound Window, not focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ForegroundWindowChangedEvent 

Description 

A real window is a window which has a title. Real windows are often application main windows, and dialog main windows.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the new window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HelpBalloonEvent 

Description 

In Windows XP two kinds of bubbles pop up displaying help, the first is a tooltip which is picked up by the ToolTipEvent and the second is a Help Balloon which triggers this event.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: the handle to the Help Balloon window.
 Include: Required
 

Param 2: 

Type: String
 Description: the text of the help balloon.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: InternalFrameChangedEvent 

Description 

This function is used to speak the frame name before FocusChangedEvent is called to speak the FocusObject

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: handle of the window to check.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Handle of the window containing the frame.
 Include: Required
 

Param 3: 

Type: String
 Description: The name of the frame.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: JavaFocusChangedEvent 

Description 

This function is triggered when focus moves between Java applications, dialogs, and dialog controls.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The window that has received focus.
 Include: Required
 

Param 2: 

Type: Handle
 Description: The window that previously had focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: ToolTipEvent 

Description 

Will tell the user the tool tip. Also used for the Auto Graphics Labeler.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: WindowActivatedEvent 

Description 

This function is generally triggered when focus changes because of the opening or closing of a top-level window, such as when a dialog appears or disappears.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: Handle of the window just activated.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: WindowCreatedEvent 

Description 

You should not include processor consuming code within this function. The code within this function is processed very frequently.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window just created.
 Include: Required
 

Param 2: 

Type: Int
 Description: left edge of the window.
 Include: Required
 

Param 3: 

Type: Int
 Description: top edge of the window.
 Include: Required
 

Param 4: 

Type: Int
 Description: right edge of the window.
 Include: Required
 

Param 5: 

Type: Int
 Description: bottom edge of the window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: WindowDestroyedEvent 

Description 

Can be modified for application specific needs.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window that is about to be destroyed.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: WindowMinMaxEvent 

Description 

nMinMaxRest gives general information about what is happening to the window. It can be WE_MINIMIZE, WE_MAXIMIZE, or WE_RESTORE. nShow is more specific. For a complete list of nShow values, look for "SW_" in hjconst.jsh.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window whose status is about to change.
 Include: Required
 

Param 2: 

Type: Int
 Description: Describes the general action taking place on the window.
 Include: Required
 

Param 3: 

Type: Int
 Description: Describes the specific action taking place on the window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: WindowResizedEvent 

Description 

Can be modified for application specific needs.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of the window about to be resized.
 Include: Required
 

Param 2: 

Type: Int
 Description: The left edge of the window that is about to be resized.
 Include: Required
 

Param 3: 

Type: Int
 Description: The top edge of the window that is about to be resized.
 Include: Required
 

Param 4: 

Type: Int
 Description: The right edge of the window that is about to be resized.
 Include: Required
 

Param 5: 

Type: Int
 Description: The bottom edge of the window that is about to be resized.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Files Functions

A Files function provides or returns information about JAWS interaction with files used for activities like reading to and writing from files that contain user settings. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some examples of Files functions include:

·         FileExists

·         IniReadInteger

·         IniReadString

·         IniWriteInteger

·         IniWriteString

·         GetFileDate

·         IniFlush

For a complete listing of Files functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines whether a certain file exists in the user's Settings\Language) folder. If it does, the script calls some Files functions and uses one of the Strings function to parse out the first section name in the file and the first key within that section. Normally, such function calls are utilized for comparison purposes rather than for speaking or displaying this type of information in a script. In fact, most of the time, the purpose for obtaining such information is so that it may be updated by related IniWrite function calls.

It is assumed that the function is being called from and processed in a Notepad.jss script source file and compiled in its associated Notepad.jsb script binary file.

Script MyFilesTest ()
Var
            String sLocation,
            String sSection,
            String sKey,
            String sMessage
; For sMessage, %1 is the section name and %2 the first key in the section.
sMessage = "The first section in the Notepad.jkm file is %1 and the first key in it is %2."
Let sLocation = GetUserSettingsDirectory()+cscDoubleBackSlash+"Notepad.jkm"
If FileExists (sLocation)
            sSection = StringSegment (IniReadSectionNames (sLocation), cscListSeparator, 1)
            sKey = StringSegment (IniReadSectionKeys (sSection, sLocation), cscListSeparator, 1)
SayFormattedMessage (ot_user_requested_information,
                        FormatString (sMessage, sSection, sKey))
EndIf
EndScript

Additional Resources

For more details on working with the various types of settings files, see the topic area in the General Scripting Concepts book called Settings and Configurations.

For more specifics on working with script files, see the subtopic called Script File Types.

Function: DeleteFile 

Description 

 

Returns 

Type: int
 Description: True if the file was successfully deleted, False otherwise
 

Parameters 

Param 1: 

Type: string
 Description: the name of the file to delete
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: FileExists 

Description 

Checks to see if the specified path exists.

Returns 

Type: Int
 Description: TRUE if the path exists.
 

Parameters 

Param 1: 

Type: String
 Description: The file to be checked.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FilenameGetNearestMatch 

Description 

This function looks for a file whose name most closely matches the supplied name. The function uses the second two parameters to narrow the search. This function is most useful in locating JSI files to associate settings with documents whose settings maybe similar, indicated by similar file names eg Excel monthly reports.

Returns 

Type: String
 Description: The nearest matching filename to the one specified.
 

Parameters 

Param 1: 

Type: String
 Description: The filename (including optional path). If the path is not specified the script directory is assumed.
 Include: Required
 

Param 2: 

Type: Int
 Description: specifies the minimum number of characters of the filename's prefix which must match, eg if you are only interested in jsi files starting with excel_ then the value of this parameter would be 6.
 Include: Required
 

Param 3: 

Type: Int
 Description: Set this to true if the extention must match.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FileNameList 

Description 

This function returns a delimited list of file names matching the specified criteria. For example, to get a list of scheme files, pass in "*.smf" for the first parameter

Returns 

Type: String
 Description: a delimited list of file names matching the specified criteria.
 

Parameters 

Param 1: 

Type: String
 Description: sFileNameMask filename mask optionally including path information. If no path is included, the settings/lang path is prepended
 Include: Required
 

Param 2: 

Type: String
 Description: sDelim the delimiter to separate filenames with. If no delimiter is supplied, \007 is used.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: GetDefaultSynthGlobalSectionName 

Description 

retrieves the section name used in default.jcf for the default synthesizer.

Returns 

Type: string
 Description: The section name in default.jcf of the default synthisizer.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.00 and later

Function: GetFileDate 

Description 

Used to get the last modified date of a particular file GetAppFilePath can be used to specify the path of the desired application.

Returns 

Type: Int
 Description: An integer containing the last modified date in the form of yyyymmdd. For example, the integer 19970911 would specify September 11, 1997.
 

Parameters 

Param 1: 

Type: string
 Description: Enter the fully qualified path name of the desired application. GetAppFilePath can be used to get the path of the currently running application.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetSoundFileLocation 

Description 

Given the name of a sound file, looks for it first in the user settings sound folder; if not found there, looks for it in the shared settings sound file folder.

Returns 

Type: string
 Description: If the sound file was found, the path plus name of the sound file; otherwise returns null.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the sound file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: iniDeleteFile 

Description 

Removes all ini sections from the file cache in memory, and then physically deletes the file from disk.

Returns 

Type: int
 Description: The value of the final deleteFile
 

Parameters 

Param 1: 

Type: string
 Description: the absolute path to the file to be deleted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IniFlush 

Description 

Flushes all previous writes by IniWriteInteger or IniWriteString specified for the file indicated by strFile. Flushing will guarantee that the newly written sections, keys or values will be available for subsequent reading functions.

Returns 

Type: Int
 Description: TRUE if flush was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniFlushEx 

Description 

Flushes all previous writes by IniWriteInteger or IniWriteString specified for the file indicated by strFile. Flushing will guarantee that the newly written sections, keys or values will be available for subsequent reading functions.

Returns 

Type: Int
 Description: TRUE if flush was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 2: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniReadInteger 

Description 

Reads an integer value from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: Int
 Description: The value that will be returned if the key cannot be retrieved.
 Include: Required
 

Param 4: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the User, or if not found then shared, Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IniReadIntegerEx 

Description 

Reads an integer value from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: Int
 Description: The value that will be returned if the key cannot be retrieved.
 Include: Required
 

Param 4: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 5: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniReadSectionKeys 

Description 

Retrieves the keys from a section in an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: String
 Description: The key names from the given section as a list of strings delimited by the '|' character. If there no keys, an empty string is returned.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the User, or if not found then shared, Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IniReadSectionKeysEx 

Description 

Retrieves the keys from a section in an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: String
 Description: The key names from the given section as a list of strings delimited by the '|' character. If there no keys, an empty string is returned.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 3: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniReadSectionNames 

Description 

Retrieves the section names from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: String
 Description: The section names as a list of strings delimited by the '|' character. If there no sections, a empty string is returned.
 

Parameters 

Param 1: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the User, or if not found then shared, Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IniReadSectionNamesEx 

Description 

Retrieves the section names from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: String
 Description: The section names as a list of strings delimited by the '|' character. If there no sections, a empty string is returned.
 

Parameters 

Param 1: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 2: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniReadString 

Description 

Reads a string value from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: String
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: String
 Description: The value that will be returned if the key cannot be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 4: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the User, or if not found then shared, Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IniReadStringEx 

Description 

Reads a string value from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: String
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: String
 Description: The value that will be returned if the key cannot be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 4: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 5: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will read the file from the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.0 and later

Function: IniRemoveKey 

Description 

Removes a key and its value from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: TRUE if the key is successfully removed, otherwise FALSE.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section from which the key and its value will be removed. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key that will be removed. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Param 4: 

Type: Int
 Description: Optional parameter. Starting with JAWS 6.2, this flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IniRemoveKeyEx 

Description 

Removes a key and its value from an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: TRUE if the key is successfully removed, otherwise FALSE.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section from which the key and its value will be removed. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key that will be removed. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 4: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniRemoveSection 

Description 

Removes an entire section an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: TRUE if the section is successfully removed, otherwise FALSE.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section that will be removed. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Param 3: 

Type: Int
 Description: Optional parameter. Starting with JAWS 6.2, this flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IniRemoveSectionEx 

Description 

Removes an entire section an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: TRUE if the section is successfully removed, otherwise FALSE.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section that will be removed. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 3: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniWriteInteger 

Description 

Writes an integer value to an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: The total number of characters written to the file when the write is successful. False if the value is not written successfully. If the file, section, or key does not already exist, it will be created.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: Int
 Description: The value that will be written to the given key.
 Include: Required
 

Param 4: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Param 5: 

Type: Int
 Description: Optional parameter. Starting with JAWS 6.0, this flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IniWriteIntegerEx 

Description 

Writes an integer value to an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: TRUE if the value is successfully written. If the file, section, or key does not already exist, it will be created.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: Int
 Description: The value that will be written to the given key.
 Include: Required
 

Param 4: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 5: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Param 6: 

Type: Int
 Description: Optional parameter. Starting with JAWS 6.0, this flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

Function: IniWriteString 

Description 

Writes a string value to an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: The total number of characters written to the file when the write is successful. False if the value is not written successfully. If the file, section, or key does not already exist, it will be created.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: String
 Description: The value that will be written to the given key. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 4: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Param 5: 

Type: Int
 Description: Optional parameter. Starting with JAWS 6.0, this flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IniWriteStringEx 

Description 

Writes a string value to an ini style file. An ini style file is a file containing sections of keys with their values.

Returns 

Type: Int
 Description: TRUE if the value is successfully written. If the file, section, or key does not already exist, it will be created.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: String
 Description: The value that will be written to the given key. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 4: 

Type: Int
 Description: Determines the directory where the file is located.
 Include: Required
 

Param 5: 

Type: String
 Description: The path to the ini style file. This value must either be a variable or contained in quotes. If a directory is not specified, it will write the file under the \Settings directory.
 Include: Required
 

Param 6: 

Type: Int
 Description: Optional parameter. Starting with JAWS 6.0, this flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.0 and later

This function is available in the following releases:

JAWS 13.00-16.00  

JAWS 17.00 and later  

 Function: ReadSettingInteger 

Description 

Reads an integer value from an ini style file or one of the transient settings files for the specified file. An ini style file is a file containing sections of keys with their values. The file that is read from is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF, FT_SHARED_CURRENT_JCF, and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter.

Returns 

Type: int
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: int
 Description: The value that will be returned if the key cannot be retrieved.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for reading are as follows: FT_MODULE_INI: The INI file for the current product. For JAWS this file is named JFW.INI. The module INI file is always located in the same directory in which the product is installed. The FileName parameter is ignored for this file type. FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When reading from this file, the settings stored in the Default.JCF file found in the user settings directory will be layered over the settings stored in the Default.JCF file found in the shared settings directory. FT_CURRENT_JCF: Any application JCF file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When reading from this file, the settings stored in the JCF file found in the user settings directory will be layered over the settings stored in the JCF file found in the shared settings directory. FT_JSI: A JSI file. If the FileName parameter is not specified, the name of the current application will be used. FT_SHARED_DEFAULT_JCF: The file Default.JCF found in the shared settings directory. The FileName parameter is ignored for this file type. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory. FT_SHARED_CURRENT_JCF: Any application JCF file found in the shared settings directory. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the ReadSource (rs) constants defined in HJConst.JSH. The possible values are as follows: rsStandardLayering - causes standard layering behavior to be used, the setting will be read from the transient focus file first, then the transient session file, then the user settings file, and finally the shared settings file, stopping at the first file in which the desired setting is found; rsSession - the setting will be read from the transient session settings file, no layering will be used; rsFocus - the setting will be read from the transient focus settings file, no layering will be used; rsNoTransient - the transient settings files will be ignored and the setting will be read from the user settings file layered over the shared settings file. Note that this parameter is ignored if the FileType parameter is FT_MODULE_INI, FT_JSI, FT_SHARED_DEFAULT_JCF, or FT_SHARED_CURRENT_JCF. If this parameter is not specified the default value of rsStandardLayering will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to read. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the shared settings directory, the user settings directory, or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be searched for. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 13.00-16.00

 Function: ReadSettingInteger 

Description 

Reads an integer value from an ini style file or one of the transient settings files for the specified file. An ini style file is a file containing sections of keys with their values. The file that is read from is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF, FT_SHARED_CURRENT_JCF, and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter. When FT_CURRENT_JCF is the file type, and no file name is supplied, the domain-specific file will be used if available.

Returns 

Type: int
 Description: The retrieved value or the default value if the key does not exist in the given section. Before using the default value, the value from default.jcf will be checked first, if the file type is FT_CURRENT_JCF is used.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: int
 Description: The value that will be returned if the key cannot be retrieved.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for reading are as follows: FT_MODULE_INI: The INI file for the current product. For JAWS this file is named JFW.INI. The module INI file is always located in the same directory in which the product is installed. The FileName parameter is ignored for this file type. FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When reading from this file, the settings stored in the Default.JCF file found in the user settings directory will be layered over the settings stored in the Default.JCF file found in the shared settings directory. FT_CURRENT_JCF: If available, the domain-specific jcf file. Otherwise, any application JCF file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When reading from this file, the settings stored in the JCF file found in the user settings directory will be layered over the settings stored in the JCF file found in the shared settings directory. FT_JSI: A JSI file. If the FileName parameter is not specified, the name of the current application will be used. FT_SHARED_DEFAULT_JCF: The file Default.JCF found in the shared settings directory. The FileName parameter is ignored for this file type. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory. FT_SHARED_CURRENT_JCF: Any application JCF file found in the shared settings directory. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the ReadSource (rs) constants defined in HJConst.JSH. The possible values are as follows: rsStandardLayering - causes standard layering behavior to be used, the setting will be read from the transient focus file first, then the transient session file, then the user settings file, and finally the shared settings file, stopping at the first file in which the desired setting is found; rsSession - the setting will be read from the transient session settings file, no layering will be used; rsFocus - the setting will be read from the transient focus settings file, no layering will be used; rsNoTransient - the transient settings files will be ignored and the setting will be read from the user settings file layered over the shared settings file. Note that this parameter is ignored if the FileType parameter is FT_MODULE_INI, FT_JSI, FT_SHARED_DEFAULT_JCF, or FT_SHARED_CURRENT_JCF. If this parameter is not specified the default value of rsStandardLayering will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to read. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the shared settings directory, the user settings directory, or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be searched for. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

This function is available in the following releases:

1.    JAWS 13.00-16.00  

2.    JAWS 17.00 and later  

 Function: ReadSettingString 

Description 

Reads a string value from an ini style file or one of the transient settings files for the specified file. An ini style file is a file containing sections of keys with their values. The file that is read from is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF, FT_SHARED_CURRENT_JCF, and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter. When FT_CURRENT_JCF is the file type, and no file name is supplied, the domain-specific file will be used if available.

Returns 

Type: string
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: string
 Description: The value that will be returned if the key cannot be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for reading are as follows: FT_MODULE_INI: The INI file for the current product. For JAWS this file is named JFW.INI. The module INI file is always located in the same directory in which the product is installed. The FileName parameter is ignored for this file type. FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When reading from this file, the settings stored in the Default.JCF file found in the user settings directory will be layered over the settings stored in the Default.JCF file found in the shared settings directory. FT_CURRENT_JCF: If available, the domain-specific jcf file. Otherwise, any application JCF file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When reading from this file, the settings stored in the JCF file found in the user settings directory will be layered over the settings stored in the JCF file found in the shared settings directory. FT_JSI: A JSI file. If the FileName parameter is not specified, the name of the current application will be used. FT_SHARED_DEFAULT_JCF: The file Default.JCF found in the shared settings directory. The FileName parameter is ignored for this file type. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory. FT_SHARED_CURRENT_JCF: Any application JCF file found in the shared settings directory. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the ReadSource (rs) constants defined in HJConst.JSH. The possible values are as follows: rsStandardLayering - causes standard layering behavior to be used, the setting will be read from the transient focus file first, then the transient session file, then the user settings file, and finally the shared settings file, stopping at the first file in which the desired setting is found; rsSession - the setting will be read from the transient session settings file, no layering will be used; rsFocus - the setting will be read from the transient focus settings file, no layering will be used; rsNoTransient - the transient settings files will be ignored and the setting will be read from the user settings file layered over the shared settings file. Note that this parameter is ignored if the FileType parameter is FT_MODULE_INI, FT_JSI, FT_SHARED_DEFAULT_JCF, or FT_SHARED_CURRENT_JCF. If this parameter is not specified the default value of rsStandardLayering will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to read. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the shared settings directory, the user settings directory, or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be searched for. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.00-16.00

 Function: ReadSettingString 

Description 

Reads a string value from an ini style file or one of the transient settings files for the specified file. An ini style file is a file containing sections of keys with their values. The file that is read from is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF, FT_SHARED_CURRENT_JCF, and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter.

Returns 

Type: string
 Description: The retrieved value or the default value if the key does not exist in the given section.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section containing the desired key value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key whose value is to be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: string
 Description: The value that will be returned if the key cannot be retrieved. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for reading are as follows: FT_MODULE_INI: The INI file for the current product. For JAWS this file is named JFW.INI. The module INI file is always located in the same directory in which the product is installed. The FileName parameter is ignored for this file type. FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When reading from this file, the settings stored in the Default.JCF file found in the user settings directory will be layered over the settings stored in the Default.JCF file found in the shared settings directory. FT_CURRENT_JCF: Any application JCF file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When reading from this file, the settings stored in the JCF file found in the user settings directory will be layered over the settings stored in the JCF file found in the shared settings directory. FT_JSI: A JSI file. If the FileName parameter is not specified, the name of the current application will be used. FT_SHARED_DEFAULT_JCF: The file Default.JCF found in the shared settings directory. The FileName parameter is ignored for this file type. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory. FT_SHARED_CURRENT_JCF: Any application JCF file found in the shared settings directory. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When this file type is specified settings will only be read from the copy of the file found in the shared settings directory.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the ReadSource (rs) constants defined in HJConst.JSH. The possible values are as follows: rsStandardLayering - causes standard layering behavior to be used, the setting will be read from the transient focus file first, then the transient session file, then the user settings file, and finally the shared settings file, stopping at the first file in which the desired setting is found; rsSession - the setting will be read from the transient session settings file, no layering will be used; rsFocus - the setting will be read from the transient focus settings file, no layering will be used; rsNoTransient - the transient settings files will be ignored and the setting will be read from the user settings file layered over the shared settings file. Note that this parameter is ignored if the FileType parameter is FT_MODULE_INI, FT_JSI, FT_SHARED_DEFAULT_JCF, or FT_SHARED_CURRENT_JCF. If this parameter is not specified the default value of rsStandardLayering will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to read. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the shared settings directory, the user settings directory, or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be searched for. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

Function: SaveSelectionContextFlags 

Description 

Strips any flag settings designated as being JCF flags from the flag set, then writes the remaining flags in the set to the specified JSI file.

Returns 

Type: int
 Description: The result of the ini write.
 

Parameters 

Param 1: 

Type: string
 Description: The section name where the key for the selection flags will be saved.
 Include: Required
 

Param 2: 

Type: int
 Description: The selection flag set.
 Include: Required
 

Param 3: 

Type: string
 Description: The name of the JSI file where the setting will be saved.
 Include: Required
 

Param 4: 

Type: Int
 Description: Optional parameter. This flag must be set to true to flush write immediately to disk. True will flush the current write and all previous writes specified for the file indicated by strFile. Flushing will be slower. Not flushing will allow the write function to return quicker, but new data may not be available for subsequent read functions. Not supplying this parameter will behave as if set to true.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

This function is available in the following releases:

1.    JAWS 13.00-16.00  

2.    JAWS 17.00 and later  

 Function: WriteSettingInteger 

Description 

Writes an integer value to an ini style file. An ini style file is a file containing sections of keys with their values. The file that is written to is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: int
 Description: The value that will be written to the given key.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for writing are as follows: FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When writing to this file, the changes will always be written to either the copy of Default.JCF found in the user settings directory or one of the transient settings files for Default.JCF, depending on the value of the WriteDestination parameter. The copy of Default.JCF found in the shared settings directory will never be modified. FT_CURRENT_JCF: Any application JCF file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When writing to this file, the changes will always be written to either the copy of the JCF file found in the user settings directory or one of the transient settings files for the JCF file, depending on the value of the WriteDestination parameter. The copy of the JCF file found in the shared settings directory will never be modified. FT_JSI: A JSI file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. The changes will always be written to the PersonalizedSettings subdirectory of the user settings directory. The file types FT_MODULE_INI, FT_SHARED_DEFAULT_JCF, and FT_SHARED_CURRENT_JCF are not supported by WriteSettingInteger.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the WriteDestination (wd) constants defined in HJConst.JSH. The possible values are as follows: wdUser - indicates that the setting should be saved to the user settings file; wdSession - indicates that the setting should be saved to the transient session settings file; wdFocus - indicates that the setting should be saved to the transient focus settings file. Note that this parameter is ignored if the FileType parameter is FT_JSI. If this parameter is not specified the default value of wdUser will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to write to. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the user settings directory or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be placed. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.00-16.00

 Function: WriteSettingInteger 

Description 

Writes an integer value to an ini style file. An ini style file is a file containing sections of keys with their values. The file that is written to is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter. For FT_CURRENT_JCF, if a file name is not supplied, the domain-specific file will be used if available. Otherwise, the application's jcf file will be used.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: int
 Description: The value that will be written to the given key.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for writing are as follows: FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When writing to this file, the changes will always be written to either the copy of Default.JCF found in the user settings directory or one of the transient settings files for Default.JCF, depending on the value of the WriteDestination parameter. The copy of Default.JCF found in the shared settings directory will never be modified. FT_CURRENT_JCF: Any domain-specific JCF file. If not found, the application jcf file will be used. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When writing to this file, the changes will always be written to either the copy of the JCF file found in the user settings directory or one of the transient settings files for the JCF file, depending on the value of the WriteDestination parameter. The copy of the JCF file found in the shared settings directory will never be modified. FT_JSI: A JSI file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. The changes will always be written to the PersonalizedSettings subdirectory of the user settings directory. The file types FT_MODULE_INI, FT_SHARED_DEFAULT_JCF, and FT_SHARED_CURRENT_JCF are not supported by WriteSettingInteger.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the WriteDestination (wd) constants defined in HJConst.JSH. The possible values are as follows: wdUser - indicates that the setting should be saved to the user settings file; wdSession - indicates that the setting should be saved to the transient session settings file; wdFocus - indicates that the setting should be saved to the transient focus settings file. Note that this parameter is ignored if the FileType parameter is FT_JSI. If this parameter is not specified the default value of wdUser will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to write to. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the user settings directory or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be placed. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

This function is available in the following releases:

JAWS 13.00-16.00  

JAWS 17.00 and later  

 Function: WriteSettingString 

Description 

Writes a string value to an ini style file. An ini style file is a file containing sections of keys with their values. The file that is written to is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: string
 Description: The value that will be written to the given key.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for writing are as follows: FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When writing to this file, the changes will always be written to either the copy of Default.JCF found in the user settings directory or one of the transient settings files for Default.JCF, depending on the value of the WriteDestination parameter. The copy of Default.JCF found in the shared settings directory will never be modified. FT_CURRENT_JCF: Any application JCF file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When writing to this file, the changes will always be written to either the copy of the JCF file found in the user settings directory or one of the transient settings files for the JCF file, depending on the value of the WriteDestination parameter. The copy of the JCF file found in the shared settings directory will never be modified. FT_JSI: A JSI file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. The changes will always be written to the PersonalizedSettings subdirectory of the user settings directory. The file types FT_MODULE_INI, FT_SHARED_DEFAULT_JCF, and FT_SHARED_CURRENT_JCF are not supported by WriteSettingString.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the WriteDestination (wd) constants defined in HJConst.JSH. The possible values are as follows: wdUser - indicates that the setting should be saved to the user settings file; wdSession - indicates that the setting should be saved to the transient session settings file; wdFocus - indicates that the setting should be saved to the transient focus settings file. Note that this parameter is ignored if the FileType parameter is FT_JSI. If this parameter is not specified the default value of wdUser will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to write to. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the user settings directory or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be placed. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.00-16.00

 Function: WriteSettingString 

Description 

Writes a string value to an ini style file. An ini style file is a file containing sections of keys with their values. The file that is written to is identified by the FileType parameter and an optional FileName parameter. For some values of the FileType parameter, FT_CURRENT_JCF and FT_JSI, for which a file name is required, the value returned by GetActiveConfiguration will be used if a file name is not provided via the FileName parameter. For FT_CURRENT_JCF, if a file name is not supplied, the domain-specific file will be used if available. Otherwise, the application's jcf file will be used.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise
 

Parameters 

Param 1: 

Type: string
 Description: The name of the section where the key and value will be written. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key that will hold the value. This value must either be a variable or contained in quotes.
 Include: Required
 

Param 3: 

Type: string
 Description: The value that will be written to the given key.
 Include: Required
 

Param 4: 

Type: int
 Description: One of the FileType (FT_) constants that identify the type of file and its location. The currently supported file types for writing are as follows: FT_DEFAULT_JCF: The file Default.JCF. The FileName parameter is ignored for this file type. When writing to this file, the changes will always be written to either the copy of Default.JCF found in the user settings directory or one of the transient settings files for Default.JCF, depending on the value of the WriteDestination parameter. The copy of Default.JCF found in the shared settings directory will never be modified. FT_CURRENT_JCF: Any domain-specific JCF file. If not found, the application jcf file will be used. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. When writing to this file, the changes will always be written to either the copy of the JCF file found in the user settings directory or one of the transient settings files for the JCF file, depending on the value of the WriteDestination parameter. The copy of the JCF file found in the shared settings directory will never be modified. FT_JSI: A JSI file. If the FileName parameter is not specified, the value returned by GetActiveConfiguration will be used. The changes will always be written to the PersonalizedSettings subdirectory of the user settings directory. The file types FT_MODULE_INI, FT_SHARED_DEFAULT_JCF, and FT_SHARED_CURRENT_JCF are not supported by WriteSettingString.
 Include: Required
 

Param 5: 

Type: int
 Description: One of the WriteDestination (wd) constants defined in HJConst.JSH. The possible values are as follows: wdUser - indicates that the setting should be saved to the user settings file; wdSession - indicates that the setting should be saved to the transient session settings file; wdFocus - indicates that the setting should be saved to the transient focus settings file. Note that this parameter is ignored if the FileType parameter is FT_JSI. If this parameter is not specified the default value of wdUser will be used.
 Include: Optional
 

Param 6: 

Type: string
 Description: The name of file to write to. This value must either be a variable or contained in quotes. It is unnecessary to specify the full path of the file, only the file name need be specified, since the file used will always be located in either the user settings directory or the personalized settings directory. The FileType parameter is used to determine in which directory the file will be placed. If this parameter is not specified and a file name is required for the specified file type, the value returned by GetActiveConfiguration will be used. It is not necessary to specify the file extension since the file extension that is appropriate for the specified file type will be added automatically.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

Frames Functions

A Frames function provides or returns information about user or JAWS interaction with the Frames feature. JAWS uses frames to speak and display information in Braille, or to suppress it.

Some scripts that ship with JAWS fall into the category of Frames, such as the script for CreatePrompt, for example. However, the focus of the present discussion is on functions related to Frames that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Frames functions include:

FrameClearValues

FrameManagerRun

FrameMoveHelper

For a complete listing of Frames functions, see the topics in this category book of the Reference Guide.

Special Note:

Do not confuse functions for Frames with functions related to the HTML element called "frame". They are entirely different. The Frames feature of JAWS provides you with methods for reading information not usually reachable by the PC cursor, or to suppress such information if it updates continually and causes JAWS to announce it unnecessarily. This has become less and less an issue over time since more and more event functions are able to handle speaking or suppressing information. where frames might still be useful is for some older terminal emulator applications.

Code Sample

In the below code sample, the script calls the FrameMoveHelper function in order to announce its contents. Since the function leaves the JAWS cursor active, the script ensures that the PC cursor is reactivated after the function call is made.

It is assumed that the function is being called from and processed in a Notepad.jss script source file and compiled in its associated Notepad.jsb script binary file.

To set up the example, from within the Notepad application, create a frame called "TestFrame" at the top of the application window where the name of the application is located. Then run the script from within the document window of the Notepad application.

Script MyFramesTest ()
FrameMoveHelper ("TestFrame")
SayLine () ; from within the frame with the JAWS cursor active.
PCCursor ()
SayLine () ; Back in the document window.
EndScript

Additional Resources

For more details on working with Frames files, see the topic under Settings and Configurations in the General Scripting Concepts book called Script File Types.

Function: AreJAWSFramesActive 

Description 

This function determines if any frames are currently valid. For example, if three frames are defined for the current application but only one is valid at the moment, this function will return TRUE. If none are valid or none are defined, the function will return FALSE.

Returns 

Type: int
 Description: TRUE or FALSE
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: BrailleGetFramePrompt 

Description 

This function retrieves the Braille prompt of the specified frame. If no frame is specified then the frame at the active cursor location is asumed. Note that a frame's prompt is any string or strings defined as part of any EVENT_Focus/ACTION_BrailleString pairs.

Returns 

Type: String
 Description: the Braille prompt.
 

Parameters 

Param 1: 

Type: String
 Description: the name of the frame whose prompt you want.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: CreatePrompt 

Description 

Use this keystroke to create a custom label or prompt for a control whose prompt is either misleading or missing.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FrameClearValues 

Description 

Useful when setting or resetting frames.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FrameGetBottomRight 

Description 

Place the cursor where you want the bottom right corner of the frame to be and then press this keystroke. If the top left corner has already been defined, this activates Frame Viewer to give the frame a name and other characteristics.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FrameGetTopLeft 

Description 

Place the cursor where you want the top left corner of the frame to be and then press This keystroke. When This keystroke is pressed twice quickly, it will position the new frame on the current control and start the Frame Viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FrameManager 

Description 

Used to name frames, adjust their size and position, and determine their behavior.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FrameManagerRun 

Description 

Used to name frames, adjust their size and position, and determine their behavior.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: What action should the Frame Viewer perform. Possible values are found in HJConst beginning with FRAMEVIEW_.
 Include: Required
 

Param 2: 

Type: Int
 Description: Enter > 0 to determine that we're in a menu, false or leave blank otherwise
 Include: Optional
 

Param 3: 

Type: Handle
 Description: Enter the handle of the menu itself
 Include: Optional
 

Param 4: 

Type: String
 Description: Enter the class name for the menu. Most drop-down menus possess the class #32768 which is represented by the constant cWcMenuClass defined in the common.jsm file.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FrameMoveHelper 

Description 

The JAWS Cursor is placed in the specified frame and a message is announced accordingly. This message uses the Smart Help Messages output mode, and can be easily suppressed by deselecting this message type in your Verbosity settings.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Enter the name of the frame in which to place the JAWS Cursor. Remember that the JAWS cursor is left on.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FramesEnumerate 

Description 

This function enumerates all defined and valid frames and calls a function for each frame passing in the name and rectangle tlx, tly, brx, bry for the frame.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: script function.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FrameSetOnObject 

Description 

Useful when determining and building frames in small windows, especially SDM windows.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FrameSetOnWindow 

Description 

Useful when determining and building frames in small windows.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The window in which to set the frame.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FramesListHelper 

Description 

Builds the string containing the names of all the active frames on the screen.

Returns 

Type: Int
 Description: True if successful.
 

Parameters 

Param 1: 

Type: String
 Description: Receives the name of the frame.
 Include: Required
 

Param 2: 

Type: Int
 Description: Receives the top left edge of the frame.
 Include: Required
 

Param 3: 

Type: Int
 Description: Receives the top right edge of the frame.
 Include: Required
 

Param 4: 

Type: Int
 Description: Receives the bottom left edge of the frame.
 Include: Required
 

Param 5: 

Type: Int
 Description: Receives the bottom right edge of the frame.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FrameViewer 

Description 

Launch the Frame Viewer with information regarding a possible new frame creation.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: Int
 Description: What action should the Frame Viewer perform. Possible values are found in HJConst beginning with FRAMEVIEW_.
 Include: Required
 

Param 2: 

Type: Int
 Description: the screen coordinate for the top of the parent window for the new frame.
 Include: Required
 

Param 3: 

Type: Int
 Description: the screen coordinate for the left of the parent window for the new frame.
 Include: Required
 

Param 4: 

Type: Int
 Description: the screen coordinate for the bottom of the parent window for the new frame.
 Include: Required
 

Param 5: 

Type: Int
 Description: the screen coordinate for the right of the parent window for the new frame.
 Include: Required
 

Param 6: 

Type: Int
 Description: the screen coordinate for the top of the new frame.
 Include: Required
 

Param 7: 

Type: Int
 Description: the screen coordinate for the left of the new frame.
 Include: Required
 

Param 8: 

Type: Int
 Description: the screen coordinate for the bottom of the new frame.
 Include: Required
 

Param 9: 

Type: Int
 Description: the screen coordinate for the right of the new frame.
 Include: Required
 

Param 10: 

Type: String
 Description: the title of the parent window.
 Include: Required
 

Param 11: 

Type: String
 Description: the class of the parent window.
 Include: Required
 

Param 12: 

Type: String
 Description: the prompt that will be associated with this frame.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FrameViewerActive 

Description 

Since multiple instances of the Frame Viewer cannot be simultaneously loaded, this function is usefull for giving the user feedback when a second instance of the Frame Viewer is denied from launching.

Returns 

Type: Int
 Description: TRUE if the Frame Viewer is active, otherwise FALSE.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetFrameDescription 

Description 

Retrieves the description of a specified frame.

Returns 

Type: String
 Description: The text of the description.
 

Parameters 

Param 1: 

Type: string
 Description: The frame name of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFrameNameAtCursor 

Description 

Retrieves the name of the frame that surrounds the location of the current cursor.

Returns 

Type: String
 Description: The name of the frame containing the cursor. If no such frame exists, the string is empty. An empty string can be tested for by comparing the result with .""
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFramePrompt 

Description 

This function retrieves the prompt of the specified frame. If no frame is specified then the frame at the active cursor location is asumed. Note that a frame's prompt is any string or strings defined as part of any EVENT_Focus/ACTION_SayString pairs.

Returns 

Type: String
 Description: the prompt.
 

Parameters 

Param 1: 

Type: String
 Description: the name of the frame whose prompt you want.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFrameSynopsis 

Description 

Retrieves the synopsis of a specified frame.

Returns 

Type: String
 Description: The text of the synopsis.
 

Parameters 

Param 1: 

Type: string
 Description: The frame name of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFrameTutorMessage 

Description 

This function retrieves the tutor message of the specified frame. If no frame is specified then the frame at the active cursor location is asumed.

Returns 

Type: String
 Description: the tutor message.
 

Parameters 

Param 1: 

Type: String
 Description: the name of the frame whose tutor message you want.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTextInFrame 

Description 

Retrieves the text inside a specified frame.

Returns 

Type: String
 Description: The frame contents.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the frame desired.
 Include: Required
 

Param 2: 

Type: Int
 Description: whether or not to add line breaks or to get the text as one long string.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToFrame 

Description 

Moves the active cursor to the top left corner of the specified frame. If the PC cursor is active when this function is used, then the JAWS cursor is activated and it is moved to the new position. Otherwise, the active cursor is moved.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1 (frame was found), "WAS_NOT_SUCCESSFUL" = 0 (frame was not found).
 

Parameters 

Param 1: 

Type: string
 Description: The name of a frame.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayFrame 

Description 

Speaks the contents of a specific frame.

Returns 

Type: Int
 Description: TRUE if the desired frame exists, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the frame to speak.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SayFrame 

Description 

A frame is not valid unless certain things about it are true, such as the name of its real window, the class of its real window, and the search string, if any.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the frame that is to be spoken.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayFrameAtCursor 

Description 

Speaks the contents of the frame that surrounds the location of the current cursor.

Returns 

Type: Int
 Description: TRUE if a frame surrounds the current cursor, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayFrameAtCursor 

Description 

All text within the boundaries of the frame that contains the active cursor is spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectAFrame 

Description 

Opens a list of the active frames on the screen. Make your selection in the list and press enter. The JAWS cursor will be positioned in the frame you selected and left on so you can read the frame.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: ShowAllFrames 

Description 

The name of each active frame is displayed as a link. Below each frame name, or title, is the text in that frame. Press enter on the title or name of the frame, and the JAWS Cursor will be placed in that frame. If you name your frames meaningfully, the text for the frame title will make for easier reading.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: ShowFramesTextOnly 

Description 

Only the text from the frames is shown. If a frame contains no text at the time this script is run, then it will not appear in the virtual viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: ShowFramesWithText 

Description 

The name of each active frame is displayed as a link. Below each frame name, or title, is the text in that frame. Press enter on the title or name of the frame, and the JAWS Cursor will be placed in that frame. If you name your frames meaningfully, the text for the frame title will make for easier reading.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: ShowFrameText 

Description 

The name of each active frame is displayed as a link. Below each frame name, or title, is the text in that frame.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: ShowFrameTextHelper 

Description 

As active frames are found, their title and text is passed into the User Buffer. The name, or title, is posted as a link to the FrameMoveHelper function which will place the JAWS cursor in the specified frame and announce accordingly. This announcement can be turned off by suppressing Smart Help Messages in your Verbosity profile.

Returns 

Type: Int
 Description: True if successful
 

Parameters 

Param 1: 

Type: String
 Description: Receives the name of the frame.
 Include: Required
 

Param 2: 

Type: Int
 Description: Receives the top left edge of the frame.
 Include: Required
 

Param 3: 

Type: Int
 Description: Receives the top right edge of the frame.
 Include: Required
 

Param 4: 

Type: Int
 Description: Receives the bottom left edge of the frame.
 Include: Required
 

Param 5: 

Type: Int
 Description: Receives the bottom right edge of the frame.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

FS Product Info Functions

An FS Product Info function returns information about the FS Product currently running, such as its authorization code. JAWS uses this information in order to speak and display it in Braille, for comparison purposes, and so on.

Some examples of FS Product Info functions include:

GetAuthCode

GetJFWSerialNumber

For a complete listing of FS Product Info functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines your serial number and speaks and flashes it in a message.

It is assumed that the function is being processed in a Notepad.jss script source file and compiled in it associated Notepad.jsb script binary file.

Script MySerialNumber ()
Var
            Int iNum
iNum = GetJFWSerialNumber ()
SayInteger (iNum)
BrailleMessage (IntToString (iNum))
EndScript

Function: CheckAuthScheme 

Description 

A call to this function determines if JAWS is authorized to run. For the dongle, a check is done to ensure the dongel is installed and that it is the correct one for the product .

Returns 

Type: Int
 Description: 0 if dongle is in place and authorized correctly, error code otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetAuthCode 

Description 

For versions of JAWS using SENTINEL_LM as the Authorization scheme, this function obtains the first 7 characters of the JAWS authorization code and returns the characters as a string.

Returns 

Type: string
 Description: The first 7 characters of the authorization code, or null if the authorization code could not be obtained.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetAuthLanguageCat 

Description 

A call to this function determines what languages are authorized for JAWS. The values are found in HjConst.jsh and start with the prefix AUTHCAT_.

Returns 

Type: Int
 Description: value for the language category. The possible values are found in HjConst.jsh and start with the prefix AUTHCAT_.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetAuthScheme 

Description 

A call to this function determines what authorization scheme is being used by JAWS. An empty string indicates no authorization scheme was found.

Returns 

Type: String
 Description: The authorization scheme currently in use. Authorization schemes are found in HjConst.jsh and start with the prefix SCHEME_.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetAuthScriptLanguageCat 

Description 

This function is used by developers of JAWS scripts who are concerned with use of the dongle. A flag is returned and execution of code can be based upon a registered language.

Returns 

Type: Int
 Description: The value of the language registered in the dongle. These are registered in HjConst.jsh with the prefix AUTHCAT_SCRIPT_.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJAWSBuildVersionNumber 

Description 

Retrieves the JAWS product build version number which was cached by InitFSProductVersionInfo.

Returns 

Type: int
 Description: If JAWS is running, the build version info of the running copy of JAWS; 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetJAWSMajorVersionNumber 

Description 

Retrieves the JAWS product major version number which was cached by InitFSProductVersionInfo.

Returns 

Type: int
 Description: If JAWS is running, the major version info of the running copy of JAWS; 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetJAWSMinorVersionNumber 

Description 

Retrieves the JAWS product minor version number which was cached by InitFSProductVersionInfo.

Returns 

Type: int
 Description: If JAWS is running, the minor version info of the running copy of JAWS; 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetJAWSUpdateVersionNumber 

Description 

Retrieves the JAWS product update version number which was cached by InitFSProductVersionInfo.

Returns 

Type: int
 Description: If JAWS is running, the update version info of the running copy of JAWS; 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: GetJFWSerialNumber 

Description 

Used to get the serial number of the currently running JAWS.

Returns 

Type: Int
 Description: The serial number of the corrently running JAWS, or 0 if there is an error.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJFWSMACount 

Description 

This function returns the SMA count as an integer.

Returns 

Type: Int
 Description: The SMA count.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLockingCode 

Description 

For versions of JAWS using SENTINEL_LM as the Authorization scheme, this function obtains the JAWS locking code and returns the code as a string.

Returns 

Type: string
 Description: The locking code, or null if the locking code could not be obtained.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: getRunningFSProducts 

Description 

Returns a bit field listing the running products. Valid options are product_JAWS, product_MAGic, or product_OpenBook

Returns 

Type: int
 Description: The bit field listing the running products.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: InitFSProductVersionInfo 

Description 

Caches product version information for JAWS and MAGic.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: IsZoomTextReaderEnabled 

Description 

Determines if the Reader feature is currently enabled in ZoomText.

Returns 

Type: int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Graphics Functions

A Graphics function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of Graphics, such as the script for AutoLabelGraphics, for example. However, the focus of the present discussion is on functions related to Graphics that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Graphics functions include:

FindGraphic

GetGraphicID

GraphicsEnumerate

GraphicsLabeler

For a complete listing of Graphics functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, created in the Windows OS.jss script source file, the script determines where the next graphic is located on screen and moves to that location, speaking it and placing the Braille cursor at the location.

 

 To set up the example, from the Desktop, use the JAWS Quick Settings user interface to ensure that the setting for Graphics is set to All. Then run the script from the Desktop at various places or starting from the very top of the screen.

 

Take care when working with the Windows OS.jss script source file because it already contains scripts and functions by default that ship with JAWS. Place your sample code at the very bottom of the file. And make sure to remove this overwritten Windows OS.jss and its associated overwritten Windows OS.jsb and Windows OS.jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed from the Windows OS.jss script source file and compiled in its associated Windows OS.jsb script binary file.

Script MyGraphicTest ()
; Search unrestricted.
If MoveToGraphic (s_next,FALSE) ; Move succeeded.
            ;Since the graphic moved to activates the JAWS cursor:
            RoutePCToJAWS ()
            PCCursor ()
EndIf
EndScript

Additional Resources

For more details on working with Graphics files, see the topic under Settings and Configurations in the General Scripting Concepts book called Script File Types.

For more details on working with functions that enumerate information, see the topic under Calling Scripts and Functions in the General Scripting Concepts book called Enumerator Functions.

 

Function: AutoGraphicsLabelerHelper 

Description 

Helper to autoLabel graphics, this function uses the four coordinates passed to it to find each graphic to be labeled.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Required
 

Param 4: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: AutoLabelGraphics 

Description 

Starts the AutoGraphics labeler. JAWS moves from graphic to graphic in the current application window and if a tooltip is displayed, then the tooltip text is used to label the graphic. Only unlabeled graphics are labeled. If the graphic is in a disabled state, then the word "grayed" is appended to the tooltip text.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindGraphic 

Description 

FindGraphic searches for a graphic in the specified window. If the graphic is found, then the JAWS cursor is placed on it. The graphic must have a text label associated with it because the FindGraphic function searches for text labels. Text labels are assigned by the Graphics Labeler.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Handle
 Description: Specify a window handle. Type the name of a variable or choose a script function that indicates the window that is to be searched.
 Include: Required
 

Param 2: 

Type: String
 Description: Type the graphic label that is to be located. The label must be typed exactly as it appears in the graphic label file. Enclose the graphic label within quotation marks.
 Include: Required
 

Param 3: 

Type: Int
 Description: Indicate the search direction. Type a constant value to indicate the starting point for the search: S_TOP or S_BOTTOM.
 Include: Required
 

Param 4: 

Type: Int
 Description: Indicate search restriction. Type the name of a constant value to indicate whether the search should be restricted to the active window or it should extend into all child windows of the active application. Type S_UNRESTRICTED to search all application windows or S_RESTRICTED to limit the search to the active child window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetGraphicID 

Description 

Gets the ID associated with the graphic under the current cursor. If this function fails, then the pointer is not positioned in a valid location on the graphic. Moving into the center of the graphic increases the success of this call.

Returns 

Type: Int
 Description: The Graphic ID, or zero if GetGraphicID fails.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetGraphicNameAtPoint 

Description 

This function is used to return the name of the graphic located at the point specified by the functions two parameters.

Returns 

Type: String
 Description: Returns the name of the graphic located at the specified point.
 

Parameters 

Param 1: 

Type: Int
 Description: No Description
 Include: Required
 

Param 2: 

Type: Int
 Description: No Description
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GraphicsEnumerate 

Description 

For every graphic contained within a specific window, calls a specified function, passing it the coordinates of the graphic.

Returns 

Type: Int
 Description: Count of the number of graphics enumerated.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window containing the graphics of interest.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the function to be called with information about each graphic in the window. This function should return TRUE if the enumeration is allowed to continue, FALSE if the enumeration should stop immediately. This function should be defined as: int Function SomeName(int nLeft,int nTop,int nRight,int nBottom).
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GraphicsLabeler 

Description 

Starts the graphics labeler utility that is used to label graphic symbols. The JAWS cursor must be positioned on the graphic symbol that you wish to label before this function is used.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: GraphicsLabeler 

Description 

Gets the graphic or symbol that the mouse or JAWS cursor was on and lets you assign it a text label. Labels can be stored in the application specific graphics file or the default graphics file.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: GraphicsList 

Description 

When This keystroke is invoked a list will be presented with all the visible and clickable graphics.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GraphicsListHelper 

Description 

 

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Param 2: 

Type: int
 Description:
 Include: Required
 

Param 3: 

Type: int
 Description:
 Include: Required
 

Param 4: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: GraphicsMode 

Description 

Active graphics mode is used when Standard graphics mode does not accurately recognize some graphics, such as tool bar items that are pushed, not pushed, or grayed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GraphicsVerbosity 

Description 

Graphics Verbosity can be set to All Graphics, Labeled Graphics, or No Graphics.

Returns 

Type: String
 Description: description of value to be displayed as value of Graphics Verbosity.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MoveToGraphic 

Description 

Moves the JAWS cursor, invisible cursor, or Braille cursor in a specific direction to find a graphic symbol in the active window.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Int
 Description: Type one of the constants to indicate the direction that the cursor is to move as it searches for a graphic: GRAPHIC_FIRST, GRAPHIC_NEXT, GRAPHIC_PRIOR, or GRAPHIC_LAST.
 Include: Required
 

Param 2: 

Type: int
 Description: set this to TRUE to restrict the search to the window containing the active cursor, FALSE for an unrestricted search, if not supplied, defaults to FALSE, ie unrestricted. this optional parameter is only available in JAWS 6.0
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SetGraphicLabel 

Description 

Adds a graphic label to the specified graphics file (jgf).

Returns 

Type: Int
 Description: TRUE if the label is successfully added.
 

Parameters 

Param 1: 

Type: Int
 Description: The ID of the graphic. GetGraphicID returns this value.
 Include: Required
 

Param 2: 

Type: String
 Description: The label to be assigned to the graphic.
 Include: Required
 

Param 3: 

Type: Int
 Description: If bApp is TRUE, then the graphic label is added to the application-specific graphic file. If FALSE, then it is added to the default graphic file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Help Functions

A Help function provides or returns information about a specific dialog control, ribbon control, a group of controls, or even a feature or application. Examples include keyboard help, screen-sensitive help, JAWS hotkey help and so on. JAWS uses this information in order to speak and display it in Braille on demand when the user presses a specific keystroke combination.

Very often, especially when the information is longer than one sentence, information from a Help function is displayed in a Virtual Viewer window. For more details on working with a Virtual Viewer window, see the topic in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

Some examples of Help functions include:

·         ShowScreenSensitiveHelp

·         ScreenSensitiveHelpForJAWSDialogs

·         ScreenSensitiveHelpForKnownClasses

·         ScreenSensitiveHelpForUnknownClasses

·         GeneralJAWSHotKeys

·         JAWSHotKeys

For a complete listing of Help functions, see the topics in this category book of the Reference Guide.

Code Sample

You may obtain screen-sensitive help from anywhere in an application or the Windows Desktop by pressing JAWSKey+F1.

The below code sample checks for a dialog to be active. If so, and if the object subtype code of the control with focus is an edit combo (type 41), the screen-sensitive help for this window class is displayed in the Virtual Viewer window with the added test message as its first line. Perform this code sample from the Open dialog in Notepad, for example.

Messages
@msgTestEditComboClass_l
I am a test for the edit combo class.
@@
@msgTestEditComboClass_s
test for edit combo
@@
EndMessages
Void Function ShowScreenSensitiveHelp(string sHelpMsg_L,optional string sHelpMsg_S, int bOmitHotKeyLinks)
If DialogActive ()
            If GetObjectSubtypeCode () == wt_editCombo
                        let sHelpMsg_l = msgTestEditComboClass_l+cscBufferNewLine+cscBufferNewLine+cmsgScreenSensitiveHelp50_L
                        let sHelpMsg_s = msgTestEditComboClass_l+cscBufferNewLine+cscBufferNewLine+cmsgScreenSensitiveHelp50_s
                        ;Call the below function with the added message test at the beginning so that
                        ;the user buffer is populated with the default message after the test message.
                        ;Setting the last parameter to FALSE ensures that the JAWS hotkey links and default message to press Esc to close the Virtual Viewer are honored.
                        ShowScreenSensitiveHelp(sHelpMsg_L,sHelpMsg_S, FALSE)
                        Return
            EndIf
EndIf
ShowScreenSensitiveHelp(sHelpMsg_L,sHelpMsg_S, bOmitHotKeyLinks)
EndFunction

Function: AppFileTopic 

Description 

Activates the corresponding Help application in the Popular Applications section of the jfw.hlp file. To create your own topic, using a Help File creation environment, create an hlp file whose name corresponds with the executable file for your application. Place this file in the help\enu folder in JFW.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the constant for the help topic iD as found in HjHelp.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: BasicLayerHelp 

Description 

Speaks a help message describing available commands in this key layer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Script: EchoLayerHelp 

Description 

Speaks a help message describing available commands in the echo layer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GeneralJAWSHotKeys 

Description 

This function uses GetScriptKeyName to insure that as you remap these keys using Keyboard Manager, they are still reported properly when this function is called.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: GestureContextHelp 

Description 

If the gesture mode is set to Touch Navigation, provides a list of gestures for the current touch element and the actions they perform.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: GestureListHelp 

Description 

Available in all gesture modes, displays a list of gestures available in the currently active gesture mode and the actions they perform.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetCorrespondingHelpFile 

Description 

Useful to review Help information in text about a specific application.

Returns 

Type: String
 Description: the path and fileName for the corresponding JFW Help file.
 

Parameters 

Param 1: 

Type: String
 Description: the name of the application that will serve as the base name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCustomScreenSensitiveHelpForKnownClasses 

Description 

Called by ScreenSensitiveHelpForKnownClasses to retrieve any custom message.

Returns 

Type: string
 Description: The custom screen sensitive help message to be used by the ScreenSensitiveHelpForKnownClasses function.
 

Parameters 

Param 1: 

Type: Int
 Description: The TypeCode used by ScreenSensitiveHelpForKnownClasses.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetCustomTutorMessage 

Description 

Retrieves a custom tutor message to be spoken by SayTutorialHelp. Overwrite this function in applications where you want a custom tutor message to be substituted instead of the usual tutor message. This function is processed after GetFrameTutorMessage and before any of the usual tutor messages are processed.

Returns 

Type: string
 Description: Null if no custom tutor message is to be spoken, otherwise the custom tutor message.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Script: HotKeyHelp 

Description 

JAWS Hot Keys are keystrokes in jaws which we provide. Most of the time, they do not conflict with keystrokes in your applications.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsWinKeyHelp 

Description 

This function decides whether or not WindowKeysHelp makes sense. If you have written WindowKeysHelp, do not use this function to determine whether it makes sense to call it, but use your own code.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: JAWSHotKeys 

Description 

Speaks the JAWS-specific hot keys for dialogs.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: KeyboardHelp 

Description 

When this is On and a key is pressed, the synopsis describing the key will be spoken. If the key is pressed twice quickly, a longer description will be spoken. If a touch gesture is performed, a synopsis describing the gesture is spoken. The touch gesture for this command is available in all gesture modes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: KeyboardHelpHook 

Description 

This hook is set when KeyboardHelp is called. It unhooks itself when KeyboardHelp is called again.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the script.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the Frame.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: NotifyIfContextHelp 

Description 

If the object has a description containing help text, prompts the user to press Insert+F1. The help text should be placed at the top of the screen-sensitive help message.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: OCRLayerHelp 

Description 

Speaks a help message describing available commands in the convenient OCR layer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: SayExtendedHelpHotKey 

Description 

Tells the user how to bring up the Help topic for the running application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ScreenSensitiveHelp 

Description 

Describes the current window or control, what it is used for, and what keystrokes can be used at the current location. Use this command frequently when learning windows.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ScreenSensitiveHelpForColorsDialog 

Description 

Used by ScreenSensitive help for The "Choose an Option" window in JAWS dialogs.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ScreenSensitiveHelpForJAWSDialogs 

Description 

Specific help for the JAWS dialogs.

Returns 

Type: Int
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenSensitiveHelpForJAWSManager 

Description 

Provides screen sensitive help for the JAWS managers.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenSensitiveHelpForJAWSOptionsDialog 

Description 

Provides screen sensitive help for the JAWS Options dialog.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: ScreenSensitiveHelpForKnownClasses 

Description 

Information on the standard window class, such as the name, what it is used for, and what keys to use.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The TypeCode of the window
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenSensitiveHelpForLinksListDialog 

Description 

Provides screen sensitive help for the Links List dialog.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: ScreenSensitiveHelpForPlaceMarkerDialog 

Description 

Provides screen sensitive help for the PlaceMarkers dialogs.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: ScreenSensitiveHelpForRibbons 

Description 

This function provide screen-sensitive help specific to ribbons.

Returns 

Type: int
 Description: True if screen sensitive help was provided for ribbons, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: ScreenSensitiveHelpForSelectVoiceAliasDialog 

Description 

This function provides screen-sensitive help for the SelectVoiceAliases dialog.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: ScreenSensitiveHelpForSysTray 

Description 

Provides screen-sensitive help for system tray.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ScreenSensitiveHelpForUnknownClasses 

Description 

This function checks that the current focus item is valid and announces the control ID and actual window class of the item.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenSensitiveHelpVirtualCursor 

Description 

Known window types need different ScreenSensitiveHelp when the Virtual Cursor is active. Pass the window SubType code for the window to be acted upon as int parameter

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The TypeCode of the window
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ScreenSensitiveHelpWindowList 

Description 

Provides screen-sensitive help for the window list.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ScreenSensitiveHelpWinforms 

Description 

Help for embedded controls in .Net applications and/or controls. Add your code to this function to support additional controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: ShouldNotifyIfContextHelp 

Description 

Used by NotifyIfContextHelp to determines whether a notification message should be spoken.

Returns 

Type: int
 Description: True if a notification message should be spoken when context help exists.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: ShowHelpByID 

Description 

Opens up WinHelp using a specified file and topic ID.

Returns 

Type: Int
 Description: TRUE if the help file was successfully displayed.
 

Parameters 

Param 1: 

Type: String
 Description: The name of a help file. If a complete path is given, then it is used. If only a file name is given, then the default JFW help path is build around it and used.
 Include: Required
 

Param 2: 

Type: Int
 Description: The ID of the help topic.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShowHelpByName 

Description 

Opens up WinHelp using a specified file and index topic.

Returns 

Type: Int
 Description: TRUE if the Help file was successfully displayed.
 

Parameters 

Param 1: 

Type: String
 Description: The name of a help file. If a complete path is given, then it is used. If only a file name is given, then the default JFW help path is build around it and used.
 Include: Required
 

Param 2: 

Type: String
 Description: The index string of the Help topic.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShowScreenSensitiveHelp 

Description 

Use this function if you want to add extra information to the screen-sensitive help message.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The help message.
 Include: Required
 

Param 2: 

Type: string
 Description: Use this parameter if specifying a long and short message for the screen sensitive help.
 Include: Optional
 

Param 3: 

Type: int
 Description: True if hotkey links should be omitted from the message. Hotkey links are usually omitted if more text will be appended to this help text. The default is false, so that hotkey links will be added.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: ShowScreenSensitiveHelpForVirtualRibbon 

Description 

Formats and shows the screen sensitive help message for the virtual ribbons.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If true, formats and shows the help message for the upper ribbon; otherwise, the help message for the lower ribbon is formatted and shown.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: TableLayerHelp 

Description 

Speaks a help message describing available commands in the table layer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Script: WindowKeysHelp 

Description 

Press this keystroke to read Windows shortcut keys, keyboard help, and other information that is important when using Windows without a mouse. This information will be placed in the Virtual Viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: WindowKeysHelpDefault 

Description 

The default or standard Windows Keys help are keys that are usually available from the operating system.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Specifies how the text will be added to the user buffer. The default is assumed to be Text_replaceUserBuffer; the other possible values are
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-8.00

HTML Functions

An HTML function returns information related to an HTML event for HTML applications. JAWS uses this information in order to speak and display it in Braille when an HTML event occurs or when an HTML script is run (that is, when the user presses a key assignment bound to a script).

Some examples of HTML functions include:

HasVirtualEnhancedClipboard

IsEmptyEditFormField

For a complete listing of HTML scripts and functions, see the topics in this category book of the Reference Guide.

Code Sample

The below code sample overwrites HasVirtualEnhancedClipboard in the Notepad.jss script source file from the function in default.jss. The function is set to return FALSE because there are no enhanced clipboard features available in Notepad when the virtual viewer is active. Notepad is not an HTML application. To show the overwritten function at work, the ClipboardChangedEvent function is overwritten to include a test for whether HasVirtualEnhancedClipboard is true or false. If false, when a clipboard event occurs, a beep is heard.

Int Function HasVirtualEnhancedClipboard ()
Return FALSE
EndFunction
Void Function ClipboardChangedEvent ()
If Not HasVirtualEnhancedClipboard ()
            Beep ()
EndIf
ClipboardChangedEvent ()
EndFunction

Script: AdjustHTMLSettings 

Description 

This keystroke displays a dialog box which is similar in nature to the JAWS Verbosity dialog that provided a quick and easy method of changing various HTML Options on the fly in JFW 3.5

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BrailleToggleTableReading 

Description 

Cycle between Current Cell, Current Row and Current Column.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: CreateXMLDomDoc 

Description 

Creates the XMLDomDoc object, sets its async to false and resolveExternal to false.

Returns 

Type: object
 Description: The created XMLDomDoc object.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: CustomPageSummaryReported 

Description 

Speak or shows the custom page summary, based on the user's setting for custom page summary.

Returns 

Type: int
 Description: True if the custom page summary was spoken or shown, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.00 and later

Script: DefineATempPlaceMarker 

Description 

A temporary PlaceMarker will last until the page changes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: DisplayAdvancedElementInfo 

Description 

Starting with the current element, the entire HTML hierarchy is displayed in the Virtual Viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DisplayBasicElementInfo 

Description 

An HTML element can be text, graphics or form controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: DlgAriaLiveRegionFilterText 

Description 

Displays the ARIA Live Region dialog.

Returns 

Type: int
 Description: 1 if the dialog was opened successfully, regardless of the action performed.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: DlgListOfDropTargets 

Description 

Displays a list of possible drop targets for a drag and drop operation on a web page.

Returns 

Type: int
 Description: 1 if the dialog was opened successfully, regardless of the action performed. 0 if there were no drop targets available.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: DlgListOfLandmarks 

Description 

Displays a list of possible landmarks on a web page.

Returns 

Type: int
 Description: 1 if the dialog was opened successfully, regardless of the action performed. 0 if there were no landmarks.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: dlgListOfLinks 

Description 

 

Returns 

Type: int
 Description: True if links exist, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: linkTypeFlags set of flags specifying which kinds of links to include in the list, see hjconst.jsh for values, use 0xff or leave empty to include all links.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: DlgListOfPlaceMarkers 

Description 

PlaceMarkers dialog provides Add,MoveTo,ChangeName,Remove and RemoveAll PlaceMarker capabilities.

Returns 

Type: Int
 Description: TRUE if successful, returns FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: 1 to pop up Add dialog,bypassing PlaceMarkers dialog, 0 to display PlaceMarkers dialog.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: DoFlexibleWebDialog 

Description 

Launches the dialog for flexible web.

Returns 

Type: int
 Description: 0 if the dialog failed to launch successfullly, non-zero otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: DoFlexibleWebDialog 

Description 

The Flexible Web wizard provides a means for modifying how web pages are presented in the virtual cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: EnableFlexibleWeb 

Description 

Enables or disables flexible web.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: On or Off.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: ExitFormsMode 

Description 

After using a web form, press this keystroke to turn off Forms Mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.00 and later

Script: F3Script 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: FlexibleWebGetActiveRulesNumberForSelectedLocation 

Description 

Returns the number of selected rules for the current location, when the Apply Flexible Web rules dialog is active, and the focus is in the Locations tree view.

Returns 

Type: int
 Description: The number of active rules for the selected Location
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: FlexibleWebNumberOfActiveRules 

Description 

This function only returns text if the focus is on the Locations tree view in the Select Rules to Apply Dialog of the Flexible Web Wizard.

Returns 

Type: string
 Description: the human-readable string 'n active' where n is the number of flexible web Active Rules
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: FocusToFirstField 

Description 

Moves to the first input field on the page and speaks it. If no form field is found, reports "Input Field Not Found."

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: FocusToLastField 

Description 

Moves to the last input field on the page and speaks it. If no form field is found, reports "Input Field Not Found." Only available in the Virtual PC Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FocusToNextField 

Description 

Moves to the next form control on the page and speaks it. If no form control is found, reports "No more form fields found." Only available in the Virtual PC Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FocusToPriorField 

Description 

Moves to the previous form control on the page and speaks it. If no form control is found, reports "No prior form fields found." Only available in the Virtual PC Cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCurrentDocumentLength 

Description 

Retrieves the number of characters in the virtual document.

Returns 

Type: int
 Description: The length of the virtual document.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetCurrentHeading 

Description 

Gets the text of the current heading.

Returns 

Type: String
 Description: the text of the heading at the virtual cursor if any.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetCurrentHeadingLevel 

Description 

Gets the level of the current heading.

Returns 

Type: Int
 Description: The heading level (if the cursor is on a heading) or 0 otherwise. The heading level is 1 for h1, ... 6 for h6.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetCurrentRegionName 

Description 

returns the name of the active Aria region

Returns 

Type: string
 Description: The name of the Aria region.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: GetCurrentRegionType 

Description 

returns the type of the active Aria region

Returns 

Type: string
 Description: The type string for the Aria region.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: GetDescribedByText 

Description 

Returns the text of any elements that have a describedBy relationship to the current element.

Returns 

Type: string
 Description: The descriptive text.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: GetDocumentName 

Description 

Retrieves the name of the active document in the virtual buffer.

Returns 

Type: string
 Description: The name of the active document in the virtual buffer.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: GetDocumentPath 

Description 

This allows scripts to obtain the path or URL of the currently active document

Returns 

Type: string
 Description: The path of the current document
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: GetDocumentPercentage 

Description 

This function returns the position of the cursor as a percentage of the entire document.

Returns 

Type: Int
 Description: percentage
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: GetDocumentTitle 

Description 

Retrieves the title of the active html document.

Returns 

Type: string
 Description: The title of the active document from its title tag.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 21 and later

Function: GetDocumentXML 

Description 

This function returns XML for the current virtual document. It obtains well-formed XML from the Dom Server for parsing using the MSXML com object.

Returns 

Type: string
 Description: The XML for the current virtual document.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetDomainName 

Description 

This allows scripts to obtain the domain of the currently active document. Starting with JAWS 17, called on local files it returns the filename without path or extension --e.g. for f:\index.html it returns "index".

Returns 

Type: string
 Description: The domain of the current document
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: GetElementDescription 

Description 

This function returns the current HTML element's parameters and their values as a string suitable for speaking or posting to the Virtual Buffer.

Returns 

Type: String
 Description: Description of element
 

Parameters 

Param 1: 

Type: Int
 Description: the number of ancestors to include in the description, the default is 1.
 Include: Optional
 

Param 2: 

Type: Int
 Description: true if you only want the tag name(s) and not the parameters as well, default is TRUE.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetElementXML 

Description 

This function returns the XML for the element at the virtual cursor. You may also specify the number of ancestors to include.

Returns 

Type: string
 Description: The XML for the element at the virtual cursor.
 

Parameters 

Param 1: 

Type: int
 Description: 0 for current element only, 1 to include parent, 2 for grandparent etc, -1 for all ancestors.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: GetFormFieldIndex 

Description 

This function returns the 1-based index of the current formfield. Note that if the ControlType optional parameter is supplied and specifies a valid WT constant, this function will return the index for that control type only.

Returns 

Type: Int
 Description: the 1-based table index or 0.
 

Parameters 

Param 1: 

Type: int
 Description: one of the WT_ constants to match on or wt_unknown (or 0) for all. This enables a list of specific formfield types to be retrieved. Note this extra param is only available in JAWS 6.0 and higher.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetFSXMLDomDoc 

Description 

Obtains an XML document object for the current HTML document.

Returns 

Type: object
 Description: The XML dom document object.
 

Parameters 

Param 1: 

Type: string
 Description: If specified, this retrieves the XML text which was used for the document. This should only be used for testing purposes, since the string can be quite large.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetFSXMLElementNode 

Description 

Obtains an XML document node for the element with focus in the current HTML document.

Returns 

Type: object
 Description: The XML dom node.
 

Parameters 

Param 1: 

Type: int
 Description: The depth of ancestors to use when retrieving the node. If not specified or 0, retrieves the node at the focus; if 1, retrieves the parent node to the focus, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetHeadingCount 

Description 

Gets the number of headings present on the current Web page at the specified level.

Returns 

Type: Int
 Description: The number of headings present.
 

Parameters 

Param 1: 

Type: Int
 Description: 0 for all headings or 1 through 6 to get the count of levels at that level. These correspond to HTML tags h1 through h6.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetHTMLFrameCount 

Description 

Gets the number of HTML frames present on the current Web page or html document.

Returns 

Type: Int
 Description: The number of frames present.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetHTMLFrameIndex 

Description 

This function returns the 1-based index of the current frame. Note that invisible frames are not counted.

Returns 

Type: Int
 Description: the frame index.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetHTMLFrameName 

Description 

This function returns the name of the current HTML frame. This is either taken from the title or if no title, the name attribute.

Returns 

Type: String
 Description: the name of the frame.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetHTMLFrameNames 

Description 

This function returns a delimited list of visible frames currently rendered in the VPC buffer. Specify the delimiter for the list using the optional string parameter. This is used to ensure that the list of frames presented by the ins+f9 keystroke is consistent with what is in the VPC bbuffer. Note that this function is not used if the VPC cursor is not active.

Returns 

Type: String
 Description: the delimited list of frame names.
 

Parameters 

Param 1: 

Type: String
 Description: The delimiter to use to separate the frame names.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLandmarkCount 

Description 

Retrieves the number of available landmarks on the current web page.

Returns 

Type: int
 Description: The number of available landmarks.
 

Parameters 

Param 1: 

Type: Int
 Description: landmark type to count.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetLineCount 

Description 

This function returns the number of lines in the current virtual document.

Returns 

Type: Int
 Description: the number of lines.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetLinkCount 

Description 

Gets the number of links present on the current Web page.

Returns 

Type: Int
 Description: The number of links present.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetListIndex 

Description 

This function returns the 1-based index of the current list. If the cursor is not within a list, returns 0.

Returns 

Type: Int
 Description: the 1-based list index or 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: GetListOfFormFields 

Description 

This function returns a delimited list of form fields currently rendered in the VPC buffer. Specify the delimiter for the list using the optional string parameter.

Returns 

Type: String
 Description: the delimited list of form fields.
 

Parameters 

Param 1: 

Type: String
 Description: The delimiter to use to separate the form fields
 Include: Optional
 

Param 2: 

Type: int
 Description: one of the WT_ constants to match on or wt_unknown (or 0) for all. This enables a list of specific formfield types to be retrieved. Note this extra param is only available in JAWS 6.0 and higher.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetListOfLists 

Description 

This function returns a delimited list of lists currently rendered in the document. Specify the delimiter for the list using the optional string parameter. This function is used in conjunction with MoveToListByIndex and GetListIndex to facilitate the listing of tables in a ddocument and the ability for the user to select and move directly to any of the tables listed.

Returns 

Type: String
 Description: the delimited list of lists.
 

Parameters 

Param 1: 

Type: String
 Description: The delimiter to use to separate the list information for each list in the list.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 18.00 and later

Function: GetListOfTables 

Description 

This function returns a delimited list of tables currently rendered in the VPC buffer. Specify the delimiter for the list using the optional string parameter. The information for each table will be taken from its caption, Summary, (if no Caption) or text within the table. If the table doesn't have any text then the table entry will be labelled untitled N where N increases from 1 for each untitled table. This function is used in conjunction with MoveToTableByIndex and GetTableIndex to facilitate the listing of tables in a ddocument and the ability for the user to select and move directly to any of the tables listed.

Returns 

Type: String
 Description: the delimited list of tables.
 

Parameters 

Param 1: 

Type: String
 Description: The delimiter to use to separate the table information for each table in the list.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetListOfTags 

Description 

This function returns a delimited list of elements with the specified tag currently rendered in the VPC buffer. Specify the tag and the attributes you wish to be used for information about the tag. If a tag doesn't have any of the attributes in the comma delimited list, the inner text of the tag will be used if possible. Specify the delimiter for the list using the optional string parameter. The information for each table will be taken from its caption, Summary, (if no Caption) or text within the table. If the table doesn't have any text then the table entry will be labelled untitled N where N increases from 1 for each untitled table. This function is used in conjunction with MoveToTableByIndex and GetTableIndex to facilitate the listing of tables in a ddocument and the ability for the user to select and move directly to any of the tables listed.

Returns 

Type: String
 Description: the delimited list of tags.
 

Parameters 

Param 1: 

Type: string
 Description: the UPPERCASE HTML tag to collect.
 Include: Required
 

Param 2: 

Type: string
 Description: a comma delimited list of HTML attributes to look for when gathering information about the tag.
 Include: Required
 

Param 3: 

Type: String
 Description: The delimiter to use to separate the tag information for each tag in the list.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetListOfTagsWithAttribute 

Description 

This function returns a delimited list of elements with the specified tag currently rendered in the VPC buffer. The element must have the supplied attribute. You may optionally also indicate if the tags may be nested or not (which will affect their index). Specify the delimiter for the list using the optional string parameter. This function is used in conjunction with MoveToTagWithAttributeByIndex and related functions. If you specify that you want the value of the attribute included in each list item (see optional param 6), the list's elements will be divided into two parts, the first part is the value of the supplied attribute followed by a colon. The second part is the inner text of the element. For example, in The AOL AIM Triton History Window, this function may be used to obtain information about the messages. The list will look something like |MSGID:text|MSGID:text|...

Returns 

Type: String
 Description: the delimited list of tags.
 

Parameters 

Param 1: 

Type: string
 Description: the UPPERCASE HTML tag to collect (maybe empty if you want all tags with a specific attribute such as any element with an onclick).
 Include: Required
 

Param 2: 

Type: string
 Description: the attribute which each element in the list must have and whose value is optionally included as part of the list items retrieved.
 Include: Required
 

Param 3: 

Type: int
 Description: TRUE to allow nested elements, FALSE to disallow nesting. Default is TRUE
 Include: Optional
 

Param 4: 

Type: String
 Description: The delimiter to use to separate the tag information for each tag in the list.
 Include: Optional
 

Param 5: 

Type: handle
 Description: the handle of the document (may not have focus). If this parameter is not supplied, we assume the document has focus.
 Include: Optional
 

Param 6: 

Type: int
 Description: if TRUE, the value of the attribute will be included in each list item, if FALSE, the value of the attribute will not be included.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: GetNearestLink 

Description 

 

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: LinkTypeFlags specifying which link types you want to find.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetPlaceMarkerCount 

Description 

Returns the number of available PlaceMarkers on the active page. It does not determine whether or not they are valid.

Returns 

Type: Int
 Description: The number of PlaceMarkers found.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetRegionCount 

Description 

Gets the number of regions of the indicated type. If no type is given, then a count of all types of regions is returned.

Returns 

Type: int
 Description: Count of regions of the indicated type or all region types if no type is specified.
 

Parameters 

Param 1: 

Type: Int
 Description: one of the wt_typeCode constants.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: GetStateInfoFromXMLDomNodeAttributes 

Description 

Retrieves text which can be used to speak the state of an XML document node.

Returns 

Type: string
 Description: Text which can be used to speak the state.
 

Parameters 

Param 1: 

Type: object
 Description: The attributes from an XML document node.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetTableIndex 

Description 

This function returns the 1-based index of the current table. Note that invisible tables are not counted. If the cursor is not within a table, returns 0.

Returns 

Type: Int
 Description: the 1-based table index or 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: GetTagIndex 

Description 

This function returns the 1-based index of the current tag. Note that invisible tags are not counted. If the cursor is not within the specified tag, returns 0.

Returns 

Type: Int
 Description: the 1-based tag index or 0.
 

Parameters 

Param 1: 

Type: string
 Description: the tag whose index is required.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: GetTagWithAttributeIndex 

Description 

This function returns the 1-based index of the current tag/attribute supplied, the tag maybe empty in which case the current element or one of its ancestors must have the supplied attribute. Note that invisible tags are not counted. If the cursor is not within the specified tag/attribute, returns 0.

Returns 

Type: Int
 Description: the 1-based tag index or 0.
 

Parameters 

Param 1: 

Type: string
 Description: the tag whose index is required (maybe empty).
 Include: Required
 

Param 2: 

Type: string
 Description: the attribute which must be present.
 Include: Required
 

Param 3: 

Type: int
 Description: whether tag/attribute elements may be nested. This will affect the index so the same value of this parameter must be present for related getTagWithAttributeXX functions for results to be correct.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: GetTextFromXMLDomTextChildNodes 

Description 

Gets the text from any child noes of node type text. While the NodeValue property gets text from descendants, this function only gets the text from its direct children.

Returns 

Type: string
 Description: The text from child text nodes, if any exists.
 

Parameters 

Param 1: 

Type: object
 Description: The XML DOM node whose text is to be obtained.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetXMLDomNodeText 

Description 

Retrieves the text of an XML DOM node.

Returns 

Type: string
 Description: The text of the node.
 

Parameters 

Param 1: 

Type: object
 Description: node whose text is to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetXMLDomNodeTypeAndText 

Description 

Retrieves the text and type string for an XML DOM node.

Returns 

Type: string
 Description: The text of the node, along with the localized type string as the type is recognized by JAWS.
 

Parameters 

Param 1: 

Type: object
 Description: The node whose type and text string is to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: HasVirtualEnhancedClipboard 

Description 

True by default, overwrite this function to return false for apps where the enhanced clipboard features are not available when the virtual cursor is active.

Returns 

Type: int
 Description: True if the enhanced clipboard features are available when the virtual cursor is active, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.00 and later

Function: HTMLButtonTextVerbosityToggle 

Description 

Toggles the verbosity for buttons between title, screen text/label, alt, value and longest.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML button text verbosity item.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLDecrementLinesPerPageItem 

Description 

Decreases the number of lines used when the page up or page down is used in virtual cursor mode.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML decrement lines per page option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLDecrementMaxBlockLength 

Description 

This keystroke is used to decrement the max block length by 10 in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. This keystroke uses a minimum value of 0. If a successful change in the block length would result in a maximum block length of 0 or less, this value is reset to 255.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML decrement max block length.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLDecrementMaxLineLength 

Description 

This keystroke is used to increment the max line length by 10 in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. This keystroke uses a minimum value of 0. If a successful change in the line length would result in a maximum line length of 0 or less, this value is reset to 255.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML decrement max line length.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLFrameIndicationToggle 

Description 

This keystroke is used to toggle the Frame Indication setting in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are Give No indication of Frame Change, Say the name of the frame at the beginning and end of each frame, Say New Frame at the beginning of each frame.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML frame indication option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLGraphicReadingVerbosityToggle 

Description 

Toggles the verbosity for reading HTML Graphics from longest, OnMouseOver, title and alt tag.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Graphics Reading verbosity item.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLIdentifyLinkTypeToggle 

Description 

This keystroke is used to toggle the identification of link type in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are identify link type enabled and nce link only.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML link type.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLIdentifySamePageLinksToggle 

Description 

This keystroke is used to toggle the identification of same page links in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are identify same page links on and identify same page links off.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Same Page Links item.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLIncludeGraphicsToggle 

Description 

This keystroke is used to toggle the graphics verbosity setting in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for Include HTML Graphics are Labeled, None, and All.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Graphics Toggle.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLIncludeImageMapLinksToggle 

Description 

This keystroke is used to toggle the Image Map link verbosity setting in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are never include image map links, include image map links that have labels, include all image map links.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Image Map Level.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLIncludeLinksToggle 

Description 

This keystroke is used to toggle the graphical link verbosity setting in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are never include graphical links, include graphical links that have labels, and include all graphical links.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Links Level.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLIncrementLinesPerPageItem 

Description 

Increases the lines per page that is used when the user uses the page up and page down in virtual cursor mode.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML increment lines per page.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLIncrementMaxBlockLength 

Description 

This keystroke is used to increment the max block length by 10 in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. This keystroke uses a maximum value of 255. If a successful change in the maximum block length would result in a maximum block length of 155, this value is reset to 10.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML increment max block length.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLIncrementMaxLineLength 

Description 

This keystroke is used to decrement the max line length by 10 in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. This keystroke uses a minum value of 0. If a successful change in the line length would result in a maximum line length of 0 or less, this value is reset to 255.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML increment max line length.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: HTMLIndicateBlockQuotes 

Description 

Turns on or off the Block Quotes indication.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLIndicateElementAccessKeys 

Description 

Turns on or off the Element Access Keys indication.

Returns 

Type: String
 Description: description of value to be displayed as value of Indicate Element Access Keys option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLIndicateLists 

Description 

Turns on or off the lists indication.

Returns 

Type: String
 Description: description of value to be displayed as value of Indicate lists option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLScreenFollowsVCursorToggle 

Description 

This keystroke is used to toggle the Frame follows virtual cursor setting in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are will automatically scroll to display the line on which the VCursor is positioned and will not scroll to display the line on which the VCursor is positioned.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Screen Follows Virtual Cursor option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLSkipPastRepeatedTextToggle 

Description 

This keystroke is used to toggle the Skip Past Repeated Text setting in the context of HTML Documents and Web pages. This keystroke is designed to be a part of the HTML Options dialog that is displayed by the script Adjust HTML Settings. The possible values for this JCF option are Virtual Cursor Will Skip Text that was repeated when a new page is loaded and Virtual Cursor Will Not Skip Text that was repeated when a new page is loaded.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Skip Repeated Text option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLTextLinkVerbosityToggle 

Description 

Toggles the verbosity for text links between title, screen text, onMouseOver, longest and custom.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML text link verbosity item.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HTMLToggleFormsModeAutoOff 

Description 

This function toggles the setting of the FormsModeAutoOff feature. When on, Forms mode is switched off whenever a new page is loaded provided you weren't in Forms mode in that IE session previously. Forms mode is also turned off if the page is updated by the server. When this setting is off, Forms Mode is never automatically switched off once it has been turned on Unless you switch to an IE session which previously had it turned off.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Toggle Forms Mode Auto Off
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: HTMLToggleIgnoreInlineFrames 

Description 

This function toggles the inclusion of inline frames in the virtual representation of a web page. Inline frames are often used for advertisements so this function provides a way to turn off unwanted ads which are implemented using inline frames.

Returns 

Type: String
 Description: description of value to be displayed as value of HTML Ignore Inline Frames.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IE4GetFocus 

Description 

Returns the index of the focus object in Internet Explorer in the context of the entire collection of objects in the current document object.

Returns 

Type: Int
 Description: The value indicating the index of the focus object in Internet Explorer.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: IEFind 

Description 

Activates the JAWS Find when the Virtual Cursor is active. Otherwise, passes the keystroke through to the application. Do not assign to CTRL+F in Outlook or other e-mail software that uses CTRL+F as Forward Message.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IEGetCurrentDocument 

Description 

This function returns an object that represents the HTML document in a given browser window. The document object can be used to retrieve information about the document, to examine and modify the HTML elements and text within the document, and to process events. This function obtains the document object of the document in the current window.

Returns 

Type: Object
 Description: An object that represents the HTML document in a given browser window.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IEGetFocus 

Description 

Returns the index of the focus object in Internet Explorer in the context of the entire collection of objects in the current document object

Returns 

Type: Int
 Description: The value indicating the index of the focus object in Internet Explorer.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IEGetUnrestrictedWindow 

Description 

Gets the Internet Explorer window with full read access.

Returns 

Type: Object
 Description: Window with full read access.
 

Parameters 

Param 1: 

Type: object
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IEReformatBody 

Description 

Used to reformat an internet Web page that is composed of many graphics and multiple columns and / or frames. It reformats the Web page by converting to a single column of text. The reformatted Web page contains no graphics. However, if the graphic was related to a hyperlink, that hyperlink is included in the reformatted document. It then displays the reformatted document in the active window.

Returns 

Type: Int
 Description: Returns 1 if the reformatting was successful, returns 0 otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the Internet Explorer_Server Window
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: InList 

Description 

Note this function is currently only implemented to return TRUE in an HTML list.

Returns 

Type: Int
 Description: True if in a list, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: inWebDialog 

Description 

determines if the virtual cursor is within a web dialog. Note that physical focus may or may not be in the dialog since the virtual cursor may roam away from the focus.

Returns 

Type: int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: IsBrowserClassWindowOrDocument 

Description 

Determines if the focus is in a browser window or document where the virtual buffer is supported.

Returns 

Type: int
 Description: True if the focus is in a browser window or document where the virtual buffer is supported, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: IsEmptyEditFormField 

Description 

May be used in applications such as Internet Explorer or FireFox to test if a form field of type edit, multiline edit, or password edit contains text.

Returns 

Type: int
 Description: True if the edit field is empty of text, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: Boolean. Set to true if white space should be considered text and not ignored when determining if the edit form field contains text. This parameter is false by default, so white space will be ignored.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: IsFlexibleWebEnabled 

Description 

Used to test if flexible web is enabled.

Returns 

Type: int
 Description: True if on, false if off.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: IsVirtualCursorOnAnnotationString 

Description 

This function determines if the virtual cursor is on a start or end string of a table, list, region, object, or any text aded by JAWS as an annotation to the virtual buffer.

Returns 

Type: int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: IsVirtualDocumentViewRestricted 

Description 

Determines if the current virtual document has been restricted to a web dialog.

Returns 

Type: int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Script: JumpReturnFromLine 

Description 

Press this keystroke to return to the prior line following a JumpToLine in the Virtual document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.00 and later

Script: JumpTo 

Description 

When in a table, press this keystroke to jump to a cell. Otherwise, press to jump to a line in the document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: JumpToLine 

Description 

Press this keystroke to jump to a line in the Virtual document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: LoadAndParseXML 

Description 

 

Returns 

Type: int
 Description: True if no parse errors occurred, false otherwise.
 

Parameters 

Param 1: 

Type: object
 Description: The XMLDomDoc, which has been created using function CreateXMLDomDoc.
 Include: Required
 

Param 2: 

Type: string
 Description: The XML string.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: MoveToAnyLink 

Description 

Moves to the first, last, next or prior link regardless of whether or not the link has been marked as visited.

Returns 

Type: Int
 Description: true if a link was found, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of s_top, s_bottom, s_next or s_prior defined in hjconst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 19.0 and later

Script: MoveToAnyNextLink 

Description 

Moves to the next link, regardless of whether or not the link has been marked as visited.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Script: MoveToAnyPriorLink 

Description 

Moves to the prior link, regardless of whether or not the link has been marked as visited.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: MoveToControlledTarget 

Description 

If an element on a web page has an aria-controls relationship with another element on the page, this function will cause focus to be moved to that controlled target

Returns 

Type: Int
 Description: TRUE if the focus was moved to the target, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: MoveToControlType 

Description 

This function Moves the cursor to the next, prior, first or last instance of the specified control type.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT or S_PRIOR as defined in hjconst.jsh.
 Include: Required
 

Param 2: 

Type: Int
 Description: One of the WT_ window type constants defined in hjconst.jsh.
 Include: Required
 

Param 3: 

Type: int
 Description: TRUE to set the application focus to this control, FALSE to just move the virtual cursor to it. This parameter is supported in JAWS 10.0 and later.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: MoveToElementOfDifferentType 

Description 

This function will move the virtual cursor to the next or prior element different to the current. Pass in True to move in a reverse direction or nothing or false to move forward.

Returns 

Type: Int
 Description: true if the cursor was moved.
 

Parameters 

Param 1: 

Type: Int
 Description: true to go backward, false or leave blank to go forward.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToElementOfSameType 

Description 

This function will move the virtual cursor to another occurance of the same element. The parameter determines the direction of the move, valid direction constants are listed in hjconst.jsh and include s_top, s_bottom, s_next and s_prior. For example, if you are on the header of a list you can move to the next, prior, first or last list in the document.

Returns 

Type: Int
 Description: true if another element with the same tag was located, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of s_top, s_bottom, s_next or s_prior as defined in hjconst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToFirstArticle 

Description 

this keystroke moves the cursor to the first article on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Script: MoveToFirstBlockQuote 

Description 

this keystroke moves the cursor to the first BlockQuote tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstButton 

Description 

this keystroke moves the cursor to the first button on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstForm 

Description 

this keystroke moves the cursor to the first Form tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstFrame 

Description 

This keystroke moves the virtual cursor to the first frame on the webpage

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstGraphic 

Description 

this keystroke moves the cursor to the first Graphic tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstHeading 

Description 

Moves to the first heading on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToFirstHeadingLevelN 

Description 

Moves to the first heading at the specified level. Use alt+ctrl+1 through 6 to specify the level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToFirstList 

Description 

When the Virtual Cursor is active, it is moved to the first List in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstObject 

Description 

this keystroke moves the cursor to the first Object tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToFirstSameElement 

Description 

When the Virtual Cursor is active, it is moved to the first instance of the type of control where the Virtual Cursor is located.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToFirstTable 

Description 

When the Virtual Cursor is active, it is moved to the first table in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToFirstVisitedLink 

Description 

Visited links are links you have previously activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: MoveToFormField 

Description 

Depending on the value of SearchOption, positions to the first, last, next, or prior form field on the current web page.

Returns 

Type: Int
 Description: TRUE if a form field was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT, or S_PRIOR to move to the first, last, next or prior form field respectively.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToFormFieldByIndex 

Description 

This function moves to a specified form field on a webpage. Specify the 1-based index of the form field to move to. This is primarily used with the GetListOfFormFields function which returns a delimited string containing the prompt, type and text of all formfields.

Returns 

Type: Int
 Description: true if the virtual cursor was moved to a form field, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: of form field.
 Include: Required
 

Param 2: 

Type: int
 Description: one of the WT_ constants to match on or wt_unknown (or 0) for all. This enables a list of specific formfield types to be retrieved. Note this extra param is only available in JAWS 6.0 and higher.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: MoveToFrameByNumber 

Description 

Press control and the number of the frame you wish to move to. For example, press control 1 to move to the first frame on the page, press control 2 to move to the second, etc.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: MoveToHeading 

Description 

Depending on the value of SearchOption, and nLevel, positions to the first, last, next, or prior heading on the current web page.

Returns 

Type: Int
 Description: TRUE if a heading was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT, or S_PRIOR to move to the first, last, next or prior form field respectively.
 Include: Required
 

Param 2: 

Type: Int
 Description: 0 to find any heading, 1 through 6 to find a heading at levels 1 through 6.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MoveToHTMLFrame 

Description 

This function moves to the first, last, next or prior frame in an HTML document depending on the search type parameter. See hjconst.jsh for a list of constants, these constants are prefixed with s_

Returns 

Type: Int
 Description: true if the virtual cursor was moved to a frame, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToHTMLFrameByIndex 

Description 

This function moves to a specified frame on a webpage. Specify the 1-based index of the frame to move to.

Returns 

Type: Int
 Description: true if the virtual cursor was moved to a frame, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: of frame
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToLandmark 

Description 

Depending on the value of SearchOption, positions to the first, last, next, or prior ARIA landmark on the current web page.

Returns 

Type: Int
 Description: TRUE if a landmark was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT, or S_PRIOR to move to the first, last, next or prior landmark respectively.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Script: MoveToLastArticle 

Description 

this keystroke moves the cursor to the last article on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Script: MoveToLastBlockQuote 

Description 

this keystroke moves the cursor to the last BlockQuote tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToLastButton 

Description 

this keystroke moves the cursor to the last button on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToLastForm 

Description 

this keystroke moves the cursor to the last Form tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToLastFrame 

Description 

This keystroke moves the virtual cursor to the last frame on the webpage

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToLastGraphic 

Description 

this keystroke moves the cursor to the last Graphic tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToLastHeading 

Description 

Moves to the last heading on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToLastHeadingLevelN 

Description 

Moves to the last heading at the specified level. Use alt+ctrl+shift+1 through 6 to specify the level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToLastObject 

Description 

this keystroke moves the cursor to the last Object tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToLastSameElement 

Description 

When the Virtual Cursor is active, it is moved to the last instance of the type of control where the Virtual Cursor is located.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToLastTable 

Description 

When the Virtual Cursor is active, it is moved to the last table in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToLastVisitedLink 

Description 

Visited links are links you have previously activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: MoveToList 

Description 

Depending on the value of SearchOption, positions to the first, last, next, or prior list on the current web page.

Returns 

Type: Int
 Description: TRUE if a list was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT, or S_PRIOR to move to the first, last, next or prior list respectively.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToListByIndex 

Description 

This function moves to a specified list in a document. Specify the 1-based index of the list to move to. This is primarily used with the GetListOfLists function which returns a delimited string containing list information for each list currently rendered in the document.

Returns 

Type: Int
 Description: true if the cursor was moved to a list, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: of list
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.00 and later

Script: MoveToMainRegion 

Description 

Moves to the main region on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: MoveToNextAnchor 

Description 

When the Virtual Cursor is active, it is moved to the next Anchor in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextArticle 

Description 

this keystroke moves the cursor to the next article on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Script: MoveToNextBlockQuote 

Description 

this keystroke moves the cursor to the next BlockQuote tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextButton 

Description 

this keystroke moves the cursor to the next button on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToNextCheckbox 

Description 

When the Virtual Cursor is active, it is moved to the next Checkbox form field in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextCombo 

Description 

When the Virtual Cursor is active, it is moved to the next form field that supports selection in the document or web page. Typically, form fields that support selection are combo boxes, list boxes or treeviews, but other types of form fields may also support selection and therefore may be included for this quick navigation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToNextDifferentElement 

Description 

Moves the Virtual Cursor to the next control of a different type than the one currently at the Virtual Cursor position.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToNextDivision 

Description 

When the Virtual Cursor is active, it is moved to the next Division in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToNextEdit 

Description 

When the Virtual Cursor is active, it is moved to the next Edit form field in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextForm 

Description 

this keystroke moves the cursor to the next Form tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextFrame 

Description 

This keystroke moves the virtual cursor to the next frame on the webpage

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextGraphic 

Description 

this keystroke moves the cursor to the next Graphic tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToNextHeading 

Description 

Moves to the next heading on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToNextHeadingLevelFive 

Description 

Moves to the next level 5 heading. Press this keystroke with shift to move to the previous heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToNextHeadingLevelFour 

Description 

Moves to the next level 4 heading. Press this keystroke with shift to move to the previous heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 20 and later

Script: MoveToNextHeadingLevelN 

Description 

Moves to the next html heading at the specified level. Use 1 through 6 to move forward through the headings at the specified level.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: iLevel The specified level.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToNextHeadingLevelOne 

Description 

Moves to the next level 1 heading. Press this keystroke with shift to move to the previous heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 20 and later

Script: MoveToNextHeadingLevelSix 

Description 

Moves to the next level 6 heading. Press this keystroke with shift to move to the previous heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToNextHeadingLevelThree 

Description 

Moves to the next level 3 heading. Press this keystroke with shift to move to the previous heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToNextHeadingLevelTwo 

Description 

Moves to the next level 2 heading. Press this keystroke with shift to move to the previous heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToNextList 

Description 

When the Virtual Cursor is active, it is moved to the next List in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextListItem 

Description 

When the Virtual Cursor is active, it is moved to the next ListItem in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextMailToLink 

Description 

Moves to the next MailTo link on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: MoveToNextNonLinkText 

Description 

Moves to the next block of nonlink text which is larger than 25 characters. You can increase or decrease the amount from 25 in the Web / HTML / PDFs group in Settings Center.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToNextObject 

Description 

this keystroke moves the cursor to the next Object tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToNextOnClickElement 

Description 

JAWS only indicates the presence of the OnClick attribute for HTML elements that are not usually clickable. Press ENTER on the clickable element to perform an action or follow a link.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextOnmouseOverElement 

Description 

Web page authors use OnMouseOvers to display text or images when a visitor moves the mouse pointer over a particular part of the page. After selecting the OnMouseOver element, Control+JAWSKey+Enter CAN BE USED TO access the OnMouseOver options, and JAWS will notify you if a change was detected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextPlaceMarker 

Description 

Moves to the next PlaceMarker and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: MoveToNextRadioButton 

Description 

When the Virtual Cursor is active, it is moved to the next RadioButton form field in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextRegion 

Description 

Moves to the next region on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Script: MoveToNextSameElement 

Description 

When the Virtual Cursor is active, it is moved to the next instance of the type of control where the Virtual Cursor is located.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToNextSeparator 

Description 

When the Virtual Cursor is active, it is moved to the next separator element in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: MoveToNextSpan 

Description 

When the Virtual Cursor is active, it is moved to the next Span element in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextTable 

Description 

When the Virtual Cursor is active, it is moved to the next table in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToNextUnvisitedLink 

Description 

Unvisited links are links you have not previously activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToNextVisitedLink 

Description 

Visited links are links you have previously activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPlaceMarkerN 

Description 

Moves to the nth place marker on the page.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The number of the place marker
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Script: MoveToPreviousHeadingLevelFive 

Description 

Moves to the previous level 5 heading. Press this keystroke without shift to move to the next heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToPreviousHeadingLevelFour 

Description 

Moves to the previous level 4 heading. Press this keystroke without shift to move to the next heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToPreviousHeadingLevelOne 

Description 

Moves to the previous level 1 heading. Press this keystroke without shift to move to the next heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToPreviousHeadingLevelSix 

Description 

Moves to the previous level 6 heading. Press this keystroke without shift to move to the next heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToPreviousHeadingLevelThree 

Description 

Moves to the previous level 3 heading. Press this keystroke without shift to move to the next heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 20 and later

Script: MoveToPreviousHeadingLevelTwo 

Description 

Moves to the previous level 2 heading. Press this keystroke without shift to move to the next heading at the same level.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: MoveToPriorAnchor 

Description 

When the Virtual Cursor is active, it is moved to the prior Anchor in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorArticle 

Description 

this keystroke moves the cursor to the prior article on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Script: MoveToPriorBlockQuote 

Description 

this keystroke moves the cursor to the prior BlockQuote tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorButton 

Description 

this keystroke moves the cursor to the prior button on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorCheckbox 

Description 

When the Virtual Cursor is active, it is moved to the prior Checkbox form field in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorCombo 

Description 

When the Virtual Cursor is active, it is moved to the prior form field that supports selection in the document or web page. Typically, form fields that support selection are combo boxes, list boxes or treeviews, but other types of form fields may also support selection and therefore may be included for this quick navigation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorDifferentElement 

Description 

Moves the Virtual Cursor to the prior control of a different type than the one currently at the Virtual Cursor position.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToPriorDivision 

Description 

When the Virtual Cursor is active, it is moved to the prior Division in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorEdit 

Description 

When the Virtual Cursor is active, it is moved to the prior Edit form field in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorForm 

Description 

this keystroke moves the cursor to the prior Form tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorFrame 

Description 

This keystroke moves the virtual cursor to the prior frame on the webpage

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorGraphic 

Description 

this keystroke moves the cursor to the prior Graphic tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorHeading 

Description 

Moves to the prior heading on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToPriorHeadingLevelN 

Description 

Moves to the prior html heading at the specified level. Use shift+1 through 6 to move backward through the headings at the specified level.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the specified level.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToPriorList 

Description 

When the Virtual Cursor is active, it is moved to the previous List in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorListItem 

Description 

When the Virtual Cursor is active, it is moved to the prior ListItem in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorMailToLink 

Description 

Moves to the prior MailTo link on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: MoveToPriorNonLinkText 

Description 

Moves to the previous block of nonlink text which is larger than 25 characters. You can increase or decrease the amount from 25 in the Web / HTML / PDFs group in Settings Center.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToPriorObject 

Description 

this keystroke moves the cursor to the prior Object tag on the page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorOnClickElement 

Description 

JAWS only indicates the presence of the OnClick attribute for HTML elements that are not usually clickable. Press ENTER on the clickable element to perform an action or follow a link.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorOnMouseOverElement 

Description 

Web page authors use OnMouseOvers to display text or images when a visitor moves the mouse pointer over a particular part of the page. After selecting the OnMouseOver element, Control+JAWSKey+Enter CAN BE USED TO access the OnMouseOver options, and JAWS will notify you if a change was detected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorPlaceMarker 

Description 

Moves to the previous PlaceMarker and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: MoveToPriorRadioButton 

Description 

When the Virtual Cursor is active, it is moved to the prior RadioButton form field in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorRegion 

Description 

Moves to the prior region on an html page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Script: MoveToPriorSameElement 

Description 

When the Virtual Cursor is active, it is moved to the previous instance of the type of control where the Virtual Cursor is located.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToPriorSeparator 

Description 

When the Virtual Cursor is active, it is moved to the prior separator element in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: MoveToPriorSpan 

Description 

When the Virtual Cursor is active, it is moved to the prior Span element in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToPriorTable 

Description 

When the Virtual Cursor is active, it is moved to the previous table in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToPriorUnvisitedLink 

Description 

Unvisited links are links you have not previously activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: MoveToPriorVisitedLink 

Description 

Visited links are links you have previously activated.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: MoveToRegion 

Description 

This function moves the virtual cursor to another occurance of the indicated region type. The first parameter determines the direction of the move, valid direction constants are listed in hjconst.jsh and include s_top, s_bottom, s_next and s_prior. The second parameter (if given) indicates the type of region to move to. If not given, then a region of any type in the indicated direction is located.

Returns 

Type: Int
 Description: true if a region was found, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of s_top, s_bottom, s_next or s_prior as defined in hjconst.jsh.
 Include: Required
 

Param 2: 

Type: Int
 Description: one of the wt_typeCode constants.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: MoveToTable 

Description 

Depending on the value of SearchOption, positions to the first, last, next, or prior table on the current web page.

Returns 

Type: Int
 Description: TRUE if a table was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT, or S_PRIOR to move to the first, last, next or prior table respectively.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MoveToTableByIndex 

Description 

This function moves to a specified table on a webpage. Specify the 1-based index of the table to move to. This is primarily used with the GetListOfTables function which returns a delimited string containing table information for each table currently rendered in the virtual document.

Returns 

Type: Int
 Description: true if the virtual cursor was moved to a table, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: of table
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: MoveToTag 

Description 

This function Moves the cursor to the next, prior, first or last instance of the specified tag. It is primarily useful in HTML documents.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT or S_PRIOR as defined in hjconst.jsh
 Include: Required
 

Param 2: 

Type: String
 Description: the HTML or other textual tag to locate
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: MoveToTagByIndex 

Description 

This function moves to a specified tag on a webpage. Specify the 1-based index of the particular tag to move to. This is primarily used with the GetListOfTags function which returns a delimited string containing tag information for each tag currently rendered in the virtual document.

Returns 

Type: Int
 Description: true if the virtual cursor was moved to a tag, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: index of table
 Include: Required
 

Param 2: 

Type: string
 Description: the tag to move to
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: MoveToTagWithAttribute 

Description 

This function Moves the cursor to the next, prior, first or last instance of the specified element with the specified attribute. It is primarily useful in HTML documents. For example, it maybe used to move to instances of an element with an onclick or onmouseover handler.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

Param 1: 

Type: Int
 Description: one of S_TOP, S_BOTTOM, S_NEXT or S_PRIOR as defined in hjconst.jsh
 Include: Required
 

Param 2: 

Type: String
 Description: the HTML or other textual tag to locate (maybe empty).
 Include: Required
 

Param 3: 

Type: string
 Description: the attribute which must be present in the element, eg "onclick".
 Include: Required
 

Param 4: 

Type: int
 Description: TRUE to find nested instances, FALSE to disallow nested instances.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: MoveToTagWithAttributeByIndex 

Description 

This function moves to a specified tag on a webpage. Specify the 1-based index of the particular tag to move to In order for the index to correctly match elements retrieved with GetListOfTagsWithAttribute, the same attribute and nesting parameter must be supplied. This is primarily used with the GetListOfTagsWithAttribute function which returns a delimited string containing tag information for each tag currently rendered in the virtual document with the specified attribute. The page must have focus for this function to work.

Returns 

Type: Int
 Description: true if the virtual cursor was moved to a tag, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: index of tag relative to collection of tags with specified attribute present.
 Include: Required
 

Param 2: 

Type: string
 Description: the tag to move to
 Include: Required
 

Param 3: 

Type: string
 Description: the attribute which must be present in order to count the tag as being included in the index
 Include: Required
 

Param 4: 

Type: int
 Description: TRUE to allow nesting when determining the instance of the element to move to, must match the value used when obtaining the list of tags with the specified attribute.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: MoveToUnvisitedLink 

Description 

Moves to the first, last, next or prior unvisited link.

Returns 

Type: Int
 Description: true if an unvisited link was found, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of s_top, s_bottom, s_next or s_prior defined in hjconst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MoveToVisitedLink 

Description 

Moves to the first, last, next or prior visited link.

Returns 

Type: Int
 Description: true if a visited link was found, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: one of s_top, s_bottom, s_next or s_prior defined in hjconst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: NavToFlowRelations 

Description 

If an element on a web page has either a FlowTo or FlowFrom IAccessible2 relationship to other elements on the current web page, this function will cause focus to be moved to that related element

Returns 

Type: Int
 Description: TRUE if the focus was moved to the target, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: 0=flowFrom;1=FlowTo
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: NextNonLink 

Description 

Often useful for moving past advertisement text on a Web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PerformActionOnElementWithID 

Description 

This function finds an element in the DOM by its unique ID and performs an action on it such as setFocus, makeVisible or doDefaultAction.

Returns 

Type: int
 Description: TRUE if the element is found and the action applied, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: action setFocus, makeVisible or doDefaultAction, see hjConst.jsh.
 Include: Required
 

Param 2: 

Type: int
 Description: uniqueID must correspond with the fsID attribute of the XML converted from hextToDec. the FSID must be obtained for the current session of the page. It is a dynamically changing value much like a window handle that changes each time the Web page loads. For an example, see the ListWebAppToolbarControls script in SharePointWeb.jss.
 Include: Required
 

Param 3: 

Type: int
 Description: left screen left coordinate.
 Include: Optional
 

Param 4: 

Type: int
 Description: top screen top coordinate.
 Include: Optional
 

Param 5: 

Type: int
 Description: right screen right coordinate.
 Include: Optional
 

Param 6: 

Type: int
 Description: bottom screen bottom coordinate.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: PerformActionOnElementWithTagAndAttribute 

Description 

This function finds an element in the DOM by tag and attrib/value pair and performs an action on it such as setFocus, makeVisible or doDefaultAction.

Returns 

Type: int
 Description: TRUE if the element is found and the action applied, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: action setFocus, makeVisible or doDefaultAction, see hjConst.jsh.
 Include: Required
 

Param 2: 

Type: string
 Description: fsTag must correspond to fsTag attribute of xml, not XML tag.
 Include: Required
 

Param 3: 

Type: string
 Description: attribName an attribute which must be present.
 Include: Required
 

Param 4: 

Type: string
 Description: attribValue the value of the attribute specified in attribName which must match.
 Include: Required
 

Param 5: 

Type: int
 Description: left screen left coordinate.
 Include: Optional
 

Param 6: 

Type: int
 Description: top screen top coordinate.
 Include: Optional
 

Param 7: 

Type: int
 Description: right screen right coordinate.
 Include: Optional
 

Param 8: 

Type: int
 Description: bottom screen bottom coordinate.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: PlaceMarkersEnumerate 

Description 

this function enumerates the placemarkers in a virtual document calling a user supplied callback function for each marker. the callback function is passed the index of the marker, the marker's name and the text at the marker. The text at the marker is optionally marked up if the second parameter to this function is true. The enumeration continues until either all markers have been visited or the callback returns false. Note this is only available in JAWS 5.00.758 or higher.

Returns 

Type: int
 Description: true if the enumeration visited all markers, false if the enumeration failed or the callback returned false for any marker.
 

Parameters 

Param 1: 

Type: string
 Description: the name of the function to be called for each marker. The function must be defined as func(int nIndex, string sMarkerName, sMarkerText), where func maybe any legal function name.
 Include: Required
 

Param 2: 

Type: int
 Description: must be set to true if the text at the marker is to be passed with markup, false for no markup.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: PriorNonLink 

Description 

Often useful for moving back past advertisement text on a Web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: QuickKeyNavigationModeActive 

Description 

Determines if the Quick Key Navigation mode is on or off.

Returns 

Type: Int
 Description: TRUE if on, false otherwise
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayNextRow 

Description 

Moves the Virtual Cursor to the next row in the table and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayPriorRow 

Description 

Moves the Virtual Cursor to the previous row in the table and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectAFormField 

Description 

This keystroke lists all the formfields on the current page and allows the user to move to the selected field.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: SelectAHeading 

Description 

Displays a dialog containing a list of the html headings on the page. You can select a heading from the list and move to it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: SelectALink 

Description 

Displays a dialog containing a list of the links on an html page. You can move to or click on the links in the list.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SelectAPlaceMarker 

Description 

Opens the PlaceMarkers List dialog where you can add, change, remove and go to PlaceMarkers.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: SelectHierarchicalElement 

Description 

this function selects the text contained in an HTML element. For example, if you are on the table introduction (table with x columns and y rows) and you call this function then the entire table will be selected. If however you are in a table cell then just the table cell will be selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectHTMLElement 

Description 

This keystroke will select the contents of the current element in the virtual cursor. For example, you can select an entire table by moving the Virtual Cursor to the start of the table, for instance, the line which says "Table with x columns and y rows" and press This keystroke. If you were just in a table cell, then only that cell would be selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectTextBetweenMarkedPlaceAndCurrentPosition 

Description 

This command selects text between the temporary Placemarker and current virtual cursor location. You may then use Control+c to copy the selected text to the clipboard.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: SetQuickKeyNavigationMode 

Description 

The Quick Key Navigation mode is linked to the Virtual Cursor automatically however it may be manually turned on in other applications which don't use the Virtual cursor. Applications which use this mode must have overriding scripts to handle the movement and reading functions supported by this mode. this mode is linked to the JCF option OPT_QUICK_KEY_NAVIGATION_MODE so turning it on manually when the jcf option is set to 0 will have no effect.

Returns 

Type: Int
 Description: true if the mode was enabled or false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: true to turn the mode on, false to turn it off.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetVPCApplicationMode 

Description 

By default, this support is always enabled, that is, if the application requests application mode then the current document will be presented in PCCursor mode only. If however the user wishes to override the application's setting of this mode, they can pass FALSE to this function to ignore the mode and still view the document as a virtual representation.

Returns 

Type: int
 Description: TRUE or FALSE, the new state as requested by the caller.
 

Parameters 

Param 1: 

Type: int
 Description: TRUE or FALSE, TRUE to honor this mode if requested by the application or FALSE to ignore it even if requested.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: ShiftF3Script 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: SmartNavToggle 

Description 

Toggles between normal web navigation and Smart Web Navigation. This toggle is temporary, so if you Alt + Tab to another window and back the original setting is restored. To set the setting permanently, change it in QuickSettings or Settings Center.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: SpeakPlaceMarkerByIndex 

Description 

This functionspeaks the text at the nth placemarker and optionally moves the cursor to the placemarker.

Returns 

Type: Int
 Description: True or False, depending if the nth placemarker was found.
 

Parameters 

Param 1: 

Type: Int
 Description: the 1-based index of the place marker to speak and optionally move to.
 Include: Required
 

Param 2: 

Type: Int
 Description: True if the cursor should be reloacated to the placemarker, False to speak but not move to the placemarker.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: SpeakPlaceMarkerN 

Description 

Speaks the text at the nth place marker on the page.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The number of the place marker
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: SpeakPlaceMarkers 

Description 

This script speaks the name and text of each placemarker in the current virtual document. If its keystroke is pressed twice quickly, this information will be displayed in the virtual viewer. The user may then navigate the important information from the original document in a summarized view. The user may press Enter on the name of any of the placemarkers in this virtual view and they'll be positioned on the text of that placemarker in the real document. Note it is only available in JAWS 5.00.772 or higher

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: StepOutOfCurrentElement 

Description 

This function moves to the beginning or end of the ancestor element, effectively stepping out of the element or moving up one level in the element hierarchy. This can be used for stepping out of a nested list either to the beginning or end of the nested list. Repeated calls will keep stepping out of the element at that level until you reach the top level body. The single parameter specifies whether you are moved to the end or beginning of the element. A second optional parameter allows you to specify how many levels you are stepped out. The default is 0 which means the function will determine the appropriate number of levels for the current element.

Returns 

Type: Int
 Description: true if the function relocated the virtual cursor, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: true to move to the end or false to move to the beginning.
 Include: Required
 

Param 2: 

Type: Int
 Description: how many levels to step out. Use a value of 0 to force the function to automatically determine the appropriate number of levels to step out. For example, if you are in a table cell and you want to step out of the table then nLevels should be at least 2 because the first level will only refer to the row containing the cell element.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: StepToEndOfElement 

Description 

Moves forward and up one level in the element hierarchy. This means you will be taken to the end of the current table, list, or nested list. From there you will be taken to the next level up.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: StepToStartOfElement 

Description 

Moves backward and up one level in the element hierarchy. This means you will be taken to the beginning of the current table, list, or nested list. From there you will be taken to the next level up.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ToggleExpandAbbreviations 

Description 

This function toggles the expansion of abbreviations on web pages (using the abbr tag) on and off.

Returns 

Type: String
 Description: description of value to be displayed as value of Expand abbreviations.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ToggleExpandAcronyms 

Description 

This function toggles the expansion of acronyms on web pages (using the acronym tag) on and off.

Returns 

Type: String
 Description: description of value to be displayed as value of Expand acronyms.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ToggleUseVirtualInfoInFormsMode 

Description 

This function toggles the use of information from the Virtual Document when in Forms Mode. There are times when the Virtual Document and real document get out of synchronization due to errors in the HTML which will cause erroneous information in Forms Mode when this setting is enabled. If the HTML is correct however, this setting will ensure that prompts spoken for controls in Forms Mode will be identical to the prompts spoken in Virtual Mode.

Returns 

Type: String
 Description: description of value to be displayed as value of Use Virtual info for Forms Mode Labels.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: TurnOffFormsMode 

Description 

Allows turning off forms mode silently by specifying FormsModeEventSpeechSilent as the value of the optional parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If set to FormsModeEventSpeechSilent, FormsModeEvent will not announce that forms mode is being turned off.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Function: TurnOnFormsMode 

Description 

Allows turning on forms mode silently by specifying FormsModeEventSpeechSilent as the value of the optional parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If set to FormsModeEventSpeechSilent, FormsModeEvent will not announce that forms mode is being turned on.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Script: VirtualDialogRestrictionToggle 

Description 

Web dialogs now restrict the virtual cursor to the dialog. To unrestrict it and read outside the dialog with the virtual cursor, press this keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: VirtualHTMLFeatures 

Description 

This list contains features you can use when viewing web pages or reading other html documents such as the JAWS Help system.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

JAWS Program Functions

A JAWS Program function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of JAWS Program, such as the script for ShutDownJAWS, for example. However, the focus of the present discussion is on functions related to JAWS Program that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of JAWS Program functions include:

·         FindJAWSPersonalizedSettingsFile

·         GetJAWSDirectory

·         GetJAWSMode

·         GetJAWSUserName

For a complete listing of JAWS Program functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the current JAWS user name and serial number, along with the current JAWS mode, and speaks and flashes the information in Braille. It only provides information, however, if the JAWS mode is running in the system tray or as a full JAWS window. If the JAWS mode cannot be determined, the script does not test or provide an error, although it could if you prefer.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Messages
@msgTray
running in the system tray
@@
@msgFull
running as a full JAWS window
@@
; For msgMyInfo, %1 is the user name, %2, the serial number, and %3 the JAWS mode.
@msgMyInfo
My user name is %1, my serial number is %2, and my JAWS is %3.
@@
EndMessages
Script MyJAWSInfo ()
Var
            Int iNum,
            Int iMode,
            String sName
iNum = GetJFWSerialNumber ()
sName = GetJAWSUserName ()
iMode = GetJAWSMode ()
If iMode == JAWSMode_Tray
            SayFormattedMessage (ot_user_requested_information,
                        FormatString (msgMyInfo, sName, IntToString (iNum), msgTray))
ElIf iMode == JAWSMode_Full
            SayFormattedMessage (ot_user_requested_information,
                        FormatString (msgMyInfo, sName, IntToString (iNum), msgFull))
EndIf
EndScript

Function: FindJAWSHelpFile 

Description 

Retrieves the full path to the specified JAWS help file. This will depend in part on the current language.

Returns 

Type: String
 Description: Full path to the specified JAWS help file.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired help file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: FindJAWSHomeFile 

Description 

Retrieves the full path to the specified file in the JAWS home directory.

Returns 

Type: String
 Description: Full path to the specified JAWS file.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: FindJAWSPersonalizedSettingsFile 

Description 

Retrieves the full path to the specified JAWS personalized settings file. This will depend in part on the current language; it may also depend on the current logged-in user.

Returns 

Type: String
 Description: Full path to the specified JAWS personalized settings file.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired personalized settings file.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE if the file is to be created in the user's personalized settings directory.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: FindJAWSSettingsFile 

Description 

Retrieves the full path to the specified JAWS settings file. This will depend in part on the current language; it may also depend on the current logged-in user.

Returns 

Type: String
 Description: Full path to the specified JAWS settings file.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired settings file.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE if the file is to be created in the user's settings directory.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: FindJAWSSoundFile 

Description 

Retrieves the full path to the specified JAWS sound file. This will depend in part on the current language; it may also depend on the current logged-in user.

Returns 

Type: String
 Description: Full path to the specified JAWS sound file.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired sound file.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE Optional. if only the user's space is to be searched, FALSE to search both user and shared spaces. Leave this parameter empty (do not include) to specify FALSE.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: FindJAWSUtilityProgram 

Description 

Retrieves the full path to the specified JAWS utility program.

Returns 

Type: String
 Description: Full path to the specified JAWS utility program.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired utility program.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: FindWindowsSystemFile 

Description 

Retrieves the full path to the specified Windows system file.

Returns 

Type: String
 Description: Full path to the specified WIndows system file.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the desired file.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: GetJAWSDirectory 

Description 

Retrieves the full path to the directory in which JAWS is running.

Returns 

Type: String
 Description: The JAWS drive and directory without a trailing \.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJAWSHelpDirectory 

Description 

Retrieves the full path to the JAWS help directory currently in use. This depends on which language is being used.

Returns 

Type: String
 Description: The JAWS drive and help directory without a trailing \.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJAWSMode 

Description 

Determines whether JAWS is running normally, running from the system tray, or running as MagUtil.

Returns 

Type: int
 Description: One of the JAWS modes listed in HJConst.jsh.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: GetJAWSSettingsDirectory 

Description 

Retrieves the full path to the JAWS settings directory currently in use. This depends on which language is being used.

Returns 

Type: String
 Description: The JAWS drive and settings directory without a trailing \.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJAWSUserName 

Description 

If this instance of JAWS is not network aware, then the function returns ""

Returns 

Type: String
 Description: the name of the user currently logged into JAWS.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJFWLang 

Description 

Gets the three letter abbreviation of the JAWS Language that is currently in use. This is the language of the resource DLLs that are loaded by JAWS. This is not necessarily the same as the current speech synthesizer language.

Returns 

Type: String
 Description: Returns a string containing the three letter abbreviation of the JAWS Language that is currently in use.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJFWVersion 

Description 

Used to get the version of the currently running JAWS. Can be used to ensure that a function is only called on versions of JAWS that support it.

Returns 

Type: Int
 Description: An integer of the form jjmmbbb where j represents the major version, m represents the minor version, and b represents the build number. For example, the integer 300061 would specify JFW 3.00.61.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetSharedScriptsDirectory 

Description 

Retrieves the full path to where shared scripts reside.

Returns 

Type: String
 Description: The full path without a trailing backslash.
 

Parameters 

Param 1: 

Type: int
 Description: TRUE to include the language code as part of the path, FALSE otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: GetSharedSettingsDirectory 

Description 

Retrieves the full path to the shared settings directory currently in use. This depends on which language is being used.

Returns 

Type: String
 Description: The shared drive and settings directory without a trailing \.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: GetUserSettingsDirectory 

Description 

Retrieves the full path to the user settings directory currently in use. This depends on which language is being used.

Returns 

Type: String
 Description: The user drive and settings directory without a trailing \.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: IsJFWInstall 

Description 

Checks to see if JFW is running in Installation mode (with the /install flag).

Returns 

Type: Int
 Description: TRUE if in install mode, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsOBUtil 

Description 

Determines whether the script context pertains to OpenBook's OBUtil. It can be used in an If...Then...Else...statement for verification.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: IsUnicodeJAWS 

Description 

This function determines if the build of JAWS is Unicode or ANSI.

Returns 

Type: int
 Description: TRUE if JAWS is a Unicode build, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Script: JAWSMemDmp 

Description 

Exits JAWS With a memory dump. The memory dump can be sent to Freedom Scientific Technical Support to assist in determining the cause of problems with the JAWS application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: JAWSWindow 

Description 

This switches the focus away from the current application and makes JAWS the active application. This is equivalent to choosing JAWS from the Windows taskbar.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSWindow 

Description 

Activates the JAWS window, from anywhere else in Windows, so you can read the online help, change synthesizers, and many other features.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PathAddExtension 

Description 

Adds a file extension to a path string.

Returns 

Type: String
 Description: Path with specified extension appended.
 

Parameters 

Param 1: 

Type: String
 Description: Path to be modified.
 Include: Required
 

Param 2: 

Type: String
 Description: Extension to be appended.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: PathFindExtension 

Description 

Searches a path for an extension.

Returns 

Type: String
 Description: Extension, or empty string ("") if not found.
 

Parameters 

Param 1: 

Type: String
 Description: Path to be searched.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: PathRemoveExtension 

Description 

Removes the file extension from a path, if there is one.

Returns 

Type: String
 Description: Path with extension removed.
 

Parameters 

Param 1: 

Type: String
 Description: Path to be modified.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: PathRenameExtension 

Description 

Replaces the extension of a file name with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.

Returns 

Type: String
 Description: Path with specified extension appended.
 

Parameters 

Param 1: 

Type: String
 Description: Path to be modified.
 Include: Required
 

Param 2: 

Type: String
 Description: Replacement extension.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: ShutDownJAWS 

Description 

Closes or quits the JAWS application. The JAWS user is automatically prompted to confirm the intention to terminate JAWS before speech stops.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ShutDownJAWS 

Description 

Exits and unloads JAWS from memory. JAWS cannot speak after it is unloaded

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Keyboard Functions

A Keyboard function returns information about the keyboard in use, what keys are pressed, the state of keys being pressed, etc. JAWS uses this information to determine what to speak and display in Braille, for comparison purposes, and so on.

 

Many scripts that ship with JAWS fall into the Keyboard category. However, the present topic focuses on functions related to the keyboard since scripts are typically bound to key assignments.

Some examples of Keyboard functions include:

·         KeyIsSpaceBar

·         IsKeyWaiting

·         GetKeyState

·         GetLastKeyPressTime

·         PassKeyThrough

·         TypeKey

For a complete listing of Keyboard functions, see the topics in this category book of the Reference Guide.

In the early days of the Freedom Scientific Scripting language, it was commonplace to use braces to surround intentional key presses to be performed as part of a script or function. This has not been standard practice for many years. It is discouraged because there are functions available to facilitate typing keys within a script or function that are much more reliable and avoid hard coding.

Code Sample

Some people have a difficult time pressing more than two keystrokes simultaneously. In the below code sample, the script passes the CONTROL+A key combination to the TypeKey function in order to select all the text in the document if there is no selected text.

Script MyKeyboardFunctionTest ()
If GetWindowClass (GetFocus ()) == cwc_edit
&& ! DialogActive ()
            If GetSelectedText () == cscNull ; There is no selected text.
                        TypeKey (cksSelectAll,1) ; CTRL+A from the PC keyboard
                        PerformScript SaySelectedText ()
            EndIf
EndIf
EndScript

Script: AltLeftMouseClick 

Description 

Unselects all previously selected items. Sends an ALT+LEFT MOUSE BUTTON to the system.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: BackspaceMSDos 

Description 

Performs the Backspace function, speaking the prior character, for MS-Dos windows. Acts as a helper function to the JAWSBackspace script.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: BXBuildFKeyModifyer 

Description 

The dot combination is used determines what modifyers will be applied to the function key. The key which follows must be "a" through "l", to perform F1 through F12. To indicate a simple function key, use Dots 1+8 chord. Add any of the following dot to the chord to add the coresponding modifyer: 2=Insert, 3=Control, 7=Shift, 4=Windows, 5=JAWSKey, 6=Alt.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Script: BXBuildModifyer 

Description 

The dot combination is used determines what modifyers will be applied to the next key pressed. All modifyers will include the Dot8 chord, and must include any combination of the following dots to form the modifyer: 2=Insert, 3=Control, 7=Shift, 4=Windows, 5=JAWSKey, 6=Alt.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: CancelLayeredKeySequence 

Description 

Cancels any currently active key layer for both braille and QWERTY keyboards.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Script: ControlBackSpace 

Description 

Not all applications support the CTRL+BACKSPACE.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ControlDownArrow 

Description 

This keystroke depends on the application and the current item: in some edit windows it moves to the next paragraph, in some list boxes or list views it moves the focus down without removing the selection in order to select non-contiguous items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ControlDownArrowPCCursor 

Description 

This function depends on the application and the current item: in some edit windows it moves to the next paragraph, in some list boxes or list views it moves the focus down without removing the selection in order to select non-contiguous items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: ControlEnter 

Description 

This script passes control enter directly to the application so that the application can perform the associated action. For example, when you press this keystroke within Firefox on a link, it creates a tab for the link in Firefox.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: ControlEnterKey 

Description 

Passes the ControlEnter key through to the application. If the virtual cursor is active and on an element with an OnMouseOver handler then the OnMouseOver handler is activated for that element.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ControlShiftEnter 

Description 

This script passes CTRL+SHIFT+ENTER directly to the application so that the application can perform the associated action. For example, when you press this keystroke on a link in Internet Explorer, it creates a tab for the link.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: ControlShiftEnterKey 

Description 

Passes the Control Shift Enter key through to the application. If the virtual cursor is active and on an element then the focus is set on that element and Control+Shift+Enter key is passed to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: ControlUpArrow 

Description 

This function depends on the application and the current item: in some edit windows it moves to the prior paragraph, in some list boxes or list views it moves the focus up without removing the selection in order to select non-contiguous items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ControlUpArrowPCCursor 

Description 

This function depends on the application and the current item: in some edit windows it moves to the prior paragraph, in some list boxes or list views it moves the focus up without removing the selection in order to select non-contiguous items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: Delete 

Description 

Deletes the item at the caret or focus, then says the next character or item gaining focus. The result is controlled by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: DoBXModifiedKey 

Description 

If the qwerty key is mapped to a script, performs the script; otherwise, sends the qwerty key to the application.

Returns 

Type: Int
 Description: true if the modified BX key could be successfully simulated into a qwerty key, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The BX key to be modified.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.10 and later

Function: DoCloseListBoxKeyStroke 

Description 

Types the key to close a listbox. Overwrite in applications where the keystroke varies from the norm.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Script: DoNativeKey 

Description 

Speaks the key according to verbosity option, and pass the key through to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: DoOpenListBoxKeyStroke 

Description 

Types the key to open a listbox. Overwrite in applications where the keystroke varies from the norm.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Script: Enter 

Description 

Performs the standard behavior of the enter key unless in Internet Explorer where it will activate the highlighted link.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: EnterKey 

Description 

Passes the enter key through to the application. If the Virtual PC cursor is positioned on a link or button, it is activated. If the Virtual PC cursor is on another form control, Forms Mode is activated.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: EscapeKey 

Description 

Passes the ESCAPE key through to the application. If the cursor is in the virtual ribbons, special functionality takes place.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.00 and later

Function: ExitUserBuffer 

Description 

Performs all processing associated with closing the user buffer when the Escape key is pressed.

Returns 

Type: int
 Description: True if the user buffer was active and exited, false if the user buffer was not active to exit.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: FindKeyAliasMatch 

Description 

Find the actual key that has the passed in alias.

Returns 

Type: String
 Description: The name of the key that matches the Alias. The returned string is empty if no match is found.
 

Parameters 

Param 1: 

Type: String
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Script: FSReaderFastForward 

Description 

This script fast forwards the current FSReader track by 5 seconds. You can press this keystroke from anywhere on your system to perform this action. If FSReader is not active, then CTRL+PERIOD is passed through to the active application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: FSReaderPlay 

Description 

This script plays or pauses the current FSReader track. You can press this keystroke from anywhere on your system to perform this action. If FSReader is not active, then CTRL+P is passed through to the active application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: FSReaderRewind 

Description 

This script rewinds the current FSReader track by 5 seconds. You can press this keystroke from anywhere on your system to perform this action. If FSReader is not active, then CTRL+COMMA is passed through to the active application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: GetCharacterInfoForBackSpace 

Description 

used by the Backspace script to retrieve information about a character to be deleted.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: byRef The character to be deleted when backspace is performed.
 Include: Required
 

Param 2: 

Type: int
 Description: byRef True if the character to be deleted contains markup.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: GetKeyState 

Description 

Returns by reference both the up/down state of the key, and the toggle state if applicable. NumLock, ScrollLock, and CapsLock have toggle states.

Returns 

Type: Int
 Description: TRUE if the keystate was successfully returned.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the key whose state is to be retrieved. A list of key names is referenced in keycodes.ini.
 Include: Required
 

Param 2: 

Type: Int
 Description: Set to true if the key is in a down state.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: Int
 Description: Set to true if the toggle state is on. For example, if CapLock is in the on state, then this value will be true.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLastKeyPressTime 

Description 

Returns the tick count of the last keyboard event. This function can be used in conjunction with GetLastMouseMovementTime in cases in which it is necessary to know whether a mouse event or a keyboard event occurred more recently.

Returns 

Type: int
 Description: Returns the tick count of the last keyboard event.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: GetReservedKeystrokes 

Description 

Returns the keystrokes reserved by the currently active web application. This delimited string consists of key;item pairs, where key is the keystroke and item is its action as described by the web application. For example, key;item\n.

Returns 

Type: String
 Description: A delimited string containing the keystrokes reserved by the currently active web application in the format keystroke;action\n.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: GetTextInfoForControlBackSpace 

Description 

used by the ControlBackspace script to retrieve information about the text to be deleted.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: byRef The text to be deleted when ControlBackspace is performed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: IsKeyboardAttached 

Description 

Determines if a keyboard is attached.

Returns 

Type: int
 Description: True if a keyboard is attached to the device, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: IsKeystrokeReservedByApp 

Description 

Determines if the supplied keystroke has been reserved by the currently active web application. The keystroke is a single letter or shift+letter combination.

Returns 

Type: int
 Description: TRUE if the supplied keystroke is reserved by the currently active web application, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The string name for the key to be checked, usually a single letter or the text "shift+" followed by the letter.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: IsKeyWaiting 

Description 

Indicates if there are other keys in the buffer that need to be processed.

Returns 

Type: Int
 Description: Returns TRUE if there is a key waiting to be processed, otherwise, returns FALSE.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IsLastKeyRepeating 

Description 

This function is useful if you need to avoid running a script until the last key has actually been released . This is particularly important if the script calls into an application's object model and thus would take a long time to complete., slowing response time down.

Returns 

Type: Int
 Description: True the keystroke has repeated, false means it has not repeated.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: IsSameKey 

Description 

Physical keys on the keyboard can have more than one name or alias. This function determines whether two key names are referring to the same physical key.

Returns 

Type: Int
 Description: TRUE if both keys refer to the same physical key.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the first key.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the second key.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSBackspace 

Description 

BACKSPACE (or delete), says the character or item to the left that has just been deleted. The result is controlled by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSDelete 

Description 

Deletes the item at the caret or focus, then says the next character or item gaining focus. The result is controlled by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSKey 

Description 

If the JAWS Key is the Caps Lock or Scroll Lock key, pressing twice quickly will indicate the new state.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: KeyboardManager 

Description 

Used to assign keystrokes to scripts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: KeyIsSpaceBar 

Description 

Determines if the key passed to it is or represents the SpaceBar key.

Returns 

Type: int
 Description: True if the key is or represents the SpaceBar key, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric keycode.
 Include: Required
 

Param 2: 

Type: String
 Description: the name as it would be used in a keymap.
 Include: Required
 

Param 3: 

Type: Int
 Description: 1 if this was a key on the Braille Display.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: LoadKeymapSection 

Description 

Loads a key map section from the key map file. The key map remains loaded until it is unloaded by calling UnloadKeymapSection, or until the configuration changes--whichever happens first.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: string
 Description: The name of the key map section to load. The name must match a section in the JKM file, excluding the trailing portion of the section name that specifies the section as a key map. For example, "Custom" specifies the key map section called "[Custom Keys]" in the JKM file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: LockKeyboard 

Description 

This keystroke locks the keyboard and only allows informational keystrokes to b used. The screen may be navigated using the invisible or braille cursors, but application navigation may not occur.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: LookupBXKeyNames 

Description 

looks up the qwerty name for the BX dot pattern string.

Returns 

Type: string
 Description: If a match was found, returns the qwerty name; otherwise, returns null
 

Parameters 

Param 1: 

Type: string
 Description: The BX key name after being stripped of its prefix.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.10 and later

Script: OnMouseOver 

Description 

Many elements contain more options available by moving the mouse over the element or with the press of the control enter keystroke. Press this keystroke to access these OnMouseOver options.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: PassKeyThrough 

Description 

Passes a keystroke on to the active application program without activating a JAWS script. This function is used when a JAWS script key and an application keyboard command are the same. It prevents JAWS from intercepting a keystroke so that the application program can respond.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: PassKeyThrough 

Description 

JAWS will not use or process the following key, it will be sent directly to the application, as if JAWS were not loaded. This is very useful if you have a key conflict.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: PausePACMateRemote 

Description 

While controlling a desktop session using a PAC Mate Remote session, use PausePACMateRemote to allow access to the PAC Mate without closing the active sync connection.

Returns 

Type: int
 Description: TRUE if in a PAC Mate Remote session and the session is paused.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Script: PausePACMateRemote 

Description 

If the user is in a PACMate remote session and it is successfully paused, the PACMate will speak appropriate text there.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: PlayKeys 

Description 

This function simulates the key sequence previously created by calls to PressKey and ReleaseKey. This allows for complex sequences of keystrokes to be executed by JAWS.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 20 and later

Function: PressKey 

Description 

Simulates pressing a key down on the keyboard. This function should be paired with calls to ReleaseKey. Once a sequence of PressKey and ReleaseKey calls is complete, call PlayKeys to have JAWS simulate the entire key sequence.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: A string value for the key name, these can include alt, control and shift.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: QuickNavigationKeysSuspendOrResume 

Description 

Temporarily suspend or resume from suspending the use of Navigation Quick Keys. If suspended, the setting automatically resumes when a new application or document loads. They will not automatically resume when you switch tabs in your browser, as some web applications simultaneously use multiple tabs.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: ReleaseKey 

Description 

Simulates releasing a previously pressed key on the keyboard. This function should be proceeded with a call to PressKey. Once a sequence of PressKey and ReleaseKey calls is complete, call PlayKeys to have JAWS simulate the entire key sequence.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: A string value for the key name, these can include alt, control and shift.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Function: ResetKeyboard 

Description 

When a sequence of PressKey and ReleaseKey calls have been made this function allows the queue of keys to be cleared without executing the key sequence.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Script: ScrollLockKey 

Description 

Pressing twice quickly will change the state of the ScrollLock key and speak the new state.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: SendApplicationKey 

Description 

Context menu key. The same as pressing the applications key or shift+f10 on the PC keyboard.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: SetTypingEcho 

Description 

The four available choices for Typing Echo are characters, words, both characters and words, or none.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetTypingEchoLanguage 

Description 

This function allows the user to change the language JAWS uses for typing echo. If a valid language abbreviation is supplied, that language will be used (if supported by the Synthesiser in use) otherwise the global language will be used. Note this is only available in JAWS 5.0 International (v 5.00.709 or higher).

Returns 

Type: int
 Description: True if we were able to switch the typing echo language, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: any language code for which a language alias is defined for the current synth or a language string understood by the current synth. Note this function only supports aliases which map to an actual language switch (rather than a voice switch).
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Script: ShiftEnter 

Description 

Send a Shift+Enter key sequence to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: ShiftEnterKey 

Description 

Passes the SHIFT+ENTER key through to the application. If the Virtual PC cursor is active and on a link then the link is opened in a new browser window.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ShiftTab 

Description 

Performs the standard behavior of the shift tab keystroke unless in InternetExplorer where it will move to the previous link or control in the tab order

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShiftTabKey 

Description 

The SHIFT+TAB keystroke is passed to the application. If the Virtual PC cursor is active, it is moved to the previous link or control in the tab order.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SimulateKey 

Description 

If the key name is attached to a script, performs the script; otherwise, sends the key to the application.

Returns 

Type: int
 Description: if the key simulation was successful, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: the key name to be performed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: StripBXKeyNamePrefix 

Description 

Strips "braille " or "braille Dot" from the start of a BX key name

Returns 

Type: String
 Description: the stripped BX key name
 

Parameters 

Param 1: 

Type: string
 Description: the BX key name
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Script: SwitchInputLanguage 

Description 

In Control Panel's Regional and Language Options, one can add additional input languages. Typically, ALT+SHIFT is the keystroke used to switch between multiple language inputs. This keystroke speaks the new layout.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: Tab 

Description 

Performs the standard behavior of the tab key unless in InternetExplorer where it will move to the next link or control in the tab order

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TabKey 

Description 

The TAB key is passed to the application. If the Virtual PC cursor is active, it is moved to the next link or control in the tab order.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ToggleCapsLock 

Description 

Toggles and announces the state of the CAPS LOCK key when it is not being used as a JAWSKey.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: ToggleTypingEcho 

Description 

When the MAGic mouse echo option is turned off, the previous option is saved and restored on next toggle.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.1 and later

Function: TrapKeys 

Description 

Turns Trap key mode On or Off. When Trap Key mode is on, any keys not attached to scripts are simply ignored and not passed on to the current application. The primary use for this feature is in the Keyboard Help, where keys not attached to scripts should be ignored.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: TRUE to enable trapping, FALSE to disable it.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE to enable trapping of keystrokes used in combination with delayed modifier keys. Set to FALSE, for example, if you want system keys such as Alt to be sent through to the system, even though trap keys is enabled.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TypeKey 

Description 

Simulates a keystroke. Unlike TypeString, TypeKey translates the message constant at runtime.

Returns 

Type: Int
 Description: TRUE if the string is successfully simulated.
 

Parameters 

Param 1: 

Type: string
 Description: A message constant containing a keystroke name. Or, a string variable or constant containing an integer representing a scan code of the key to be typed.
 Include: Required
 

Param 2: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TypingEcho 

Description 

JAWS will echo or speak each character as you type, or just the complete word when you press the space bar, or nothing.

Returns 

Type: String
 Description: description of value to be displayed as value of Typing Echo.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: TypingEchoToggle 

Description 

When the option is turned off, the previous option is saved and restored on next toggle.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: Undo 

Description 

This command is usually found in the Edit menu of the application. Useful when an action had inadvertenly been performed to revert back to the original state.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: UnloadKeymapSection 

Description 

Unloads a key map section from the key map file.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: string
 Description: The name of the key map section to unload. The name must match a section in the JKM file, excluding the trailing portion of the section name that specifies the section as a key map. For example, "Custom" specifies the key map section called "[Custom Keys]" in the JKM file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: UpALevel 

Description 

This keystroke closes menus or exits the ribbons. In dialog boxes, closes the dialog box without saving changes. If Forms Mode is active, exits Forms Mode and returns to the Virtual PC cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: UsingRemotePACMateBX 

Description 

determines if JAWS is running in an remote PAC Mate BX session.

Returns 

Type: int
 Description: TRUE if running in a remote PAC Mate BX session.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.10 and later

Menus Functions

A Menus function provides or returns information about Menu activities, such as activating or deactivating a menu, the current menu mode, a menu's name, etc. JAWS uses this information in order to speak and display it in Braille, for comparison purposes, and so on.

Some examples of Menus functions include:

·         GetMenuMode

·         GetMenuName

·         MenusActive

For a complete listing of Menus functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines whether a menu is active. If not, an error message is spoken and displayed in Braille. If a menu is active, then various tests determine what JAWS should speak when the script is run. For example, a context menu has no menu name, nor does a menu bar. So for those cases, no menu name is indicated when the script is run. Perform the script from the Notepad application, for example, from different windows within the application: from the main edit window, from an active context menu or from a menu like the Files menu.

Messages
@msgNoMenuError
not in a menu
@@
;For msgMenuName, %1 is the name of the active menu.
@msgMenuName
%1 menu
@@
@msgMenuBar
This is a menu bar, not a menu.
@@
@msgNoMenuName
menu name not found
@@
EndMessages
Script MyMenuTest ()
Var
            Int nMenuMode,
            String sMenuName
nMenuMode = GetMenuMode ()
If nMenuMode == Menu_Inactive
            SayMessage (ot_error, msgNoMenuError)
            Return
EndIf
If MenusActive ()
            sMenuName = GetMenuName ()
            If nMenuMode != MenuBar_Active ; a menu is active but not on the menu bar.
            && sMenuName != cscNull ; A menu name is found.
                        SayFormattedMessage (ot_help, FormatString (msgMenuName, sMenuName))
            ElIf nMenuMode == MenuBar_Active
                        SayMessage (ot_help, msgMenuBar)
            ElIf sMenuName == cscNull
                        SayMessage (ot_error, msgNoMenuName)
            EndIf
EndIf
EndScript

Function: ActivateMenuBar 

Description 

Activates or deactivates the Menu bar for the active program. Same as pressing and releasing the ALT key.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ActivateStartMenu 

Description 

Brings up the Start menu in Windows 95/98 or NT. Same as pressing CTRL+ESC.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetMenuMode 

Description 

Gets the mode of a menu, active or inactive.

Returns 

Type: Int
 Description: The Menu mode returned.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetMenuName 

Description 

Gets the name of the active menu.

Returns 

Type: String
 Description: The name of the active menu.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MenuBar 

Description 

After the Menu bar gains focus, the screen is refreshed in order to ensure that it reads properly. This is the same as pressing the ALT key.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MenusActive 

Description 

This determines whether a menu is currently active. It returns a constant value of ACTIVE to indicate a menu is active and a value of INACTIVE to indicate that it is not active. These constants can be used in If...Then...Else...statements.

Returns 

Type: Int
 Description: "ACTIVE" = 1, "INACTIVE" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: StartMenu 

Description 

This keystroke is the same as pressing CTRL+ESC or using one of the Windows Logo keys.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Miscellaneous Functions

A Miscellaneous function is one that does not fit neatly into any of the other categories. JAWS uses information returned by these functions, as with most others, to determine whether or what to speak and display in Braille, for comparison purposes, etc.

 

Many scripts fall into the category of Miscellaneous, such as the script for MinimizeAllApps, for example. However, the focus of the present discussion is on Miscellaneous functions that you may call from your own scripts AND FUNCTIONS, or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Miscellaneous functions include:

IsRTLLanguageProcessorLoaded

ArrayLength

GetVariantType

For a complete listing of Miscellaneous functions, see the topics in the category book of the Reference Guide.

Function: ClearSpeechHistory 

Description 

Clears the Speech History buffer.

Returns 

Type: void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: ClearSpeechHistory 

Description 

Clears the speech history buffer, so that the speech history output will show as empty immediately after the buffer is cleared.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: DecToHex 

Description 

This function converts a decimal integer to a hex string.

Returns 

Type: string
 Description: The hex value
 

Parameters 

Param 1: 

Type: int
 Description: decimal value
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: DisplayShapeOverlapInfo 

Description 

If the selected object is of type WT_SHAPE information about any shapes that overlap the shape are put in the virtual buffer.

Returns 

Type: int
 Description: TRUE if information was placed in the virtual buffer else FALSE.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: DoesSelectedShapeOverlap 

Description 

Checks if selected shape is overlapped by another shape

Returns 

Type: int
 Description: TRUE or FALSE
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Script: FindUrgentConversation 

Description 

Pressing this keystroke from any window moves focus to the conversation requesting attention.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.1 and later

Function: FlagChangedState 

Description 

 

Returns 

Type: int
 Description: True if the source and target are different at the specified flag, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The source flag set
 Include: Required
 

Param 2: 

Type: int
 Description: The target flag set.
 Include: Required
 

Param 3: 

Type: int
 Description: The flag to check for state change
 Include: Required
 

Param 4: 

Type: int
 Description: ByRef If there was a state change at the specified flag, the new state of the flag--On or Off.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: GetCustomLabelFileName 

Description 

This allows scripts used in the process of creating a custom label to obtain the filename for the current document.

Returns 

Type: string
 Description: the filename containing custom labels for this document.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetCustomLabelKey 

Description 

This allows scripts used in the process of creating a custom label to obtain the unique key for the current object. this key is used to map the object to the custom label.

Returns 

Type: string
 Description: the key used to map the object to the custom label.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: GetCustomLabelSectionName 

Description 

This allows scripts used in the process of creating a custom label to obtain the section name for the current document. Typically the section name is just [CustomLabels] but in the case of MSWord, where the labels are stored in a file named after the attached template, the section name may also be [CustomLabels docname.doc] where docname.doc refers to the specific document. thus, MSWord may define template level and document level custom labels.

Returns 

Type: string
 Description: the section name containing custom labels for this document.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetOutputModeName 

Description 

This function retrieves a human friendly output mode name given an output destination. The names can be different for Speech and Braille. For instance, OT_HELP may have a speech name of Help Information while the Braille name might be hlp. this function is used primarily to retrieve an appropriate message to be shown in the Status cells of the Braille Display or prepended to a Flash message for displays with no status cells during the display of a Flash message. This makes it easier to determine where the message is coming from.

Returns 

Type: string
 Description: the human friendly name for the given output mode and destination.
 

Parameters 

Param 1: 

Type: int
 Description: one of the OT constants from hjconst.jsh
 Include: Required
 

Param 2: 

Type: int
 Description: one of the Output Type destinations from hjconst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetSpeechHistory 

Description 

Obtains the Speech History either as plain text or HTML.

Returns 

Type: string
 Description: Either plaintext or HTML of speech history.
 

Parameters 

Param 1: 

Type: int
 Description: true for HTML, false for plain text. The default is to plain text.
 Include: Optional
 

Param 2: 

Type: string
 Description: if requesting HTML, the title of the HTML.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetVariantType 

Description 

Determines the type of a variable. Useful with determining the type of collection members, or variables of type variant.

Returns 

Type: int
 Description: An integer designating the type of variable, see hjConst.jsh for the values of the different variable types.
 

Parameters 

Param 1: 

Type: variant
 Description: The variable whose type you want to get.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: HexToDec 

Description 

This function converts a hexidecimal string to a decimal integer.

Returns 

Type: int
 Description: The decimal value
 

Parameters 

Param 1: 

Type: string
 Description: hexidecimal value
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.10 and later

Function: HighWord 

Description 

retrieves the high-order word from the specified value

Returns 

Type: Int
 Description: The high-order word from the specified value
 

Parameters 

Param 1: 

Type: Int
 Description: Specifies the value to be converted.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: HiWord 

Description 

Obtains the hi-order 16-bits of a number.

Returns 

Type: int
 Description: the high-order 16-bits of the number.
 

Parameters 

Param 1: 

Type: int
 Description: a 32-bit number which for the purposes of this function is always treated as unsigned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: IsRTLLanguageProcessorLoaded 

Description 

Used to detect if a Right to Left aware language processor is loaded.

Returns 

Type: Int
 Description: True if RTL language processor is loaded, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.20 and later

Function: LoWord 

Description 

Obtains the low-order 16-bits of a number.

Returns 

Type: int
 Description: the low-order 16-bits of the number.
 

Parameters 

Param 1: 

Type: int
 Description: a 32-bit number which for the purposes of this function is always treated as unsigned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: LowWord 

Description 

retrieves the low-order word from the specified value

Returns 

Type: Int
 Description: The low-order word from the specified value
 

Parameters 

Param 1: 

Type: Int
 Description: Specifies the value to be converted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: MakeLong 

Description 

creates a LONG value by concatenating the specified values

Returns 

Type: Int
 Description: The return value is a LONG value.
 

Parameters 

Param 1: 

Type: Int
 Description: Specifies the low-order word of the new value.
 Include: Required
 

Param 2: 

Type: Int
 Description: Specifies the high-order word of the new value.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: Max 

Description 

Returns the maximum between two integers. Useful when comparing variables.

Returns 

Type: Int
 Description: the maximum between two integers.
 

Parameters 

Param 1: 

Type: Int
 Description: Type a variable of type int to be compared.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the second variable or integer to be compared.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: Min 

Description 

Returns the minimum between two integers. Useful when comparing variables.

Returns 

Type: Int
 Description: the minimum between two integers.
 

Parameters 

Param 1: 

Type: Int
 Description: Type a variable of type int to be compared.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the second variable or integer to be compared.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MinimizeAllApps 

Description 

Minimizes all windows on the Win95/98 or NT desktop. Same as WINDOWS KEY+M.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MinimizeAllApps 

Description 

Minimizes all application windows, so the Desktop gains the focus and is not obscured by any open windows.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RepeatLastAIMAlert 

Description 

Repeats the last AOL Instant Message alert since JAWS was started

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.1 and later

Script: RepeatLastSkypeNotification 

Description 

Repeats the last background notification from Skype which was spoken by JAWS. This may be an incoming call or a background chat notification.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: RepeatLastYIMAlert 

Description 

Repeats the last Yahoo Instant Messenger alert since JAWS was started.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.1 and later

Script: RepeatMSNSignIn 

Description 

Repeats the most recent contact to sign in to MSN. Press this keystroke twice quickly to enable or disable automatic speaking.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.1 and later

Script: ShowSpeechHistory 

Description 

Shows the most recent speech output in the results viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: SkypeRepeatLastCallInfo 

Description 

Repeats the background notification from the last Skype call or background alert that came in since you started JAWS.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: SwitchToConversation 

Description 

This script switches to the desired conversation window set by the AssignConversation function in Skype and Windows Live Messenger. Zero is automatically assigned to the urgent conversation (Windows Live Messenger only).

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: ID of conversation to switch to.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: VistaWindowsSidebarActivate 

Description 

Passes the keystroke through to the application. In Windows Vista, the state of the Windows Sidebar will be announced. This is the native Windows Vista keystroke to start and stop the Windows Sidebar. The Windows Sidebar contains gadgets for news, weather, and other apps in Windows Vista.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.1 and later

Mouse Functions

A Mouse function provides or returns information about mouse activities, such as whether a mouse click has caused an event to fire. JAWS uses this information to determine whether to speak and display anything in Braille, for comparison purposes, and so on.

Some examples of Mouse functions include:

·         ClickAtPoint

·         DragAndDropClearValues

·         GetButtonLockedNotification

For a complete listing of Mouse functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the GetButtonLockedNotification function is overwritten in the Notepad.jss script source file from the function in default.jss. A nonsense message confirming that the mouse is locked when the left or right button is down is returned along with the default function string when the function is called.

To test the function, lock the mouse from within Notepad by pressing Insert+NumpadSlash for the left mouse button and Insert+NumpadStar for the right mouse button. Then run the script to say the active cursor with the key assignment, ALT+DELETE. The extra message is indicated if the mouse is locked, but not indicated if the mouse is not locked.

Remember! Press the Insert+Slash or Insert+Star again to unlock the mouse button.

String Function GetButtonLockedNotification (Int messageLengthType)
Var
            String sMsg
If IsLeftButtonDown ()
|| IsRightButtonDown ()
            smsg = "The mouse is locked."
            Pause ()
            Return GetButtonLockedNotification (messageLengthType) + sMsg
EndIf
Return GetButtonLockedNotification (messageLengthType)
EndFunction

Function: ActivateOnMouseOver 

Description 

This function Activates the OnMouseOver action at the active cursor. It is used primarily for the virtual cursor. This function was introduced in JAWS 8.0 update1.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.0 and later

Function: AltLeftMouseClick 

Description 

Simulates holding down the ALT key and clicking the left mouse button.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ClearValues 

Description 

Allows you to start over or cancel in defining a frame or dragging an object. If you have moved the cursor, it will remain in its new location. Clears the global variables used when defining frames or in drag and drop.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ClickAtPoint 

Description 

Performs a mouse click at the point with the X and Y coordinates passed in the parameter list.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The X coordinate of the point.
 Include: Required
 

Param 2: 

Type: int
 Description: The Y coordinate of the point.
 Include: Required
 

Param 3: 

Type: int
 Description: true if the JAWS cursor must be used for the click, false otherwise. In most applications, RoutePCToInvisible will click the graphic.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: ControlLeftMouseClick 

Description 

Sends a Control Left Mouse click to the system, useful for selecting non-contiguous items in a list.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ControlLeftMouseClick 

Description 

Performs the same task as control left mouse click. Control left mouse click may be used to select items non-contiguously An a list view, and may have various other uses in different applications.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DoSetUpSourceForDragAndDrop 

Description 

Used by the DragAndDrop script to set the source data. This function is run the first time the DragAndDrop is called, and the second time the script is called the destination is set up and the drag and drop action is attempted.

Returns 

Type: int
 Description: True if the setup for the source point of the drag and drop was performed, false if it has already been setup and the rest of the DragAndDrop script should be performed.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: DragAndDrop 

Description 

The first time this keystroke is pressed, the JAWS cursor must be positioned on the object to be dragged. Next, move the JAWS or PC Cursor to the location where you want to move the object and then press this keystroke again to complete the drag and drop action.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: DragAndDropClearValues 

Description 

Allows you to cancel the drag and drop action by reinitializing the global variables used in this procedure.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DragItemWithMouse 

Description 

The drag-and-drop function is used to move the contents of one area of the screen to another area of the screen.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The X coordinate of the item that is to be moved.
 Include: Required
 

Param 2: 

Type: Int
 Description: The Y coordinate of the item that is to be moved.
 Include: Required
 

Param 3: 

Type: Int
 Description: The X coordinate of the target location for the item.
 Include: Required
 

Param 4: 

Type: Int
 Description: The Y coordinate of the target location for the item.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FocusFollowsMouse 

Description 

Determines if the mouse is in a location where focus will follow the mouse movement.

Returns 

Type: int
 Description: True if mouse is in a location where focus follows it, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: GetButtonLockedNotification 

Description 

Retrieves a message you can use to notify the user that the mouse button is locked.

Returns 

Type: string
 Description: If the left or right mouse button is locked, returns a message stating the button is locked.
 

Parameters 

Param 1: 

Type: int
 Description: One of the constants message_long or messages_short, to retrieve a long or short message.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetDragAndDropCollectionData 

Description 

Fills the source or destination collection with the data used when performing a scripted drag and drop operation.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: collection
 Description: Either the source collection or the destination collection used to hold the data when performing a scripted drag and drop.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetLastMouseMovementTime 

Description 

Returns the tick count of the last mouse movement event. This function can be used in conjunction with GetLastKeyPressTime in cases in which it is necessary to know whether a mouse event or a keyboard event occurred more recently.

Returns 

Type: int
 Description: Returns the tick count of the last mouse movement event.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: IsLeftButtonDown 

Description 

Checks to see if the left mouse button is locked down.

Returns 

Type: Int
 Description: TRUE if left button is locked, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsReadyToDragSourceToTarget 

Description 

Tests if the source and destination are both set and available for the drag and drop operation. If not, an error message is spoken and the funtion returns false.

Returns 

Type: int
 Description: True if the source and destination are both set and ready for the drag and drop operation, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: IsRightButtonDown 

Description 

Checks to see if the right mouse button is locked down.

Returns 

Type: Int
 Description: TRUE if right button is locked, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: LeftMouseButton 

Description 

Used to simulate the clicking of the left button on a mouse. If the function is assigned to a script key and is pressed twice within one second, then this simulates a double click of the mouse button.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: LeftMouseButton 

Description 

Press twice for a double click. The position of the JAWS cursor is the same as the mouse pointer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: LeftMouseButtonLock 

Description 

Attaches the mouse pointer to an object so that the object can be dragged to a new location. This is equivalent to holding down the left mouse button and moving the mouse. The first use of the function attaches the JAWS cursor and the mouse pointer to the object. The object is moved with the arrow keys, and is dropped at the new location by using the function again.

Returns 

Type: Int
 Description: "POINTER_ATTACHED" =1, "POINTER_DETACHED" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: LeftMouseButtonLock 

Description 

Locks the left mouse button down, in order to drag items across the screen. Press it again to unlock it, in order to drop the item.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: MouseDown 

Description 

Moves the Mouse Down by the specified number of pixels.

Returns 

Type: Int
 Description: TRUE if successful, FALSE if already at bottom of screen.
 

Parameters 

Param 1: 

Type: Int
 Description: Number of pixels to move.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MouseDown 

Description 

The number of pixels for mouse movement is determined by the mouse movement variable. The value of the mouse movement variable is set in default JCF. It can be modified by using home row utility scripts. This keystroke is useful for accurately positioning the mouse pointer. The JAWS cursor must be on in order to perform this function. Otherwise, the keystroke is passed on to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MouseLeft 

Description 

Moves the Mouse Left by the specified number of pixels.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Number of pixels to move.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MouseLeft 

Description 

The number of pixels for mouse movement is determined by the mouse movement variable. The value of the mouse movement variable is set in default JCF. It can be modified by using home row utility scripts. This keystroke is useful for accurately positioning the mouse pointer. The JAWS cursor must be on in order to perform this function. Otherwise, the keystroke is passed on to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MouseMovementIncrement 

Description 

This scripting tool increases the number of pixels moved by the mouse. The mouse movement distance is the number of pixels that the mouse moves for the MouseUp, MouseDown, MouseLeft and MouseRight keystrokes.. If the current setting is 1, the new setting will be 50.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MouseRight 

Description 

Moves the Mouse Right by the specified number of pixels.

Returns 

Type: Int
 Description: TRUE if successful, FALSE if already at right of screen.
 

Parameters 

Param 1: 

Type: Int
 Description: Number of pixels to move.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MouseRight 

Description 

The number of pixels for mouse movement is determined by the mouse movement variable. The value of the mouse movement variable is set in default JCF. It can be modified by using home row utility scripts This is useful for accurately positioning the mouse pointer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MouseUp 

Description 

Moves the Mouse Up by the specified number of pixels.

Returns 

Type: Int
 Description: TRUE if successful, FALSE if already at top of screen.
 

Parameters 

Param 1: 

Type: Int
 Description: Number of pixels to move.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MouseUp 

Description 

The number of pixels for mouse movement is determined by the mouse movement variable. The value of the mouse movement variable is set in default JCF. It can be modified by using home row utility scripts This is useful for accurately positioning the mouse pointer. The JAWS cursor must be on in order to perform this function. Otherwise, the keystroke is passed on to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RightMouseButton 

Description 

Used to simulate the clicking of the right button on a mouse. If the function is assigned to a script key and is pressed twice within one second, then this simulates a double click of the mouse button.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RightMouseButton 

Description 

Pressing this keystroke is the same as clicking the right mouse button. Press twice quickly for a double click. The position of the JAWS cursor is the same as the mouse pointer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: RightMouseButtonLock 

Description 

This is equivalent to holding down the right mouse button and moving the mouse. It locks the right button down while other tasks are carried out.

Returns 

Type: Int
 Description: "POINTER_ATTACHED" = 1, "POINTER_DETACHED" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: RightMouseButtonLock 

Description 

Pressing this keystroke is the same as holding down the right mouse button. Press it once to lock the right mouse button down, in order to drag items across the screen. Press it again to unlock it, in order to drop the item.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SayMouseAndANSISettings 

Description 

These settings are the number of pixels in the Mouse Movement variable and what level of ANSI characters are spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: ShiftLeftMouseClick 

Description 

Sends a SHIFT+LEFT Mouse Click to the system, useful for selecting contiguous text or items in a list with the mouse pointer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ShiftLeftMouseClick 

Description 

This keystroke provides a method for selecting items contiguously. An example is selecting items contiguously in a list view or an edit control.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Mouse Speech Functions

A Mouse Speech function provides or returns information about mouse activities. JAWS uses this information to determine whether to speak and display anything in Braille, for comparison purposes, and so on.

Some examples of Mouse Speech functions include:

·         ClearMouseSpeechRect

·         FilterMouseSpeech

·         GetMouseSpeechMode

For a complete listing of Mouse Speech functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the GetMouseSpeechMode function is called from a script to determine whether the user has set MAGic to speak by word or chunk when a mouse action takes place and mouse speech is enabled.

Script MyMouseSpeechTest ()
Var
            Int iMouseSpeechEnabled,
            Int iSpeechMode,
            String sMsgMouseSpeech,
            String sMsgNoMouseSpeech,
            String sWord,
            String sChunk,
            String sMode
sWord = "word"
sChunk = "chunk or line"
iMouseSpeechEnabled = GetJcFOption (OPT_MOUSE_SPEECH_ENABLED)
iSpeechMode = GetMouseSpeechMode () ; word or chunk
sMsgMouseSpeech = "Mouse speech is enabled and is set to %1."
sMsgNoMouseSpeech = "Mouse speech is disabled, but it is set to %1."
; Test for whether mouse speech is set to word or chunk.
If iSpeechMode == IT_CHUNK_COLOR_NA
            sMode = sChunk
Else
            sMode = sWord
EndIf
If iMouseSpeechEnabled
            SayFormattedMessage (ot_status, FormatString (sMsgMouseSpeech, sMode))
Else
            SayFormattedMessage (ot_status, FormatString (sMsgNoMouseSpeech, sMode))
EndIf
EndScript

Function: GetMouseSpeechTextAndRectUsingUIA 

Description 

Retrieves the text and rectangle to be used by the MouseSpeechTimerEvent function for the mouse speech using UIA methods.

Returns 

Type: int
 Description: True if text and a rectangle could be retrieved for the MouseSpeechTimerEvent function.
 

Parameters 

Param 1: 

Type: string
 Description: The app name, if any special UIA code is needed for the application.
 Include: Required
 

Param 2: 

Type: string
 Description: byRef/text The text at the mouse location to be spoken by the mouse speech event.
 Include: Required
 

Param 3: 

Type: int
 Description: byRef/left The left edge of the rectangle to be drawn for the mouse speech.
 Include: Required
 

Param 4: 

Type: int
 Description: byRef/top The top edge of the rectangle to be drawn for the mouse speech.
 Include: Required
 

Param 5: 

Type: int
 Description: byRef/right The right edge of the rectangle to be drawn for the mouse speech.
 Include: Required
 

Param 6: 

Type: int
 Description: byRef/bottom The bottom edge of the rectangle to be drawn for the mouse speech.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 16.0-16.0

Script: SetMouseEchoToCharacter 

Description 

The character setting applies only where applicable, generally in documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Script: SetMouseEchoToLine 

Description 

The line setting applies only where applicable, generally in documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: SetMouseEchoToParagraph 

Description 

The paragraph setting applies only where applicable, generally in documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Script: SetMouseEchoToWord 

Description 

The word setting applies only where applicable, generally in documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: ToggleMouseEchoFromLayer 

Description 

When mouse echo is toggled on, the mouse echo unit setting is not changed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Navigation Functions

A Navigation function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Navigation, such as the script for TopOfFile, for example. However, the focus of the present discussion is on functions related to Navigation that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Incidentally, functions for Braille navigation merit their own category book in the Reference Guide. So functions in the Navigation category book of the Reference Guide refer only to navigation that may affect both speech and Braille or even perhaps mouse movements.

Some examples of Navigation functions include:

·         JAWSTopOfFile

·         JAWSBottomOfFile

·         NextCharacter

·         PriorCharacter

For a complete listing of Navigation functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the NextCharacter and PriorCharacter functions are overwritten in the Notepad.jss script source file from the built-in functions. The overwritten functions speak the character under the cursor phonetically and perform their default actions.

To set up the example, simply type some text in the Notepad document window, and then start moving by character around the text.

It is assumed that the functions are being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Void Function SayPhoneticCharInDoc ()
Var
            String sChar
If GetObjectSubtypeCode () == wt_multiline_edit
            sChar = GetCharacter ()
            If sChar != cscSpace
                        Say (sChar, ot_phonetic_char)
            EndIf
EndIf
EndFunction
Void Function NextCharacter ()
NextCharacter ()
SayPhoneticCharInDoc ()
EndFunction
Void Function PriorCharacter ()
PriorCharacter ()
SayPhoneticCharInDoc ()
EndFunction

Script: BottomOfFile 

Description 

Windows command for moving the cursor to the bottom of the file, if supported by the application. If the active item is an edit box, the caret or focus will move to the end of the open document. Otherwise, moves to the bottom of the current control.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: End 

Description 

Moves to end of line. Generally, the behavior is controlled by Windows or the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: GotoLineNumber 

Description 

this function moves the cursor to the specified line number in a virtual document.

Returns 

Type: Int
 Description: true if the line was successfully moved to, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the line number (starting at 1).
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Script: Home 

Description 

Moves to start of line. Generally, the behavior is controlled by Windows or the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: JAWSBottomOfFile 

Description 

Performs standard behavior of the control+end keystroke combination. In most cases, moves the focus to the bottom of the open file, list or document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: JAWSEnd 

Description 

This performs a special version of the END keyboard command. When the PC cursor is active, the script function performs the home function for the application. When other cursors are active, the cursor moves to the last text character or graphic on the line within either the active application window or active child window (depending on the setting for cursor restriction).

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSEnd 

Description 

If JAWS cursor or invisible cursor are active, will move the cursor to the right edge of the active window. If PC cursor is active the results are dependent on the application for specific controls such as a List box.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSEndPcCursor 

Description 

Same as the JAWSEnd keystroke, but only operates on the PC cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: JAWSHome 

Description 

This performs a special version of the HOME keyboard command. When the PC cursor is active, the script function performs the home function for the application. When other cursors are active, the cursor moves to the first text character or graphics on the line within either the active application window or child window (depending on the setting for cursor restriction).

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSHome 

Description 

If JAWS cursor or invisible cursor are active, will move the cursor to the left edge of the active window. If PC cursor is active, the results are dependent on the application for specific controls such as a List box.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: JAWSHomePcCursor 

Description 

Same as the JAWSHome keystroke, but only operates on the PC cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: JAWSPageDown 

Description 

This performs a special version of the PAGE DOWN keyboard command. When the PC cursor is active, the script function performs the standard Page Down function for the application. When other cursors are active, the cursor moves to the bottom of the active application window or to the bottom of the active child window, depending on the setting for JAWS cursor restriction.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSPageDown 

Description 

Moves the JAWS or Invisible cursor, if active, to the bottom of the active window, does not move left or right. If the PC cursor is active, JAWS sends a PAGE DOWN to the system. The result is controlled by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSPageDownPcCursor 

Description 

Performs the system PageDown command.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.00 and later

Function: JAWSPageUp 

Description 

This performs a special version of the PAGE UP keyboard command. When the PC cursor is active, the script function performs the standard PAGE UP command for the application. When other cursors are active, the cursor moves to the top of the active application window or to the top of the active child window (depending on the setting for JAWS cursor restriction).

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSPageUp 

Description 

Moves the JAWS or Invisible cursor, if active, to the top of the active window, does not move left or right. If the PC cursor is active, JAWS sends a PAGE UP to the system. The result is controlled by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSPageUpPcCursor 

Description 

Performs the system PageUp command.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Function: JAWSTopOfFile 

Description 

Performs standard behavior of the control+home keystroke combination. In most cases, moves the focus to the top of the open file, list or document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: NavigationQuickKeysToggle 

Description 

Toggles Navigation Quick Keys on and off. This setting is temporary, and is lost once the application loses focus. To save the setting permanently, toggle the Navigation Quick Keys setting in QuickSettings. Navigation Quick Keys are single keys on the typing keyboard that do not use control, alt, insert or the MAGicKey. They are available in the virtual cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: NextCharacter 

Description 

This performs a special version of the RIGHT ARROW or Next Character keyboard command. When the PC cursor is active, JAWS allows the application to move the cursor. When other cursors are active, then JAWS tries to move the cursor to the next character or graphic it finds to the right of the current cursor location. To speak the character at the new location, place a SayCharacter function after the NextCharacter function. Note: Once the cursor has moved to the next character, it is not spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: NextChunk 

Description 

This moves the active cursor to the next chunk of text. A chunk of text is a section or block of text that is written to the screen at one time, with one function call. This would typically indicate a phrase or description that should be spoken as one unit. This is useful in reading blocks of static text, control prompts, and field names.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: NextLine 

Description 

This moves the active cursor down to the next line. In many situations, Windows does not display information in perfect horizontal rows, and the cursor may not move a uniform distance each time this function is used. To speak the information immediately after the NextLine function is used, place a SayLine function after the NextLine function.

Returns 

Type: Int
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: NextParagraph 

Description 

Moves the active cursor to the beginning of the next paragraph. If the PC cursor is active and the next paragraph is not already visible, then text in the window will automatically scroll to bring it into view.

Returns 

Type: Int
 Description: TRUE if the next paragraph was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: NextSentence 

Description 

Moves the active cursor to the beginning of the next sentence. If the PC cursor is active and the next sentence is not already visible, then text in the window will automatically scroll to bring it into view.

Returns 

Type: Int
 Description: TRUE if the next sentence was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: NextWord 

Description 

This performs a special version of the CONTROL+RIGHT ARROW or Next Word keyboard command. When the PC cursor is active, JAWS allows the application to move the cursor. When other cursors are active, then JAWS tries to move the cursor to the next word or graphic it finds to the right of the cursor's current location. To speak the word at the new cursor location, place a SayWord function after the NextWord function. Note: Once the cursor has moved to the next word, it is not spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: NumericDataSayNextAsSingleUnit 

Description 

Press this keystroke to move past large number and punctuation sequences such as IP addresses and order numbers.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: NumericDataSayPriorAsSingleUnit 

Description 

Press this keystroke to move past large number and punctuation sequences such as IP addresses and order numbers.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: PageDown 

Description 

Moves back one screen. The behavior is controlled by Windows or the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: PageUp 

Description 

Moves forward one screen. The behavior is controlled by Windows or the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: PriorCharacter 

Description 

This performs a special version of the LEFT ARROW or Prior Character keyboard command. When the PC cursor is active, JAWS allows the application to move the cursor. When other cursors are active, JAWS tries to move the cursor to the prior character or graphic it finds to the left of the cursor's current location. To speak the information at the new cursor location, place a SayCharacter function after the PriorCharacter function.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PriorChunk 

Description 

This moves the active cursor to the prior chunk. A chunk of text is a section or block of text that is written to the screen at one time, that is, with one function call. This would typically indicate a phrase or description that should be spoken as one unit. This is useful in reading blocks of static text, control prompts, and field names.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PriorLine 

Description 

This performs a special version of the UP ARROW keyboard command. When the PC cursor is active, JAWS allows the application to move the cursor. When other cursors are active, then JAWS tries to move the cursor up to the line above its current position. To speak the line of information at the new location, place a SayLine function after the PriorLine function.

Returns 

Type: Int
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PriorParagraph 

Description 

Moves the active cursor to the beginning of the prior paragraph. If the PC cursor is active and the prior paragraph is not already visible, then text in the window will automatically scroll to bring it into view.

Returns 

Type: Int
 Description: TRUE if the prior paragraph was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PriorSentence 

Description 

Moves the active cursor to the beginning of the prior sentence. If the PC cursor is active and the prior sentence is not already visible, then text in the window will automatically scroll to bring it into view.

Returns 

Type: Int
 Description: TRUE if the prior sentence was found, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: - 0 no input origin specified. 1 specifies that the command has originated from the keyboard. 2 specifies that the command has originated from a Braille display (i.e. Whiz wheel up/down). 3 specifies that the command has originated from a mouse click. Defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PriorWord 

Description 

This performs a special version of the CONTROL+LEFT ARROW or Prior Word keyboard command. When the PC cursor is active, JAWS allows the application to move the cursor. When other cursors are active, JAWS tries to move the cursor to the prior word or graphic it finds to the left of the cursor's current location. To speak the word at the new location, place a SayWord function after the PriorWord function.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayCellUnit 

Description 

Moves to the cell specified by the unit movement and then speaks.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: the movement unit. The movement unit defines the type of movement to be performed before speaking. See HJConst.jsh for unit movement constants, all prefixed by UnitMove_.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SayCellUnitEx 

Description 

Moves to the cell specified by the unit movement and then speaks. It also allows the caller to specify if error messages are spoken and also returns a value determining the success of the movement.

Returns 

Type: int
 Description: TRUE if navigation was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: the movement unit. The movement unit defines the type of movement to be performed before speaking. See HJConst.jsh for unit movement constants, all prefixed by UnitMove_.
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE if caller wants error messages spoken, FALSE to be silent on error.
 Include: Required
 

Param 3: 

Type: int
 Description: Used when navigating left or right at a row extremity to indicate if navigation should wrap to the prior or next row.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: SayCharacterUnit 

Description 

Moves to the character specified by the unit movement and then speaks.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: the movement unit. The movement unit defines the type of movement to be performed before speaking. See HJConst.jsh for unit movement constants, all prefixed by UnitMove_.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Script: SayNextCharacterPCCursor 

Description 

This keystroke is assigned to the Extended right arrow key by default. Using Settings Center, you can separate the numpad keys from the extended keys and then use this keystroke to speak the next character with the PC Cursor regardless of which cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayNextLinePCCursor 

Description 

This keystroke is assigned to the Extended DOWN ARROW key by default. Using Settings Center, you can separate the numpad keys from the extended keys and then use this keystroke to speak the next line with the PC Cursor regardless of which cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SayNextParagraph 

Description 

Moves to the next paragraph and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayNextSentence 

Description 

Moves to the next sentence and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SayNextWordPCCursor 

Description 

Using Settings Center, you can separate the numpad keys from the extended keys and then use this keystroke to speak the next word with the PC Cursor regardless of which cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayPriorCharacterPCCursor 

Description 

This keystroke is assigned to the Extended LEFT ARROW key by default. Using Settings Center, you can separate the numpad keys from the extended keys and then use this keystroke to speak the prior character with the PC Cursor regardless of which cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

JAWS 4.51 and later  

 

 Script: SayPriorLine 

Description 

Moves to the previous line and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

 Script: SayPriorLine 

Description 

Moves to the prior line and speaks it. Movement is controlled by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

 

Script: SayPriorLinePCCursor 

Description 

This keystroke is assigned to the Extended UP ARROW key by default. Using Settings Center, you can separate the numpad keys from the extended keys and then use this keystroke to speak the prior line with the PC Cursor regardless of which cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayPriorParagraph 

Description 

moves to the previous paragraph and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayPriorSentence 

Description 

Moves to the previous sentence and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayPriorWordPCCursor 

Description 

Using Settings Center, you can separate the numpad keys from the extended keys and then use this keystroke to speak the prior word with the PC Cursor regardless of which cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShouldMoveBySentence 

Description 

Used to test whether Alt+Down/UpArrow should move by sentence, and if so perform the movement.

Returns 

Type: int
 Description: True if Alt+DownArrow and Alt+UpArrow should move by sentence instead of opening and closing listboxes.
 

Parameters 

Param 1: 

Type: int
 Description: The unit of movement to perform, UnitMove_Next or UnitMove_Prior, if sentence movement should be performed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Script: SpeakNthPlaceMarker 

Description 

To speak the PlaceMarker, press CTRL, SHIFT and its number. For example, to speak the third PlaceMarker, press CTRL+SHIFT+3. To move to the PlaceMarker, press the same key combination twice quickly.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.00 and later

Script: ToggleOutlookReminder 

Description 

If the Outlook Reminder dialog is visible, toggles focus between the current window and Reminder dialog.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: TopOfFile 

Description 

If the active item is an edit box the caret or focus will move to the beginning of the open document. Otherwise, moves to the top of the current control. Windows command for moving the cursor to the top of the file, if supported by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Object Model and MSAA Functions

An Object Model and MSAA function returns information about a specific object, such as its name, value, type code or subtype code, state, etc. JAWS uses this information to determine whether to speak and display it in Braille.

Some examples of Object Model and MSAA functions include:

SayFocusedObject

SayObjecttypeAndText

GetObjectName

GetObjectSubtypeCode

GetObjectValue

GetUIAObjectFocusItem

ComRelease

For a complete listing of Object Model and MSAA functions, see the topics in this category book of the Reference Guide.

Code Sample 1

In the below code sample, the SayObjectTypeAndText function is overwritten in the Notepad.jss script source file from the function in default.jss. The overwritten function indicates the current object subtype code in a nonsense message when the related Object Model and MSAA event fires.

Note that even when the Notepad document edit window gains focus, this overwritten function is called and indicates the multi-line edit subtype code of 66. Object information is not necessarily restricted to dialog controls.

Void Function SayObjectTypeAndText (Optional Int nLevel)
Var
            String smsgObjectSubtypeCode
smsgObjectSubtypeCode = "My object subtype code is %1."
smsgObjectSubtypeCode = FormatString (smsgObjectSubtypeCode, IntToString (GetObjectSubtypeCode (nLevel)))
SayObjectTypeAndText (nLevel)
SayFormattedMessage (ot_help, smsgObjectSubtypeCode)
EndFunction

Code Sample 2

Prior to JAWS 19, the behavior of the ComRelease function when it just had one parameter was equivalent to assigning the argument to a null object variable. So it was equivalen to state:
 

ComRelease(obj)
obj=null

 

In order to make ComRelease non blocking, it has to be called with a second parameter, KeepFromBlocking set to TRUE. Since the main purpose of ComRelease is to be able to make non-blocking release calls, starting with JAWS 19, the KeepFromBlocking parameter's default value is TRUE. So:
 

ComRelease(obj)

 will behave as if it was called as:
 

ComRelease(obj, true)

 and
 

ComRelease(obj, false)

 will perform with the old behavior:
 

obj=null

 

Additional Resources

See the General Scripting Concepts book topics:

·         Objects

·         Object Model and MSAA Events

Script: AnnounceLastAlert 

Description 

Announces the last MSAA alert.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: ClickObjectByName 

Description 

Does a LeftMouse click at the upper lefthand corner of the named object. This function relies on MSAA and is ideal for clicking an object that does not have its own window but for which you know the name.

Returns 

Type: int
 Description: TRUE if the object was found and could be clicked, false otherwise.
 

Parameters 

Param 1: 

Type: HANDLE
 Description: The window containing the object of interest
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the object desired
 Include: Required
 

Param 3: 

Type: int
 Description: If there is more than one object with this name, which one is desired. This parameter defaults to 1.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: CloseOleObject 

Description 

Takes the pass-in IDispatch object, does a QueryInterface on it for IOleObject and if the QueryInterface succeeds, calls IOleObject::Close. This is very rarely used, and if none of the above makes sense assume you don't need to use it.

Returns 

Type: int
 Description: TRUE on success, FALSE on failure.
 

Parameters 

Param 1: 

Type: object
 Description: the object that supports the IOleObject interface.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: ComGetAvailableNames 

Description 

A method for a script developer to interrogate an object and get back all its methods and properties. Returns the name of each method or property.

Returns 

Type: string
 Description: A list of available methods and properties for the supplied object. Items are separated by newlines.
 

Parameters 

Param 1: 

Type: object
 Description: The object to be interrogated. The results you get back will depend upon the object and how much of it is outward-facing.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

This function is available in the following releases:

1.    JAWS 10.0-18.0  

2.    JAWS 19.0 and later  

 Function: ComRelease 

Description 

When called with a single argument, this is equivalent to assigning the argument to a null object variable. In other words, if the argument references an IDispatch object, that object will be released. If the optional second argument is TRUE, the object will be released in a way that there is no chance of the Release call blocking, even if the Release involves calling into another process that isn't responsive. This added functionality is less resource efficient and should only be used in those situations where the call is likely to block.

Returns 

Type: int
 Description: TRUE if the object has been release, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Object
 Description: The object to release
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE to take steps to ensure that the call doesn't block
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 10.0-18.0

 Function: ComRelease 

Description 

When called with a single argument, this is equivalent to releasing the object without blocking, even if that means to intercept another process. When the optional second argument is TRUE, the object will be released in a way that there is no chance of the Release call blocking, even if the Release involves calling into another process that isn't responsive. When set to FALSE, the second parameter means set the object to null, releasing the pointer in JAWS. In other words, if the argument references an IDispatch object, that object will be released. The second parameter is set to TRUE by default. This added functionality is less resource efficient and should only be used in those situations where the call is likely to block.

Returns 

Type: int
 Description: TRUE if the object has been release, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Object
 Description: The object to release
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE to take steps to ensure that the call doesn't block, false simply to null the object. If this parameter is not specified, the default is TRUE.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: CreateObject 

Description 

In applications such as Internet Explorer or those found in Microsoft Office, launches an application under the control of JAWS, which is the automation object. The difference between CreateObject and GetObject is that GetObject creates a pointer to an automation object that already exists, whereas CreateObject creates the automation object for the application.

Returns 

Type: Object
 Description: The automation object associated with the program.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the COM class that can return an automation object.
 Include: Required
 

Param 2: 

Type: string
 Description: name of the manifest file that contains the Registration Free COM information or the name of a .dll with a manifest embedded as a resource. Providing this parameter allows creation of an object that hasn't been registered. More information can be found at http://msdn.microsoft.com by searching for "Registration Free COM"
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: CreateObjectEx 

Description 

In applications such as Internet Explorer or those found in Microsoft Office, launches an application under the control of JAWS, which is the automation object. The difference between CreateObject and GetObject is that GetObject creates a pointer to an automation object that already exists, whereas CreateObject creates the automation object for the application.

Returns 

Type: Object
 Description: The automation object associated with the program.
 

Parameters 

Param 1: 

Type: String
 Description: Name of the COM class that can return an automation object.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE = Same behavior as CreateObject. FALSE = Will always force the use of CoCreateInstance instead of using GetObjectHelper when JAWS is running as a service.
 Include: Required
 

Param 3: 

Type: string
 Description: name of the manifest file that contains the Registration Free COM information or the name of a .dll with a manifest embedded as a resource. Providing this parameter allows creation of an object that hasn't been registered. This parameter is supported in JAWS 10.0 and beyond More information can be found at http://msdn.microsoft.com by searching for "Registration Free COM"
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: EnumerateTypeAndTextStringsForWindow 

Description 

Information about each control is obtained using MSAA. The order in which items are enumerated is dictated by how they appear in the MSAA hierarchy. The callback function takes the following parameters: int typeCode, int stateCode,string name, string value,string Description. If the callback function returns 0 the enumeration stops, if it returns 1 the enumeration continues.

Returns 

Type: int
 Description: Number of controls enumerated.
 

Parameters 

Param 1: 

Type: handle
 Description: The window containing the controls to be enumerated.
 Include: Required
 

Param 2: 

Type: String
 Description: Name of the function to be called for each control.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: FetchCollectionProperty 

Description 

A batch method to retrieve all values from an atomic property of a list of objects within a VB collection. This assumes that the collection is indexable, not just accessible by property name. Use this function to save a for loop's worth of round trip calls to access a collection member by index. Since the return is a variantArray, you can index that with a local for loop which will process much faster.

Returns 

Type: int
 Description: TRUE if the remote object was accessed, FALSE otherwise. May return TRUE and also supply an array length of 0 if there are no members.
 

Parameters 

Param 1: 

Type: object
 Description: the VB object collection that can be accessed by index.
 Include: Required
 

Param 2: 

Type: string
 Description: the property name of the list to be accessed by index. Often item, as it's written. E.g. list.item(i)
 Include: Required
 

Param 3: 

Type: int
 Description: Most VB arrays are 1-based.
 Include: Required
 

Param 4: 

Type: int
 Description: the end point of the search, often a VB collection will have a .count property or method you can use for this.
 Include: Required
 

Param 5: 

Type: string
 Description: The atomic property you want, For example, "name" if the access is expressed like: list.Items(i).name
 Include: Required
 

Param 6: 

Type: variantArray
 Description: All the values returned as a variant array. Note that even if the function returns TRUE, it may return a 0-length array.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: FetchObjectProperties 

Description 

Retrieve all properties at once for a VB object. This saves round trips to and from the remote object, where you need to access a lot of properties of a particular object. For example, in Excel, the cell object has a lot of properties that are useful, but the round trip cost to get the properties can be expensive. Note that like a VB object itself, you may see the name for the property, but its value may be null or empty.

Returns 

Type: int
 Description: TRUE if the remote object was accessed, FALSE otherwise. TRUE does not mean the collection has items or that the items all have values. Only that the remote object was queried successfully.
 

Parameters 

Param 1: 

Type: object
 Description: The object whose collection members to fetch.
 Include: Required
 

Param 2: 

Type: collection
 Description: a JAWS script language collection a map of the entire collection in one batch.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 19.0 and later

Function: FindAncestorOfType 

Description 

Searches the ancestors of the current object to find one with the indicated type.

Returns 

Type: int
 Description: The level in the ancestry of the current object with the matching type.
 

Parameters 

Param 1: 

Type: Int
 Description: One of the wt_typeCode constants.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.00 and later

Function: FocusToLink 

Description 

The first link in the buffer is 1, the second 2, etc.

Returns 

Type: int
 Description: The number of the link
 

Parameters 

Param 1: 

Type: int
 Description: The 1-based number of the link to which focus should move.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: GetAncestorCount 

Description 

Gets the hierarchical ancestor count of MSAA objects.

Returns 

Type: int
 Description: hierarchical Count of MSAA objects.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetCachedMSAAFocusInfo 

Description 

Used as a diagnostic tool for obtaining MSAA info for the focused object and its hierarchy.

Returns 

Type: string
 Description: The diagnostic information for the MSAA object.
 

Parameters 

Param 1: 

Type: int
 Description: The object level in the hierarchy. 0 is the focus, 1 its parent, etc.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetControlTypeName 

Description 

returns a localized string describing the WT_XX HJConst.jsh constant passed in.

Returns 

Type: string
 Description: The localized string for the control type.
 

Parameters 

Param 1: 

Type: int
 Description: One of the wt_ constants from hjConst.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetCurrentLinkIndex 

Description 

The first link in the buffer is 1, the second 2, etc.

Returns 

Type: int
 Description: The number of the link
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: GetCurrentObject 

Description 

Uses MSAA to obtain the object with focus at the active cursor position.

Returns 

Type: Object
 Description: The accessible object at the current cursor location.
 

Parameters 

Param 1: 

Type: Int
 Description: ID of child.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetDocumentProperties 

Description 

Returns various document properties for an editable text document. At present this function is only valid for Lotus Notes 8. This function is available in JAWS 8.0 update 1 and higher.

Returns 

Type: Int
 Description: 1 for success, 0 for failure
 

Parameters 

Param 1: 

Type: string
 Description: The title of the document
 Include: Required
 

Param 2: 

Type: string
 Description: The number (or letter) of the current page
 Include: Optional
 

Param 3: 

Type: string
 Description: The number of a page as it relates to all pages. For example, PageNumber would be the number "1" in the text "1 of 3"
 Include: Optional
 

Param 4: 

Type: string
 Description: The total number of pages in the document
 Include: Optional
 

Param 5: 

Type: string
 Description: The current line number within a document page
 Include: Optional
 

Param 6: 

Type: string
 Description: The index of a character on a line of text
 Include: Optional
 

Param 7: 

Type: string
 Description: The number of the current text column
 Include: Optional
 

Param 8: 

Type: string
 Description: The total number of text columns
 Include: Optional
 

Param 9: 

Type: string
 Description: The name of the current text section
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: GetEmbeddedObjectDescription 

Description 

Used to get the description of an object embedded within another object. Usually, this applies to objects, such as links, which may be embedded within a text object. Presently, this function will only return success when focus is on a text object with a role of IA2_ROLE_PARAGRAPH. At this time, the only application implementing such objects is in Lotus Notes 8. This function is available after JAWS 8, update 1.

Returns 

Type: string
 Description: Description of the embedded object at the cursor position.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: GetFocusObject 

Description 

Uses MSAA to get the object with focus.

Returns 

Type: Object
 Description: The interface to the Accessible object.
 

Parameters 

Param 1: 

Type: Int
 Description: ID of child.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLastMSAAAlertInfo 

Description 

This function allows the user to retrieve the text and alert level of the last MSAA alert.

Returns 

Type: int
 Description: TRUE if there is alert data still in the buffer, FALSE otherwise
 

Parameters 

Param 1: 

Type: string
 Description: the text of the alert
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: int
 Description: the priority level of the alert, 1 highest, 3 lowest
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: GetListOfObjects 

Description 

Given a window handle, retrieves the names of all objects contained in that window. This function is intended primarily as a tool for script developers to explore a new aplication and find out the names of objects contained therein. This info can be used in crafting scripts to use calls to GetObjectInfoByName.

Returns 

Type: String
 Description: A delimited list of object names.
 

Parameters 

Param 1: 

Type: HANDLE
 Description: The window containing the objects of interest
 Include: Required
 

Param 2: 

Type: String
 Description: Character to be used as the delimiter between object names. If not provided, defaults to \007.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: GetListOfProofreadingElements 

Description 

This function is used to obtain a delimited list of proofreading elements to present to the user so that the user can select and move the cursor to a particular element.

Returns 

Type: string
 Description: the list of elements found delimitted by the specified delimiter or \007 if none specified.
 

Parameters 

Param 1: 

Type: int
 Description: see hjconst.jsh for the proofreading element types, peSpellingError, peGrammaticalError, peRevision
 Include: Required
 

Param 2: 

Type: string
 Description: the delimiter to use to separate the elements.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetMSAAObjectTree 

Description 

Used to retrieve a tree of UIA objects from a window.

Returns 

Type: object
 Description: If successful, returns the tree of objects in the window; otherwise, returns null
 

Parameters 

Param 1: 

Type: handle
 Description: The window with the UIA objects. If not specified, the application window of the focus window is assumed.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: GetNativeOMFromMSAA 

Description 

This function uses MSAA to get a pointer to the Application's native object model directly. It should be used when other methods fail and will only work for Office 2000 and above. It is particularly useful when running under Windows XP in Excel where all other methods fail. This function should be called when focused on the main work area, ie the Excel7 class window in Excel, the _wwg class window in MSWord etc.

Returns 

Type: Object
 Description: a poihnter to the Application Object.
 

Parameters 

Param 1: 

Type: int
 Description: The object ID to use when requesting the native OM pointer. In most cases this is OBJID_NATIVEOM and that's what is used if this parameter isn't specified.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObject 

Description 

Looks in the Windows Running Object Table for an instance of an application with the specified COM class name.

Returns 

Type: Object
 

Parameters 

Param 1: 

Type: String
 Description: Program to find.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectAtPoint 

Description 

Uses MSAA to determine the object at a set of X/Y coordinates.

Returns 

Type: Object
 Description: The accessible object at the given point.
 

Parameters 

Param 1: 

Type: Int
 Description: ref data.
 Include: Required
 

Param 2: 

Type: Int
 Description: The x coordinate.
 Include: Required
 

Param 3: 

Type: Int
 Description: The y coordinate.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectAutomationId 

Description 

Retrieves the UIA automation ID of an object in the focus hierarchy. This is much faster than using the UIA Script API.

Returns 

Type: String
 Description: the automation ID.
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 19.0 and later

Function: GetObjectClassName 

Description 

Retrieves the UIA class name of an object in the focus hierarchy. This is much faster than using the UIA Script API.

Returns 

Type: String
 Description: the class name.
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetObjectContainerHelp 

Description 

This function returns the AccDescription property of the container of an MSAA object if it has one.

Returns 

Type: String
 Description: AccDescription property of accessible object's container.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectDescription 

Description 

the description of the object with focus is returned. The value is returned as a string.

Returns 

Type: String
 Description: the MSAA description of the object with focus.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

This function is available in the following releases:

1.    JAWS 4.51-19.0  

2.    JAWS 20.0 and later  

 Function: GetObjectHelp 

Description 

This function returns the AccDescription property of an MSAA object if it has one.

Returns 

Type: String
 Description: AccDescription property of accessible object.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-19.0

 Function: GetObjectHelp 

Description 

This function returns the AccDescription property of an MSAA object if it has one.

Returns 

Type: String
 Description: AccDescription property of accessible object.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 20.0 and later

Function: GetObjectIA2State 

Description 

Gets the IA2 state of an object in the focus hierarchy.

Returns 

Type: int
 Description: the IA2 state bits of the nth object.
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetObjectInfoByName 

Description 

Given a window handle and the name of an objectt contained in that window, retrieves information about that object. In most cases, this information is obtained using MSAA. Using this function is much faster than directly using MSAA functions to walk the object hierarchy to find the object of interest and then querying the object for the equivalent information. Information is returned in byRef parameters. Not all information is available for all objects.

Returns 

Type: int
 Description: TRUE if function was successful, false on failure.
 

Parameters 

Param 1: 

Type: HANDLE
 Description: The window containing the object of interest
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the object desired
 Include: Required
 

Param 3: 

Type: int
 Description: If there is more than one object with this name, which one is desired. To retrieve the first occurance, pass in 1 as the value for this parameter.
 Include: Required
 

Param 4: 

Type: int
 Description: On return will contain the object's subtype code.
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: int
 Description: On return will contain the object's state flags. This will be a combination of Control Attribute identifiers defined in HJCONST.JSH.
 Include: Optional
 * Returns data by reference
 

Param 6: 

Type: String
 Description: On return will contain the object's value.
 Include: Optional
 * Returns data by reference
 

Param 7: 

Type: String
 Description: On return will contain the object's description.
 Include: Optional
 * Returns data by reference
 

Param 8: 

Type: String
 Description: On return will contain the object's HotKey
 Include: Optional
 * Returns data by reference
 

Param 9: 

Type: string
 Description: On return will contain the name of the object that contains this object.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: GetObjectIsEditable 

Description 

returns int true or false according to whether the cursor is in an object which may be edited.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 19.0 and later

Function: GetObjectItemStatus 

Description 

Retrieves the UIA ItemStatus property of an object in the focus hierarchy. This is much faster than using the UIA Script API.

Returns 

Type: String
 Description: the ItemStatus property
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetObjectItemType 

Description 

Retrieves the UIA ItemType property of an object in the focus hierarchy. This is much faster than using the UIA Script API.

Returns 

Type: String
 Description: the ItemType property
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetObjectModuleId 

Description 

Determines the type of module currently in focus. The module types are listed in HJConst.jsh.

Returns 

Type: int
 Description: One of the module ID type constants listed in HJConst.jsh.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: GetObjectMSAAState 

Description 

Gets the MSAA state of an object in the focus hierarchy.

Returns 

Type: int
 Description: the MSAA state bits of the nth object.
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetObjectName 

Description 

If the Pc Cursor is active, the name of the object with focus is returned. Otherwise, the name of the object at the position of the active cursor is returned. The value is returned as a string.

Returns 

Type: String
 Description: the name of the object at the position of the active cursor.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectNameUnfiltered 

Description 

Unconditionally obtains the name of the object with focus or one of it's ancestors. This is in contrast to GetObjectName which does not return the names of objects of type wt_unknown. Any Objects with MSAA role of Window get mapped to the JAWS type of wt_unknown, which means that it's impossible to use GetObjectName to get the names of windows in the focus hierarchy that don't have a more specific type because the names are returned as empty strings. GetObjectNameUnfiltered does not have the above limitation and provides this functionality without breaking legacy behavior.

Returns 

Type: String
 Description: the name of the object in the focus hierarchy.
 

Parameters 

Param 1: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetObjectRect 

Description 

Will return TRUE if the object has a focus rectangle, FALSE otherwise. This function takes four int parameters. Left, right, top and bottom. Declare, but do not initialize, the int variables for these parameters, as they are passed by reference.

Returns 

Type: Int
 Description: True if a focus rectangle was found surrounding the object, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the value for the left-hand edge of the focus rectangle surrounding the object.
 Include: Required
 

Param 2: 

Type: Int
 Description: the value for the right-hand edge of the focus rectangle surrounding the object.
 Include: Required
 

Param 3: 

Type: Int
 Description: the value for the top edge of the focus rectangle surrounding the object.
 Include: Required
 

Param 4: 

Type: Int
 Description: the value for the bottom edge of the focus rectangle surrounding the object.
 Include: Required
 

Param 5: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 6: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectRole 

Description 

Gets the role of an object in the focus hierarchy.

Returns 

Type: int
 Description: the role of the nth object.
 

Parameters 

Param 1: 

Type: int
 Description: The object in the hierarchy to be used. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 19.0 and later

Function: GetObjectState 

Description 

If the PC cursor is active, the state of the object with focus is returned. Otherwise, the state of the object at the position of the active cursor is returned.

Returns 

Type: String
 Description: The state of the object.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectStateCode 

Description 

If the PC cursor is active, the state of the object with focus is returned. Otherwise, the state of the object at the position of the active cursor is returned.

Returns 

Type: int
 Description: The state of the object.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetObjectSubtype 

Description 

Retrieves the subtype of the object located at the current cursor's location. Because the type is a string that differs across languages, this function should only be used when the objective is to speak the type of the object. GetObjectTypeCode should instead be used in all conditional statements because it provides a language independent solution.

Returns 

Type: String
 Description: The subtype of the object at the current cursor's location.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetObjectSubTypeCode 

Description 

Retrieves the numeric subtype code of the object located at the current cursor's location. Constants for these type codes all begin with WT_ and are defined in HJCONST.JSH. The numeric values are the same for all languages of JAWS. Using this function in all conditional statements instead of using GetObjectType insures that these statements will function without change in multiple languages. The subtype code is more specific, i.e. a button can have the sub type of WT_CHECKBOX.

Returns 

Type: Int
 Description: The type of the object at the current cursor's location.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: Int
 Description: Level of the object from which to get the type. 0 retrieves the type code for the object with focus; 1 refers to the parent, 2 the grand parent, and so on.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectType 

Description 

Retrieves the type of the object located at the current cursor's location. Because the type is a string that differs across languages, this function should only be used when the objective is to speak the type of the object. GetObjectTypeCode should instead be used in all conditional statements because it provides a language independent solution.

Returns 

Type: String
 Description: The type of the object at the current cursor's location.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectTypeCode 

Description 

Retrieves the numeric type code of the object located at the current cursor's location. Constants for these type codes all begin with WT_ and are defined in HJCONST.JSH. The numeric values are the same for all languages of JAWS. Using this function in all conditional statements instead of using GetObjectType insures that these statements will function without change in multiple languages.

Returns 

Type: Int
 Description: The type of the object at the current cursor's location.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetObjectValue 

Description 

If the PC cursor is active, the value of the object with focus is returned. Otherwise, the value of the object at the position of the active cursor is returned. The value is returned as a string.

Returns 

Type: String
 Description: the value of the object at the position of the active cursor.
 

Parameters 

Param 1: 

Type: Int
 Description: if TRUE, always obtains this information via MSAA, even in those situations where other methods would otherwise be used instead.
 Include: Optional
 

Param 2: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetProofreadingElementCount 

Description 

This function returns the number of spelling errors, grammatical errors or revisions in the current document.

Returns 

Type: int
 Description: the number of proofreading elements of the specified type.
 

Parameters 

Param 1: 

Type: int
 Description: see hjconst.jsh for the proofreading element types, peSpellingError, peGrammaticalError, peRevision
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: GetProofreadingElementInfo 

Description 

This function allows the scripter to obtain information about an element at the cursor such as the text, author, initials, type and date of the element (if relevant). Not all components are returned for all element types.

Returns 

Type: int
 Description: TRUE if info was obtained for the specified element type, FALSE otherwise
 

Parameters 

Param 1: 

Type: int
 Description: see HJConst.jsh for types, prefixed by pe.
 Include: Required
 

Param 2: 

Type: string
 Description: text of element
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: string
 Description: author's name
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: string
 Description: Author's initials
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: string
 Description: extra descriptive information (such as revision type if element is a revision).
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: string
 Description: date of element creation (such as revision or comment date).
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetRelationText 

Description 

Using one of the relation constants specified in hjconst.h, retrieves text associated with the given relation. These relations are specified as part of the IAccessible2 interface.

Returns 

Type: string
 Description: Text associated with the requested relation.
 

Parameters 

Param 1: 

Type: int
 Description: Relation type. Only one relation type at a time is valid for this function.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetRichEditDocument 

Description 

Gets a pointer to the ITextDocument interface of the document in the specified window. This only works for windows of class RichEdit20A or RichEdit20W. The ITextDocument Interface allows access to the object model of RichEdit documents in a similar manner to the MSWord object model. For more details, search Microsoft Developer Network for "Text Object Model."

Returns 

Type: Object
 Description: A pointer to the ITextDocument interface.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle to the window of interest. It defaults to the window with focus.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: getRoleText 

Description 

This function retrieves the description of an MSAA role. MSAA roles can be retrieved by accessing the accRole property of an MSAA object. This function is equivalent to the GetRoleText function in the MSAA SDK.

Returns 

Type: String
 Description: The text describing the role.
 

Parameters 

Param 1: 

Type: int
 Description: The role constant to describe. This should be obtained from the accRole property of an MSAA object.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTypeAndTextStringsForObject 

Description 

Information about each control is similar to that obtained from SayObjectTypeAndText. The order in which items appear is dictated by how they appear in the MSAA hierarchy.

Returns 

Type: String
 Description: The contents of the MSAA object hierarchy excluding certain control types.
 

Parameters 

Param 1: 

Type: object
 Description: The object for which the information is to be retrieved.
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE if the function should retrieve text for invisible nodes.FALSE if invisible node text should be excluded. The default is true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetTypeAndTextStringsForWindow 

Description 

Information about each control is similar to that obtained from SayObjectTypeAndText. The order in which items appear is dictated by how they appear in the MSAA hierarchy.

Returns 

Type: String
 Description: The contents of the window
 

Parameters 

Param 1: 

Type: handle
 Description: The window containing the controls to be queried.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetUIAObjectFocusItem 

Description 

Used to retrieve the focus UIA object from a window.

Returns 

Type: object
 Description: If successful, returns the focus objects in the window; otherwise, returns null
 

Parameters 

Param 1: 

Type: handle
 Description: The window with the UIA objects. If not specified, the application window of the focus window is assumed.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: GetUIAObjectTree 

Description 

Used to retrieve a tree of UIA objects from a window.

Returns 

Type: object
 Description: If successful, returns the tree of objects in the window; otherwise, returns null
 

Parameters 

Param 1: 

Type: handle
 Description: The window with the UIA objects. If not specified, the application window of the focus window is assumed.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: GetUIAXMLObject 

Description 

Given an XML string of data for iAccessible objects, retrieves the XML object created from the string.

Returns 

Type: object
 Description: If successful, returns the XML object; otherwise, returns null
 

Parameters 

Param 1: 

Type: string
 Description: An XML string containing iAccessible object data.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: IE4GetCurrentDocument 

Description 

The document object can be used to retrieve information about the document, to examine and modify the HTML elements and text within the document, and to process events. This function obtains the document object of the document in the current window.

Returns 

Type: Object
 Description: An object that represents the HTML document in a given browser window.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IsMSAAWindow 

Description 

Indicates whether or not JAWS is using MSAA to gather information about the contents of this window.

Returns 

Type: Int
 Description: TRUE if MSAA is used for this window, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window to check
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToProofreadingElement 

Description 

This function moves the cursor to the first, next, previous or last proofreading element in the document.

Returns 

Type: int
 Description: TRUE for success, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: see hjconst.jsh for the proofreading element types, peSpellingError, peGrammaticalError, peRevision
 Include: Required
 

Param 2: 

Type: int
 Description: see hjconst.jsh, s_top, s_bottom, s_next, s_prior
 Include: Required
 

Param 3: 

Type: string
 Description: on success, is filled with the text of the element found
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: MoveToProofreadingElementByIndex 

Description 

This function is used in conjunction with GetListOfProofreadingElements to move the cursor to the selected element from the list via its index.

Returns 

Type: int
 Description: TRUE if the move was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: see hjconst.jsh for the proofreading element types, peSpellingError, peGrammaticalError, peRevision
 Include: Required
 

Param 2: 

Type: int
 Description: 1-based index
 Include: Required
 

Param 3: 

Type: string
 Description: on success, is filled with the text of the element found
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: MSAAGetDialogStaticText 

Description 

This function is useful for getting descriptive static text from dialogs which support MSAA when the dialog doesn't contain child windows for each child object.

Returns 

Type: String
 Description: The dialog static text.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 7.10-12.1  

2.    JAWS 13.0 and later  

 Function: MSAARefresh 

Description 

This function is only needed in situations where the object with focus changes without firing MSAA events to let JAWS know to update it's cached data.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.10-12.1

 Function: MSAARefresh 

Description 

This function is only needed in situations where the object with focus changes without firing MSAA events to let JAWS know to update it's cached data.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise. When bSynchronous is True then a return of True means that the refresh was successful. When bSynchronous is False, a return of True simply means that the refresh was requested.
 

Parameters 

Param 1: 

Type: int
 Description: When True the function will not return until the refresh is complete. When False, the function will return immediately and the refresh will complete at some time in the future. If you wish to simply cause a FocusChangedEvent to be called with updated info as the result of the refresh, then pass False for this parameter. If you want to immediately process the updated data and want to suppress any FocusChanged event that could result, then pass True for this parameter.
 Include: Optional
 

Param 2: 

Type: int
 Description: If bSynchronous is True, then MaxMillisecondsToWait determines how much time to wait for completion before returning failure. If bSynchronous is False, then this parameter is ignored.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: MSOGetMenuBarObject 

Description 

Gets the Menu bar object in MS Office 97/2000 applications.

Returns 

Type: Object
 Description: The Menu bar of the current Office application.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: OutlookGetDisplayedDates 

Description 

This function only works in Outlook 2007 SP1 and later when a Day/Week/Month view is visible.

Returns 

Type: string
 Description: A list of dates separated by a |.
 

Parameters 

Param 1: 

Type: object
 Description: an instance of the active calendar view object in Outlook which must be one of Day/Week/Month
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: SayFocusedHJDialogWindow 

Description 

handles speaking of the focused window when an HJDialog is in the foreground.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The window with focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.00 and later

Function: SayFocusedObject 

Description 

Called by the FocusChangedEvent when the focus changes from an object to another object inside the same window. This functionality is enabled by Microsoft Active Accessibility.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayObjectActiveItem 

Description 

Says the active element in certain controls. For example in a list view, it will say the selected item. In a menu, it will say the active menu item. In a dialog box, it will say the selected tab.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: As of JAWS 8.0, TRUE if you wish to have JAWS announce positional information such as n of m items, FALSE otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

JAWS 4.51-18.0  

JAWS 21.0 and later  

JAWS 19.0-20.0  

 Function: SayObjectTypeAndText 

Description 

Speaks the name and type of the object located at the current cursor's location. It is the most reliable way of obtaining such information. It should be used instead of SayWindowTypeAndText which has been retained for backward compatibility. The two functions are similar, but SayObjectTypeAndText is able to handle objects supported by MSAA, and the case where multiple objects are contained within the same window. When this function is used, it marks the text it reads so that the Say Highlighted Text and Say NonHighlighted Text functions do not repeat the same information when they are triggered.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-18.0

 Function: SayObjectTypeAndText 

Description 

Speaks the name and type of the object located at the current cursor's location. It is the most reliable way of obtaining such information. It should be used instead of SayWindowTypeAndText which has been retained for backward compatibility. The two functions are similar, but SayObjectTypeAndText is able to handle objects supported by MSAA, and the case where multiple objects are contained within the same window. When this function is used, it marks the text it reads so that the Say Highlighted Text and Say NonHighlighted Text functions do not repeat the same information when they are triggered.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Param 2: 

Type: int
 Description: if not supplied, assumed to be true.
 Include: Optional
 

Param 3: 

Type: Int
 Description: Optional parameter used to indicate whether or not the line should be highlighted by the Visual Tracking, ZoomText or Fusion as the text is being spoken. The possible values are as follows: If the parameter is not present or is equal to false, do nothing; If the parameter is true, highlight the object being spoken. NOTES: (1) This functionality is not currently supported in all applications. (2) The highlight rectangles will only be drawn if Visual Tracking is enabled or ZoomText/Fusion is running.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

 Function: SayObjectTypeAndText 

Description 

Speaks the name and type of the object located at the current cursor's location. It is the most reliable way of obtaining such information. It should be used instead of SayWindowTypeAndText which has been retained for backward compatibility. The two functions are similar, but SayObjectTypeAndText is able to handle objects supported by MSAA, and the case where multiple objects are contained within the same window. When this function is used, it marks the text it reads so that the Say Highlighted Text and Say NonHighlighted Text functions do not repeat the same information when they are triggered.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Which object in the hierarchy should be spoken. 0, which is the default, refers to the object with focus. 1 refers to the parent of the focus object, 2 refers to the grandparent, etc.
 Include: Optional
 

Param 2: 

Type: int
 Description: if not supplied, assumed to be true.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0-20.0

Function: UIARefresh 

Description 

This function is only needed in situations where the object with focus changes without firing MSAA or UI Automation events to let JAWS know to update it's cached data.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise. When bSynchronous is True then a return of True means that the refresh was successful. When bSynchronous is False, a return of True simply means that the refresh was requested.
 

Parameters 

Param 1: 

Type: int
 Description: When True the function will not return until the refresh is complete. When False, the function will return immediately and the refresh will complete at some time in the future. If you wish to simply cause a FocusChangedEvent to be called with updated info as the result of the refresh, then pass False for this parameter. If you want to immediately process the updated data and want to suppress any FocusChanged event that could result, then pass True for this parameter.
 Include: Optional
 

Param 2: 

Type: int
 Description: If bSynchronous is True, then MaxMillisecondsToWait determines how much time to wait for completion before returning failure. If bSynchronous is False, then this parameter is ignored.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: VisualStudioGetAddinObject 

Description 

Works around a bug in Visual Studio 2010 where a script can't call any methods on an AddIn retrieved from the VisualStudio AddIns collection. The AddIn thus retrieved provides information like the name and ProgId of the AddIn, and a function called GetObject that provides an IDispatch interface to the AddIn itself. This function does the job of the AddIn.GetObject method were it not to be broken.

Returns 

Type: object
 Description: that gives access to the public methods of the Connect object implemented by the AddIn
 

Parameters 

Param 1: 

Type: object
 Description: An AddIn object as retrieved from the VisualStudio AddIns collection.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: WaitForFocusToMoveTo 

Description 

This function waits to return until the specified object has gained focus, or the timeout has elapsed. It is used to wait for MSAA objects to receive focus, so you should not simply use zeros for parameters 2 and 3. You can get the necessary handle, object ID, and child ID that identify the MSAA object with the function GetFocus.

Returns 

Type: int
 Description: True if this function returned because the specified object gained focus. False if this function returned because the timeout elapsed.
 

Parameters 

Param 1: 

Type: handle
 Description: Handle of the window that is expected to receive focus.
 Include: Required
 

Param 2: 

Type: int
 Description: Object ID of the object that is expected to receive focus.
 Include: Required
 

Param 3: 

Type: int
 Description: Child ID of the object that is expected to receive focus.
 Include: Required
 

Param 4: 

Type: int
 Description: Maximum amount of time, in milliseconds, that the function should wait before returning if the specified object does not receive focus.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: WasSayObjectTypeAndTextExceptionProcessed 

Description 

Used in overwritten versions of SayObjectTypeAndText to allow for general known conditions to call down to default behavior before app-specific conditions are tested.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: First optional parameter to use when calling SayObjectTypeAndText.
 Include: Optional
 

Param 2: 

Type: int
 Description: Second optional parameter to use when calling SayObjectTypeAndText.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Optical Character Recognition Functions

An Optical Character Recognition (OCR) function provides or returns information about OCR activities specifically in JAWS. JAWS uses this information to determine whether to speak and display anything in Braille, for comparison purposes, and so on.

Some examples of OCR functions include:

·         CancelOCR

·         CanRecognize

·         GetOCRLanguages

For a complete listing of OCR functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the CanRecognize function is called from a script to confirm whether it is possible to recognize any text in a given area of the Notepad application. To set up the example for testing, simply run the script from within Notepad with the PC, JAWS, or Invisible cursor located at various points within the Notepad application, whether a menu or dialog is on screen or even if there is no text in the main document window.

Script MyOCRTest ()
Var
            String sOCRStatus
sOCRStatus = "Yes, I can recognize any text in this screen area."
If CanRecognize () == OCR_Success
            SayMessage (ot_status, sOCRStatus)
EndIf
EndScript

Function: CancelOCR 

Description 

If optical character recognition is in progress (initiated by OCRScreenArea), cancels the operation.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: a job ID returned from OCRScreenArea identifying the OCR job to cancel.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: CancelRecognition 

Description 

Cancels any current optical character recognition job in progress.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.00 and later

Function: CanRecognize 

Description 

Determine whether the OCR components are installed.

Returns 

Type: int
 Description: 1 if OCR components are installed, 0 if OCR components are not installed or configured, and 2 if Convenient OCR Feature is Not supported.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: getOCRLangID 

Description 

Returns the language code associated with the human-readable string.

Returns 

Type: int
 Description: The ID or language code associated with the human-readable string.
 

Parameters 

Param 1: 

Type: string
 Description: The human-readable string for the language whose code you want.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 13.00 and later

Function: getOCRLangString 

Description 

Returns the language code associated with the human-redable string.

Returns 

Type: string
 Description: the human-readable string that corresponds to the language code.
 

Parameters 

Param 1: 

Type: int
 Description: The language code for the human-readable string you want.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 13.00 and later

Function: GetOCRLanguages 

Description 

These language codes can be used for primary or secondary OCR language settings.

Returns 

Type: string
 Description: a bell-char-delimited list of OCR languages
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: InvalidateCachedCursor 

Description 

Invalidates the cached cursor to force a new cursor to be created. This affects the application's internal state and does not need to be called from the scripts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.00 and later

Script: OCRDocument 

Description 

OCR the currently open PDF document and place its contents in the Results Viewer. This OCR is done on the document itself, not on the screen contents.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The focus window of the document.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Function: OCRFile 

Description 

OCR the currently file and place its contents in the Results Viewer. This OCR is done on the file itself, not on the screen contents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 19.00 and later

Function: OCRPdf 

Description 

Performs OCR on the PDF document attached to the specified window, using the specified primary and secondary oCR languages.

Returns 

Type: int
 Description: The Job ID associated with the scheduled OCR.
 

Parameters 

Param 1: 

Type: handle
 Description: The window containing the PDF document. It must be open in Adobe Acrobat.
 Include: Required
 

Param 2: 

Type: int
 Description: The primary recognition language to use.
 Include: Required
 

Param 3: 

Type: int
 Description: The secondary language to use.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: OCRScreenArea 

Description 

Performs optical character recognition on a given rectangular area of the screen. The OCR processing is asynchronus. When the OCR operation is complete, the OCRCompletedEvent will be sent. The OCR data is then available to the JAWS cursor.

Returns 

Type: Int
 Description: a job ID. This ID may be used to cancel the OCR operation in progress, or to identify a specific OCRScreenArea call in the OCRCompletedEvent function. If the OCR is not successfully initiated, the returned job ID is 0.
 

Parameters 

Param 1: 

Type: int
 Description: left edge of the requested screen area.
 Include: Required
 

Param 2: 

Type: int
 Description: top edge of the requested screen area.
 Include: Required
 

Param 3: 

Type: int
 Description: right edge of the requested screen area.
 Include: Required
 

Param 4: 

Type: int
 Description: bottom edge of the requested screen area.
 Include: Required
 

Param 5: 

Type: int
 Description: primary language code. (English is 1033)
 Include: Required
 

Param 6: 

Type: int
 Description: secondary language code. (English is 1033)
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: OCRSelectedFile 

Description 

If the Optical Character Recognition module is installed, recognizes the text of an image file. You must first select the file in Windows Explorer to be recognized.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Script: RecognizeCamera 

Description 

If the Optical Character Recognition module is installed, recognizes the text of a camera capture or scan.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Script: RecognizeControl 

Description 

If the Optical Character Recognition module is installed, recognizes the text of the control with focus.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Script: RecognizeRealWindow 

Description 

If the Optical Character Recognition module is installed, recognizes all text in the current window.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Script: RecognizeScreen 

Description 

If the Optical Character Recognition module is installed, recognizes all text on the screen.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Picture Smart Functions

An Optical Character Recognition (OCR) function provides or returns information about OCR activities specifically in JAWS. Picture Smart scripts and functions take this one step further to provide information about a graphic or a photograph. The feature was introduced early in JAWS 2019. JAWS uses telemetry information to determine whether to speak and display anything in Braille, for comparison purposes, and so on.

Some examples of Picture Smart scripts include:

·         PictureSmartWithControl

·         PictureSmartWithCamera

For a complete listing of Picture Smart scripts and functions, see the topics in this category book of the Reference Guide.

Script: PictureSmartWithCamera 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20.00 and later

Script: PictureSmartWithControl 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20.00 and later

Script: PictureSmartWithSelectedFile 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 20.00 and later

JAWS 20.00 and later

JAWS 20.00 and later

Research It Functions

A Research It function provides or returns information about script activities caused by user interaction. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of Research It, such as the script for ResearchIt, for example. However, the focus of the present discussion is on functions related to Research It that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Research It functions include:

·         IterateLookupModules

·         LRL_Dialog

·         LRL_GetFirstLookupModule

For a complete listing of Research It functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the number of Research It Lookup module and rule sets currently in use, and displays the list, along with the primary Lookup module rule set in the Virtual Viewer for you to read as you prefer.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, first run the script from Notepad without making any changes to the default Research It rules. Then use the JAWS user interface to change the number of modules and rule sets you want displayed in your list whenever you invoke the Research It dialog. Also, change the primary Lookup module to something other than the default. (You can always return everything to their default values later.)

Finally, run the script again from Notepad to see your changes reflected in the Virtual Viewer.

Messages
; For msgModulesInfo, %1 is the number of module rule sets, %2 their names, and %3 the name of the primary module rule set, if it exists.
@msgModuleInfo
I am using %1 rule sets. They are:
%2
My primary Lookup module rule set is %3.
@@
EndMessages
Script MyResearchItModules ()
Var
            Int iNum, ; number of modules found.
            String sNum, ; the number converted to a string.
            String szModuleNames, ; provided by reference.
            String szRuleSets, ; Provided by reference.
            String sDefaultModule, ; provided by reference.
            String sDefaultRule, ; rule set of primary if exists, provided by reference.
            String sText
iNum = IterateLookupModules (szModuleNames, szRuleSets)
If ! iNum
            Return ; none found.
EndIf
sNum = IntToString (iNum)
szRuleSets = StringReplaceChars (szRuleSets, "\007", cscBufferNewLine)
If LRL_GetPrimaryLookupModule (sDefaultModule, sDefaultRule) ; a primary module and rule set was found.
            SText = FormatString (msgModuleInfo, sNum, szRuleSets, sDefaultRule)
Else
            sDefaultRule = "not found"
            SText = FormatString (msgModuleInfo, sNum, szRuleSets, sDefaultRule)
EndIf
EnsureNoUserBufferActive ()
UserBufferAddFormattedMessage (sText + cscBufferNewLine + cscBufferNewLine + cmsgBuffExit)
UserBufferActivate ()
JAWSTopOfFile ()
SayAll ()
EndScript

Additional Resources

For more details about working with Research It rules, see the summary in the General Scripting Concepts book called Creating research It Rules.

For more details on working with the Virtual Viewer, see the summary in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

Function: ConvertLookupModuleDataToList 

Description 

This list can be used to present to the user via dlgSelectItemInList.

Returns 

Type: string
 Description: a UI-capable list, presenting Rule set first, then Lookup Module name. This is the Pretty name assigned to the active rule set.
 

Parameters 

Param 1: 

Type: int
 Description: The number of items to expect in the subsequent module and rule set lists.
 Include: Required
 

Param 2: 

Type: string
 Description: The list of lookup modules - delimited by LIST_ITEM_SEPARATOR or the bell char (\007)
 Include: Required
 

Param 3: 

Type: string
 Description: The list of rule sets - delimited by LIST_ITEM_SEPARATOR or the bell char (\007)
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Function: DebugLookupModuleQueryUsingListOfModules 

Description 

Debug output for rule set. Error codes / text are placed in the Virtual Viewer for developers of rule sets and/or modules. This function only displays what's thrown up by Invoke calls. No parameters, as it runs as a stand-alone providing both a list of available rule sets and a prompt to enter the search term. To make your rule set discoverable first, put at least a dummy version of the files into the RuleSets folder of your subdirectory. Then go to Settings Center | Research It and make sure yours is checked, so it's available for listing. When asked for the search term, press ESC to send a blank string, or type the term and press ENTER. Note that in JAWS 12 or later, Settings Center replaces Configuration Manager.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Function: IterateLookupModules 

Description 

Retrieves all active lookup modules and rule set combinations. Both lists are delimited by the constant LIST_ITEM_SEPARATER, found in hjConst.jsh

Returns 

Type: int
 Description: the number of items in the lists
 

Parameters 

Param 1: 

Type: string
 Description: string to receive the list of lookup modules. This may contain duplicate entries, as more than one rule set would correspond to the same lookup module. Just use iteration to walk through this bell-char-delimited list.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: The delimited list of rule sets corresponding to the list of modules.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: The Primary lookup module defined in Default.jcf file.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Function: LRL_Dialog 

Description 

LRL_Dialog Displays the Research It dialog.

Returns 

Type: int
 Description: TRUE if the dialog is okayed; otherwise FALSE.
 

Parameters 

Param 1: 

Type: String
 Description: On okaying the dialog, strModuleName will be updated with the selected Research It module.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: String
 Description: On okaying the dialog, strRuleSet will be updated with the selected Research It rule set if one applies.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: strPhrase is an IN/OUT parameter. When the dialog is displayed, the Word Or Phrase combo edit field is updated with the contents of this field. When the dialog is okayed, the strPhrase is updated with the contents of the combo edit.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: LRL_GetFirstLookupModule 

Description 

LRL_GetFirstLookupModule is used to begin an iteration through the active lookup module/RuleSet combinations.

Returns 

Type: int
 Description: If the function succeeds, TRUE (1) is returned. Otherwise FALSE (0) is returned. If TRUE is returned, the return value can be passed to LRL_GetNextLookupModule to retrieve the next lookup module/rule set combination.
 

Parameters 

Param 1: 

Type: String
 Description: A string that will receive the name of the first lookup module/rule set combination.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: String
 Description: A string that will receive the rule set name of the first lookup module/rule set combination. If there is no rule set, the string will be set to "".
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: LRL_GetNextLookupModule 

Description 

LRL_GetNextLookupModule is used to continue an iteration through the active lookup module/RuleSet combinations.

Returns 

Type: int
 Description: If the function succeeds, TRUE (1) is returned. Otherwise FALSE (0) is returned.
 

Parameters 

Param 1: 

Type: String
 Description: A string that will receive the name of the next lookup module/rule set combination.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: String
 Description: A string that will receive the rule set name of the next lookup module/rule set combination. If there is no rule set, the string will be set to "".
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: LRL_GetPrimaryLookupModule 

Description 

The primary lookup module is the one designated to be used when the user single presses the LookupModuleInvoke keystroke. The PrimaryLookupModule key is stored in the JAWS Configuration File [options] section. The key may be application specific.

Returns 

Type: int
 Description: If the function succeeds, TRUE (1) is returned. Otherwise FALSE (0) is returned.
 

Parameters 

Param 1: 

Type: string
 Description: A string that will receive the name of the primary lookup module.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: A string that will receive the rule set name of the primary lookup module. If there is no rule set, the string will be set to "".
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: LRL_Invoke 

Description 

Invoke performs a request from a lookup module.

Returns 

Type: int
 Description: If the function succeeds, 0 is returned. Otherwise a non-zero value specifying the error is returned.
 

Parameters 

Param 1: 

Type: String
 Description: A string that contains the name of the lookup module.
 Include: Required
 

Param 2: 

Type: String
 Description: A string that contains the rule set specifier that the lookup module may use to perform the query. This string may be "" if no rule set applies
 Include: Required
 

Param 3: 

Type: String
 Description: A string containing the input data for the query. This may be the word or phrase at the current cursor. This value may be "" if the lookup module utilizes the Context and Offset arguments.
 Include: Required
 

Param 4: 

Type: String
 Description: A string containing context data for the query. For example, some lookup modules may utilize the sentence or paragraph containing the target word. This argument can be "".
 Include: Required
 

Param 5: 

Type: Int
 Description: The 0-based offset of the targeted word in lpszContext. -1 indicates no offset.
 Include: Required
 

Param 6: 

Type: String
 Description: A string that will be populated with the returned text. If a non-zero error code is returned, strOut may be populated with additional error information.
 Include: Required
 * Returns data by reference
 

Param 7: 

Type: String
 Description: A string that may be populated with custom formatted, lookup module specific information. For example, a translation lookup module may include information about the input and output locales for the translation. This string may be "".
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Script: ResearchIt 

Description 

Research It acts on either the text that is selected, or, if no text is selected, the word which was under the active cursor when this dialog was brought up.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.00 and later

Script: ResearchItByEnteringTerm 

Description 

Research It acts on either the text that is selected, or, if no text is selected, the word which was under the active cursor when this dialog was opened. Set which options are available using the Research It group in Settings Center.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.00 and later

Script: ResearchItDefaultLookup 

Description 

Research It uses the selected phrase, or, if no text is selected, the word under the active cursor. The Primary Location is set in Settings Center under Research It.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Script: ResearchItUsingPrimaryLocation 

Description 

Research It uses the selected phrase, or, if no text is selected, the word under the active cursor. The primary lookup source is Wiktionary.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: RunLookupModuleQuery 

Description 

Run Query either based on the supplied lookup module / rule set combination, or one or more of the optional parameters. You can leave both Rule set and Module blank to use the primary lookup module, or fill in one or both parameters. Fill in just he rule set parameter if you want to use the FS Lookup module. This is the case unless you have written or been supplied with a module dll using the Live Resource Lookup API. Most rule sets that apply to web services will use FSLookup (the default).

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The text to send to the lookup module and rule set combination.
 Include: Required
 

Param 2: 

Type: string
 Description: The rule set to apply to the supplied Lookup module. If no module was supplied, the FSLookup module will be used. Leave this param blank if you are using the primary (default) or your module does not accept rule sets.
 Include: Optional
 

Param 3: 

Type: string
 Description: Optional lookup module to use. If not supplied, the FSLookup Module will be used.
 Include: Optional
 

Param 4: 

Type: string
 Description: optional error string to use if the query causes Invoke to return 0 or the string is empty
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Function: RunLookupModuleQueryUsingListOfModules 

Description 

Generates a list of rule set - lookup module combinations, and generates a query based on the incoming text and the user's choice from the list.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The query to use - generally the word or selection at the active cursor.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 11.00 and later

Script: WeatherWidget 

Description 

The zip code format and data returned are all subject to the online weather interface - not owned by Freedom Scientific. If Weather Widget doesn't have a zip code stored, you will be prompted for your zip code and asked if you want to save it. All weather conditions come from an online weather interface and are presented in the Virtual Viewer. To use a different zip code, use WeatherWidgetClearLocationInfo to reset your location info and run Weather Widget again.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Script: WeatherWidgetClearLocationInfo 

Description 

After location info is cleared, you will be prompted for a new zip code. Optionally enter one or just press ESC. If you do not enter a zip code, Weather Widget will ask you for one the next time it runs.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Say Functions

A Say function provides or returns information about user interaction activities that cause JAWS to speak. JAWS uses this information to determine what to speak, for comparison purposes, and so on.

Some examples of Say functions include:

·         HomeEndMovement

·         SayLineUnit

·         SayPageUpDownUnit

For a complete listing of Say functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the SayLineUnit function is overwritten in the Notepad.jss script source file from the function in default.jss. If the user moves up or down by lines in the Notepad document window, a debug test message is spoken.

It is assumed that the function is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, write several lines of text in a Notepad document window. Then move up and down by lines. Notice that the function does not fire at all if you move by something other than line.

Void Function SayLineUnit (Int unitMovement, Optional  Int bMoved)
Var
            String smsgDown,
            String smsgUp
smsgDown = "I'm moving down."
smsgUp = "I'm moving up."
SayLineUnit(unitMovement, bMoved)
If GetObjectSubtypeCode () == wt_multiline_edit
            If UnitMovement == UnitMove_Next
                        SayMessage (ot_help, smsgDown)
            ElIf UnitMovement == UnitMove_Prior
                        SayMessage (ot_help, smsgUp)
            EndIf
EndIf
EndFunction

Function: HomeEndMovement 

Description 

Performs processing for the movement assigned to the Home and End keys then speaks.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: the movement direction, UnitMove_First or UnitMove_Last.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: Say 

Description 

Speak a string of text using a specific set of speech characteristics called output modes. It is possible to use separate output modes to speak title lines, dialog controls, menu items, etc. By using the SayMessage function instead, you will be able to assign short and long messages to many output types for JAWS Help and other information. With Desktop JAWS 5 and later, we suggest that you no longer speak control type and state information with this function. Instead, use IndicateControlType and IndicateControlState. Type information includes messages such as "edit" or "button." State information includes messages such as "checked" or "not checked." Note that in JAWS 12 or later, Settings Center replaces Configuration Manager.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: Type the text that is to be spoken, or specify a variable name or script function that can provide the required text string. Text strings that are typed must be enclosed within quotation marks.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the constant name that represents the output mode to be used when speaking this text. See the JFW documentation for specific uses of different output modes. In many cases, these are specific, and can be disabled from within Settings Center, should the user select not to hear a specific type of information. Examples of output modes are: OT_HELP, OT_JAWS_MESSAGE or OT_STATUS. Note that in JAWS 12 or later, Settings Center replaces Configuration Manager.
 Include: Required
 

Param 3: 

Type: Int
 Description: With Desktop JAWS 5 or later, enter TRUE if your string is marked up with behaviors, e.g. you used any of the SMM functions.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayCursorMovementException 

Description 

When tested conditions are true, function managing behavior for cursor movement scripts allow management of behavior to pass down to the next JSB file. All the conditions that return true for all jsb files will eventually be handled in the default scripts.

Returns 

Type: int
 Description: True for conditions that should pass down to the next level JSB file for SayLineUnit, SayWordUnit, SayCharacterUnit, SayPageUpDownUnit, and SpeakHomeEndMovement.
 

Parameters 

Param 1: 

Type: int
 Description: One of the Unit movement constants from HJConst.jsh.
 Include: Required
 

Param 2: 

Type: int
 Description: True if movement occured, false otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: SayInteger 

Description 

This speaks a string of numeric data.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type a variable name or choose a script function that will provide numeric data.
 Include: Required
 

Param 2: 

Type: int
 Description: Allows the number to be spoken in something other than base 10. Acceptable values are 2 through 16.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayLineUnit 

Description 

Moves to the line specified by the unit movement and then speaks. For JAWS 8.0 and later, only speaks the line, the calling script must perform the movement first.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The movement unit. The movement unit defines the type of movement which was performed before speaking. See HJConst.jsh for unit movement constants, all prefixed by UnitMove_.
 Include: Required
 

Param 2: 

Type: int
 Description: Boolean denoting whether or not a navigation movement occured triggering the call to speak the line. This parameter is only valid for JAWS 8.0 and later.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SayMessage 

Description 

This function takes short and long messages and speaks the appropriate message based on the given output type. If using the output type of OT_USER_BUFFER, which is designed to present text in the User buffer, do not use the short message as it will be ignored. With Desktop JAWS 5 and later, we suggest that you no longer speak control type and state information with this function. Instead, use IndicateControlType and IndicateControlState. Type information includes messages such as "edit" or "button." State information includes messages such as "checked" or "not checked"

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The constant representing the desired output type for the given set of messages. A list of available output type constants can be found in hjconst.jsh.
 Include: Required
 

Param 2: 

Type: String
 Description: A quoted string of text, a message constant, or a string variable containing the desired long message. If you require only one message, enter it for this parameter and leave the third parameter blank
 Include: Required
 

Param 3: 

Type: String
 Description: A quoted string of text, a message constant, or a string variable containing the desired short message. If you would like the short message to speak nothing, enter the constant cmsgSilent for this parameter. For the user buffer (OT_USER_BUFFER), enter nothing at all.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayObjectActiveItemWithDescription 

Description 

Says the active element in certain controls. For example in a list view, it will say the selected item. In a menu, it will say the active menu item. In a dialog box, it will say the selected tab. This is just like SayObjectActiveItem but any description is also spoken.

Returns 

Type: Void
 Description: no return description.
 

Parameters 

Param 1: 

Type: int
 Description: TRUE if you wish to have JAWS announce positional information such as n of m items, FALSE otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: SayPageUpDownUnit 

Description 

Performs processing for the movement assigned to the PageUp and PageDown keys then speaks.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: the movement direction, UnitMove_Next or UnitMove_Prior.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SayString 

Description 

The SayString makes the speech synthesizer speak a message. This function is now obsolete since the implementation of the sayMessage function. This function remains for the purpose of testing and debugging. If you are developing new scripts, it is recommended that you do not use this function. Instead, use the SayMessage function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: This parameter must be either a text string enclosed in quotes, a variable name that contains a string value, or a function that returns a string value.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayTopBottomUnit 

Description 

Moves to the top or bottom, specified by the unit movement and then speaks.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: the movement unit. The movement unit defines the type of movement to be performed before speaking. See HJConst.jsh for unit movement constants, all prefixed by UnitMove_.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SayWordUnit 

Description 

Moves to the word specified by the unit movement and then speaks.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: the movement unit. The movement unit defines the type of movement to be performed before speaking. See HJConst.jsh for unit movement constants, all prefixed by UnitMove_.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SpeakHomeEndMovement 

Description 

used by function HomeEndMovement to handle all speaking, except for key label, when Home or End is pressed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.00 and later

Function: SpellString 

Description 

Spells a string of text. This is similar to the SayString function. However, it spells the string letter by letter instead of speaking words.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: Type the text that is to be spelled, or specify a variable name or script function that can provide the required text string. Text strings that are typed must be enclosed within quotation marks.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Screen Text Functions

A Screen Text script or function provides or returns information about screen text activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display screen text in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of screen text user interaction, such as:

 

SayCharacter

SayWord

SayLine

SpellWord

SpellLine

However, the focus of the present discussion is on functions related to screen text that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Screen Text functions include:

·         GetCharacter

·         GetWord

·         GetLine

·         PhoneticSpellHook

·         SpellWordHook

For a complete listing of Screen Text functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script checks to see whether there is a character on the current line. If no character is found, the screen reader indicates an error message and the script ends. If a character is found, JAWS displays in the virtual viewer what the current character, current word, and current line are so that you may read the information however you prefer.

To set up the example, simply type some text into the Notepad document window. Then run the script repeatedly after moving the cursor to different positions on the current line, or on a line with no text.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MyScreenTextTest ()
Var
            String sChar, ;current character
            String sWord, ; current word
            String sLine, ; current line
            String sTextUnit, ; current unit - character, word, or line
            String sMsgText_l, ; long message saying the current type of unit and what it is.
            String sMsgText_s,  ; short message saying the current type of unit and what it is.
            String sMsgNoText ; error message if no text is found.
;Ensure that the document window has the focus and not a menu or dialog.
If DialogActive ()
|| GetObjectSubtypeCode () != wt_multiline_edit
            Return
EndIf
Let smsgNoText = "There is no text on this line."
Let sChar = GetCharacter ()
; Test for whether there is no character.
; If no character is found on the current line, there is no point in trying to find the current word or line.
If sChar == cscNull
            SayMessage (ot_error,sMsgNoText)
            Return
EndIf
Let sWord = GetWord ()
Let sLine = GetLine ()
; for sMsgText_l and sMsgText_s, %1 is the type of text unit, %2 is the text of that text unit.
Let sMsgText_l = "The current %1 is %2"
Let sMsgText_s = "current %1 - %2"
;Ensure there is no virtualized message already in the user buffer.
; If so, clear the user buffer.
If UserBufferIsActive ()
            UserBufferDeactivate ()
EndIf
UserBufferClear ()
; Since a character is found:
sTextUnit = "character"
UserBufferAddFormattedMessage (sMsgText_l, sMsgText_s, sTextUnit, sChar + cscBufferNewLine)
If sWord != cscNull ; A word is found.
            sTextUnit = "word"
            UserBufferAddFormattedMessage (sMsgText_l, sMsgText_s, sTextUnit, sWord + cscBufferNewLine)
EndIf
If sLine != cscNull ; A line is found.
            sTextUnit = "line"
            UserBufferAddFormattedMessage (sMsgText_l, sMsgText_s, sTextUnit, sLine + cscBufferNewLine)
EndIf
UserBufferAddText (cscBufferNewLine + cMsgBuffExit)
UserBufferActivate ()
JAWSTopOfFile ()
PerformScript SayAll ()
EndScript

XML Funtions

An example of a function that works with XML is GetScreenXML. The “XML” refers to how the information that JAWS can retrieve from the screen is marked up. You can use this function if there is no other way to get information about the text on the screen.

Code Sample

You might use this function to get the screen XML as follows:

Var
            Int left,
            Int right,
            Int top,
            Int bottom
GetWindowRect (GetFocus(), left, right, top, bottom)
Var
            String sScreenXML = GetScreenXML (left, top, right, bottom)

Now check to see if the string sScreenXML contains information from the screen that you can use enclosed in an XML tag structure. If it does, change this into an object collection, using code such as:

Var
            Object oMSXML = CreateObject("msxml2.DOMDocument.6.0")
If !oMSXML
            SayString("Did not get oXML")
   Return
EndIf
oMSXML.async = false
oMSXML.resolveExternals = false
oMSXML.loadXML(sScreenXML)

Now that you have an object structure, you can use XML extraction methods to get nodes of interest.

Some areas of the JAWS code that illustrate how to extract nodes and node information are:

·         HomeRowUIAObject.jss

·         LiveResourceLookup.jss

·         Skype.jss

Note: You must have an understanding of xPath and xQuery to work with the nodes and extract information from the object tree. But you can try to see if the application has UIA support because that might be a better method to implement.

Additional Resources

For more details on working with hooking functions such as the hook functions listed above, see the Key Management summary in the General Scripting Concepts book called Hook Functions.

For more details on working with the virtual viewer, see the summary in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

For more information on Microsoft MSXML COM objects, see the Microsoft Developer Network for Building MSXML Applications

Function: AnalyzeTextLine 

Description 

Calls the text analyzer to analyze the text on the current line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: ClearRect 

Description 

Sets the passed rectangle coordinates to 0.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The left edge coordinate of the rectangle.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: The top edge coordinate of the rectangle.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: Int
 Description: The right edge coordinate of the rectangle.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: The bottom edge coordinate of the rectangle.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: DoJAWSFind 

Description 

Searches the current screen area to find any instance of the text or graphics that you enter. To search for graphics, enter the text label of the graphic. Use the application's find or search feature for more extensive searches.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: True if the JAWSFind direction is set to reverse by default, false otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: GetCharacter 

Description 

Copies the character or graphic label where the active cursor is positioned. The copied text can then be used by other script functions.

Returns 

Type: String
 Description: Provides a character or graphic label.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCharacterPhonetic 

Description 

returns the phonetic rendering of the character at the cursor or an empty string if there is no phonetic rendering.

Returns 

Type: string
 Description: The phonetic representation of the character under the cursor.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20.00 and later

Function: GetChunk_ColorNA 

Description 

Similar to GetChunk, but whereas GetChunk treats sections of text with differing colors as separate chunks, GetChunk_ColorNA disregards color as a factor in sectioning text.

Returns 

Type: String
 Description: Provides the color independent chunk of information.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: GetChunk 

Description 

Obtains the chunk of information to which the active cursor is pointing. A chunk is text and graphic information that was written to the screen in a single operation. GetChunk is similar to GetField, however, the GetField function uses logic to determine the text that is to be obtained, while GetChunk simply obtains the text that was stored in the off screen model as a single unit.

Returns 

Type: String
 Description: Provides the chunk of information.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCurrentFontData 

Description 

Retrieves a collection of font data, to be used by the text analyzer when moving to a font change.

Returns 

Type: collection
 Description: A collection of font data. Includes member flags, and depending on the flags may contain name, attrib, points, color, background.
 

Parameters 

Param 1: 

Type: int
 Description: the Flags indicating what font data should be retrieved, see the font-related flags governing which inconsistencies are detected by the text analyser
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: GetDetailedFontChangesInfo 

Description 

Retrieves a detailed description of the difference between the font information passed as a parameter and the font information located at the cursor.

Returns 

Type: string
 Description: the detailed description of the font differences.
 

Parameters 

Param 1: 

Type: collection
 Description: Font data to compare against the current font data.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: GetField 

Description 

Obtains the information in the field where the active cursor is pointing. A field is a section of information (usually text) that has a common attribute. Examples are; bold, underlined, italics, or strikeout. The use of the attribute must be contiguous. GetField is similar to GetChunk, however, the GetField function uses logic to determine the text that is to be obtained, while GetChunk simply obtains the text that was stored in the Off Screen Model as a unit.

Returns 

Type: String
 Description: Provides a field of information.
 

Parameters 

Param 1: 

Type: int
 Description: If true, and the cursor is at the offset just after the last character of text in the field, jaws returns the preceding field.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFromStartOfLine 

Description 

Retrieves text on the current line that is located to the left of the active cursor.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJAWSFindText 

Description 

Gets the text to be located when JAWSFindNext runs.

Returns 

Type: string
 Description: the text which JAWSFindNext will use when searching
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.10 and later

Function: GetLine 

Description 

Copies the text from the line where the active cursor is positioned. The copied text can then be used by other script functions.

Returns 

Type: String
 Description: Provides a line of text.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLiveRegionText 

Description 

This function returns the text of a live region in a given window. Optionally supply the ID of a particular Live Region, or leave it blank to retrieve the text of the last Live Region updated in the specified window.

Returns 

Type: string
 Description: The text.
 

Parameters 

Param 1: 

Type: handle
 Description: The window handle of the window containing the Live Region.
 Include: Required
 

Param 2: 

Type: string
 Description: Optionally supply the ID of the Live Region, or leave blank.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetParagraph 

Description 

This function returns the text of the paragraph at the cursor.

Returns 

Type: String
 Description: The paragraph.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetPriorCharacter 

Description 

If this function returns a null string, the cursor is at the beginning of the line.

Returns 

Type: String
 Description: the prior character from the cursor position.
 

Parameters 

Param 1: 

Type: Int
 Description: This optional parameter was added in JAWS 10.0. The default value for the parameter it FALSE. This parameter controls whether markup information is included when the text of the character is returned.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetPriorWord 

Description 

gets the word prior to the cursor location without moving the cursor.

Returns 

Type: string
 Description: the prior word.
 

Parameters 

Param 1: 

Type: int
 Description: FALSE by default.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetScreenEcho 

Description 

Obtains the current screen echo setting. The screen echo setting determines the amount of information that is to be read as the information is displayed on the desktop. The Say NonHighlighted text and Say Highlighted text functions often check the setting for screen echo before deciding how much information to speak.

Returns 

Type: Int
 Description: "ECHO_NONE" = 0, "ECHO_HIGHLIGHTED" = 1, "ECHO_ALL" = 2.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetScreenXML 

Description 

This function obtains screen content as XML which may be processed by the Microsoft MSXML Com Object. To use this XML, you will first need to create an object instance to Microsoft's XML Com interface. Use the following: CreateObject("msxml2.DOMDocument.6.0"), or take a look at HomeRowUIAObject.jss for code examples using XML. Optionally, do a search on the Internet for help on data members for the Microsoft XML object.

Returns 

Type: string
 Description: The screen content as XML.
 

Parameters 

Param 1: 

Type: int
 Description: left
 Include: Optional
 

Param 2: 

Type: int
 Description: top
 Include: Optional
 

Param 3: 

Type: int
 Description: right
 Include: Optional
 

Param 4: 

Type: int
 Description: bottom
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 14.00 and later

Function: GetSentence 

Description 

This function returns the text of the sentence at the cursor.

Returns 

Type: String
 Description: The sentence.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTextBetween 

Description 

Gets the text between two horizontal points on the screen.

Returns 

Type: String
 Description: The text located between the two pixel locations.
 

Parameters 

Param 1: 

Type: Int
 Description: coordinate of left edge of text to retrieve.
 Include: Required
 

Param 2: 

Type: Int
 Description: coordinate of right edge of text to retrieve.
 Include: Required
 

Param 3: 

Type: Int
 Description: The Coordinate System to be used to interpret left and right. The default is to interpret them as pixel locations on the screen. See the COORDSYS_xxx constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetToEndOfLine 

Description 

Retrieves text on the current line that is located to the right of the current cursor.

Returns 

Type: String
 Description: the text to the right of the current cursor.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWord 

Description 

Copies the word where the active cursor is positioned. The copied text can then be used by other script functions

Returns 

Type: String
 Description: Provides a word.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWordInContext 

Description 

When in a spell check, find, or replace dialog, this function gets the line of text from within a document that contains the active word in the dialog. Used, for example, to speak the context of a particular word which the spell check dialog thinks is misspelled.

Returns 

Type: String
 Description: Provides a line of text containing the word in question.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: GetWordList 

Description 

This function retrieves a word list (with optional occurance counts for words which occur more than once) for the current paragraph or document.

Returns 

Type: string
 Description: The delimited list of words with an optional occurrence count in parentheses after each word which occurs more than once.
 

Parameters 

Param 1: 

Type: string
 Description: the delimiter to use to separate each list item (defaults to the LIST_ITEM_SEPARATOR defined in hjconst.jsh).
 Include: Optional
 

Param 2: 

Type: int
 Description: TRUE to include the occurance count for words occurring more than once in the paragraph or document (defaults to FALSE).
 Include: Optional
 

Param 3: 

Type: int
 Description: TRUE to only obtain the word list for the current paragraph, FALSE to retrieve the list for the entire document (defaults to FALSE).
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: IndicateInconsistenciesInRange 

Description 

This function is called from other scripts to speak or indicate via sound all the inconsistencies in the specified text range.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: 0 line, 1 sentence, 2 paragraph at cursor.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IndicateInconsistency 

Description 

This function is called from IndicateInconsistenciesInRange and other functions to speak the data of an inconsistency detected in text.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: Type of inconsistency detected
 Include: Required
 

Param 2: 

Type: string
 Description: The character string containing the characters of the inconsistency
 Include: Required
 

Param 3: 

Type: int
 Description: The offset from the start of the range where the inconsistency occurred.
 Include: Required
 

Param 4: 

Type: collection
 Description: If moving to the inconsistency to be spoken, the collection is used to pass data about the font prior to the move. This data is compared to the current font data to determine what should be reported as a font change. If not moving to the inconsistency to be spoken, omit this parameter since font changes cannot be compared.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: IsMovingByCharacter 

Description 

This function returns true when the selection movement unit is by character.

Returns 

Type: int
 Description: True if the movement unit is next or prior character, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsMovingByFirstOrLastLine 

Description 

This function returns true when the selection movement unit is to the first or last line of the document or message.

Returns 

Type: int
 Description: True if the movement unit is the first or last line , false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsMovingByHomeOrEnd 

Description 

This function returns true when the selection movement unit is to the start or end of the current line.

Returns 

Type: int
 Description: True if the movement unit is the start or end of the current line, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsMovingByLine 

Description 

This function returns true when the selection movement unit is by line.

Returns 

Type: int
 Description: True if the movement unit is next or prior line, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsMovingByPage 

Description 

This function returns true when the selection movement unit is by page. Note that when in Microsoft Word, page is actually derived from Ctrl+PageUp/Ctrl+PageDown.

Returns 

Type: int
 Description: True if the movement unit is next or prior page, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: IsMovingByParagraph 

Description 

This function returns true when the selection movement unit is by paragraph.

Returns 

Type: int
 Description: True if the movement unit is next or prior paragraph, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsMovingBySentence 

Description 

This function returns true when the selection movement unit is by sentence.

Returns 

Type: int
 Description: True if the movement unit is next or prior sentence, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsMovingByWord 

Description 

This function returns true when the selection movement unit is by word.

Returns 

Type: int
 Description: True if the movement unit is next or prior word, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: IsTextAnalysisValid 

Description 

Used to determine if the current line is valid for text analysis, such as whether or not the current line is in a multiline edit window or in a document.

Returns 

Type: Int
 Description: True if the current line is valud for text analysis, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: JAWSFind 

Description 

Finds text on the screen by presenting a dialog for input of text, direction, and choice to search for graphic or text.

Returns 

Type: Int
 Description: True if the search item was found, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: True if the find direction should be set to reverse by default, false otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSFind 

Description 

Searches the current screen area to find any instance of the text or graphics that you enter. To search for graphics, enter the text label of the graphic. Use the application's find or search feature for more extensive searches.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: JAWSFindNext 

Description 

Finds text on the screen after a successful initial find search.

Returns 

Type: Int
 Description: TRUE if successful, FALSE if not.
 

Parameters 

Param 1: 

Type: Int
 Description: set this to true to find the prior occurance.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: JAWSFindNext 

Description 

Searches the current screen or virtual document for the next instance of the text or graphic last entered in the JAWS Find dialog. Use the application's Find or Search feature for more extensive searches.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: JAWSFindPrior 

Description 

Searches the current screen or virtual document for the prior instance of the text or graphic last entered in the JAWS Find dialog. Use the application's Find or Search feature for more extensive searches.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: lvGetColumnHeader 

Description 

This function enables you to obtain the header for a given listview column.

Returns 

Type: string
 

Parameters 

Param 1: 

Type: handle
 Description: hwnd of listview.
 Include: Required
 

Param 2: 

Type: int
 Description: the column of the listview whose header you want.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Script: MoveToFirstInconsistency 

Description 

Moves the cursor to the first inconsistency and announces or indicates the type of inconsistency found by Text Analyzer, and announces or indicates the type of inconsistency found. Inconsistencies are common typing mistakes like runs of spaces or extra punctuation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: MoveToLastInconsistency 

Description 

Moves the cursor to the last inconsistency and announces or indicates the type of inconsistency found by Text Analyzer, and announces or indicates the type of inconsistency found. Inconsistencies are common typing mistakes like runs of spaces or extra punctuation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Script: MoveToLastList 

Description 

When the Virtual Cursor is active, it is moved to the last List in the document or web page.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: MoveToNextInconsistency 

Description 

Moves the cursor to the next inconsistency found by Text Analyzer, and announces or indicates the type of inconsistency found. Inconsistencies are common typing mistakes like runs of spaces or extra punctuation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Script: MoveToPriorInconsistency 

Description 

Moves the cursor to the prior inconsistency found by Text Analyzer, and announces or indicates the type of inconsistency found. Inconsistencies are common typing mistakes like runs of spaces or extra punctuation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: PhoneticSpellHook 

Description 

For more information on how this process works, see the built in AddHook documentation. You can view this by using the Insert Function dialog and selecting AddHook in the function list.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Receives the name of the script that is about to be called
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PresentAllOccurrences 

Description 

Presents all of the occurrences of a specified string in the current document in a virtual view for navigation and instant location.

Returns 

Type: int
 Description: the number of occurrences of the specified string presented.
 

Parameters 

Param 1: 

Type: string
 Description: the word whose occurrences and context you want displayed.
 Include: Required
 

Param 2: 

Type: int
 Description: 0 line, 1 sentence, 2 paragraph: the unit of context to show for each word (defaults to line) occurrence.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Script: PresentAllOccurrencesOfWord 

Description 

Run WordList and choose a word from the list. Then, display the summary at will by using this script to present all occurrences of the word.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: ProcessNewText 

Description 

Used to force a NewTextEvent call. Can be useful if you need to call NewTextEvent before FocusChangedEvent.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ReadContextLine 

Description 

This function moves the JAWSCursor to the line of text that is highlighted when a dialog moves through a document, such as SpellCheck or Find. If the highlighted line is found, TRUE is returned. If not true, try using the DragDialogWindow to pull the dialog window out of the way.

Returns 

Type: Int
 Description: TRUE if word in Context found, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayAll 

Description 

This says the active window from the position of the active cursor to the bottom of the window. The cursors move as text is read. If the PC cursor is active the window will scroll to display additional text.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: This parameter may be used to indicate whether or not the Say All speech synthesizer should be used. The default value of this parameter if FALSE which causes JAWS to use the primary speech synthesizer for the Say All operation.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayAll 

Description 

If the PC cursor is active, JAWS scrolls the screen by moving the PC cursor down. If the JAWS cursor is active, the rest of the window is read by moving the JAWS cursor down a line at a time if reading manually.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: bIgnoreUseSAPI5DuringSayAllOption Optional parameter that if set to True causes the Say All script to ignore the user's preference for the "Use SAPI 5 During Say All" JCF option. This parameter is only set to True when the Say All script is called from the "Frame Loaded Event" function.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayAllBy 

Description 

Determines whether say all will read by line, sentence, or paragraph.

Returns 

Type: String
 Description: description of value to be displayed as value of SayAllBy
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayByTypeForScriptSayLine 

Description 

Used by the SayLine script to speak items according to their type. This function can be overwritten for SayLine to speak a given type, without the need to add various exceptions that are in the default SayLine script.

Returns 

Type: int
 Description: True if the line was spoken according to its type and no further processing is required by script SayLine.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: SayCharacter 

Description 

This says the character or graphic located at the position of the active cursor.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: This optional parameter was added in JAWS 10.0. The default value for the parameter is TRUE. This parameter controls whether markup information is included when the text of the character is returned.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayCharacter 

Description 

Reads the character or graphic symbol at the location of the active cursor. Press twice quickly to say the character phonetically. Press three times quickly to say the unicode value of the character.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayCharacterPhonetic 

Description 

Uses special pronunciation rules to read the character located at the position of the active cursor. For example, A is pronounced alpha, B bravo, etc. The association between characters and their phonetic pronunciations are made in the [PhoneticSpell] section of .JCF files.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayChunk 

Description 

Says the chunk of information to which the active cursor is pointing. A chunk is text and graphic information that was written to the screen in a single operation. SayChunk is similar to SayField. However, the SayField function uses logic to determine the text that is to be spoken, while SayChunk simply reads the text that was stored in the off screen model as a single unit.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayField 

Description 

This says the field of text where the active cursor is pointing. A field of text is a section or block of text that has a common attribute such as bold, underlined, italics, or strikeout. The use of the attribute must be contiguous. The SayField function uses logic to determine the text that is to be spoken, while the SayChunk function simply says what JAWS considers to be a single block of text.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: If true, and the cursor is at the offset just after the last character of text in the field, jaws speaks the preceding field.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayFromCursor 

Description 

Reads text on the current line that is located to the right of the current cursor. It will read the character that is being pointed to by the insertion point or active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayFromCursor 

Description 

Reads from the current cursor position to the end of the line. Press this keystroke twice quickly to spell it instead.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayLine 

Description 

This says a line of text where the active cursor is located. JAWS must interpret whether text that has a similar vertical position is on the same line. When the PC cursor is active, it only reads the information that is within the active child window. When it is used with other cursors, then it reads from one edge of the application window to the other.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Optional parameter added in JAWS 7.1. Used to indicate whether or not the line should be highlighted as the text is being spoken. The possible values are as follows: If the parameter is not present or is equal to 0, do nothing; If the parameter is equal to 1, highlight each word as it is being spoken; If the parameter is equal to 2, highlight the entire line. NOTES: (1) This functionality is not currently supported in all applications. (2) The highlight rectangles will only be drawn if MAGic is running.
 Include: Optional
 

Param 2: 

Type: int
 Description: Set this parameter to TRUE to avoid speaking object information such as the prompt of an object as part of this line. This parameter is most often set to true when this function is called from the SayNextLine and SayPriorLine scripts to avoid speaking the prompt when arrowing over forms mode controls whose prompt is already spoken from the prior line. This parameter is available starting with JAWS version 10.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayLine 

Description 

If the PC cursor is active, reading will be restricted to the current item or window. Otherwise, reading will include all the text on approximately the same line, even if it is outside the current control or window, unless JAWS cursor Restriction is on. To spell the line, press this keystroke twice quickly.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayLineInsteadOfSayAll 

Description 

Used to determine if the SayAll script should perform a SayLine instead of a SayAll. Return true if SayAll is undesirable for the current cursor location.

Returns 

Type: int
 Description: True if the SayAll script should say the current line instead of attempting to perform a SayAll, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.00 and later

Function: SayParagraph 

Description 

Reads the paragraph containing the character on which the active cursor is positioned.

Returns 

Type: Int
 Description: TRUE if a paragraph was found at the current cursor location, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: If true, and we fail to get paragraph information by using more advanced interfaces, don't attempt to read paragraph text using the information written on the screen. This is useful for quelling extra verbiage in specific situations. Setting this parameter to true is not recommended. The default value, if the parameter is not specified, is FALSE. Please note this parameter is only available in JAWS versions later than 8.0, with a build number greater than 1000.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayParagraph 

Description 

Reads the current paragraph.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SaySentence 

Description 

Reads the sentence containing the character on which the active cursor is positioned.

Returns 

Type: Int
 Description: TRUE if a sentence was found at the current cursor location, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SaySentence 

Description 

Speaks the current sentence.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayTextBetween 

Description 

Says the text between two points on the screen.

Returns 

Type: Int
 Description: TRUE if text spoken, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: coordinate of left edge of area to speak.
 Include: Required
 

Param 2: 

Type: Int
 Description: coordinate of right edge of area to speak.
 Include: Required
 

Param 3: 

Type: Int
 Description: The Coordinate System to be used to interpret left and right. The default is to interpret them as pixel locations on the screen. See the COORDSYS_xxx constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayToCursor 

Description 

Reads text on the current line that is located to the left of the active cursor. It does not read the character that is being pointed to by the insertion point or active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayToCursor 

Description 

reads from the start of the line up to the cursor, not including the current character. To spell it instead, press this keystroke twice quickly.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayToPunctuation 

Description 

Speaks text between the current cursor and the end of the line or the next punctuation symbol, which ever comes first.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayToPunctuation 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayWord 

Description 

This says the word or graphic located at the position of the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayWord 

Description 

Reads the word or graphic symbol at the active cursor. If the PC cursor is active, JAWS looks for the visible caret or the light bar. If the JAWS cursor is active, it speaks the word or graphic at the mouse pointer. To spell the word, press twice quickly.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenEcho 

Description 

Cycles through the various settings for screen echo. The screen echo setting determines the amount of information that is to be read as the information is displayed on the desktop. The Say NonHighlighted text and Say Highlighted text functions often check the setting for screen echo before deciding how much information to speak.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ScreenEchoToggle 

Description 

Toggles the screen echo. The default is Highlighted, which speaks only highlighted text when it appears on the screen. "All" speaks all the text that gets written to the screen, and "None" speaks none of the text.

Returns 

Type: String
 Description: description of value to be displayed as value of Screen Echo.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetJAWSFindText 

Description 

Sets the text to be located when JAWSFindNext runs.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The text to be used with JAWSFindNext.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.10 and later

Script: SetScreenEcho 

Description 

Toggles the screen echo. The default is Highlighted, which speaks only highlighted text when it appears on the screen. "All" speaks all the text that gets written to the screen, and "None" speaks none of the text.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpellFromCursor 

Description 

This function spells the contents of the current line from the cursor to the end of the line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SpellLine 

Description 

This function spells the contents of the current line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SpellMode 

Description 

Phonetic will speak each character's phonetic expression. Example, alpha for a, etc. Capital letters are announced using the word Cap in front of them.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpellModeToggle 

Description 

Sets the OPT_SPELL_PHONETIC JCF option monitored by internal spell functions.

Returns 

Type: String
 Description: The new option (text).
 

Parameters 

Param 1: 

Type: Int
 Description: Pass True to keep the value the same, false to update it.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpellToCursor 

Description 

This function spells the contents of the current line upto the cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpellWord 

Description 

Spells the word at the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpellWordHook 

Description 

SayWord sets this hook when it is called twice quickly. The hook is in effect until a script other than SayNextWord or SayPriorWord is called. When SayNextWord or SayPriorWord is called, SpellWordHook runs its special code and aborts the call, otherwise, it unhooks itself and passes on the call.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Name of the script that is being intercepted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpellWordPhonetic 

Description 

This function spells the word at the active cursor using Phonetic alphabet.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SupportsEditCallbacks 

Description 

Checks the current control to determine if there is an edit callback interface available to handle the caret movement

Returns 

Type: Int
 Description: TRUE if edit callback interface is being used, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: ToggleTextAnalyzer 

Description 

This keystroke toggles the Text Analyzer between off and Describe All Inconsistencies. For more options, use the Text Analyzer group in Settings Center. Inconsistencies are common typing mistakes like runs of spaces or extra punctuation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: WordList 

Description 

Excluding stop words, creates a list of words in a document along with a numeric value showing the number of times the word occurred. The list is sorted in so that the highest occurrence count appears first in the list. You can choose OK to move to the next occurrence of a chosen word, or create a summary by choosing the Summary button.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Scripts Functions

A Scripts function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Scripts, such as the script for QuickSettings, for example. However, the focus of the present discussion is on functions related to scripts that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Scripts functions include:

·         GetCurrentScriptKeyName

·         GetScriptAssignedTo

·         GetScriptFileName

·         GetScriptKeyName

·         IsSameScript

For a complete listing of Scripts functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script checks to see whether the script has been called twice quickly by its key assignment. If it has, then JAWS speaks and flashes in Braille the scripts key name. Otherwise, JAWS indicates an error message.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MyScriptsTest ()
Var
            String sMsgError
sMsgError = "You have not pressed the key twice quickly to get the key name of this script."
If IsSameScript () >= 1
            SayMessage (ot_User_requested_information, GetScriptKeyName ("MyScriptsTest"))
Else
            Delay (5)
            SayMessage (ot_error,sMsgError)
EndIf
EndScript

Script: AdjustBrailleOptions 

Description 

This tree view contains all the options available in the Braille group of the Adjust JAWS Options dialog.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.00 and later

Script: AdjustJAWSOptions 

Description 

Using Quick Settings, you can change many of the application-specific settings, as well as any individual document settings that exist for an application. You can configure each application-specific setting to saved changes to disk as a permanent setting, save only until your JAWS session has ended, or only as long as the current application is in focus. Document settings, however, are always saved to disk.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: CallFunctionByName 

Description 

Allows dynamically calling a function whose name is passed as the first argument. This means that the function name does not need to be known at compile time and can be passed in a variable. Note that using CallFunctionByName bypasses all checking of argument types that happens when a function is invoked normally.

Returns 

Type: variant
 Description: whatever the function being called returns
 

Parameters 

Param 1: 

Type: String
 Description: the name of the function to be run
 Include: Required
 

Param 2: 

Type: Variant
 Description: the function's 1st argument
 Include: Optional
 

Param 3: 

Type: Variant
 Description: the function's second argument
 Include: Optional
 

Param 4: 

Type: Variant
 Description: the function's third argument
 Include: Optional
 

Param 5: 

Type: Variant
 Description: the function's 4th argument
 Include: Optional
 

Param 6: 

Type: Variant
 Description: the function's 5th argument
 Include: Optional
 

Param 7: 

Type: Variant
 Description: the function's sixth argument
 Include: Optional
 

Param 8: 

Type: Variant
 Description: the function's seventh argument
 Include: Optional
 

Param 9: 

Type: Variant
 Description: the function's eighth argument
 Include: Optional
 

Param 10: 

Type: Variant
 Description: the function's 9th argument
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: CaptureAllGestures 

Description 

If enabled, all gestures will be captured by JAWS, so that none will pass through to Windows. If disabled (default), then only gestures bound to scripts will be captured.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: 1 for enable, 0 for disable
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: cStrBrailleList 

Description 

This function returns the default Braille verbosity list. The functions is found in VerbosityCore.jss. Use the new TreeCoreGetDefault version with JAWS 9 and later for AdjustJAWSOptions dialog box.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: cstrBrailleMarkingList 

Description 

This function returns the default Braille marking verbosity list.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: cStrDefaultHTMLList 

Description 

This function returns the default HTML verbosity list. This function is now legacy, and lives in VerbosityCore.jss. Use its TreeCore companion for VCursor options to add to the AdjustJAWSOptions tree.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: cStrDefaultList 

Description 

This function returns the default verbosity dialog list. The list is now legacy, but is replaced with the new TreeCore functions.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: cStrTableBrailleList 

Description 

This function returns the default Braille HTML table verbosity list. This list is now legacy, and the functions live in VerbosityCore.jss. For new functionality, use the TreeCore companion functions in default.jss

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: Delay 

Description 

Makes a script stand still for a specified period of time. It causes a script to stop, wait a period of time, and then resume again. It is different than the Pause function which yields to the processing needs of applications.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type a number to indicate the amount of time that the script should be delayed. The number 1 equals one-tenth of a second. The number 10. equals one second. Do not use numbers withdecimals, and do not use quotation marks.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE to suppress checking for and processing FocusChangedEvent and NewTextEvent functions before returning from the delay.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: EnablePerModeGestures 

Description 

If enabled (default), mode specific gestures will be available. If disabled, only base gestures will be available.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: 1 for enable, 0 for disable
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetCurrentKeyboardLayoutDisplayName 

Description 

 

Returns 

Type: string
 Description: The registry value for the key HKLM\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\\Layout Display Name
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: GetCurrentKeyboardLayoutText 

Description 

 

Returns 

Type: string
 Description: The registry value for the key HKLM\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\\Layout Text
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

This function is available in the following releases:

1.    JAWS 4.51-14.0  

2.    JAWS 15.0 and later  

 Function: GetCurrentScriptKeyName 

Description 

Retrieves the name of the key used to invoke the currently active script.

Returns 

Type: String
 Description: The key name.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51-14.0

 Function: GetCurrentScriptKeyName 

Description 

Retrieves the name of the key or gesture used to invoke the currently active script.

Returns 

Type: String
 Description: The key or gesture name.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: GetGestureName 

Description 

Retrieves the name of the gesture attached to the specified script.

Returns 

Type: String
 Description: The gesture name.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the script.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetGestureNames 

Description 

Retrieves a \r\n delimited list of the names of all the gestures that are assigned to the specified script.

Returns 

Type: String
 Description: A \r\n delimited list of the names of all the gestures that are assigned to the specified script.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the script.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetLastInputSource 

Description 

Used to determine the source of the most recent input.

Returns 

Type: int
 Description: The most recent input source: keyboard (1), braille (2) or touch (4). See InputSource constants in HJConst.jsh.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetRangeInconsistencyByIndex 

Description 

This function obtains information about the inconsistency with the 0-based index in the specified text range at the cursor.

Returns 

Type: int
 Description: TRUE or FALSE.
 

Parameters 

Param 1: 

Type: int
 Description: 0 line, 1 sentence, 2 paragraph
 Include: Required
 

Param 2: 

Type: int
 Description: 0-based index of inconsistency in range for which you want information
 Include: Required
 

Param 3: 

Type: int
 Description: The type of inconsistencies bitwise ored together, see hjconst.jsh.
 Include: Required
 

Param 4: 

Type: int
 Description: the flags governing the paired symbols to check, see hjconst.jsh
 Include: Required
 

Param 5: 

Type: int
 Description: The inconsistency type see hjconst.jsh
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: string
 Description: The characters of the inconsistency (eg the punctuation symbol, miscapitalized letter, etc).
 Include: Required
 * Returns data by reference
 

Param 7: 

Type: int
 Description: The offset of the inconsistency from the start of the specified text range.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetRangeInconsistencyCount 

Description 

This function obtains the number of inconsistencies in the specified unit of text. The user can determine what kinds of inconsistencies are detected and thus counted.

Returns 

Type: int
 Description: The number of inconsistencies detected in the requested range at the cursor's location.
 

Parameters 

Param 1: 

Type: int
 Description: 0 line, 1 sentence, 2 paragraph
 Include: Required
 

Param 2: 

Type: int
 Description: The type of inconsistencies bitwise ored together, see hjconst.jsh.
 Include: Required
 

Param 3: 

Type: int
 Description: the flags governing the paired symbols to check, see hjconst.jsh
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

This function is available in the following releases:

1.    JAWS 6.20-14.0  

2.    JAWS 15.0 and later  

 Function: GetScriptAssignedTo 

Description 

Looks up the name of the script assigned to the specified key.

Returns 

Type: string
 Description: If the key name is assigned to a script, the name of the script to which it is assigned; null otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: the key name for which the script assignment is to be determined.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20-14.0

 Function: GetScriptAssignedTo 

Description 

Looks up the name of the script assigned to the specified key or gesture.

Returns 

Type: string
 Description: If the key or gesture name is assigned to a script, the name of the script to which it is assigned; null otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: the key or gesture name for which the script assignment is to be determined.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetScriptCallStack 

Description 

Information is ordered from most recent to least recently called items.

Returns 

Type: string
 Description: The contents of the call stack.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetScriptDescription 

Description 

Retrieves the description of a specified script.

Returns 

Type: String
 Description: The text of the description.
 

Parameters 

Param 1: 

Type: string
 Description: The script name of interest.
 Include: Required
 

Param 2: 

Type: int
 Description: As of JAWS 14, if true, retrieves the script description from default.jsd.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetScriptFileName 

Description 

Retrieves the name of a currently active default or application script file. For the application script file, this is the same as the executable file name of the application, except in those cases where the originally loaded application script file replaced itself with another one by me and of SwitchToScriptFile. Similarly, for the active default script file, this is the name specified in JFW.INI, except in those cases where the original file replaced itself by means of SwitchToScriptFile.

Returns 

Type: String
 Description: The name of the script file. This name can be blank if requesting the application script file name and no application script file is loaded.
 

Parameters 

Param 1: 

Type: Int
 Description: True to obtain the name of the application script file, False to obtain the name of the default script file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetScriptKeyName 

Description 

Retrieves the name of the key attached to the specified script.

Returns 

Type: String
 Description: The key name.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the script.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetScriptKeyNames 

Description 

Retrieves a \r\n delimited list of the names of all the keys that are assigned to the specified script.

Returns 

Type: String
 Description: A \r\n delimited list of the names of all the keys that are assigned to the specified script.
 

Parameters 

Param 1: 

Type: string
 Description: The name of the script.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetScriptSynopsis 

Description 

Retrieves the synopsis of a specified script.

Returns 

Type: String
 Description: The text of the synopsis.
 

Parameters 

Param 1: 

Type: string
 Description: The script name of interest.
 Include: Required
 

Param 2: 

Type: int
 Description: As of JAWS 14, if true, retrieves the script synopsis from default.jsd.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsSameScript 

Description 

Determines if the current script has been called two or more times in a row without any intervening scripts being called and with no more than 500 milliseconds between each call. Using this function allows a script to act differently depending upon the number of consecutive times it has been called. A script is called whenever a key assigned to it has been pressed.

Returns 

Type: Int
 Description: The number of times the script has repeated, 0 means it has not repeated.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IsScriptKey 

Description 

Determines if a key is asigned to a script.

Returns 

Type: int
 Description: True if the passed string is the name of a key assigned to a script, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The name of a key, including any modifiers. See the JKM files for examples of key names.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: IsTouchCapable 

Description 

Determines if the current device is capable of supporting JAWS touch input.

Returns 

Type: int
 Description: True if JAWS is running on a device capable of supporting JAWS touch input, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: MoveToRangeInconsistency 

Description 

This function moves to and obtains information about an inconsistency in the specified text range relative to the current cursor location.

Returns 

Type: int
 Description: TRUE or FALSE depending on whether the move was successful.
 

Parameters 

Param 1: 

Type: int
 Description: 0 line, 1 sentence, 2 paragraph
 Include: Required
 

Param 2: 

Type: int
 Description: one of s_top, s_bottom, s_next or s_prior.
 Include: Required
 

Param 3: 

Type: int
 Description: The type of inconsistencies bitwise ored together that should be detected, see hjconst.jsh.
 Include: Required
 

Param 4: 

Type: int
 Description: the flags governing the paired symbols to check, see hjconst.jsh
 Include: Required
 

Param 5: 

Type: int
 Description: The inconsistency type found in the specified direction, see hjconst.jsh
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: string
 Description: The characters of the inconsistency (eg the punctuation symbol, miscapitalized letter, etc).
 Include: Required
 * Returns data by reference
 

Param 7: 

Type: int
 Description: The offset of the inconsistency relative to the start of the line containing the inconsistency just moved to.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: NotifyTouchInteraction 

Description 

Informs windows that the user has just used touch to activate the control at the specified location on the screen. This is required in order for the system to activate the onscreen keyboard if appropriate. This is a wrapper of the Windows accNotifyTouchInteractionFunction.

Returns 

Type: int
 Description: True if successful, false otherwise
 

Parameters 

Param 1: 

Type: handle
 Description: The window containing the touch point
 Include: Required
 

Param 2: 

Type: int
 Description: The x coordinate of the touch point
 Include: Required
 

Param 3: 

Type: int
 Description: The y coordinate of the touch point
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 16.0 and later

Function: Null 

Description 

Returns a null variable of type variant, allowing any type of variable to be set to null when assigned to the return value of this function.

Returns 

Type: variant
 Description: A null value variable of type variant.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: Pause 

Description 

Stops the processing of a script so that other applications can complete tasks. When a pause function is placed in a script, JAWS yields to the time needs of other applications. Once other applications have been given the opportunity to use processing time, then JAWS resumes the script. The pause function is equivalent to using the Delay function with a value of 1. Do not place a pause command in a While loop, because this will cause the computer to freeze up.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: PerformScriptByName 

Description 

Allows dynamically calling a script whose name is passed as the first argument. This means that the script name does not need to be known at compile time and can be passed in a variable.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: String
 Description: the name of the script to be run
 Include: Required
 

Param 2: 

Type: Variant
 Description: the script's 1st argument
 Include: Optional
 

Param 3: 

Type: Variant
 Description: the script's second argument
 Include: Optional
 

Param 4: 

Type: Variant
 Description: the script's third argument
 Include: Optional
 

Param 5: 

Type: Variant
 Description: the script's 4th argument
 Include: Optional
 

Param 6: 

Type: Variant
 Description: the script's 5th argument
 Include: Optional
 

Param 7: 

Type: Variant
 Description: the script's sixth argument
 Include: Optional
 

Param 8: 

Type: Variant
 Description: the script's seventh argument
 Include: Optional
 

Param 9: 

Type: Variant
 Description: the script's eighth argument
 Include: Optional
 

Param 10: 

Type: Variant
 Description: the script's 9th argument
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: QueueFunction 

Description 

The given function will run the next time jaws stops speaking. Multiple functions may be queued. Functions are run in the order they are added to the queue. Stopping speech by pressing control or performing another such action will clear the queue.

Returns 

Type: int
 Description: 1 if the function was queued, 0 otherwise
 

Parameters 

Param 1: 

Type: string
 Description: A string containing a function name. The function name should be followed by parentheses like a normal function call. integers and quoted strings may be included in the parameter list inside the parentheses
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Script: QuickSettings 

Description 

Use the Quick Settings dialog to adjust JAWS settings for the application currently in use.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: ReformatKeyName 

Description 

Takes a valid script key name to reformat and returns a string that contains the reformatted name to use in a message.

Returns 

Type: String
 Description: The formatted script key name according to Documentation standards for script key names in messages.
 

Parameters 

Param 1: 

Type: string
 Description: a valid script key name.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Script: RefreshScripts 

Description 

This reinitializes the default script set but does not reload all the global variables. That means the script stack is reset, but it is not the same as restarting JAWS.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: SayCurrentScriptKeyLabel 

Description 

Speaks the Key Name attached to the current script, honoring both the typing echo setting and the label as defined in DEFAULT.JCF.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

JAWS 4.51-19.0  

JAWS 20.0 and later  

 Function: ScheduleFunction 

Description 

Runs a user defined function in a set period of time. Useful when you want to perform a task and then check on the results at a later time. Once this function is used, you can call UnScheduleFunction to cause the user-defined event not to run.

Returns 

Type: Int
 Description: An ID that can be used to call UnScheduleFunction. If 0 is returned, then the timer was not successfully set.
 

Parameters 

Param 1: 

Type: String
 Description: Name of function to be executed.
 Include: Required
 

Param 2: 

Type: Int
 Description: Amount of time to elapse before the function is executed. Time is measured in tenths of a second. A value of 10 is one second.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-19.0

 Function: ScheduleFunction 

Description 

Runs a user defined function in a set period of time. Useful when you want to perform a task and then check on the results at a later time. Once this function is used, you can call UnScheduleFunction to cause the user-defined event not to run.

Returns 

Type: Int
 Description: An ID that can be used to call UnScheduleFunction. If 0 is returned, then the timer was not successfully set.
 

Parameters 

Param 1: 

Type: String
 Description: Name of function to be executed.
 Include: Required
 

Param 2: 

Type: Int
 Description: Amount of time to elapse before the function is executed. Time is measured in tenths of a second. A value of 10 is one second.
 Include: Required
 

Param 3: 

Type: int
 Description: This parameter ensures that the function is automatically unscheduled if a focus change or menu mode change occurs, or a key is pressed, prior to the scheduled function being run.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 20.0 and later

Function: ScheduleFunctionAfterWindowGainsFocus 

Description 

This function may be used to schedule a function to run the next time a given window gains focus. The function is scheduled using the same mechanism that is used by the ScheduleFunction function. The ScheduleFunction function will be called to schedule the function specified by the FunctionName parameter the next time a Focus Changed Event occurs and the window handle of the window that just gained focus is the same as the window handle specified by the hwnd parameter. Unlike the ScheduleFunction function, the value returned by the ScheduleFunctionAfterWindowGainsFocus is not an ID that can be used for a latter call to UnScheduleFunction. Instead the value returned by this function indicates whether or not the function was scheduled successfully. Currently there is no mechanism for un-scheduling a function that is scheduled using this function. Another key difference between this function and the ScheduleFunction function is only one function can be scheduled at a time using this mechanism. If ScheduleFunctionAfterWindowGainsFocus is called when a function that was previously scheduled using this function has not yet been called, the function will not be scheduled and this function will return FALSE. The function specified by the FunctionName parameter will be scheduled at the end of focus change event processing, after any necessary scripts have been loaded and the FocusChangedEvent function has been called.

Returns 

Type: int
 Description: TRUE when the specified function was successfully scheduled. FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the window to wait to gain focus before scheduling the function.
 Include: Required
 

Param 2: 

Type: String
 Description: Name of function to be executed.
 Include: Required
 

Param 3: 

Type: Int
 Description: Maximum amount of time, in milliseconds, that the function should wait before canceling the scheduled function. Note that this script function returns immediately without waiting for the specified amount of time. Instead, whenever a Focus Changed event is processed a check is performed to determine whether or not there is an unprocessed request to schedule a function after a given window gains focus. If there is and the function has timed out, the scheduled function is canceled.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Function: ScriptAndAppNames 

Description 

Needs to be the name of the application executable, this information can be obtained with Insert + Q.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: contains the name of the currently running script file
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ScriptFileName 

Description 

Used to identify the script file being used, and the application currently active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ScriptManager 

Description 

Used to edit and compile script files for your Freedom Scientific product. Script manager is a basic development environment and provides access to documentation and help for programming in Freedom Scientific Script. If developing for Windows Mobile and your PAC Mate you will need to use another development tool and the scompile utility found in your Freedom Scientific product's directory.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ScriptManagerDefault 

Description 

Starts the Script Manager with the default file loaded.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SetFocusToWindowAndScheduleFunction 

Description 

This function may be used to set focus to a window and schedules a function to run after that window gains focus. This function first uses the ScheduleFunctionAfterWindowGainsFocus function to schedule the function and then uses the SetFocus function to set focus to the window. All the comments in the description of the ScheduleFunctionAfterWindowGainsFocus function apply to this function.

Returns 

Type: int
 Description: TRUE when the function was successfully scheduled and focus was set to the window. FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The window handle of the window to wait to gain focus before scheduling the function.
 Include: Required
 

Param 2: 

Type: String
 Description: Name of function to be executed.
 Include: Required
 

Param 3: 

Type: Int
 Description: Maximum amount of time, in milliseconds, that the function should wait before canceling the scheduled function. Note that this script function returns immediately without waiting for the specified amount of time. Instead, whenever a Focus Changed event is processed a check is performed to determine whether or not there is an unprocessed request to schedule a function after a given window gains focus. If there is and the function has timed out, the scheduled function is canceled.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.00 and later

Function: SetGestureMode 

Description 

Loads the gestures associated with the given gesture mode.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: Mode number corresponding to one of the GestureMode_* constants in HJConst.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: SetLastScriptKey 

Description 

Sets the name of the last key used for a script. Useful when it is necessary to assign a specific key name to be retrieved by GetCurrentScriptKeyName.

Returns 

Type: int
 Description: True if the set was successful, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The key name to use.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SetPassThroughNextGesture 

Description 

Sets whether or not the next gesture will get passed through to Windows.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: 1 for enable, 0 for disable
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: SwitchToScriptFile 

Description 

When this function is called, the currently loaded binary script file (A file with a .JSB extension) is unloaded from memory and one of the two script files specified by the functions parameters is loaded in its place. The first parameter to the function is the name of the first JSB file you wish for JFW to attempt to load into memory and the second parameter gives the name of an alternative binary script file that will only be loaded if the first file cannot be found.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the binary script file you wish to be loaded into memory. This parameter must be a script file name in quotes or the name of a variable in which the script file name is stored. This parameter must be the script file name with or without a .jsb extension. An attempt to use a .jss extension in the file name will result in an error and a warning dialog box.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the binary script file you wish to be loaded into memory if the first file does not exist. This parameter must be a script file name in quotes or the name of a variable in which the script file name is stored. This parameter must contain the script file name with or without a .jsb extension. An attempt to use a .jss extension in the file name will result in an error and a warning dialog box.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TypeCurrentScriptKey 

Description 

The key attached to the current script is passed through to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UnScheduleFunction 

Description 

Used to cancel a ScheduleFunction call.

Returns 

Type: Int
 Description: TRUE if the call was found and cancelled, otherwise returns FALSE.
 

Parameters 

Param 1: 

Type: Int
 Description: The value returned by the ScheduleFunction call.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Selection Functions

A Selection script or function provides or returns information about selection activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display selection information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of selection user interaction, such as:

 

·         SaySelectedText

·         SelectAll

·         ReadWordInContext

Numerous scripts are tied to default Windows key assignments for selecting and unselecting text so that JAWS may indicate the activity properly. These scripts include selecting by character, word, line, from the top or to the bottom of a file, from the beginning or to the end of the current line - even selecting a row or column in Excel, etc. The unit being selected or unselected is referred to as a "selection unit".

However, the focus of the present discussion is on functions related to selection that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Selection functions include:

SelectingText

GetSelectedText

SelectFromStartOfLine

SelectToEndOfLine

For a complete listing of Selection functions, see the topics in this category book of the Reference Guide.

Note that there are many functions whose names appear to be the same or similar to those of scripts for selecting by a particular selection unit. This is by design. Remember that scripts are bound to a key assignment while functions are not. Therefore, it is possible to call a function that handles selection while not calling its related script.

Code Sample

In the below code sample, the script checks to see whether there is any selected text. If no text is selected, JAWS indicates an error message and the script ends. If text is selected, JAWS speaks the selected text. furthermore, JAWS spells the selected text but only if it is not more than the current line. You probably would not want a whole document that is selected to be spelled out.

To set up the example, simply type some text into the Notepad document window. Then run the script without selecting any text, and then after selecting some text. Try selecting smaller and larger chunks of text.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MySelectionTest ()
Var
            String sSelectedText,
            String sMsgTooMuchText
;Test for whether focus is in a dialog or menu, not in the document window.
If GetObjectSubtypeCode () != wt_multiLine_edit
            Return ; Do not process.
EndIf
sSelectedText = GetSelectedText ()
If sSelectedText == cscNull
            SayMessage (ot_error, cmsgNothingSelected)
            Return
EndIf
sMsgTooMuchText = "There is more than one line of text selected."
If StringCompare (sSelectedText, GetLine ()) <= 0 ;The selected text is no more than the current line.
            ; The first string in the message, cmsg39_l, includes the long message to be announced.
            ; The second string parameter is only the selected text itself since there is no short message equivalent for the long message
            ; in the shipping message file, common.jsm.
            SayFormattedMessage (ot_user_requested_information,
                        FormatString (cmsg39_l, sSelectedText),
                        sSelectedText)
            SayUsingVoice (vctx_message, sSelectedText, ot_spell)
Else
            SayMessage (ot_error, sMsgTooMuchText)
EndIf
EndScript

Script: CustomHighlightAssign 

Description 

This command allows you to specify a custom highlight based on the foreground and background colors at the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DoCustomHighlightColors 

Description 

This is used in the RunJAWSManager keystroke to perform the CustomHighlightAssign and use the correct colors.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Enter the variable containing the RGB string for the foreground color.
 Include: Required
 

Param 2: 

Type: String
 Description: Enter the RGB string for the background color.
 Include: Required
 

Param 3: 

Type: String
 Description: Enter the value for the app file name to be used.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: DragDialogWindow 

Description 

Useful to get the dialog out of the way so you can view the text underneath the dialog window. Of course, if the application won't let you drag the dialog, this function won't work. Most Find and SpellCheck dialog boxes will allow themselves to be moved.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetSelectedCellsAsArray 

Description 

Returns an array where each element is the text of a cell in the selected range. Note this only works in selected apps supporting the selection of cells.

Returns 

Type: stringArray
 Description: the array of selected cells.
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Optional
 * Returns data by reference
 

Param 2: 

Type: int
 Description:
 Include: Optional
 * Returns data by reference
 

Param 3: 

Type: string
 Description:
 Include: Optional
 * Returns data by reference
 

Param 4: 

Type: int
 Description:
 Include: Optional
 * Returns data by reference
 

Param 5: 

Type: int
 Description:
 Include: Optional
 * Returns data by reference
 

Param 6: 

Type: string
 Description:
 Include: Optional
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetSelectedText 

Description 

Retrieves the currently selected text.

Returns 

Type: String
 Description: Provides the selected text.
 

Parameters 

Param 1: 

Type: int
 Description: JAWS 6.0, specify true if you want the text to contain speech markup, defaults to false if not specified.
 Include: Optional
 

Param 2: 

Type: int
 Description: Set when you want to get all the text for a ListView item across multiple columns. When not set you will only get the text in the first column.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ReadWordInContext 

Description 

Sometimes, a word needs to be reviewed in the context of how it appears in the document, in order to see if it is really misspelled, or is the correct occurrence of the word you are searching for. Press this keystroke in the Spell Check or Find dialog, or when doing a search and replace for specific text or items. The JAWS Cursor is placed on the line containing the word and you will hear the line spoken in the JAWS Cursor voice. Simply turn on the JAWS Cursor to review the line of text word by word, character by character, or read more text around the line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayClipboard 

Description 

Speaks the contents of the clipboard.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Script: SaySelectedText 

Description 

This provides an easy way to check to see if you have selected the correct text, in preparation for other actions, such as deleting, copying, bolding, underlining, etcetera.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectAll 

Description 

When available, allows CTRL+A to select the entire document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectAllItems 

Description 

Selects all the items in a list box or list view, as well as all text in edit controls. Useful in preparation for copying, cutting, and pasting, and other similar editing functions supported by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectCurrentItem 

Description 

Useful for marking a list item for copying, cutting, and pasting.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectFromSavedLocationToCurrent 

Description 

This function selects text between the cursor's saved location (at the time when SaveCurrentLocation was called) and the new current location.

Returns 

Type: int
 Description: TRUE or FALSE.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: SelectFromStartOfLine 

Description 

When the PC cursor is active, JAWS allows the application to select from the start of the current line to the PC cursor. When a portion of text is selected, JAWS automatically speaks the newly highlighted text if screen echo is set to Highlighted or All

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectFromStartOfLine 

Description 

In most edit controls, all text from the start of the line to the location of the cursor is selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectFromTop 

Description 

When the PC cursor is active, JAWS allows the application to select from the top of the document to the PC cursor. When a portion of text is selected, JAWS automatically speaks the newly highlighted text if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectFromTop 

Description 

In most edit controls, all text from the top of the document to the location of the cursor is selected. This keystroke can also be used to select all items from the currently selected item to the first item in most list boxes and list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SelectingText 

Description 

Handles setting up for and finishing the process of selecting text. This function is called by each of the scripts that is used for selecting text.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Mode param indicates whether you are selecting or not selecting text.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectNextCharacter 

Description 

When the PC cursor is active, JAWS allows the application to select the next character. When a character is selected, JAWS automatically speaks the character if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectNextCharacter 

Description 

In most edit controls, the character to the right of the cursor is selected. This keystroke can also be used for selecting items in multiple column list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectNextLine 

Description 

When the PC cursor is active, JAWS allows the application to select the next line. When a line is selected, JAWS automatically speaks the line if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectNextLine 

Description 

In most edit controls, the line below the cursor is selected. This keystroke can also be used for selecting contiguous items in list boxes or list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectNextParagraph 

Description 

Selects the next paragraph in the focused application. Assumes that the next paragraph is selected by sending Shift+Ctrl+DownArrow.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Script: SelectNextParagraph 

Description 

In most edit controls, the paragraph below the cursor is selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: SelectNextScreen 

Description 

When the PC cursor is active, JAWS allows the application to select the next page beginning at the PC cursor. When a portion of text is selected, JAWS automatically speaks the newly highlighted text if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SelectNextScreen 

Description 

In most edit controls, The next screen of text is selected. This keystroke can also be used for selecting contiguous items in list boxes or list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectNextWord 

Description 

When the PC cursor is active, JAWS allows the application to select the next word. When a word is selected, JAWS automatically speaks the word if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectNextWord 

Description 

In most edit controls, the word to the right of the cursor is selected. This keystroke can also be used for selecting items in multiple column list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectPriorCharacter 

Description 

When the PC cursor is active, JAWS allows the application to select the prior character. When a character is selected, JAWS automatically speaks the character if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectPriorCharacter 

Description 

In most edit controls, the character to the left of the cursor is selected. This keystroke can also be used for selecting items in multiple column list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectPriorLine 

Description 

When the PC cursor is active, JAWS allows the application to select the prior line. When a line is selected, JAWS automatically speaks the line if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectPriorLine 

Description 

In most edit controls, the line above the cursor is selected. This keystroke can also be used for selecting contiguous items in list boxes or list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectPriorParagraph 

Description 

Selects the prior paragraph in the focused application. Assumes that the prior paragraph is selected by sending Shift+Ctrl+UpArrow.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: SelectPriorParagraph 

Description 

In most edit controls, the paragraph above the PC cursor is selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: SelectPriorScreen 

Description 

When the PC cursor is active, JAWS allows the application to select the prior page ending at the PC cursor. When a portion of text is selected, JAWS automatically speaks the newly highlighted text if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectPriorScreen 

Description 

In most edit controls, the prior screen of text is selected. This keystroke can also be used for selecting contiguous items in list boxes or list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SelectPriorWord 

Description 

When the PC cursor is active, JAWS allows the application to select the prior word. When a word is selected, JAWS automatically speaks the word if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectPriorWord 

Description 

In most edit controls, the word to the left of the PC cursor is selected. This keystroke can also be used for selecting items in multiple column list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SelectToBottom 

Description 

When the PC cursor is active, JAWS allows the application to select from the PC cursor to the end of the document. When a portion of text is selected, JAWS automatically speaks the newly highlighted text if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectToBottom 

Description 

In most edit controls, all text from the cursor to the bottom of the document is selected. This keystroke can also be used for selecting all items from the currently selected item to the last item in most list boxes or list views.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SelectToEndOfLine 

Description 

When the PC cursor is active, JAWS allows the application to select to the end of the current line starting at the PC cursor. When a portion of text is selected, JAWS automatically speaks the newly highlighted text if screen echo is set to Highlighted or All.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SelectToEndOfLine 

Description 

In most edit controls, all text from the cursor to the end of the line is selected. This keystroke can also be used in various list views and list boxes

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UnselectAllButCurrent 

Description 

Useful in multi-select controls such as a list box, list view, combo box, etc.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Settings Functions

A Settings function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Settings, such as the script for Dictionary Manager, for example. However, the focus of the present discussion is on functions related to Settings that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Incidentally, functions for Braille Settings merit their own summary in the Reference Guide. So functions in the Settings summary of the Reference Guide refer to all settings other than those specific to Braille displays or the Braille Viewer.

Some examples of Settings functions include:

·         GetActiveSynthGlobalSectionName

·         GetSettingInformation

For a complete listing of Settings functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the pitch range for the JAWS cursor context voice of the currently loaded synthesizer. JAWS speaks the information in a message and flashes it in Braille. This script could be extended to set or change the pitch of the voice with other functions, for example, if you want to change voice settings on the fly without utilizing the JAWS user interface.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MySettingsInfoTest ()
Var
            Int MinSetting,
            Int MaxSetting,
            String sRange
;For sRange,
;%1 is the context voice, %2 is the minimum setting returned by reference from the function call,
;and %3 is the maximum setting returned by reference from the function call.
sRange = "The minimum pitch of the %1 is %2, and the maximum pitch is %3."
GetSettingInformation (V_PITCH, VCTX_JAWSCURSOR, MinSetting, MaxSetting)
SayFormattedMessage (ot_user_requested_information,
            FormatString (sRange, vctx_JAWSCURSOR, MinSetting, MaxSetting))
EndScript

Script: AdjustJAWSVerbosity 

Description 

ANSI and graphics are some of the choices you can set verbosity levels for in this list.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ANSICharsDecrement 

Description 

This scripting tool decreases the setting for speaking special symbols. More information on the Special Symbols setting can be found in Settings Center, Graphics and Symbols, Announce Special Symbols. The settings for special symbols are all, most, more, some, and none. If the current level is none, all is selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: BrailleCount 

Description 

Retrieves the number of Braille displays configured in JAWS

Returns 

Type: Int
 Description: the number of Braille displays configured in JAWS
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.20 and later

Function: BrailleDisplayLoadErrors 

Description 

Retrieves whether or not JAWS displays an error to the user when the Braille display at the specified index fails to load

Returns 

Type: Int
 Description: TRUE if the error should be displayed, FALSE otherwise
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: BrailleDriver 

Description 

Retrieves the driver name of the Braille display at the specified index

Returns 

Type: String
 Description: The driver name of the requested Braille display, or "" if there is not a Braille display at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display whose driver name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: BrailleDriverInformation 

Description 

Retrieves the driver information of the Braille display at the specified index

Returns 

Type: String
 Description: The driver information string of the requested Braille display, or "" if there is not a Braille display at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display whose driver information string is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.20 and later

Function: BrailleLongName 

Description 

Retrieves the descriptive name of the Braille display at the specified index

Returns 

Type: String
 Description: The descriptive name of the requested Braille display, or "" if there is not a Braille display at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display whose name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: BrailleName 

Description 

Retrieves the name of the Braille display at the specified index

Returns 

Type: String
 Description: The name of the requested Braille display, or "" if there is not a Braille display at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display whose name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: BraillePort 

Description 

Retrieves the port name of the Braille display at the specified index

Returns 

Type: String
 Description: The port name of the requested Braille display, or "" if there is not a Braille display at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display whose port name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: BraillePortString 

Description 

Retrieves the port string of the Braille display at the specified index

Returns 

Type: String
 Description: The port string of the requested Braille display, or "" if there is not a Braille display at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the Braille display whose port string is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: CreateDictionaryCommandLine 

Description 

The Dictionary Manager can be started with the following parameters: a[currently running application] -r[rule] -d. If -d is present, the Dictionary Manager is started in Add Dialog mode. If bDoAddDialog is true, the -d parameter is added.

Returns 

Type: String
 Description: the string found to be added as a dictionary rule.
 

Parameters 

Param 1: 

Type: Int
 Description: Flag specifying whether the command line should include a switch to open with the add dialog.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DictionaryManager 

Description 

Used to add special string pronunciations to the JAWS dictionary.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: Command line for dictionary manager. If blank, the script builds one.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 4.51-16.1  

2.    JAWS 17.0 and later  

 Function: GetActiveConfiguration 

Description 

The Name is what is left when all of the path information is stripped away from the Active Configuration path.

Returns 

Type: String
 Description: The name of the active configuration set.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51-16.1

 Function: GetActiveConfiguration 

Description 

The Name is what is left when all of the path information is stripped away from the Active Configuration path.

Returns 

Type: String
 Description: The name of the active configuration set.
 

Parameters 

Param 1: 

Type: int
 Description: When TRUE, GetActiveConfiguration will return the name of the active domain configuration if applicable. Otherwise, the application configuration is returned.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: GetActiveSynthGlobalSectionName 

Description 

Gets the global section name from default.jcf of the active synthesizer.

Returns 

Type: string
 Description: The global section name of the active synthesizer
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetAlternateUserDirectoryMode 

Description 

Returns the current Alternate User Directory Mode. See the documentation of SetAlternateUserDirectoryMode for information on the various Alternate User Directory Modes.

Returns 

Type: Int
 Description: AlternateUserDirMode_Off = 0, AlternateUserDirMode_Default = 1, AlternateUserDirMode_Roam = 2
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

Function: GetDefaultJCFOption 

Description 

Determines the value of a specified option in the default JAWS configuration file.

Returns 

Type: Int
 Description: Returns the numeric Value that has been set for the specified option.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that names the option that you wish to check. Constant values are listed in HJCONST.JSH, and begin with the prefix "OPT_" or "OPTBRL_." Constants beginning with "OPTBRL_" are for Braille devices.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetIntOptionDefaultJSISetting 

Description 

Looks in the shared personalized settings for the specified JSI file, and retrieves the value of the key belonging to the specified section.

Returns 

Type: int
 Description: The FS shared jsi setting. If the file, the section or the key cannot be found, returns 0.
 

Parameters 

Param 1: 

Type: string
 Description: the JSI file name, without the ".jsi" extention.
 Include: Required
 

Param 2: 

Type: string
 Description: The section name.
 Include: Required
 

Param 3: 

Type: string
 Description: The key name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetIntOptionDefaultSetting 

Description 

If there is an application-specific JCF setting in setting in the shared settings, gets that setting; otherwise, gets the setting from default.jcf in the shared setting.

Returns 

Type: int
 Description: The FS shared JCF setting. If the setting is not found, returns 0.
 

Parameters 

Param 1: 

Type: string
 Description: The section name.
 Include: Required
 

Param 2: 

Type: string
 Description: The key name.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetJCFOption 

Description 

Determines the value of a specified option as it is currently set in memory.

Returns 

Type: Int
 Description: Returns the numeric value that has been set for the specified option.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that names the option that you wish to check. Constant values are listed in HJCONST.JSH, and begin with the prefix "OPT_" or "OPTBRL_." Constants beginning with "OPTBRL_" are for Braille devices.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetJCFOptionFromFile 

Description 

Reads the value of a JCF option from the configuration file.

Returns 

Type: Int
 Description: Returns the numeric value that has been set for the specified option.
 

Parameters 

Param 1: 

Type: string
 Description: the section name where the key is located.
 Include: Required
 

Param 2: 

Type: string
 Description: The option key in the section.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetNavigationQuickKeysSettingFromFile 

Description 

Returns the Navigation Quick Keys relevant setting from the relevant file. This may come from QuickSettings or Settings Center. If a Personalized setting is used, loads from the relevant personalized settings jsi file. Otherwise, loads from the relevant JCF.

Returns 

Type: int
 Description: the Navigation Quick Keys setting from the relevant file.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: GetSettingInformation 

Description 

Retrieves the setting for the given voice parameter and context name. The minimum and maximum settings for the range of the parameter are passed to the min and max parameters by reference.

Returns 

Type: Int
 Description: The current setting for the given voice parameter and context
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the constant representing the voice parameter from which to retrieve the settings. These are found in HjConst.jsh. Examples of such are V_RATE and V_PITCH.
 Include: Required
 

Param 2: 

Type: String
 Description: Enter a variable, string literal or constant representing the voice context whose parameter is to be checked.
 Include: Required
 

Param 3: 

Type: Int
 Description: Enter the int variable to receive the minimum for the range of the parameter you wish to set.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: Enter the int variable to receive the maximum for the range of the parameter you wish to set.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetSettingsCenterControlDisabledReason 

Description 

Used to retrieve a help message for a disabled Settings Center control, explaining why the control is disabled.

Returns 

Type: String
 Description: The help message explaining why the control is disabled.
 

Parameters 

Param 1: 

Type: handle
 Description: The dialog page or a spawned dialog, and where the specified control is located.
 Include: Required
 

Param 2: 

Type: handle
 Description: The handle of the disabled control who's disabled reason is to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: GetSettingsCenterControlHelp 

Description 

Retrieves the help text belonging to a specified control in the JAWS Settings Center.

Returns 

Type: string
 Description: The help message for the specified control.
 

Parameters 

Param 1: 

Type: handle
 Description: The dialog page or a spawned dialog, and where the specified control is located.
 Include: Required
 

Param 2: 

Type: handle
 Description: The control who's help string is to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetStringOptionDefaultJSISetting 

Description 

Looks in the shared personalized settings for the specified JSI file, and retrieves the value of the key belonging to the specified section.

Returns 

Type: string
 Description: The FS shared jsi setting. If the file, the section or the key cannot be found, returns null.
 

Parameters 

Param 1: 

Type: string
 Description: the JSI file name, without the ".jsi" extention.
 Include: Required
 

Param 2: 

Type: string
 Description: The section name.
 Include: Required
 

Param 3: 

Type: string
 Description: The key name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetStringOptionDefaultSetting 

Description 

If there is an application-specific JCF setting in setting in the shared settings, gets that setting; otherwise, gets the setting from default.jcf in the shared setting.

Returns 

Type: string
 Description: The FS shared JCF setting. If the setting is not found, returns null.
 

Parameters 

Param 1: 

Type: string
 Description: The section name.
 Include: Required
 

Param 2: 

Type: string
 Description: The key name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetVerbosity 

Description 

Used to obtain the current setting for verbosity. It returns a constant value to indicate the setting: Beginner means speak maximum information, Intermediate means speak a moderate amount of information, and Advanced means speak a minimum amount of information. These values can be used in If...Then...Else...statements.

Returns 

Type: Int
 Description: "BEGINNER" = 0, "INTERMEDIATE" = 1, "ADVANCED" = 2.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsSayAllOnDocumentLoadSupported 

Description 

Used to determine whether or not the option to toggle automatic document reading will appear in the Virtual branch of the AdjustJAWSOptions dialog.

Returns 

Type: int
 Description: True if the option to toggle automatic document reading should appear in the Adjust JAWS Options dialog, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: JAWSVerbosityCore 

Description 

Use in your own AdjustJAWSVerbosity script and pass your own delimited string in the format shown in common.jsm represented by the constant cStrDefaultList. Hj Dialogs, muted synthesizers and Virtual Cursor are all handled automatically. Just pass your list of items for your convenience.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Your specific list of items to go at the top of the AdjustJAWSVerbosity list.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: LaunchCommandsSearch 

Description 

Type in a word or phrase to find a command. Each command has a description and related keystroke. Press enter on the command to perform it from within the Search Commands window.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: LaunchCommandsSearchViewer 

Description 

Launches JAWS Search for the window of interest or the focused window. JAWS Search provides the user with a way to search JAWS commands to find that forgotten keystroke or command.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The window for the application whose configuration to use for JAWS Search. If no window is supplied, the focused window is used, using the currently loaded JAWS configuration.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 16.00 and later

Function: LaunchQuickSettings 

Description 

Launches the QuickSettings dialog. The QuickSettings dialog uses the xml described in the application and default qs and qsm files.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: NavigationQuickKeysManager 

Description 

This function opens the Navigation Quick Keys Manager which allows the user to modify the key assignments for the Quick Navigation Scripts that are available in Internet Explorer, Mozilla Firefox, Adobe Reader, Microsoft Word, and Microsoft Outlook. The Navigation Quick Keys Manager can run in three modes that are specified by the nMode parameter. In the first mode (nMode = 0), the Navigation Quick Keys Manager allows the user to edit the key assignments for the Quick Navigation Scripts that are available in HTML and PDF documents. In the second mode (nMode = 1), the Navigation Quick Keys Manager allows the user to edit the key assignments for the Quick Navigation Scripts that are available in Microsoft Word Documents. In the third mode (nMode = 2), the Navigation Quick Keys Manager allows the user to edit the key assignments for the Quick Navigation Scripts that are available in Microsoft Outlook.

Returns 

Type: int
 Description: Returns TRUE if the NavigationQuickKeysManager function was able to display the Navigation Quick Keys Manager dialog box. Returns False otherwise. Note: This function returns without waiting for the user to close the Navigation Quick Keys Manager dialog box.
 

Parameters 

Param 1: 

Type: int
 Description: Specifies the mode that the Navigation Quick Keys Manager should run in. If this parameter is set to 0, the Navigation Quick Keys Manager will allow the user to edit the key assignments for the Quick Navigation Scripts that are available in HTML and PDF documents. If this parameter is set to 1, the Navigation Quick Keys Manager will allow the user to edit the key assignments for the Quick Navigation Scripts that are available in Microsoft Word documents. If this parameter is set to 2, the Navigation Quick Keys Manager will allow the user to edit the key assignments for the Quick Navigation Scripts that are available in Microsoft Outlook. Any other value will cause the QuickNavigationKeysManager to fail.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: ProgressBarAnnouncement 

Description 

Toggles progress bar announcement on and off.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: ProgressBarAnnouncementToggle 

Description 

Used to toggle the announcement of the progress bar. The status will revert to the default setting when JAWS is restarted.

Returns 

Type: string
 Description: the state of the progress bar announcement after the toggle.
 

Parameters 

Param 1: 

Type: int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: PunctuationToggle 

Description 

Changes the punctuation spoken by JFW such as: All, Some, Most, and None.

Returns 

Type: String
 Description: description of value to be displayed as value of Punctuation Level.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ReloadAllConfigs 

Description 

This function reloads all the current configuration files. This function is useful for instance when you manually make adjustments too default.jss or default.jcf and recompile using the command line compiler and then wish to see the effects without having to restart JAWS.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Script: RunJAWSManager 

Description 

Opens a dialog displaying a list of all the JAWS managers so you can quickly select one to start.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RunNavQuickKeysManager 

Description 

The navigation quick keys manager will launch to show the navigation quick keys relevant to the current app and location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: ScreenShadeToggle 

Description 

When Screen Shade is on, the screen will be covered to prevent it from being seen.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Script: SelectALanguage 

Description 

Select a language for JAWS to use when speaking. By default, JAWS installs all languages for Eloquence.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 16.00 and later

Function: SetAlternateUserDirectoryMode 

Description 

Sets the Alternate User Directory Mode. The Alternate User Directory Mode provides control over the location that will be used as the user settings directory.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The possible values are as follows. AlternateUserDirMode_Off (0): Causes the standard user directory for the product to be used. AlternateUserDirMode_Default (1): Causes user settings to be saved in a subdirectory of the temp directory; files saved in this directory are transient and the contents of this directory are deleted when the product enters or exits the mode. AlternateUserDirMode_Roam (1): Causes user settings to be saved in a subdirectory of the ProgramData directory; files saved in this directory are persistent.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

Script: SetAnsiCharsIncrement 

Description 

This scripting tool increases the setting for speaking special symbols. More information on the Special Symbols setting can be found in Settings Center, Graphics and Symbols, Announce Special Symbols. The settings for special symbols are all, most, more, some, and none. If the current level is none, all is selected.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetDefaultJCFOption 

Description 

Changes the currently stored default value for an option in memory.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1 (the value was changed), "WAS_NOT_SUCCESSFUL" = 0 (it was not changed).
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that names the option you wish to change. Constant values are listed in HJCONST.JSH, and begin with the prefix "OPT_" or "OPTBRL_." Constants beginning with "OPTBRL_" are for Braille devices.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the number to be used as the setting for the option.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetJAWSLanguage 

Description 

In the international versions of JFW, changes the JAWS operating environment to the specified language.

Returns 

Type: Int
 Description: TRUE if change was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: A 3-character Windows language abbreviation (ENU for English, DEU for German, and so on.)
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetJCFOption 

Description 

Changes the currently stored value for the active application. A new JCF file is loaded each time a different application is used. When a JCF is not available for the application, then the settings in the DEFAULT.JCF are used. The SetDefaultOption is used to change the currently stored default JCF option in memory.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1 (the value was changed), "WAS_NOT_SUCCESSFUL" = 0 (it was not changed).
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant value that names the option you wish to change. Constant values are listed in HJCONST.JSH, and begin with the prefix "OPT_" or "OPTBRL_." Constants beginning with "OPTBRL_" are for Braille devices.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the number to be used as the setting for the option.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SetPunctuationLevel 

Description 

Switches between all, most, some or no punctuation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SettingsCenter 

Description 

Used to set and save JAWS options.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Script: SetVerbosityLevel 

Description 

Cycles between verbosity levels, which Controls how much JAWS will say when the focus changes or other events occur on the screen or in response to keystrokes. The available levels are Beginner, Intermediate, and Advanced.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShouldItemBraille 

Description 

This function is used to determine whether or not the user has specified that items spoken with a given Output Mode should also be Brailled in the current Braille verbosity level.

Returns 

Type: Int
 Description: Returns 0 if the item should not be Brailled. Returns a non 0 value if the item should be Brailled.
 

Parameters 

Param 1: 

Type: Int
 Description: The Output Mode of the item you wish to determine if it should be Brailled.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: ShouldItemSpeak 

Description 

This function is used to determine whether or not the user has specified that items spoken with a given Output Mode should be spoken in the current verbosity level.

Returns 

Type: Int
 Description: Returns 0 if the item should not be spoken. Returns a non 0 value if the item should be spoken.
 

Parameters 

Param 1: 

Type: Int
 Description: The Output Mode of the item you wish to determine if it should be spoken.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShouldSayAllOnDocumentLoad 

Description 

Determines if user settings indicate that SayAll should be started after a web page or document loads.

Returns 

Type: int
 Description: True if SayAll should be started after a web page or document loads, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: SpellModeSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: SwitchToConfiguration 

Description 

When this function is called, the currently loaded set of configuration files is unloaded from memory and the specified set of configuration files is loaded in its place.

Returns 

Type: Int
 Description: TRUE if the argument passed in is a valid string (not ""). FALSE if an invalid string is passed into the function.
 

Parameters 

Param 1: 

Type: String
 Description: The base name of the set of Configuration files to load. Calling this function with "MyConfigurations" for example, would load the Configuration, Keymap, Script, Dictionary, Graphics, Symbols, and Frame files that have base name "MyConfiguration."
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SynthCount 

Description 

Retrieves the number of synthesizers configured in JAWS

Returns 

Type: Int
 Description: the number of synthesizers configured in JAWS
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthDisplayLoadErrors 

Description 

Retrieves whether or not JAWS displays an error to the user when the synthesizer at the specified index fails to load

Returns 

Type: Int
 Description: TRUE if the error should be displayed, FALSE otherwise
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthDriver 

Description 

Retrieves the driver name of the synthesizer at the specified index

Returns 

Type: String
 Description: The driver name of the requested synthesier, or "" if there is not a synthesizer at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer whose driver name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthDriverInformation 

Description 

Retrieves the driver information of the synthesizer at the specified index

Returns 

Type: String
 Description: The driver information string of the requested synthesier, or "" if there is not a synthesizer at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer whose driver information string is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthLongName 

Description 

Retrieves the descriptive name of the synthesizer at the specified index

Returns 

Type: String
 Description: The descriptive name of the requested synthesier, or "" if there is not a synthesizer at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer whose name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthName 

Description 

Retrieves the name of the synthesizer at the specified index

Returns 

Type: String
 Description: The name of the requested synthesier, or "" if there is not a synthesizer at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer whose name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthPort 

Description 

Retrieves the port name of the synthesizer at the specified index

Returns 

Type: String
 Description: The port name of the requested synthesier, or "" if there is not a synthesizer at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer whose port name is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: SynthPortString 

Description 

Retrieves the port string of the synthesizer at the specified index

Returns 

Type: String
 Description: The port string of the requested synthesier, or "" if there is not a synthesizer at that index.
 

Parameters 

Param 1: 

Type: int
 Description: the index of the synthesizer whose port string is to be retrieved
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Script: ToggleDefaultUserMode 

Description 

This script toggles the Default User Mode, which is also called the Default Alternate User Directory Mode, on an off. If the currently active Alternate User Directory Mode is AlternateUserDirMode_Off, this script sets the active Alternate User Directory Mode to AlternateUserDirMode_Default. This has the same effect as activating the Default User Mode. Otherwise this script sets the active Alternate User Directory Mode to AlternateUserDirMode_Off. The Default User Mode causes user settings to be saved in a subdirectory of the temp directory. The contents of this directory are transient; that is the contents of this directory are deleted when the product, JAWS or MAGic, enters or exits the mode. This mode is used for diagnostic purposes to determine if problems may be the result of user settings. Since the directory is initially empty this essentially causes the product to use factory default settings.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.00 and later

Function: ToggleLanguageDetection 

Description 

Toggles whether JAWS recognizes language changes.

Returns 

Type: String
 Description: description of value to be displayed as value of Language Detection.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityDomainSpecificConfiguration 

Description 

For developers, this scripting tool shows what needs to be written to ConfigNames.ini to associate the active domain with a set of scripts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: VerbosityLevel 

Description 

Changes the verbosity setting. Settings include Beginner, Intermediate, and Advanced. The verbosity setting determines how much descriptive information is to be spoken as you use Windows.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: VerbosityLevelToggle 

Description 

Controls how much JFW will say when the focus changes or other events occur on the screen or in response to key strokes.

Returns 

Type: String
 Description: description of value to be displayed as value of Verbosity Level setting.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: VirtualRibbonToggle 

Description 

Use Settings Center to toggle virtual ribbons and save the settings, use this script to toggle the setting for the current session.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Skim-Reading Functions

A Skim-Reading function provides or returns information about activities caused by user interaction with the Skim-Reading user interface or automatically updated by a Skim-Reading event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of Skim-Reading, such as the script for SkimReadDialog, for example. However, the focus of the present discussion is on functions related to Skim-Reading activities that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Skim-Reading functions include:

·         SkimReadMatchCallback

·         SkimReadMoveToDocLine

·         SkimReadMoveToDocOffset

·         SkimRead

For a complete listing of Skim-Reading functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script calls a Skim Read function to be performed with specific conditions you set.

To set up the example, simply type a lot of text into a Notepad document window, or bring up a text file that contains a lot of text. Make sure that several places in the text refer specifically to JAWS or Vispero because the script that calls the Skim-Read will be looking for either of those words to be in some of the sentences.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MySkimReadTest ()
Var
            String sExpression
sExpression = "JAWS|Vispero"
SkimRead (srmTextMatchingRegularExpression, TRUE, sExpression)
EndScript

Function: DlgSkimRead 

Description 

Displays a dialog that contains options for indicating how Skim Reading is performed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: MoveToDocumentOffset 

Description 

This function is used by the SkimreadMoveToDocOffset function to move the virtual cursor to the location of the match selected from the skimread summary.

Returns 

Type: int
 Description: TRUE if the move was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The 0-based document offset.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: SkimRead 

Description 

Skimreading allows the user to read out certain portions of a document while skipping over irrelevant information. The Skimreading mode maybe specified along with an optional text expression which determines which information is read.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Modes are defined in HJConst.jsh and include srmOff (equivalent to a SayAll), srmFirstLineOfParagraph (just read the first line of each paragraph), srmFirstSentenceOfParagraph (just the first sentence of each paragraph) or srmTextMatchingRegularExpression (read just the units of text which match the supplied Regular Expression.
 Include: Optional
 

Param 2: 

Type: int
 Description: TRUE to indicate JAWS is skimming, a beep will be heard every 20 units skimmed. The unit will depend on the current SayAll mode.
 Include: Optional
 

Param 3: 

Type: string
 Description: Is a regular expression defining what text should be present or absent in the text unit in order for it to be spoken. Some examples include Joe|Blogs|Fred (read units including the names Joe, Blogs or Fred), Joe&~BLogs (text units containing Joe but not Blogs), etc. See the documentation for the full regular expression syntax as it is very powerful.
 Include: Optional
 

Param 4: 

Type: int
 Description: when srmTextMatchingRegularExpression is used, the text unit to which the rule is applied and the unit spoken on a match.
 Include: Optional
 

Param 5: 

Type: int
 Description: if true, does not read each match but adds the text to the User Buffer and presents all matches at once when the SkimRead is stopped or completes (JAWS 6.10 and higher) defaults to FALSE.
 Include: Optional
 

Param 6: 

Type: int
 Description: use attrib constants in hjConst.jsh
 Include: Optional
 

Param 7: 

Type: string
 Description: use empty string (or don't pass) for any text color
 Include: Optional
 

Param 8: 

Type: string
 Description: use empty string (or don't pass) for any back color
 Include: Optional
 

Param 9: 

Type: int
 Description: if TRUE or not supplied, the text string will be treated as a regular expression as in prior versions of JAWS, if FALSE, a simple case insensitive check for text inclusion of the string will be performed.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: SkimReadDialog 

Description 

Displays a dialog that contains options for indicating how Skim Reading is performed.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: SkimReadMatchCallback 

Description 

This function is called by the Skimreading internal code with several parameters which enable scripts to compile and generate a summary of the skimread.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: the number of the match
 Include: Required
 

Param 2: 

Type: string
 Description: the text unit containing the match.
 Include: Required
 

Param 3: 

Type: int
 Description: the 1-based line number of the line in the document containing the match (useful if the exact offset of the match is unavailable).
 Include: Required
 

Param 4: 

Type: int
 Description: The 0-based document offset of the match (if greater or equal to 0, the exact offset of the match, if -1, use the line number instead).
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: SkimReadMoveToDocLine 

Description 

If a skim summary has found matches, moves to the line in the document where the current match can be found.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.10 and later

Function: SkimReadMoveToDocOffset 

Description 

If a skim summary has found matches, moves to the offset of the match in the document.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: SkimReadShouldSpeakText 

Description 

This function is only used when skimreading is being controlled externally by scripts as in MSWord.

Returns 

Type: int
 Description: true or false
 

Parameters 

Param 1: 

Type: string
 Description: text of unit to be checked against the current skimreading parameters. If skimreading is set to srmTextMatchesRegularExpression then the regular expression will be applied to this text and the function will return true if it should be spoken, false otherwise. If the skimreading mode is set to anything other than srmTextMatchesRegularExpression, the function will return TRUE unless a skimread is not in progress.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: StartSkimRead 

Description 

Skim Reading allows the user to read out certain portions of a document while skipping over irrelevant information. The Skimreading mode may be specified along with an optional text expression which determines which information is read.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Sounds Functions

A Sounds function processes or returns information about the Sounds files that ship with JAWS, or your own Sounds files. JAWS uses this information to determine what Sounds file to play, for comparison purposes, and so on.

Some examples of Sounds functions include:

·         Beep

·         PlaySound

For a complete listing of Sounds functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script plays a specific Sounds file on demand from the files that ship with JAWS.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script PlayMySound ()
Var
            String sSoundFile
sSoundFile = FindJAWSSoundFile ("HarpStringLong.wav")
If FileExists (sSoundFile)
            PlaySound (sSoundFile)
EndIf
EndScript

Function: Beep 

Description 

This is used to make the PC beep. It can be included within an If...Then...Else...statement so that when a certain condition is present, the PC will beep.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DecreaseSystemVolume 

Description 

If the gesture mode is set to Speech Settings, decreases system volume.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: IncreaseSystemVolume 

Description 

If the gesture mode is set to Speech Settings, increases system volume.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: PlayJCFSoundFile 

Description 

Finds the sound file at the specified section and key location, and if found plays it. Searches first the application JCF file, then the default JCF file for the section and key.

Returns 

Type: int
 Description: True if the sound file was found, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The section name in the JCF file where the key for the sound file is located.
 Include: Required
 

Param 2: 

Type: string
 Description: The name of the key in the JCF file where the sound file is located.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: PlaySound 

Description 

Plays a wave file through the computer sound system. Requires one parameter, the wave filename. Use the FindJAWSSoundFile function to search JAWS sound folders in the user and shared spaces for the desired file. If a complete path is not specified, JAWS will search the system path specified in Environment Variables for the file.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: Includes the wave filename. Use the FindJAWSSoundFile function to search JAWS sound folders in the user and shared spaces for the desired file. If a complete path is not specified, JAWS will search the system path specified in Environment Variables for the file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ToggleAudioDucking 

Description 

When other audio is ducked, it is reduced in volume so that JAWS can be more easily heard. Audio ducking is only available in Windows 8 or later.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Speech Markup Functions

A Speech Markup function provides or returns information about Speech Markup activities caused by user interaction. JAWS uses this information to determine how and what to speak, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of Speech Markup, such as the script for SelectAScheme, for example. However, the focus of the present discussion is on functions related to Speech Markup that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Speech Markup functions include:

·         GetCurrentSchemeName

·         GetCurrentSayAllScheme

·         IndicateControlState

·         IndicateControlType.

·         smmGetBehavior

For a complete listing of Speech Markup functions, see the topics in this category book of the Reference Guide.

Special Note:

Numerous Speech Markup functions involve obtaining or setting selection context bit flags. When active, these bit flags help JAWS determine how to interpret and process the text of certain types of items.

For example, if the bit flag for spelling error detection is enabled in Microsoft Word, that information is passed to several built-in functions to process the speech whenever you move in or out of a spelling error.

The behavior - the manner - in which JAWS processes and speaks certain types of text also depends on behavior tables. These tables are located in the .smf Speech Markup files that ship with JAWS. Examine these files carefully to understand how Speech Markup is processed, and how you may manipulate .smf files through your own scripts and function calls with the reading and writing functions in the Freedom Scientific Scripting Language.)

Code Sample

In the below code sample, the IndicateControlType function is overwritten in Notepad to speak information it normally does not speak for a control in a dialog. To set up the example, from any dialog in Notepad, press the default key assignment, JAWSKey+b, to read the current dialog in tab order.

It is assumed that the function is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Void Function IndicateControlType (Int iSubtype, Optional String sControlName, Optional String sControlText)
sControlName = sControlName + cscSpace + "subtype" + IntToString (iSubtype)
IndicateControlType (iSubtype, sControlName, sControlText)
EndFunction

Additional Resources

For more details on working with the many types of files that ship with JAWS, see the topic under Settings and Configurations in the General Scripting Concepts book called Script File Types.

For more information about reading from, and writing to, files through the Scripting language, see the category book in the Reference Guide called Files.

Function: GetCountedSelectionContextItems 

Description 

Retrieves a flagset representing the context itemms for which counts will be spoken. See the SelCtxCount constants in HJConst.jsh.

Returns 

Type: int
 Description: The flagset representing the context itemms for which counts will be spoken.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: GetCurrentSayAllScheme 

Description 

returns the name of the currently active Speech and Sounds scheme used when performing a SayAll.

Returns 

Type: string
 Description: the currently active SayAll scheme.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetCurrentSchemeName 

Description 

This function returns the name of the currently loaded Speech and Sounds Scheme.

Returns 

Type: String
 Description: the currently active smf file minus the extention .
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: GetSelectionContext 

Description 

This function returns the currently detected items at the caret or in the selection as determined by the flags set in SetSelectionContextFlags. For instance, if selCtxSpellingErrors is set, and there is a spelling error at the caret location, this flag will be set in the result returned by this function.

Returns 

Type: int
 Description: a bit pattern of the detected items at the caret or within the selection.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetSelectionContextFlags 

Description 

This function enables the user to determine which flags are currently set and thus which items will be detected during document navigation.

Returns 

Type: int
 Description: The flags set by SetSelectionContextFlags.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: IndicateControlState 

Description 

Allows your custom scripts to take advantage of the scheme the user has set up.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the JFW Subtype Code for which this applies. See WT_ constants in HjConst.jsh.
 Include: Required
 

Param 2: 

Type: int
 Description: nState Either use GetControlAttributes function or one of the CTRL_ constants from HjConst.jsh if you need to specify the state yourself.
 Include: Required
 

Param 3: 

Type: String
 Description: If for some reason, you need to have different text spoken you can use this parameter to enter text to be spoken. It will be marked up as any other text would be.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: IndicateControlType 

Description 

Pass the correct control type you want to be spoken for the window or control to speak. This will honor the speech markup.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the type of control to be spoken.
 Include: Required
 

Param 2: 

Type: string
 Description: sControlName Enter the name of the control to be spoken, if you have a custom name for this control. This would be true if the wrong name is spoken, or perhaps none at all, and you are customizing this control to speak. An example would be an edit that just says Edit without the control's name.
 Include: Optional
 

Param 3: 

Type: String
 Description: Enter the text or value of the control to be spoken, if it doesn't happen already. Most edits, lists, etc. already do it, but if you need to change this here's where.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Script: SelectAScheme 

Description 

This keystroke presents a list of schemes from which the user may select. The selected scheme is then loaded.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: setCountedSelectionContextItems 

Description 

Sets the bits in the flagset representing the context itemms for which you want counts spoken. See the SelCtxCount constants in HJConst.jsh.

Returns 

Type: int
 Description: True if the current location is valid for setting the context flags, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The flagset of context items to be spoken.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: SetSelectionContextFlags 

Description 

This function enables the user to choose which selection context information to indicate when navigating (in documents supporting this feature). See the selCtx* constants in hjconst.jsh for a list of the flags which may be enabled. Note that the behaviour of the indication if enabled is controlled via the Speech and Sounds Scheme in effect., however this function enables the flags to be toggled on the fly independent of scheme behavior.

Returns 

Type: int
 Description: TRUE if successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The flags ored together.
 Include: Required
 

Param 2: 

Type: int
 Description: nFlagsOfItemsToBeIndicatedPrior Set this to the selCtx items you want to be spoken prior to text when navigating, eg selCtxPageSectionColumnBreaks|selCtxTables|selCtxStyles|selCtxBorders.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: smmGetBehavior 

Description 

This function allows the scripter to obtain a scheme behavior.

Returns 

Type: int
 Description: the behavior for the given table and key.
 

Parameters 

Param 1: 

Type: string
 Description: the category of behaviors you wish too query. This is taken from the section name in the SMF file (minus the "Behavior table" suffix), for example, if you wish to query an Attribute behavior, the value of this parameter should be set to "Attribute".
 Include: Required
 

Param 2: 

Type: string
 Description: the key from the behavior table you wish to query.
 Include: Required
 

Param 3: 

Type: string
 Description: the data for the behavior. This piece of data will correspond to data1 through data4 for that given table and key, see the smf files for more detail. for example, if the behavior is speak item then the data will contain the optional text and voice alias used to speak the item. If the behavior is to change language then the data will contain the language alias etc.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: string
 Description: the second set of data for the behavior. For example, if you are retrieving data for the behavior speak and play sound, the behavior may contain both overriding text for the speak behavior and a sound file for the sound behavior. When the bahavior is set to speak and play sound sData will contain the overriding text stored in data1 and sData2 will contain the sound file stored in data2.
 Include: Optional
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: smmGetBehaviorForControlState 

Description 

See hjconst.jsh for the list of valid behavior constants.

Returns 

Type: Int
 Description: a constant representing the behavior.
 

Parameters 

Param 1: 

Type: Int
 Description: the control state whose behavior you want.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetBehaviorForControlType 

Description 

See hjconst.jsh for the list of valid behavior constants.

Returns 

Type: Int
 Description: a constant representing the behavior.
 

Parameters 

Param 1: 

Type: Int
 Description: the control type whose behavior you want.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetDesiredUnitsOfMeasure 

Description 

This function is used to get the units of measure JAWS uses for speaking measurements such as indentation etc.

Returns 

Type: int
 Description: the unit of measure currently set in the Speech Markup Engine (see smmSetDesiredUnitsOfMeasure), one of smmPixels, smmSpaces, smmPoints, smmMM, smmCM or smmInches.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: smmGetEndMarkupForAllCaps 

Description 

This function returns the end markup which will be used for a capitalized word.

Returns 

Type: String
 Description: the end Speech Markup which will be used to indicate a capitalized word. Note that some behaviors don't require an end tag and hence this will be blank.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetEndMarkupForAttributes 

Description 

If an attribute or set of attributes is mapped to a Speech Behavior, this function returns the end markup for the font name. See the Attribute Behavior Table in default.jcf. Note some mappings don't require an end markup tag hence the mapping will be blank.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the end of text in this attribute.
 

Parameters 

Param 1: 

Type: Int
 Description: this int must represent the attributes to lookup ored together.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetEndMarkupForColor 

Description 

If a text/background color combination is mapped to a Speech Behavior, this function returns the end markup for the color. See the Color Behavior Table in default.jcf.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the end of text in this color. Note that not all behaviors require an end tag.
 

Parameters 

Param 1: 

Type: Int
 Description:
 Include: Required
 

Param 2: 

Type: Int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetEndMarkupForControlState 

Description 

If a control state is mapped to a Speech Behavior, this function returns the end markup for the control state. See the ControlState Behavior Table in default.jcf. Note that since only sounds or speak item maybe assigned to a control state, you never need to use or get the end markup for control state behaviors.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the control state. Note that it is generally unlikely that a control state will be mapped to a behavior requiring an end markup tag.
 

Parameters 

Param 1: 

Type: Int
 Description: (required to determine the appropriate state)
 Include: Required
 

Param 2: 

Type: Int
 Description: state of control, see hjconst.jsh for control states.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetEndMarkupForControlType 

Description 

If a control type is mapped to a Speech Behavior, this function returns the end markup for the control type. See the ControlTypes Behavior Table in default.jcf.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the end of the control. Note that not all behaviors require an end tag.
 

Parameters 

Param 1: 

Type: Int
 Description: (must match one of the WT_ constants in hjconst.jsh).
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetEndMarkupForFontName 

Description 

If a font is mapped to a Speech Behavior, this function returns the end markup for the font name. See the Font Name Behavior Table in default.jcf. Note some mappings don't require an end markup tag hence the mapping will be blank.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the end of text in this font.
 

Parameters 

Param 1: 

Type: String
 Description: the font name
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetEndMarkupForFontSize 

Description 

If a font size is mapped to a Speech Behavior, this function returns the end markup for the font size. See the Font Size Behavior Table in default.jcf. Note some mappings don't require an end markup tag hence the mapping will be blank.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the end of text in this font.
 

Parameters 

Param 1: 

Type: Int
 Description: the font size marking the upper bound of a given range of font sizes.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetEndMarkupForSingleCap 

Description 

This function returns the end markup which will be used for a single capitalized letter.

Returns 

Type: String
 Description: the end Speech Markup which will be used to indicate a single capital letter. Note that some behaviors don't require an end tag and hence this will be blank.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetMarkupForSymbol 

Description 

for example, this function will return & for the & sign.

Returns 

Type: String
 Description: the markup for the given symbol.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetSpeechMarkupTextOptions 

Description 

When using the smmMarkupString function, the result of this function maybe used as the TextOptions parameter. This function sets the text options appropriately according to the currently selected jcf option values and Output type.

Returns 

Type: Int
 Description: the bit flags of the appropriate text options for the given output type.
 

Parameters 

Param 1: 

Type: Int
 Description: the output type to use to retrieve the appropriate text options.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForAllCaps 

Description 

This function returns the markup which will be used to introduce a capitalized word or letter group.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate a capitalized word.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: smmGetStartMarkupForAttributes 

Description 

If an attribute or set of attributes is mapped to a Speech Behavior, this function returns the start markup for the attributes. See the attributes Behavior Table in default.jcf.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the beginning of text in this attribute.
 

Parameters 

Param 1: 

Type: Int
 Description: this int must represent the attributes to lookup ored together.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForColor 

Description 

If a text/background color combination is mapped to a Speech Behavior, this function returns the start markup for the color. See the Color Behavior Table in default.jcf.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the beginning of text in this color.
 

Parameters 

Param 1: 

Type: Int
 Description:
 Include: Required
 

Param 2: 

Type: Int
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForControlState 

Description 

If a control state is mapped to a Speech Behavior, this function returns the start markup for the control state. See the ControlState Behavior Table in default.jcf.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the control state.
 

Parameters 

Param 1: 

Type: Int
 Description: (required to determine the appropriate state).
 Include: Required
 

Param 2: 

Type: Int
 Description: state of control, see hjconst.jsh for control states.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForControlType 

Description 

If a control type is mapped to a Speech Behavior, this function returns the start markup for the control type. See the ControlTypes Behavior Table in default.jcf

Returns 

Type: String
 Description: the Speech Markup which will be used to identify this control type.
 

Parameters 

Param 1: 

Type: Int
 Description: (must map to one of the WT_ constants in hjconst.jsh
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForFontName 

Description 

If a font is mapped to a Speech Behavior, this function returns the start markup for the font name. See the Font Name Behavior Table in default.jcf.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the beginning of text in this font.
 

Parameters 

Param 1: 

Type: String
 Description: the font name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForFontSize 

Description 

If a font size is mapped to a Speech Behavior, this function returns the start markup for the font size. See the Font Size Behavior Table in default.jcf. Note that the entries mark the upperbound for the font size, so, if there are two consequtive entries, one for 10 points and the next for 20, the first entry means 0 to 10 and the next means 11 to 20.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate the beginning of text in this font size.
 

Parameters 

Param 1: 

Type: Int
 Description: point size marking upper bound of sizes in this range.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetStartMarkupForSingleCap 

Description 

This function returns the markup which will be used for a single capitalized letter.

Returns 

Type: String
 Description: the Speech Markup which will be used to indicate a single capital letter.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmGetSymbolForMarkup 

Description 

For example, this function will return the & sign for the markup &

Returns 

Type: String
 Description: the symbol for the given markup.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmMarkupString 

Description 

This function marks up a string using information supplied as optional parameters.

Returns 

Type: String
 Description: the string marked up ready for speaking with the say command specifying true for the ContainsMarkup optional parameter
 

Parameters 

Param 1: 

Type: String
 Description: text to mark up
 Include: Required
 

Param 2: 

Type: Int
 Description: see bit flags defined in hjconst.jsh, TextOptions.
 Include: Optional
 

Param 3: 

Type: Int
 Description: see wt_ constants.
 Include: Optional
 

Param 4: 

Type: Int
 Description: see control states in hjconst.jsh.
 Include: Optional
 

Param 5: 

Type: Int
 Description: bit flags specifying the attributes of this text, see hjconst.jsh.
 Include: Optional
 

Param 6: 

Type: String
 Description: the font name of all characters in the string.
 Include: Optional
 

Param 7: 

Type: Int
 Description: the size of the font for this text.
 Include: Optional
 

Param 8: 

Type: Int
 Description: the color of the text.
 Include: Optional
 

Param 9: 

Type: Int
 Description: the backround color of this text.
 Include: Optional
 

Param 10: 

Type: String
 Description: the language code for this text.
 Include: Optional
 

Param 11: 

Type: string
 Description: The style description (eg heading 1, normal, etc) for this text (only optional in 5.10)
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmReplaceSymbolsWithMarkup 

Description 

This function processes a string containing symbols and replaces each occurance of a symbol with the correct markup so that the string maybe enhanced with other markup tags and spoken obeying the markup.

Returns 

Type: String
 Description: the original string with all symbols replaced by appropriate markup.
 

Parameters 

Param 1: 

Type: string
 Description: Enter the text whose symbols should be replaced by markup symbols.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmSchemeDefinesBehaviorFor 

Description 

This function is used to determine if the current scheme defines a behavior for any of the specified text option flags. For example, calling this function with a parameter of toAttributes will return 0 for classic since the classic scheme ignores any text attributes. Calling this function with a parameter of toAttributes with the Proofreading or Classic with Attributes schemes loaded however will return 1.

Returns 

Type: int
 Description: true if the current scheme will act upon the supplied text options, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: iTextOptions any number of text options bitwise ored together (see HJConst.jsh) for the list of text options.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: smmSetBehavior 

Description 

This function allows the scripter to change a scheme behavior on the fly. the setting is only temporary similar to SetJCFOption however it is very useful when you need to change the behavior of a scheme programmatically.

Returns 

Type: int
 Description: true if the behavior was successfully changed, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: the category of behaviors you wish too change. this is taken from the section name in the SMF file (minus the "Behavior table" suffix), for example, if you wish to change an Attribute behavior, the value of this parameter should be set to "Attribute".
 Include: Required
 

Param 2: 

Type: string
 Description: the key from the behavior table you wish to modify (or add).
 Include: Required
 

Param 3: 

Type: int
 Description: the new behavior, 0 ignore, 1 speak item, 2 play sound, 3 change voice, 4 change language, or 5 speak and play sound. (See hjconst.jsh).
 Include: Required
 

Param 4: 

Type: string
 Description: the new data for the behavior. For example, if you are changing the behavior to change language and you wish to specify the new language, use this parameter to provide the data for the behavior. Note this data corresponds to data1 through data4 in the SMF file depending on the behavior you set. If you do not provide the data, the behavior will inherit the current data from the active scheme.
 Include: Optional
 

Param 5: 

Type: string
 Description: a second set of new data for the behavior. For example, if you are changing the behavior to speak and play sound, you may need to supply overriding text for the speak behavior and will need to supply a sound file for the sound behavior. When the bahavior is set to speak and play sound sData will correspond to data1 and sData2 will correspond to data2.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: smmSetDesiredUnitsOfMeasure 

Description 

This function is used to set the units of measure JAWS uses for speaking measurements such as indentation etc.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: iUnit one of smmPixels, smmSpaces, smmPoints, smmMM, smmCM or smmInches.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: smmStripMarkup 

Description 

This function strips all speech markup commands and replaces all markup symbols with their correct symbols.

Returns 

Type: String
 Description: the original string with all markup removed and all &sym; replaced with the correct symbols.
 

Parameters 

Param 1: 

Type: String
 Description: the string containing markup.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: smmToggleTrainingMode 

Description 

When the Speech and Sounds Manager Training Mode is on, any item which is indicated by a sound or voice change also speaks the item as with the classic scheme. This enables a user of a new scheme to familiarize themself with the sounds and voices chosen to indicate a particular item.

Returns 

Type: void
 

Parameters 

Param 1: 

Type: int
 Description: set to 1 to turn training mode on, set to 0 to turn it off.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: smmTrainingModeActive 

Description 

This function returns 1 if the training mode is on, 0 if it is off.

Returns 

Type: int
 Description: 1 or 0
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: SwitchToScheme 

Description 

This function switches to the specified Speech Manager Scheme. If the scheme exists then the function returns TRUE, if it doesn't it returns FALSE and no scheme change occurs.

Returns 

Type: Int
 Description: TRUE or FALSE.
 

Parameters 

Param 1: 

Type: string
 Description: sScheme the scheme name (no extention or path required).
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: ToggleSMMTrainingMode 

Description 

This function is called from the Select A Scheme dialog to toggle the Speech and Sounds Manager training Mode on and off.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.10 and later

Strings Functions

A String function provides, processes, or returns information about a string of characters. One common use for these functions is to manipulate a string of characters in some way: chopping characters from the beginning or the end of a string, comparing two strings, parsing a string from a delimited list of strings, etc. JAWS uses this information to determine what to speak and display in Braille, for comparison purposes, and so on.

The Freedom Scientific Scripting language is rich with Strings functions for you to utilize in conjunction with many of the Say functions, such as SayFormattedMessage, for example. String functions may also be used to read from or write to an INI-style file.

 

Some examples of String functions include:

·         FindString

·         FormatString

·         IntToString

·         StringToInt

·         StringSegment

·         StringCompare

·         StringTrimCommon

For a complete listing of Strings functions, see the topics in this category book of the Reference Guide.

Code Sample

Often, string functions are used for comparing window classes, window names, etc. For instance, you may obtain the window title with a command to JAWS, Insert+t. But what if you just want the name of the document without the application name. In the below code sample, the script manipulates some string functions to obtain the title of an existing Notepad document without speaking or flashing in Braille the name of the application. There are numerous ways to accomplish this. The code sample is just meant to show how you might utilize string functions to obtain a simple piece of information.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, open Notepad into an existing document. then run the script from the document window of Notepad.

Script MyStringTest ()
Var
            Handle hReal,
            String sRealName,
            Int iRealLength,
            String sTitle
hReal = GetRealWindow (GetFocus ())
sRealName = GetWindowName (hReal)
iRealLength = StringLength (sRealName) ; the length of the entire real window name
; The next statement uses a combination of string functions:
; The StringContains function returns an integer representing the location where the real window name and the name of the application begin to match.
; For sample purposes only, the part of the string that represents the application name is hard-coded here.
; But hard-coding strings is typically not recommended because it is hard to maintain.
; In order to chop off the application name from the entire real window name, we must take the lenth of the window name and subtract the integer that StringContains returns from it.
; Then we can chop this number off from the real window name, and place the remaining string into the variable, sTitle.
sTitle = StringChopRight (sRealName, (iRealLength - StringContains (sRealName, " - Notepad")))
SayMessage (ot_JAWS_message, sTitle)
EndScript

This function is available in the following releases:

JAWS 4.51-10.0  

JAWS 11.0 and later  

 Function: FindString 

Description 

FindString searches for a string of text in a specified window. If the text is found, then the JAWS cursor is placed at the beginning of the text string

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Handle
 Description: Specify a window handle. Type the name of a variable or choose a script function to provide the handle of the window that is to be searched.
 Include: Required
 

Param 2: 

Type: String
 Description: Specify the text that is to be located. Type a text string, or type a variable name or choose a script function that can provide the text. Text strings must be enclosed within quotation marks.
 Include: Required
 

Param 3: 

Type: Int
 Description: Indicate the search direction. Type the name of a constant value to indicate the direction of the search: S_TOP or S_BOTTOM.
 Include: Required
 

Param 4: 

Type: Int
 Description: Indicate search restriction. Type the name of a constant value to indicate whether the search should be restricted to the active window or it should extend into all child windows of the active application. Type S_UNRESTRICTED to search all application windows or S_RESTRICTED to limit the search to the active child window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-10.0

 Function: FindString 

Description 

FindString searches for a string of text in a specified window. If the text is found, then the JAWS cursor is placed at the beginning of the text string

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Handle
 Description: Specify a window handle. Type the name of a variable or choose a script function to provide the handle of the window that is to be searched.
 Include: Required
 

Param 2: 

Type: String
 Description: Specify the text that is to be located. Type a text string, or type a variable name or choose a script function that can provide the text. Text strings must be enclosed within quotation marks.
 Include: Required
 

Param 3: 

Type: Int
 Description: Indicate the search direction. Type the name of a constant value to indicate the direction of the search: S_TOP or S_BOTTOM.
 Include: Required
 

Param 4: 

Type: Int
 Description: Indicate search restriction. Type the name of a constant value to indicate whether the search should be restricted to the active window or it should extend into all child windows of the active application. Type S_UNRESTRICTED to search all application windows or S_RESTRICTED to limit the search to the active child window.
 Include: Required
 

Param 5: 

Type: int
 Description: set to TRUE to use the ap's underlying DOM to find text even if not onscreen, FALSE to do an onscreen search (for backward script compatibility, defaults to FALSE)
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 11.0 and later

This function is available in the following releases:

1.    JAWS 4.51-11.0  

2.    JAWS 12.0 and later  

 Function: FormatString 

Description 

Formats the string you specify with the messages received as subsequent parameters. The message to be formatted must be delimited with the parameter place holder delimiters, such as %1 %2 %3 %4 %5

Returns 

Type: String
 Description: the contents of Message with all place holders replaced by their associated parameters.
 

Parameters 

Param 1: 

Type: String
 Description: string containing text intermingled with parameter place holders.
 Include: Required
 

Param 2: 

Type: String
 Description: item to be substituted in place of %1 every time it appears in Message.
 Include: Optional
 

Param 3: 

Type: String
 Description: item to be substituted in place of %2 every time it appears in Message.
 Include: Optional
 

Param 4: 

Type: String
 Description: item to be substituted in place of %3 every time it appears in Message.
 Include: Optional
 

Param 5: 

Type: String
 Description: item to be substituted in place of %4 every time it appears in Message.
 Include: Optional
 

Param 6: 

Type: String
 Description: item to be substituted in place of %5 every time it appears in Message.
 Include: Optional
 

Param 7: 

Type: String
 Description: item to be substituted in place of %6 every time it appears in Message.
 Include: Optional
 

Param 8: 

Type: String
 Description: item to be substituted in place of %7 every time it appears in Message.
 Include: Optional
 

Param 9: 

Type: String
 Description: item to be substituted in place of %8 every time it appears in Message.
 Include: Optional
 

Param 10: 

Type: String
 Description: item to be substituted in place of %9 every time it appears in Message.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51-11.0

 Function: FormatString 

Description 

Formats the string you specify with the messages received as subsequent parameters. The message to be formatted must be delimited with the parameter place holder delimiters, such as %1 %2 %3 %4 %5

Returns 

Type: String
 Description: the contents of Message with all place holders replaced by their associated parameters.
 

Parameters 

Param 1: 

Type: String
 Description: string containing text intermingled with parameter place holders.
 Include: Required
 

Param 2: 

Type: Variant
 Description: item to be substituted in place of %1 every time it appears in Message.
 Include: Optional
 

Param 3: 

Type: Variant
 Description: item to be substituted in place of %2 every time it appears in Message.
 Include: Optional
 

Param 4: 

Type: Variant
 Description: item to be substituted in place of %3 every time it appears in Message.
 Include: Optional
 

Param 5: 

Type: Variant
 Description: item to be substituted in place of %4 every time it appears in Message.
 Include: Optional
 

Param 6: 

Type: Variant
 Description: item to be substituted in place of %5 every time it appears in Message.
 Include: Optional
 

Param 7: 

Type: Variant
 Description: item to be substituted in place of %6 every time it appears in Message.
 Include: Optional
 

Param 8: 

Type: Variant
 Description: item to be substituted in place of %7 every time it appears in Message.
 Include: Optional
 

Param 9: 

Type: Variant
 Description: item to be substituted in place of %8 every time it appears in Message.
 Include: Optional
 

Param 10: 

Type: Variant
 Description: item to be substituted in place of %9 every time it appears in Message.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: FormatStringWithEmbeddedFunctions 

Description 

This function replaces each occurance of  with the result of calling the function func.

Returns 

Type: String
 Description: The string with  occurances replaced by function result.
 

Parameters 

Param 1: 

Type: String
 Description: string with embedded functions.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCharacterValue 

Description 

This function returns the numeric value of the character parameter.

Returns 

Type: Int
 Description: the value of the character.
 

Parameters 

Param 1: 

Type: string
 Description: the character whose value is desired.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetCharacterValueString 

Description 

This function maybe used with SayCharacter thrice to get an appropriate string to speak describing the character. For example: Character u+627 or Character 255 plus 248 or Character 1075 etc. Flags maybe used to specify if the value should be converted to hexedecimal or left as decimal and whether or not to markup the character value portion of the string.

Returns 

Type: string
 Description: if the character is successfully converted to a multibyte sequence using the specified code page then the string will contain either the hex or decimal values of the characters. If the markup flag was specified, the actual values will be marked up using the toSpell text option.
 

Parameters 

Param 1: 

Type: string
 Description: if not supplied, the character at the active cursor is assumed.
 Include: Optional
 

Param 2: 

Type: int
 Description: see HJConst.jsh for supported flags (see CVF constants.
 Include: Optional
 

Param 3: 

Type: int
 Description: if not specified, the active code page is assumed.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: GetSpellString 

Description 

Adds spaces between characters in a string so that saying the string will result in the characters being spelled out.

Returns 

Type: String
 

Parameters 

Param 1: 

Type: String
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IntToPaddedString 

Description 

pads an integer with zeros for the given width.

Returns 

Type: string
 Description: the padded string
 

Parameters 

Param 1: 

Type: int
 Description: the number to pad
 Include: Required
 

Param 2: 

Type: int
 Description: the width to pad
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Function: IntToString 

Description 

Converts an integer value to a string and returns the string value.

Returns 

Type: String
 Description: The newly created string.
 

Parameters 

Param 1: 

Type: Int
 Description: The number to be converted to a string.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsWordDelimiter 

Description 

Looks to see if the given character is contained in STRWordDelmiters. If so, then returns TRUE. STRWordDelimiters is defined in HJConst.jsh.

Returns 

Type: Int
 Description: true if is word delimiter, false otherwise
 

Parameters 

Param 1: 

Type: String
 Description: Gets the current character.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: LevenshteinDistance 

Description 

Computes the LevenshteinDistance between two strings. This is the number of additions, deletions, and changes in order to transform string1 into string2.

Returns 

Type: int
 Description: the number of changes
 

Parameters 

Param 1: 

Type: string
 Description: The first string
 Include: Required
 

Param 2: 

Type: string
 Description: The second string
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: MakeCharacterFromValue 

Description 

This function returns the character whose numeric value is represented by the int parameter.

Returns 

Type: String
 Description: that contain the single character whose numeric value is given.
 

Parameters 

Param 1: 

Type: Int
 Description: the numeric value of the desired character.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: ParseOutlookCalendarUIAText 

Description 

The string is formatted with each field on its own line, and the name and field separated by a colon. When parsing each field, segment 1 where colon is the delimiter is the field, segments 2-end are the field contents. Field 1 is Status, value is Success or Failure. This is meant to be locale-agnostic in implementation, since each locale orders the string differently. To that end, the second parameter to this function provides the locale to use when creating the list of fields.

Returns 

Type: string
 Description: the fields in the calendar string as supplied by UIA (GetObjectName (TRUE,0)) function call in Outlook Calendar.
 

Parameters 

Param 1: 

Type: string
 Description: the text from UIA, e.g. getObjectName (TRUE,0) from calendar view.
 Include: Required
 

Param 2: 

Type: string
 Description: the language abbreviation for the regional language in use, e.g. GetUserLocaleInfo (LOCALE_SABBREVLANGNAME) where Locale.jsh is included in your source file.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.00 and later

This function is available in the following releases:

1.    JAWS 4.51-11.0  

2.    JAWS 12.0 and later  

 Function: SayFormattedMessage 

Description 

This function takes short and long messages and speaks the appropriate message based on the given output type. The messages which are passed may have formatting strings such as %KeyFor() in them, as they will be formatted by the function. If using the output mode OT_USER_BUFFER, to place text in the User Buffer, do not include the short message as it will be ignored. With Desktop JAWS 5 and later, we suggest that you no longer speak control type and state information with this function. Instead, use IndicateControlType and IndicateControlState. Type information includes messages such as "edit" or "button." State information includes messages such as "checked" or "not checked."

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The constant representing the desired output type for the given set of messages. A list of available output type constants can be found in hjconst.jsh.
 Include: Required
 

Param 2: 

Type: String
 Description: A quoted string of text, a message constant, or a string variable containing the desired long message. If you require only one message, enter it for this parameter and leave the third parameter blank
 Include: Required
 

Param 3: 

Type: String
 Description: A quoted string of text, a message constant, or a string variable containing the desired short message. If you would like the short message to speak nothing, enter the constant msgSilent for this parameter. If using the output type OT_USER_BUFFER, enter nothing at all.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-11.0

 Function: SayFormattedMessage 

Description 

This function takes short and long messages and speaks the appropriate message based on the given output type. The messages which are passed may have formatting strings such as %KeyFor() in them, as they will be formatted by the function. If using the output mode OT_USER_BUFFER, to place text in the User Buffer, do not include the short message as it will be ignored. With Desktop JAWS 5 and later, we suggest that you no longer speak control type and state information with this function. Instead, use IndicateControlType and IndicateControlState. Type information includes messages such as "edit" or "button." State information includes messages such as "checked" or "not checked."

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The constant representing the desired output type for the given set of messages. A list of available output type constants can be found in hjconst.jsh.
 Include: Required
 

Param 2: 

Type: String
 Description: A quoted string of text, a message constant, or a string variable containing the desired long message. If you require only one message, enter it for this parameter and leave the third parameter blank
 Include: Required
 

Param 3: 

Type: String
 Description: A quoted string of text, a message constant, or a string variable containing the desired short message. If you would like the short message to speak nothing, enter the constant msgSilent for this parameter. If using the output type OT_USER_BUFFER, enter nothing at all.
 Include: Optional
 

Param 4: 

Type: Variant
 Description: item to be substituted in place of %1 every time it appears in Message.
 Include: Optional
 

Param 5: 

Type: Variant
 Description: item to be substituted in place of %2 every time it appears in Message.
 Include: Optional
 

Param 6: 

Type: Variant
 Description: item to be substituted in place of %3 every time it appears in Message.
 Include: Optional
 

Param 7: 

Type: Variant
 Description: item to be substituted in place of %4 every time it appears in Message.
 Include: Optional
 

Param 8: 

Type: Variant
 Description: item to be substituted in place of %5 every time it appears in Message.
 Include: Optional
 

Param 9: 

Type: Variant
 Description: item to be substituted in place of %6 every time it appears in Message.
 Include: Optional
 

Param 10: 

Type: Variant
 Description: item to be substituted in place of %7 every time it appears in Message.
 Include: Optional
 

Param 11: 

Type: Variant
 Description: item to be substituted in place of %8 every time it appears in Message.
 Include: Optional
 

Param 12: 

Type: Variant
 Description: item to be substituted in place of %9 every time it appears in Message.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

This function is available in the following releases:

1.    JAWS 6.00-11.0  

2.    JAWS 12.0 and later  

 Function: SayFormattedMessageWithvoice 

Description 

This function speaks long and short messages in the desired voice and output type.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: One of the VCTX voice type constants.
 Include: Required
 

Param 2: 

Type: Int
 Description: One of the available output types for speaking messages.
 Include: Required
 

Param 3: 

Type: String
 Description: The long message to be spoken.
 Include: Required
 

Param 4: 

Type: String
 Description: The short message to be spoken.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 6.00-11.0

 Function: SayFormattedMessageWithvoice 

Description 

This function speaks long and short messages in the desired voice and output type.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: One of the VCTX voice type constants.
 Include: Required
 

Param 2: 

Type: Int
 Description: One of the available output types for speaking messages.
 Include: Required
 

Param 3: 

Type: String
 Description: The long message to be spoken.
 Include: Required
 

Param 4: 

Type: String
 Description: The short message to be spoken.
 Include: Optional
 

Param 5: 

Type: Variant
 Description: item to be substituted in place of %1 every time it appears in Message.
 Include: Optional
 

Param 6: 

Type: Variant
 Description: item to be substituted in place of %2 every time it appears in Message.
 Include: Optional
 

Param 7: 

Type: Variant
 Description: item to be substituted in place of %3 every time it appears in Message.
 Include: Optional
 

Param 8: 

Type: Variant
 Description: item to be substituted in place of %4 every time it appears in Message.
 Include: Optional
 

Param 9: 

Type: Variant
 Description: item to be substituted in place of %5 every time it appears in Message.
 Include: Optional
 

Param 10: 

Type: Variant
 Description: item to be substituted in place of %6 every time it appears in Message.
 Include: Optional
 

Param 11: 

Type: Variant
 Description: item to be substituted in place of %7 every time it appears in Message.
 Include: Optional
 

Param 12: 

Type: Variant
 Description: item to be substituted in place of %8 every time it appears in Message.
 Include: Optional
 

Param 13: 

Type: Variant
 Description: item to be substituted in place of %9 every time it appears in Message.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: stringChopLeft 

Description 

This function chops the first part of a string by the specified number of characters and returns the remainder.

Returns 

Type: String
 Description: chopped by supplied number of characters.
 

Parameters 

Param 1: 

Type: String
 Description: string to chop.
 Include: Required
 

Param 2: 

Type: Int
 Description: by how many characters.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: stringChopRight 

Description 

This function chops the last part of a string by the specified number of characters and returns the remainder, ie the first part.

Returns 

Type: String
 Description: chopped by supplied number of characters.
 

Parameters 

Param 1: 

Type: String
 Description: string to chop.
 Include: Required
 

Param 2: 

Type: Int
 Description: by how many characters.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringCompare 

Description 

Compares two string with case sensitivity optional

Returns 

Type: int
 Description: 0 if the two strings are equal, a negative number if the first string is less than the second, or a number greater than 0 if the first string is greater than the second.
 

Parameters 

Param 1: 

Type: string
 Description: the first string in the comparison.
 Include: Required
 

Param 2: 

Type: string
 Description: the second string in the comparison.
 Include: Required
 

Param 3: 

Type: int
 Description: true if the compare is to be case sensitive, false otherwise. The default is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: StringContains 

Description 

Determines whether a specified text string is contained within another text string.

Returns 

Type: Int
 Description: An integer is returned to indicate the position in string 1, where the two strings begin to match. If a value of 5 is returned, this means that the string in parameter 2 is present in parameter 1 and the matching characters begin at the fifth character in the string. If a value of 0 is returned, this means that the string in parameter 2 is not contained within the string in parameter 1.
 

Parameters 

Param 1: 

Type: string
 Description: This parameter specifies the string that is to be searched. The search starts at the beginning of this string. Type the text string, type a variable name, or choose a script function. Text strings must be enclosed within quotation marks.
 Include: Required
 

Param 2: 

Type: string
 Description: This parameter contains the string you are trying to locate. Type the text string, type a variable name, or choose a script function. Text strings must be enclosed within quotation marks.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringContainsChars 

Description 

this function returns TRUE if any of the characters in string 2 appear in string 1.

Returns 

Type: int
 Description: True if string1 contains any of the characters in string2
 

Parameters 

Param 1: 

Type: string
 Description: the string to search
 Include: Required
 

Param 2: 

Type: string
 Description: the list of characters to look for in sStr
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: StringDeleteBlankFields 

Description 

Given a string with segments or fields delimited by identical delimiters to all segments or fields, returns a string with the fields containing only whitespace removed.

Returns 

Type: string
 Description: The original string with fields consisting of only whitespace removed.
 

Parameters 

Param 1: 

Type: string
 Description: The source string containing the fields.
 Include: Required
 

Param 2: 

Type: string
 Description: The string containing the field delimiter. The delimiter may be one or more characters in length, but it must be identical for all fields being delimited.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: StringDiff 

Description 

Retrieves the parts of a string which precede or follow the contents of a second string.

Returns 

Type: String
 Description: A concatenation of the parts of s1 which come before and after the contents of s2. If s2 is not contained within s1, then the empty string is returned.
 

Parameters 

Param 1: 

Type: String
 Description: The string to be searched.
 Include: Required
 

Param 2: 

Type: String
 Description: The string to search for.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringIsAlpha 

Description 

Determines if a string consists of only alpha characters.

Returns 

Type: int
 Description: True if a string consists of only alpha characters, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The string to test.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 16.0 and later

Function: StringIsBlank 

Description 

This function returns true if the specified string only contains spaces, tabs or newline characters. It returns false if the string contains any printable character. This is useful for determining if strings returned from the object model of an application are blank as far as JAWS speaking is concerned.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

Param 1: 

Type: String
 Description: the string to test.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringIsPunctuation 

Description 

Determines if a string consists of only punctuation characters.

Returns 

Type: int
 Description: True if a string consists of only punctuation characters, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The string to test.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: StringLeft 

Description 

Extracts a specified number of leftmost characters from a string.

Returns 

Type: String
 Description: The string that is extracted from strString.
 

Parameters 

Param 1: 

Type: String
 Description: The string from which the leftmost characters will be extracted.
 Include: Required
 

Param 2: 

Type: Int
 Description: The number of leftmost characters that will be extracted.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: StringLength 

Description 

Used to find the length of a string.

Returns 

Type: Int
 Description: Returns an integer value specifying the length of the string.
 

Parameters 

Param 1: 

Type: String
 Description: The string for which the length is requested.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringLower 

Description 

Converts a mixed case string to all lower case.

Returns 

Type: String
 Description: The converted string.
 

Parameters 

Param 1: 

Type: String
 Description: The string to be converted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringMixedCaseToMultiword 

Description 

This function converts a mixed case string to multiple words. For example ScreenSensitiveHelp is converted to Screen Sensitive Help.

Returns 

Type: String
 Description: the mixed case string with spaces inserted before each capital letter.
 

Parameters 

Param 1: 

Type: String
 Description: the string containing mixed case words.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringRemoveCharsInRange 

Description 

Each Unicode character, in addition to having a printable representation, has an ordinal value. For example uppercase A has an ordinal value of 65, uppercase Z has an ordinal value of 90, and all other uppercase letters have ordinal values between these two. Calling StringRemoveChars("Hello There",65,90) would return "ello here" (The quote marks surrounding the returned value are not actually returned.)

Returns 

Type: string
 Description: the resultant string
 

Parameters 

Param 1: 

Type: string
 Description: the string from which characters should be removed
 Include: Required
 

Param 2: 

Type: int
 Description: the ordinal value of the first character to be removed
 Include: Required
 

Param 3: 

Type: int
 Description: the ordinal value of the last character to be removed
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.00 and later

Function: StringReplaceChars 

Description 

For example stringReplaceChars("hello", "lo","-") would result in he---

Returns 

Type: string
 Description: the resultant string
 

Parameters 

Param 1: 

Type: string
 Description: the string to search
 Include: Required
 

Param 2: 

Type: string
 Description: string of characters you want to replace occurrences of.
 Include: Required
 

Param 3: 

Type: string
 Description: the char to replace each of the characters in sCharList if found.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: StringReplaceSubstrings 

Description 

For example, StringReplaceSubstrings("hello there everyone", "there", "") would result in hello everyone.

Returns 

Type: string
 Description: the resultant string
 

Parameters 

Param 1: 

Type: string
 Description: source string
 Include: Required
 

Param 2: 

Type: string
 Description: the substring in source to replace.
 Include: Required
 

Param 3: 

Type: string
 Description: the string to replace any occurances of above string with (maybe null to remove occurances).
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: StringReverse 

Description 

This function reverses a string, useful when you need to look at the differences between the ends of two strings.

Returns 

Type: String
 Description: the reversed string.
 

Parameters 

Param 1: 

Type: String
 Description: string to reverse.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: StringRight 

Description 

Extracts a specified number of rightmost characters from a string.

Returns 

Type: String
 Description: The string that is extracted from strString..
 

Parameters 

Param 1: 

Type: String
 Description: The string from which the rightmost characters will be extracted.
 Include: Required
 

Param 2: 

Type: Int
 Description: The number of rightmost characters that will be extracted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringSegment 

Description 

When a string contains delimiters, StringSegment can be called to extract a segment of the string. One is the index of the first string. As of JAWS 7.0, negative numbers extract segments from the right end of the string. So -1 will return the last segment, -2 the second to the last etc.

Returns 

Type: String
 Description: The string segment specified by nIndex.
 

Parameters 

Param 1: 

Type: String
 Description: The string that is delimited by some character or characters.
 Include: Required
 

Param 2: 

Type: String
 Description: The delimiter or set of delimiters. This string must be enclosed in quotation marks.
 Include: Required
 

Param 3: 

Type: Int
 Description: The index of the segment to be retrieved. One is the index of the first segment. -1 is the index of the last segment
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringSegmentCount 

Description 

Retrieves a count of segments in a string.

Returns 

Type: Int
 Description: The count of segments in the string
 

Parameters 

Param 1: 

Type: String
 Description: The string that is delimited by some character or characters.
 Include: Required
 

Param 2: 

Type: String
 Description: The delimiter or set of delimiters. This string must be enclosed in quotation marks.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: StringSegmentIndex 

Description 

When a string contains delimiters, StringSegmentIndex can be called to determine the index of a particular segment.

Returns 

Type: Int
 Description: the 1-based index of the specified segment (0 if the segment wasn't found).
 

Parameters 

Param 1: 

Type: String
 Description: The string that is delimited by some character or characters.
 Include: Required
 

Param 2: 

Type: String
 Description: The delimiter or set of delimiters. This string must be enclosed in quotation marks.
 Include: Required
 

Param 3: 

Type: String
 Description: the segment whose index you want.
 Include: Required
 

Param 4: 

Type: Int
 Description: true if the segment should match exactly, false to just check that the segment contains the specified string.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: stringsMatchExcludingWhitespace 

Description 

Determines if strings are equal excluding white space characters. String "HelloWorld", "Hello World", "Hello\nWorld", and "Hello\09World" would all match since their white space characters all got removed.

Returns 

Type: int
 Description: TRUE if matched, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: First of two strings to verify matching.
 Include: Required
 

Param 2: 

Type: string
 Description: second of two strings to verify matching.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: StringStartsWith 

Description 

Determines if s1 starts with s2. For example, if s = "Hello there" and s2 = "hello", then the function will return true. Note that the function will also return true if the strings are identical.

Returns 

Type: int
 Description: true if s1 starts with s2, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The first string
 Include: Required
 

Param 2: 

Type: string
 Description: the second string
 Include: Required
 

Param 3: 

Type: int
 Description: true if the compare is to be case sensitive, false otherwise. The default is false.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: stringStripAllBlanks 

Description 

this function strips leading, embedded and trailing blanks from a string.

Returns 

Type: String
 Description: The string without blanks.
 

Parameters 

Param 1: 

Type: String
 Description: string containing blanks to strip.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringToHandle 

Description 

Converts a string value to a handle. It is assumed that the string contains atextual representation of an actual handle value.

Returns 

Type: Handle
 Description: The converted string.
 

Parameters 

Param 1: 

Type: string
 Description: The string to be converted to a handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringToInt 

Description 

Converts a string value to an integer and returns the integer value.

Returns 

Type: Int
 Description: The newly created integer.
 

Parameters 

Param 1: 

Type: string
 Description: The string to be converted to an integer.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringTrimCommon 

Description 

This function compares two strings and trims the common characters from either the start, the end or both the start and end. The user specifies which end to trim by setting the third parameter to 0 for both ends, 1 for the start or 2 for the end. For example, if string 1 is "hello world" and string 2 is "hello fred", StringTrimCommon(s1, s2, 1) would return world in s1 and fred in s2 and the return value would be 1. If the strings are identical then the function returns FALSE since there is nothing left after trimming common characters.

Returns 

Type: int
 Description: TRUE if the function trimmed common characters and either s1 or s2 contain something after the comparison, FALSE if s1 and s2 are identical.
 

Parameters 

Param 1: 

Type: string
 Description: the first string to compare. Note after calling this function this parameter is replaced by the piece of s1 which is not contained in s2.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: the second string to compare. Note after calling this function, s2 is replaced by the piece of s2 which is not contained in s1.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: int
 Description: 0 both start and end, (default), 1 trim start, 2 trim end.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: StringTrimLeadingBlanks 

Description 

strips leading blanks from a string.

Returns 

Type: String
 Description: the string with leading blanks trimmed.
 

Parameters 

Param 1: 

Type: String
 Description: string to trim.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringTrimTrailingBlanks 

Description 

strips trailing blanks from a string.

Returns 

Type: String
 Description: the string with trailing blanks trimmed.
 

Parameters 

Param 1: 

Type: String
 Description: string to trim.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: StringUpper 

Description 

Converts a mixed case string to all upper case.

Returns 

Type: String
 Description: The converted string.
 

Parameters 

Param 1: 

Type: String
 Description: the string to be converted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SubString 

Description 

Extracts part of a string from another string. It could be used to read a portion of the information that appears on a status line.

Returns 

Type: String
 Description: Provides a substring of text for use by other functions.
 

Parameters 

Param 1: 

Type: string
 Description: Type a string to be processed, or specify a variable name or script function that can provide the text string. Text strings must be enclosed within quotation marks.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type a number to indicate the position of the first character in the substring which is to be extracted. The index number of the first character in the string is 1.
 Include: Required
 

Param 3: 

Type: Int
 Description: Type an integer to indicate the number of characters that are to be extracted from the string. If the int is greater than the number of characters remaining in the string, then the number is silently rounded down.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: TextToHTML 

Description 

This function is useful for obtaining text from the output of a script, converting it to HTML and then passing that HTML to the results viewer so that URLS within plain text can be invoked from the results viewer.

Returns 

Type: string
 Description: HTML
 

Parameters 

Param 1: 

Type: string
 Description: text to convert
 Include: Required
 

Param 2: 

Type: string
 Description: title of HTML document
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: TypeFormattedString 

Description 

Types a Formatted string you specify with the messages received as subsequent parameters. The message to be formatted must be delimited with the parameter place holder delimiters, such as %1 %2 %3 %4 %5.

Returns 

Type: Int
 Description: The number of keystrokes simulated.
 

Parameters 

Param 1: 

Type: String
 Description: string containing text intermingled with parameter place holders.
 Include: Required
 

Param 2: 

Type: String
 Description: item to be substituted in place of %1 every time it appears in Message.
 Include: Optional
 

Param 3: 

Type: String
 Description: item to be substituted in place of %2 every time it appears in Message.
 Include: Optional
 

Param 4: 

Type: String
 Description: item to be substituted in place of %3 every time it appears in Message.
 Include: Optional
 

Param 5: 

Type: String
 Description: item to be substituted in place of %4 every time it appears in Message.
 Include: Optional
 

Param 6: 

Type: String
 Description: item to be substituted in place of %5 every time it appears in Message.
 Include: Optional
 

Param 7: 

Type: String
 Description: item to be substituted in place of %6 every time it appears in Message.
 Include: Optional
 

Param 8: 

Type: String
 Description: item to be substituted in place of %7 every time it appears in Message.
 Include: Optional
 

Param 9: 

Type: String
 Description: item to be substituted in place of %8 every time it appears in Message.
 Include: Optional
 

Param 10: 

Type: String
 Description: item to be substituted in place of %9 every time it appears in Message.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: TypeString 

Description 

Used to simulate a string of keystrokes. For example: to send a group of keystrokes through to the application simulating the string "test," you could either enter the line {t}{e}{s}{t}, or you could use TypeString ("test").

Returns 

Type: Int
 Description: The number of keystrokes simulated.
 

Parameters 

Param 1: 

Type: string
 Description: The string of characters that will be sent to the underlying application. This parameter must be enclosed in quotation marks.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

System Functions

A System function provides or returns information about activities caused by user interaction or automatically updated by a system event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of System, such as the script for ListTaskTrayIcons, for example. However, the focus of the present discussion is on functions related to System activities that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of System functions include:

ChangeSystemVolume

GetBatteryChargeStatus

GetDayOfWeek

GetInputLanguage

GetSystemLocaleInfo

For a complete listing of System functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script obtains the system language and country locale in use, and speaks and flashes the information on demand.

Make sure to add an Include statement for Locale.jsh at the top of the script source file, along with your typical Include statements. The Locale.jsh file contains the constant definitions needed for the script to run properly.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MySystemLanguageTest ()
Var
            Int iLocaleCType,
            String sLocale
iLocaleCType = LOCALE_SENGLANGUAGE ;system language name in English
sLocale = GetSystemLocaleInfo (iLocaleCType)
iLocaleCType = LOCALE_SENGCOUNTRY ; country name in English
If sLocale != cscNull
            sLocale = sLocale + cscSpace +GetSystemLocaleInfo (iLocaleCType) ; English language and country names.
EndIf
SayMessage (ot_user_requested_information, sLocale)
EndScript

Additional Resources

For more details on working with Include statements, see the topic under Compiler Directives in the General Scripting Concepts book called Include Directive.

Function: abs 

Description 

Returns the absolute value of the supplied signed integer. Example: abs (-35) would return 35, abs (100) would return 100, and abs (0xFFFF) would return 65535.

Returns 

Type: int
 Description: the absolute value of the supplied signed integer.
 

Parameters 

Param 1: 

Type: int
 Description: the signed integer.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Function: AllowedToUseSkypeAPI 

Description 

When a program like JAWS first tries to use the Skype API, Skype asks the user to allow or deny that program access. Once access is allowed it remains in place until a new build of the program is put in place, at which time the access check is repeated.

Returns 

Type: int
 Description: 0=Access is allowed,1= access is waiting for user approval, 2=Client has explicitly denied access, 3=API unavailable most likely because no user is logged in to Skype, 0x8001=Skype not running
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: AppCommand 

Description 

performs an Windows app-command action.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: An app command which is a numeric value corresponding to definition in winuser.h.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: ChangeSystemVolume 

Description 

Changes the system volume.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The direction of volume change, use V_UP or V_DOWN defined in HJConst.jsh.
 Include: Required
 

Param 2: 

Type: int
 Description: The amount to change the volume. Volume of 0 percent to 100 percent ranges in value from 0 to 0xffff (65535).
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: CheckForWinVistaErrorDialog 

Description 

Use this function in WindowCreatedEvent to check for Windows Vista error dialogs, and if so it will schedule focus to move to the error dialog.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window which will be check if it belongs to the Vista error dialog.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: EnableRemoteAccessClient 

Description 

Enable or disable the Remote Access Client component. The Remote Access Client component is typically enabled during product installation. When the component is enabled, JAWS is able to recieve speech and Braille through a Citrix or Remote Desktop client session.

Returns 

Type: Int
 Description: TRUE if the component is successfully set to the desired state, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: Set parameter to TRUE to enable or FALSE to disable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: EnableRemoteAccessServer 

Description 

Enable or disable the Remote Access Server component. The Remote Access Server component is typically enabled during product installation. When the component is enabled, JAWS is able to run in a Remote Desktop or Citrix session.

Returns 

Type: Int
 Description: TRUE if the component is successfully set to the desired state, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: Set parameter to TRUE to enable or FALSE to disable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: FocusToWerFaultApp 

Description 

Brings the Windows Vista error dialog into focus by setting focus to its button.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetBatteryChargeStatus 

Description 

Returns the state of the battery charge. The returned value is 1 for High, 2 for Low, 4 for Critical, 8 for Charging, 128 for No system battery, or 255 for Unknown status.

Returns 

Type: int
 Description: Returns the state of the battery charge.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetBatteryLifeTimeRemainingString 

Description 

Returns the battery charge remaining as a string. The returned string displays hours and minutes remaining.

Returns 

Type: String
 Description: Returns the battery charge remaining as a string.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: GetBatteryLifeTimeSecondsRemaining 

Description 

Returns the total number of seconds of battery charge remaining. Returns -1 if status is unknown.

Returns 

Type: int
 Description: Returns the percentage of full battery charge remaining.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetDayOfWeek 

Description 

Returns a localized string representing the day of the week given a date in the YYYY/MM/DD format. The day can be either the long day format or the short day format.

Returns 

Type: String
 Description: The day of the week
 

Parameters 

Param 1: 

Type: String
 Description: a date in the format YYYY/MM/DD
 Include: Required
 

Param 2: 

Type: String
 Description: "L" or "S". Determines if the day of the week is returned as a short abbreviated day or a long day. Defaults to a long day name.
 Include: Optional
 

Param 3: 

Type: String
 Description: The LCID to be used for determining the language in which the day name should be returned. Defaults to the system LCID.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GetEnvironmentVariable 

Description 

Retrieves the value of a Windows environment variable.

Returns 

Type: STRING
 

Parameters 

Param 1: 

Type: string
 Description:
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 20 and later

Function: GetInputLanguage 

Description 

Returns the name of the active intput language. One can add multiple input languages through Control Panel's Regional and Language Options.

Returns 

Type: String
 Description: The name of the active input language.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetLanguageCodeAtCursor 

Description 

Returns the language abbreviation of the text at the active cursor or the active JAWS language if the language at the cursor cant be determined.

Returns 

Type: string
 Description: the language code
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: GetPowerACLineStatus 

Description 

Returns the Offline or Online status of AC power. The returned value is 0 for Offline, 1 for Online, or 255 if status is unknown.

Returns 

Type: int
 Description: Returns the Offline or Online status of AC power.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetRegistryEntryDWORD 

Description 

Use to get DWORD entries in registry.

Returns 

Type: int
 Description: registry entry, no error checking.
 

Parameters 

Param 1: 

Type: int
 Description: 0=HKEY_CLASSES_ROOT, 1=HKEY_CURRENT_USER, 2=HKEY_LOCAL_MACHINE, 3=HKEY_USERS.
 Include: Required
 

Param 2: 

Type: String
 Description: of SubKey
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: of Variable
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetRegistryEntryString 

Description 

Use to get string entries in registry.

Returns 

Type: string
 Description: The string of entry, otherwise an empty string.
 

Parameters 

Param 1: 

Type: int
 Description: 0=HKEY_CLASSES_ROOT, 1=HKEY_CURRENT_USER, 2=HKEY_LOCAL_MACHINE, 3=HKEY_USERS.
 Include: Required
 

Param 2: 

Type: String
 Description: of SubKey
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: of Variable.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetSystemDefaultLang 

Description 

Gets the three letter abbreviation of the System Default language of the Windows User Interface.

Returns 

Type: String
 Description: Returns a string containing the three letter abbreviation of the System Default language of the Windows User Interface.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetSystemLocaleInfo 

Description 

this function returns Default System specific Locale information. You determine what information to return by providing an identifier defined in locale.jsh as a parameter to this function.

Returns 

Type: String
 Description: the Locale specific information
 

Parameters 

Param 1: 

Type: Int
 Description: see constants defined in locale.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetSystemPowerStatus 

Description 

Returns the percentage of full battery charge remaining. The returned value is in the range 0 to 100, or 255 if status is unknown.

Returns 

Type: int
 Description: Returns the percentage of full battery charge remaining.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetSystemVolume 

Description 

Gets the current system volume setting.

Returns 

Type: Int
 Description: The current system volume setting. Volume of 0 percent to 100 percent ranges in value from 0 to 0xffff (65535).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: GetSystemVolumeRange 

Description 

Assigns the minimum and maximum possible volume settings to the parameters taken by reference.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type the variable to receive the minimum system volume.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: Type the variable to receive the maximum system volume.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: GetSystemYear 

Description 

Gets the current year. Useful where the short date does not return a year, such as the Outlook Calendar when the regional format is set to English (Canada).

Returns 

Type: string
 Description: the year
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: GetTickCount 

Description 

Retrieves the amount of time that has passed since Windows was started.

Returns 

Type: Int
 Description: Number of milliseconds that have passed since Windows was started.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetUserDefaultLang 

Description 

Gets the three letter abbreviation of the Default language of the Windows User Interface for the user that is currently logged into the system.

Returns 

Type: String
 Description: Returns a string containing the three letter abbreviation of the Default language of the Windows User Interface for the user that is currently logged into the system.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetUserLocaleInfo 

Description 

this function returns User specific Locale information. You determine what information to return by providing an identifier defined in locale.jsh as a parameter to this function.

Returns 

Type: String
 Description: the Locale specific information..
 

Parameters 

Param 1: 

Type: Int
 Description: see constants defined in locale.jsh.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowsOS 

Description 

Provides information about which operating system is being used.

Returns 

Type: Int
 Description: One of the constants OS_WIN95 or OS_WIN_NT. These constants are defined in HJCONST.jsh.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowsSystemDirectory 

Description 

Returns the path to the Windows System directory as a string.

Returns 

Type: String
 Description: the path to the current Windows System Directory.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GrantAppContainerAccess 

Description 

In Windows 8 and higher, with Enhance Protected Mode enabled, IE always runs so that it can't access files for which access hasn't explicitly been granted to the AppContainer user. This function allows applications running in App Container mode to read from JSI or other files.

Returns 

Type: int
 Description: TRUE if the access was granted, FALSE otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The fully qualified name of the file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: IsMetroApp 

Description 

Determines if the current application is a Universal, Modern or Metro app. (They're all different names for the same thing.)

Returns 

Type: int
 Description: True if it's a Universal app, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 14.0 and later

Function: IsRemoteAccessClientEnabled 

Description 

Determines whether the Freedom Scientific Remote Access Client component is installed. The Remote Access Client component is typically enabled during product installation. When the component is enabled, JAWS is able to recieve speech and Braille through a Citrix or Remote Desktop client session.

Returns 

Type: Int
 Description: TRUE if the component is installed, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: IsRemoteAccessServerEnabled 

Description 

Determines whether the Freedom Scientific Remote Access Server component is installed. The Remote Access Server component is typically enabled during product installation. When the component is enabled, JAWS is able to run in a Remote Desktop or Citrix session.

Returns 

Type: Int
 Description: TRUE if the component is installed, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 16.0 and later

Function: IsSecureDesktop 

Description 

Secure desktops encompass UAC, Lock Screen, and Login Screen desktops. This function determines whether any of these desktops are active.

Returns 

Type: int
 Description: True if the current desktop is a secure desktop, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Function: IsWindows10 

Description 

This function returns true if the OS in use is Windows 10 or above.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: IsWindows7 

Description 

This function returns true if the OS in use is Windows 7 or above.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: IsWindows8 

Description 

This function returns true if the OS in use is Windows 8 or above.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: IsWinNtOr95 

Description 

This function returns true if the OS in use is either Windows 95 or Windows NT 4.0.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsWinVista 

Description 

This function returns true if the OS in use is Windows Vista.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: KeyboardHelp_LaunchWindowsShortcut 

Description 

keyboard help for Windows Shortcut.

Returns 

Type: string
 Description: the shortcut text
 

Parameters 

Param 1: 

Type: string
 Description: The fully qualified path of a windows shortcut.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: KeyboardHelp_WindowsCmd 

Description 

keyboard help for Windows Shortcut.

Returns 

Type: string
 Description: the command text
 

Parameters 

Param 1: 

Type: string
 Description: The windows command number.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: LaunchShortcut 

Description 

Invokes an Windows Shortcut.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The fully qualified path of a windows shortcut.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Script: ListTaskTrayIcons 

Description 

Opens a list box containing the names of all the System tray icons. The user can then select the icon from the list box and then choose to perform either a left mouse button click, a right mouse button click, or a left double mouse button click on the icon, depending on which is appropriate for that icon.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ParseDateString 

Description 

Convert a date string into month, day, year as integers in out parameters.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The date string formatted for the current locale. Must be formatted as Month, Day and year in the local system format as GetUserLocaleInfo (LOCALE_ILANGUAGE)
 Include: Required
 

Param 2: 

Type: int
 Description: Receives the month as number.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: int
 Description: Receives the day as number.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: int
 Description: Receives the year as number.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: ParseLongDate 

Description 

Formats a locale-specific date string in a long date format into a string in the standard form YYYY/MM/DD.

Returns 

Type: String
 Description: The formatted date.
 

Parameters 

Param 1: 

Type: String
 Description: a date string in a Locale specific format
 Include: Required
 

Param 2: 

Type: String
 Description: The LCID representing the format of strDate. Defaults to the system LCID.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: ParseLongDateToShortDate 

Description 

Formats a locale-specific date string in a long date format into the corresponding short date format.

Returns 

Type: String
 Description: The formatted date in short date format.
 

Parameters 

Param 1: 

Type: String
 Description: a date string in a Locale specific long date format
 Include: Required
 

Param 2: 

Type: String
 Description: The LCID representing the format of strDate. Defaults to the system LCID.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: ParseShortDate 

Description 

Formats a locale-specific date string in a short date format into a string in the standard form YYYY/MM/DD.

Returns 

Type: String
 Description: The formatted date.
 

Parameters 

Param 1: 

Type: String
 Description: a short date string in a Locale specific format
 Include: Required
 

Param 2: 

Type: String
 Description: A year to be added to the shortDateString. If not provided then the shortDateString is assumed to be fully qualified
 Include: Optional
 

Param 3: 

Type: String
 Description: The LCID representing the format of strDate. Defaults to the system LCID.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: Run 

Description 

The Run function is used as if you had entered its name and parameters in the Windows Run dialog. If the file name passed as an argument is the name of a program, then that program is run. If it is the name of a directory, then Windows Explorer is run to explore that directory. If the file is not a program but has an extension associated with a particular application, then that application is run to display the file. For example, passing changes.txt as the parameter to the Run function will open Notepad to edit the file changes.txt.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: This parameter must be either a text string enclosed in quotes, a variable name that contains a string value, or a script function that returns a string value. In any case, the string needs to be the name of the program you wish to run. It may be necessary to include a path and filename extension. To get the \ into the path name, you must actually use two \ characters. For example, write c:\\jfw32\\jframe.exe. This is very important. Failure to include two \ characters will cause the compiler to fail and jscript.exe to perform an illegal operation.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayBatteryLevel 

Description 

This feature reports in speech and Braille if you are currently connected to a power source and informs you of the current charge level on your battery. In addition, it will also tell you if you have an internet connection. This information, and all the items from your system tray, can also be reviewed using the Virtual Viewer by pressing the command for View System Tray ToolTips, CTRL + SHIFT + F11.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayConnectionStatus 

Description 

When pressed once, reads battery status information on laptops. When pressed twice quickly, speaks the network and internet connection status displayed in the system tray.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Script: SayDriveLetter 

Description 

Says the name of the disk drive or network drive that has the focus in Windows Explorer in order to provide the correct drive letter.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SaySystemTime 

Description 

Says the time. If pressed twice quickly, this keystroke will say the date.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SaySystemTray 

Description 

Helpful for closing applications on the System tray.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayTaskBar 

Description 

Uses FindTopLevelWindow to find the Grand Parent of the TaskBar. While statements are then used to find the parent and eventually the TaskBar itself. Once found, the TaskBar is spoken. It is not spoken if it cannot be found or if it is obscured by another window or if it is hidden.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenGetHeight 

Description 

Gets the height of the screen in pixels.

Returns 

Type: Int
 Description: The height of the screen in pixels.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ScreenGetWidth 

Description 

Gets the width of the screen in pixels.

Returns 

Type: Int
 Description: The width of the screen in pixels.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetRegistryEntryDWORD 

Description 

Use to set DWORD entries in registry.

Returns 

Type: int
 Description: 1 if successful, otherwise 0.
 

Parameters 

Param 1: 

Type: int
 Description: 0=HKEY_CLASSES_ROOT, 1=HKEY_CURRENT_USER, 2=HKEY_LOCAL_MACHINE, 3=HKEY_USERS.
 Include: Required
 

Param 2: 

Type: String
 Description: of SubKey.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: of Variable
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: int
 Description: to be Assigned variable.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: SetRegistryEntryString 

Description 

Use to set string entries in registry.

Returns 

Type: int
 Description: 1 if successful, otherwise 0.
 

Parameters 

Param 1: 

Type: int
 Description: 0=HKEY_CLASSES_ROOT, 1=HKEY_CURRENT_USER, 2=HKEY_LOCAL_MACHINE, 3=HKEY_USERS.
 Include: Required
 

Param 2: 

Type: String
 Description: of SubKey.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: of Variable.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: String
 Description: to be Assigned variable.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: SetSystemVolume 

Description 

Sets the system volume.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The new value to which you wish to set the volume. Volume of 0 percent to 100 percent ranges in value from 0 to 0xffff (65535).
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Script: StartJAWSTaskList 

Description 

Opens the Window List dialog where you can view and switch between running applications.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SwitchToPreviousApp 

Description 

This simulates holding down the ALT key and pressing TAB a specified number of times.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The number of times the Tab key should be simulated. This defaults to 1, which which is the equivalent of pressing ALT+TAB.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: SysGetDate 

Description 

Obtains a string representing the given date in the specified format.

Returns 

Type: String
 Description: A string representing the given date, or the current system date if no month, day and year are provided.
 

Parameters 

Param 1: 

Type: String
 Description: The desired date format. For example "dd/MM/yyyy."
 Include: Optional
 

Param 2: 

Type: Int
 Description: A value between 1 and 12.
 Include: Optional
 

Param 3: 

Type: Int
 Description: A value between 1 and the number of days in the month of interest.
 Include: Optional
 

Param 4: 

Type: Int
 Description: Four digits year number.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SysGetTime 

Description 

Obtains a string representing the given time in the specified format.

Returns 

Type: String
 Description: A string representing the given time, or the current system time if no hour, minute and second are provided.
 

Parameters 

Param 1: 

Type: String
 Description: The desired time format. For example "hh:mm tt."
 Include: Optional
 

Param 2: 

Type: Int
 Description: A value between 0 and 23.
 Include: Optional
 

Param 3: 

Type: Int
 Description: A value between 0 and 59.
 Include: Optional
 

Param 4: 

Type: Int
 Description: A value between 0 and 59.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SysTrayGetItemCount 

Description 

Obtains the number of items in the System Tray.

Returns 

Type: Int
 Description: iIem count.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SysTrayGetItemToolTip 

Description 

This function is used in ListTaskTrayIcons to obtain the ToolTip that corresponds to a specific Task tray icon. This function takes a single parameter, the index of the Task tray icon for which the ToolTip is desired. It returns a string value that is the text of the ToolTip in question.

Returns 

Type: String
 Description: The text of the tool tip of the specified Task tray icon.
 

Parameters 

Param 1: 

Type: Int
 Description: The index of the Task tray icon in question.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SysTrayMoveToItem 

Description 

Moves the JAWS cursor to the location of an item in the System Tray.

Returns 

Type: Int
 Description: TRUE if Successful.
 

Parameters 

Param 1: 

Type: Int
 Description: the index number of the item.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityDumpScreenOSM 

Description 

Empties the database related to the screen area. This is not a refresh and is used by developers.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.0-9.00

Script: ViewSysTrayItems 

Description 

Opens the Virtual Viewer window and displays all the items currently in the System Tray and whatever information is provided from their tool tips. This includes things like Battery Level, Volume Level, Internet Connection status. And all the apps that are exposed there.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: VKSelect 

Description 

Select any of the items from the list such as Euro, Yen, Pounds, Trademark, Copyright, bullet, plus or minus, etc. and the symbol for that item will be inserted at the cursor position

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Tables Functions

A Tables function provides or returns information about activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Tables, such as any of the scripts for moving from one table cell to another, for example. However, the focus of the present discussion is on functions related to Tables that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Tables functions include:

·         InTable

·         GetCell

·         GetCellCoordinates

·         GetColumnText

·         GetRowText

For a complete listing of Tables functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script checks to see whether the virtual cursor is within a table. If it is, JAWS speaks and flashes in Braille on demand the number of columns and rows contained in the current table from anywhere inside the table.

Take care when working with the Chrome.jss script source file because it already contains scripts and functions by default that ship with JAWS. Place your sample code at the very bottom of the file. And make sure to remove this overwritten Chrome.jss and its associated overwritten Chrome.jsb and Chrome.jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the Chrome.jss script source file and compiled in the Chrome.jsb script binary file.

To set up the example, from Google Chrome, open a Web page known to contain tables. Run the script from within a table and from outside a table. If the script is run outside a table, JAWS gives you an error message. Otherwise, JAWS provides you with the information about how many rows and columns the current table has.

Script MyTableTest ()
Var
            String sTableInfo,
            String sTableNum,
            String sCols,
            String sRows
If !InTable ()
            SayMessage (ot_error,cmsgNotInTable_l, cmsgNotInTable_s)
            Return
EndIf
; For sTableInfo, %1 is the table number, %2 the number of columns, and %3 the number of rows.
sTableInfo = "Table %1 has %2 columns and %3 rows."
sTableNum = IntToString (GetTableIndex ())
sCols = IntToString (GetCurrentRowColumnCount ())
sRows = IntToString (GetTableRowCount ())
SayFormattedMessage (ot_user_requested_information,
            FormatString (sTableInfo, sTableNum, sCols, sRows))
EndScript

Function: BottomOfColumn 

Description 

When inside a table or spreadsheet, moves the active cursor to the bottom of the current column.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DownCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the next row.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DownCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the next row. JAWS will speak the row header followed by the content of the current cell.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: EndOfRow 

Description 

When inside a table or spreadsheet, moves the active cursor to the end of the current row.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: ExitTableLayer 

Description 

Provides a means for exiting the table layer without passing the key through to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.00 and later

Function: FirstCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the first cell.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: FirstCellInTable 

Description 

Moves to the first cell in a table and reads all relevant row and column information.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCell 

Description 

When in a table or spreadsheet, gets the contents of the current cell.

Returns 

Type: String
 Description: Provides the Cell of information.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCellCoordinates 

Description 

Gets the coordinates of the current cell in a table and passes them by reference to the variables specified in the parameter list.

Returns 

Type: Int
 Description: TRUE if the current cursor is positioned inside of a table. In this case, the Row and Column parameters will have meaningful information placed in them.
 

Parameters 

Param 1: 

Type: Int
 Description: References the current cell column on return.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: References the current cell row on return.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCellFormula 

Description 

When in a spreadsheet, gets the formula for the cell.

Returns 

Type: string
 Description: The formula for the cell, or an empty string if there is no formula.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.0 and later

Function: GetCellNote 

Description 

When in a spreadsheet, gets the note for the cell.

Returns 

Type: string
 Description: The note for the cell, or an empty string if there is no note.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.1 and later

Function: GetCellSpan 

Description 

When in a table or spreadsheet, gets the number of rows and columns spanned by the current cell.

Returns 

Type: int
 Description: True if the function succeeded, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: When the function returns, contains the number of rows spanned by the current table cell.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: int
 Description: When the function returns, contains the number of columns spanned by the current table cell.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: GetColumnHeader 

Description 

When in a table or spreadsheet, gets the contents of the column header.

Returns 

Type: String
 Description: Provides the header of information.
 

Parameters 

Param 1: 

Type: Int
 Description: Include only headers that are marked in the table
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetColumnText 

Description 

This function gets the text of a range of cells in the current column of a table. You can specify the separator string to use between data elements, whether or not to include the coordinates of the active cell immediately before that cell's data and the start and end rows to include.

Returns 

Type: String
 Description: The text of the included cells.
 

Parameters 

Param 1: 

Type: String
 Description: string to insert between cell data, defaults to a single space.
 Include: Optional
 

Param 2: 

Type: String
 Description: a string defining how the coordinates of the current cell will be rendered. This string must contain two % style parameters (eg c%1r%2) which will be filled with the numeric value of the current column and row respectively. If this parameter is 0 then no coordinates will be included before the current cell.
 Include: Optional
 

Param 3: 

Type: String
 Description: the text to be displayed if the cell is blank.
 Include: Optional
 

Param 4: 

Type: Int
 Description: the starting row, defaults to the first row (1) of the table.
 Include: Optional
 

Param 5: 

Type: Int
 Description: the ending row, defaults to the last row of the table.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetColumnTextAsArray 

Description 

Returns an array where each element is the text of a cell in the specified range. For example, if you request the entire column, there will be an element for each cell in the column. If you only request rows 3 to 5, there will be three elements, the first for row 3, the 2nd for 4 and the third for 5. In this case you will need to take note of the starting row requested if you wish to map this back to the entire column.

Returns 

Type: stringArray
 Description: the array of cells.
 

Parameters 

Param 1: 

Type: int
 Description: Defaults to the first row.
 Include: Optional
 

Param 2: 

Type: int
 Description: Defaults to the last row.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetCurrentRowColumnCount 

Description 

Returns the physical number of columns in the current table row.

Returns 

Type: Int
 Description: 0 if not in a table row or the number of columns in the current row.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetRowAndColumnHeadersForSpeakTableCells 

Description 

Called by function SpeakTableCells to retrieve row and column header strings.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The current column number.
 Include: Required
 

Param 2: 

Type: int
 Description: The current row number.
 Include: Required
 

Param 3: 

Type: int
 Description: bMarkedHeader True if marked headers are wanted, false otherwise.
 Include: Required
 

Param 4: 

Type: string
 Description: ColHeader The column header, if any.
 Include: Required
 

Param 5: 

Type: string
 Description: RowHeader The row header, if any.
 Include: Required
 

Param 6: 

Type: string
 Description: ColHeaderWithMarkup The column header with language markup, if any.
 Include: Required
 

Param 7: 

Type: string
 Description: RowHeaderWithMarkup The row header with language markup, if any.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 18.0 and later

Function: GetRowHeader 

Description 

When in a table or spreadsheet, gets the contents of the row header.

Returns 

Type: String
 Description: Provides the header of information.
 

Parameters 

Param 1: 

Type: Int
 Description: Include only headers that are marked in the table
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetRowSpanInfo 

Description 

When in a table on the web, gets position of the current cell in a rowspan and the total number of cells in the span.

Returns 

Type: int
 Description: True if the function succeeded, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: When the function returns, contains the position in the span of the current cell.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: int
 Description: When the function returns, contains the total number of rows spanned by the rowspan cell.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 21 and later

Function: GetRowText 

Description 

This function gets the text of a range of cells on the current row of a table. You can specify the separator string to use between data elements, whether or not to include the coordinates of the active cell immediately before that cell's data and the start and end columns to include.

Returns 

Type: String
 Description: The text of the included cells.
 

Parameters 

Param 1: 

Type: String
 Description: string to insert between cell data, defaults to a single space.
 Include: Optional
 

Param 2: 

Type: String
 Description: a string defining how the coordinates of the current cell will be rendered. This string must contain two % style parameters (eg c%1r%2) which will be filled with the numeric value of the current column and row respectively. If this parameter is 0 then no coordinates will be included before the current cell.
 Include: Optional
 

Param 3: 

Type: String
 Description: the text to be displayed if the cell is blank.
 Include: Optional
 

Param 4: 

Type: Int
 Description: the starting column, defaults to the first column (1) of the row.
 Include: Optional
 

Param 5: 

Type: Int
 Description: the ending column, defaults to the last column of the row.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetRowTextAsArray 

Description 

Returns an array where each element is the text of a cell in the specified range. For example, if you request the entire row, there will be an element for each cell in the row. If you only request cells 3 to 5, there will be three elements, the first for column 3, the 2nd for 4 and the third for 5. In this case you will need to take note of the starting column requested if you wish to map this back to the entire row.

Returns 

Type: stringArray
 Description: the array of cells.
 

Parameters 

Param 1: 

Type: int
 Description: Defaults to the first column.
 Include: Optional
 

Param 2: 

Type: int
 Description: Defaults to the last column.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 19.0 and later

Function: GetTableCaption 

Description 

If a table has a caption then this function returns it.

Returns 

Type: String
 Description: The Table Caption
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTableCoordinatesForSpeakTableCells 

Description 

Obtains the row and column number to be spoken by function SpeakTableCells. Row and Column number will be 0 if the function returns false.

Returns 

Type: int
 Description: True if the retrieved row and column coordinates are valid, false otherwise. Coordinates may be valid if a script call results in table navigation but the navigation event has not yet occurred.
 

Parameters 

Param 1: 

Type: int
 Description: nCol The column number.
 Include: Required
 

Param 2: 

Type: int
 Description: nRow The row number.
 Include: Required
 

Param 3: 

Type: int
 Description: The table navigation direction which resulted in the call to this function.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: GetTableName 

Description 

If a table has a name then this function returns it.

Returns 

Type: String
 Description: The Table name
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: GetTableNestingLevel 

Description 

This function returns the nesting level of the current table. If the table is not nested then the value will be 0.

Returns 

Type: Int
 Description: The nesting level (top level table has nesting level 0).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTableRowCount 

Description 

Returns the physical number of rows in the current table column.

Returns 

Type: Int
 Description: 0 if not in a table column or the number of rows in the current column.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTableSelectionRange 

Description 

Returns by reference the coordinates and names of the first and last cells in a selection.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description:
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: int
 Description:
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: string
 Description:
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: int
 Description:
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: int
 Description:
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: string
 Description:
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: GetTableSummary 

Description 

If a table has a summary then this function returns it.

Returns 

Type: String
 Description: The Table Summary.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: InTable 

Description 

Determines whether or not the active cursor is inside of a table.

Returns 

Type: Int
 Description: TRUE if in a table, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: inTableCell 

Description 

Returns TRUE if the cursor is in a table cel (as opposed to being anywhere in a table, e.g. the start or end string).

Returns 

Type: int
 Description: TRUE or FALSE.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 17.0 and later

Function: IsTableNavSupported 

Description 

Return false in this function if table navigation is not supported in the current application. The default is to assume that table navigation is supported and return true.

Returns 

Type: int
 Description: True if table navigation is supported in the application, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: JumpReturnFromTableCell 

Description 

This keystroke returns the cursor to the table cell with focus when the JumpToTableCell command was used.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.0 and later

Script: JumpToTableCell 

Description 

This keystroke moves the cursor to the specified table cell. After using this keystroke, use the JumpReturnFromTableCell command to return to your last location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: LastCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the last cell.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: LastCellInTable 

Description 

Moves to the last cell in a table and reads all relevant row and column information.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MoveToBottomOfColumn 

Description 

When inside a table or spreadsheet, moves the active cursor to the bottom of the current column.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToEndOfRow 

Description 

When inside a table or spreadsheet, moves the active cursor to the end of the current row.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: MoveToStartOfRow 

Description 

When inside a table or spreadsheet, moves the active cursor to the start of the current row.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MoveToTableCell 

Description 

This function moves the cursor to the specified table cell. The parameters specify the column and row to move to (in 1-based coordinates).

Returns 

Type: Int
 Description: true if successful, false otherwise.
 

Parameters 

Param 1: 

Type: Int
 Description: the column number
 Include: Required
 

Param 2: 

Type: Int
 Description: the row number
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Script: MoveToTopOfColumn 

Description 

When inside a table or spreadsheet, moves the active cursor to the top of the current column.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 4.51-16.0  

2.    JAWS 17.0 and later  

 Function: NextCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the next column.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-16.0

 Function: NextCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the next column.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: Set to true to wrap to the next row at the end of the current row. Default is not to wrap.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: NextCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the next column. JAWS will speak the column header, followed by the current cell

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 4.51-16.0  

2.    JAWS 17.0 and later  

 Function: PriorCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the prior column.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-16.0

 Function: PriorCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the prior column.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: Set to true to wrap to the prior row at the start of the current row. Default is not to wrap.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 17.0 and later

Script: PriorCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the prior column. JAWS will speak the column header, followed by the contents of the current cell.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ReadCurrentColumn 

Description 

This keystroke reads the current table column.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ReadCurrentRow 

Description 

This keystroke reads the current table row.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ReadFromCurrentCell 

Description 

This keystroke reads from the current cell to the end of the table row.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: ReadFromTopOfColumn 

Description 

This keystroke reads from the top of the current table column to the current cell.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ReadToBottomOfColumn 

Description 

This keystroke reads from the current cell to the bottom of the current table column.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: ReadToCurrentCell 

Description 

This keystroke reads from the start of the current table row to the current cell.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayCell 

Description 

When in a table or spreadsheet, speaks the contents of the current cell.

Returns 

Type: Int
 Description: TRUE if in a table, FALSE otherwise
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayCell 

Description 

When the cursor is in a table or spreadsheet, JAWS speaks the row and column headers followed by the contents of the current cell

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayColumnHeader 

Description 

When in a table or spreadsheet, speaks the contents of the column header.

Returns 

Type: Int
 Description: TRUE if in a table, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayNextColumn 

Description 

Moves the Cursor to the next column in the current table and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Script: SayPriorColumn 

Description 

Moves the Cursor to the prior column in the current table and reads it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: SayRowHeader 

Description 

When in a table or spreadsheet, speaks the contents of the row header.

Returns 

Type: Int
 Description: TRUE if in a table, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayTableCellCoordinates 

Description 

This function speaks the coordinates of a table cell.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: SetColumnHeader 

Description 

Sets the row to be used when announcing column headers.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Specifies the row containing column headers.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: SetRowHeader 

Description 

Sets the column to be used when announcing row headers.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: Specifies the column containing row headers.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.0 and later

Function: SetTableTitleReading 

Description 

The Table Title Reading option allows either column titles, row titles, both or none to be spoken.

Returns 

Type: String
 Description: the new value for the element in the list.
 

Parameters 

Param 1: 

Type: Int
 Description: Passed by JAWS to instruct the function whether or not to update.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShouldSpeakTableCellsOnScriptCall 

Description 

Used by function SpeakTableCells to determine if the function should proceed or exit. If an event will speak the table cells, this function should return false to prevent double speaking when the scripts call the function.

Returns 

Type: int
 Description: True if SpeakTableCells should proceed in the event of a script call, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The table navigation direction which resulted in the call to function SpeakTableCells. Because no event fire for a SayCell, this function should return true if the table nav direction was TABLE_NAV_NONE.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Function: SpeakTableCells 

Description 

Honors the verbosity settings used in INSERT+V to support table speaking. Make sure to enter the correct value for the first parameter to support the correct reading method for the direction you are moving.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the direction you are moving. Use TABLE_NAV_NONE to speak the current cell, TABLE_NAV_VERTICAL when moving by row and TABLE_NAV_HORIZONTAL when moving by column.
 Include: Required
 

Param 2: 

Type: Int
 Description: Enter the previous number of columns in the table row. This is used when navigating by row, but always enter it to update. This way, on tables on the internet, you will hear column changes take effect when a table has a variable number of columns.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.00 and later

Function: StartOfRow 

Description 

When inside a table or spreadsheet, moves the active cursor to the start of the current row.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: TableErrorEncountered 

Description 

Tests to determine if there are any error conditions that should prevent table navigation and other table-related scripts from proceeding, such as table navigation not supported or not in a table. If an error condition is encountered, and error message is spoken and the function returns true.

Returns 

Type: int
 Description: True if an error was encountered that would prevent table navigation and other table scripts from proceeding, false otherwise.
 

Parameters 

Param 1: 

Type: int
 Description: The table navigation direction. If table navigation is supported for some types of navigation but not others, use this parameter to check the type of table navigation that is requested. Use the Table_Nav constants in HJConst.jsh to test the requested type of navigation.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: TopOfColumn 

Description 

When inside a table or spreadsheet, moves the active cursor to the top of the current column.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: UpCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the prior row.

Returns 

Type: Int
 Description: TRUE if the cursor moved, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UpCell 

Description 

When inside a table or spreadsheet, moves the active cursor to the same cell in the prior row. JAWS will speak the row header followed by the content of the current cell.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Text Format Functions

A Text Format script or function provides or returns information about Text Format activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display Text Format information in Braille, for comparison purposes, and so on.

Text Format information may be about the font name, point size, or attributes of a character, about the attributes of a control, whether the text is intended to be read right to left instead of left to right, etc.

Some scripts that ship with JAWS fall into the category of Text Format, such as the script for SayFont, for example. However, the focus of the present discussion is on functions related to Text Format that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Text Format functions include:

·         AttributesChanged

·         IntToAttribName

·         AttributeEnumerate

·         GetCharacterAttributes

·         IsRtlChar

For a complete listing of Text Format functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script finds the first character in the text that is bolded.

To set up the example, simply type some text into the Wordpad document window. Using the Font options in the Home ribbon, change some text, not at the very top of the file, to be in bold. Then move to the top of the file and run the script. If bold text is found, the JAWS cursor moves to it, and the PC cursor is routed to the position and reactivated. Then the script confirms the font and speaks the current line where the bold text begins.

Take care when working with the Wordpad.jss script source file because it already contains scripts and functions by default that ship with JAWS. Place your sample code at the very bottom of the file. And make sure to remove this overwritten Wordpad.jss and its associated overwritten Wordpad.jsb and Wordpad.jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the Wordpad.jss script source file and compiled in the Wordpad.jsb script binary file.

Script MyAttributesTest ()
Var
            Int attributes
If GetWindowClass (GetFocus ()) == cwc_RichEdit50W
&& ! DialogActive () ; This is the Wordpad document window.
            If FindFirstAttribute (attrib_bold,TRUE) ; Restrict the search to the document window.
                        RoutePCToJAWS ()
                        PCCursor ()
                        SayFont ()
                        SayLine()
            EndIf
EndIf
EndScript

Function: AttributeEnumerate 

Description 

This function provides a quick method of enumerating all fields in a window with a specified attribute. For each field found, the coordinates of the bounding rectangle are passed to the callback function. If the callback function returns false then the enumeration stops. the callback function must take the following parameters: int topLeftX, int topLeftY, int bottomRightX, int bottomRightY. It must return true to continue the enumeration or false to abort the enumeration.

Returns 

Type: Int
 Description: the number of fields found in the window.
 

Parameters 

Param 1: 

Type: Handle
 Description: the window to enumerate.
 Include: Required
 

Param 2: 

Type: Int
 Description: the attributes of the text to find.
 Include: Required
 

Param 3: 

Type: String
 Description: the callback function name.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: AttributesChanged 

Description 

Announces the change of attribute to Bold, Highlight, Italic etc.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the value of the attributes to be searched for.
 Include: Required
 

Param 2: 

Type: Int
 Description: The value of the attributes found during the search.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindFirstAttribute 

Description 

Searches for the first occurrence of text with certain attributes. It begins the search at the upper left corner of the specified window and moves downward. If the search is successful, then the active cursor is placed on the first character that has the desired attributes. Generally, the PC cursor can be successfully moved to attributes within a text window.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the name of the constant value for the attribute that is to be located: ATTRIB_BOLD, ATTRIB_UNDERLINE, ATTRIB_ITALIC, ATTRIB_HIGHLIGHT, and ATTRIB_STRIKEOUT. You can search for a combination of attributes by placing a PLUS SIGN (+) between constants. For example, ATTRIB_BOLD+ATTRIB_UNDERLINE.
 Include: Required
 

Param 2: 

Type: int
 Description: set this to TRUE to restrict the search to the window containing the active cursor, FALSE for an unrestricted search, if not supplied, defaults to FALSE, ie unrestricted. this optional parameter is only available in JAWS 6.0
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindLastAttribute 

Description 

Searches for the last occurrence of text with certain attributes. It begins the search at the lower right corner of the active window and moves up to the upper left corner of the window. If the search is successful, then the active cursor is placed on the first character that has the desired attributes. Generally, the PC cursor can be successfully moved to attributes within a text window.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0. "FALSE" = search failure.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the name of the constant value for the attribute that is to be included in the search: ATTRIB_BOLD, ATTRIB_UNDERLINE, ATTRIB_ITALIC, ATTRIB_HIGHLIGHT, and ATTRIB_STRIKEOUT. You can search for a combination of attributes by placing a PLUS SIGN (+) between constants. For example, ATTRIB_BOLD+ATTRIB_UNDERLINE.
 Include: Required
 

Param 2: 

Type: int
 Description: set this to TRUE to restrict the search to the window containing the active cursor, FALSE for an unrestricted search, if not supplied, defaults to FALSE, ie unrestricted. this optional parameter is only available in JAWS 6.0
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindNextAttribute 

Description 

Searches for the next occurrence of text with certain attributes. The search begins at the location of the active cursor and moves down through the remainder of the active window. If the search is successful, then the active cursor is placed on the first character that has the desired attributes. Generally, the PC cursor can be successfully moved to attributes within a text window.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the name of the constant value for the attribute that is to be located: ATTRIB_BOLD, ATTRIB_UNDERLINE, ATTRIB_ITALIC, ATTRIB_HIGHLIGHT, and ATTRIB_STRIKEOUT. You can search for a combination of attributes by placing a PLUS SIGN (+) between constants. For example, ATTRIB_BOLD+ATTRIB_UNDERLINE.
 Include: Required
 

Param 2: 

Type: int
 Description: set this to TRUE to restrict the search to the window containing the active cursor, FALSE for an unrestricted search, if not supplied, defaults to FALSE, ie unrestricted. this optional parameter is only available in JAWS 6.0
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FindPriorAttribute 

Description 

Searches for the prior occurrence of text with certain attributes. It begins the search at the location of the active cursor and moves up through the remainder of the active window. If the search is successful, then the active cursor is placed on the first character that has the desired attributes. Generally, the PC cursor can be successfully moved to attributes within a text window.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1, "WAS_NOT_SUCCESSFUL" = 0.
 

Parameters 

Param 1: 

Type: Int
 Description: Type the name of the constant value for the attribute that is to be included in the search: ATTRIB_BOLD, ATTRIB_UNDERLINE, ATTRIB_ITALIC, ATTRIB_HIGHLIGHT, and ATTRIB_STRIKEOUT. You can search for a combination of attributes by placing a PLUS SIGN (+) between constants. For example, ATTRIB_BOLD+ATTRIB_UNDERLINE.
 Include: Required
 

Param 2: 

Type: int
 Description: set this to TRUE to restrict the search to the window containing the active cursor, FALSE for an unrestricted search, if not supplied, defaults to FALSE, ie unrestricted. this optional parameter is only available in JAWS 6.0
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FormatOneTwoAndThree 

Description 

Formats a group of strings into the common format of %1, %2 and %3. There are 8 possible string parameters, any of which may be valid. Empty or null strings are ignored. This enables scripts to easily format several strings into one "list" for speaking. See the function AnnounceDocumentElements in default.jss for an example of how this function may be used.

Returns 

Type: String
 Description: The formatted, speech-ready, string.
 

Parameters 

Param 1: 

Type: string
 Description: First possible string in the list.
 Include: Required
 

Param 2: 

Type: string
 Description: additional string.
 Include: Optional
 

Param 3: 

Type: string
 Description: additional string.
 Include: Optional
 

Param 4: 

Type: string
 Description: additional string.
 Include: Optional
 

Param 5: 

Type: string
 Description: additional string.
 Include: Optional
 

Param 6: 

Type: string
 Description: additional string.
 Include: Optional
 

Param 7: 

Type: string
 Description: additional string.
 Include: Optional
 

Param 8: 

Type: string
 Description: Last possible string in the list.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetCharacterAttributes 

Description 

Retrieves the text attributes of the character at the current cursor location. The returned value is a combination of the same bit fields used in FindFirstAttribute, FindNextAttribute, etc. To test for the presence of a particular attribute, use code of the form: if (GetAttributes) & ATTRIB_UNDERLINE) then....

Returns 

Type: Int
 Description: The attributes of the current character.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCharacterFont 

Description 

Retrieves the name of the font used for the character at the current cursor location.

Returns 

Type: String
 Description: The name of the font.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetCharacterPoints 

Description 

Retrieves the point size of the character at the current cursor location.

Returns 

Type: Int
 Description: The point size of the character, or 0 if the cursor is either not positioned on anything or is positioned on a graphic.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetCharacterWidth 

Description 

Retrieves the width of the character or graphic at the current cursor location.

Returns 

Type: Int
 Description: The width of the character or graphic, or 0 if the cursor is not positioned on anything.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetFont 

Description 

Gets font information about the character under the active cursor.

Returns 

Type: String
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLineBottom 

Description 

Determines the vertical pixel location of the bottom of the line containing the current cursor.

Returns 

Type: Int
 Description: The pixel location of the bottom of the current line of text, or 0 if no text is found in this location.
 

Parameters 

Param 1: 

Type: Int
 Description: Optional parameter that designates whose cursor position is to be retrieved. If this parameter is not specified, then the active cursor is used.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLineTop 

Description 

Determines the vertical pixel location of the top of the tallest character of the line on which the current cursor is positioned. Since the cursor position reported by JAWS is based on the base line of characters, this function is the only way of determining how high up a line of text extends.

Returns 

Type: Int
 Description: The pixel location of the top of the tallest character on the current line of text, or 0 if no text is found in this location.
 

Parameters 

Param 1: 

Type: Int
 Description: Optional parameter that designates whose cursor position is to be retrieved. If this parameter is not specified, then the active cursor is used.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetStringWidth 

Description 

This function returns the length of the string in units of 1/100 of an inch using the given font.

Returns 

Type: Int
 Description: length of the string in 1/100 of an inch.
 

Parameters 

Param 1: 

Type: String
 Description: The string to be measured
 Include: Required
 

Param 2: 

Type: String
 Description: the name of the font
 Include: Required
 

Param 3: 

Type: Int
 Description: The size in points of the font.
 Include: Required
 

Param 4: 

Type: Int
 Description: True if the font is bold.
 Include: Required
 

Param 5: 

Type: Int
 Description: True if the font is italic.
 Include: Required
 

Param 6: 

Type: Int
 Description: True if the font is underlined.
 Include: Required
 

Param 7: 

Type: Int
 Description: True if the font is strikeout.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: GetWordWidth 

Description 

Determines how many pixels that a word is wide.

Returns 

Type: int
 Description: the width of the word in pixels.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IntToAttribName 

Description 

The converted integer to an attribute name will then be returned.

Returns 

Type: String
 Description: The name of the attribute.
 

Parameters 

Param 1: 

Type: Int
 Description: integer of the attribute to be returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsRtlChar 

Description 

Determines if a character is a Right to Left reading character.

Returns 

Type: int
 Description: true if the character is a Right to Left reading character, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The character to be tested.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: IsRtlReading 

Description 

This function Determines if the text in the supplied window reads from right to left.

Returns 

Type: int
 Description: true if the window contains text which reads right to left, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window to test for Right to Left reading.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: SayAttributesChanges 

Description 

When an attribute for given text is changed, this function announces the change. This function compares a current attribute with the previous text attributes

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the previous attribute.
 Include: Required
 

Param 2: 

Type: Int
 Description: current attribute to be returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayControlAttribBits 

Description 

This function speaks the hex value for each bit flag in the flag set, or the number of each bit flag itself.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: True if the hex value for each bit flag is to be returned, false if the number of each bit flag is to be returned.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: SayFont 

Description 

Identifies the font name, font size, and font attributes (For example: bold, underline, italic) that are associated with the character at the active cursor. The information that is reported is for the font that appears on the desktop, and usually does not correspond to the size of the font that will be printed on a printer. Refer to "FONTSIZE.TXT" in the \JFWxx\TECNOTES subdirectory for tips on working with fonts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayFont 

Description 

Says the font style name and character size. Also will speak the attributes such as bold, underline, and italics.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayTextAndAttributes 

Description 

Reads the visible text in the active window without moving the cursor. As it passes over changes in attributes, they are announced.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Touch Navigation

Microsoft offers Touch Navigation as an alternative input method for you to interact with the operating system and applications. Smart phones, tablets, and many laptops and desktop monitors support touchable surfaces that allow you to use gestures to control the operating system and applications. So, Touch navigation is intended to give you the same type of interaction capabilities on a desktop or laptop that you have on your smart phone and tablet.

A Touch Navigation script processes information about the application BEING ACCESSED through Touch Navigation if the feature is enabled on the device and also enabled in JAWS.

As of JAWS 15, you may elect to enable Touch navigation for certain applications where it is preferable to keyboard interaction, or where Touch Navigation is the only input method available.

JAWS provides numerous scripts assigned to various types of gestures instead of keystroke combinations to mimic Touch Navigation interaction with the operating system or with a particular application. Gestures are defined as a certain number of fingers plus the gesture. For example, FourFingers+TripleTap is for KeyboardHelp, and TwoFingers+FlickDown is for TouchSayAll. The types of gestures that JAWS supports include:

·         Tap

·         DoubleTap

·         TripleTap

·         FlickUp

·         FlickDown

·         FlickRight

·         FlickLeft

·         FlickSwipeRight

·         FlickSwipeLeft

·         FlickSwipeUp

·         FlickSwipeDown

·         Tap+Explore

·         Tap+ExploreEnd

Some examples of Touch Navigation scripts include:

·         AdvancedObjectNavigationModeToggle

·         TouchCloseApp

·         TouchNextElement

·         TouchPriorElement

·         TouchStopCurrentSpeechOutput

For a complete listing of Touch Navigation scripts and functions, see the topics in this category book of the Reference Guide.

Script: AdvancedObjectNavigationModeToggle 

Description 

in touch mode, navigation with the Touch cursor is similar to navigation using a touch tablet, moving through visible elements in an application. In advanced navigation mode, the Touch cursor traverses the UIA objects of the application in a hierarchical manner; all objects, whether visible or not, may be traversed in advanced navigation mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: AnnounceCurrentGestureModeAsError 

Description 

There are three separate gesture modes. This also plays a tone to indicate that this gesture is not available in this mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.00 and later

Script: DisableSemanticZoom 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: DoSecondaryActionForCurrentElement 

Description 

The secondary action for an element will vary according to the type of element and the actions available for it. For example, use this gesture to select or clear an item in a list, or increase or decrease the value in a slider control. Only available when the gesture mode is set to Touch Navigation.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: EnableSemanticZoom 

Description 

 

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: GestureCloseApp 

Description 

Available in both Touch Navigation and Text Reading, this gesture is the same as pressing ALT+F4 on the keyboard. The actions performed by the Close Application gesture depend on the currently active gesture mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: GestureEscape 

Description 

Available in both Touch Navigation and Text Reading, same as pressing ESC on the keyboard. The actions performed by the Escape gesture depend on the currently active gesture mode as well as the application currently in use.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: GestureF6 

Description 

Available in Touch Navigation, same as pressing F6 on the keyboard. The actions performed by the F6 gesture depend on the application currently in use.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: GestureJAWSWindow 

Description 

Available in all gesture modes, activates the JAWS window, from anywhere else in Windows, so you can read the online help, change synthesizers, and many other features. The current gesture mode will be set to touch navigation if it is not already active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: GestureRunJAWSManager 

Description 

Available in all gesture modes, opens a dialog displaying a list of all the JAWS managers so you can quickly select one to start. The current gesture mode will be set to touch navigation if it is not already active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: GestureSayAll 

Description 

Document reading Command. Unlike TouchSayAll, this reads the content of a document rather than reading through multiple elements or controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: GestureShiftF6 

Description 

Available in Touch Navigation, same as pressing Shift+F6 on the keyboard. The actions performed by the Shift+F6 gesture depend on the application currently in use.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: GestureShutDownJAWS 

Description 

Available in all gesture modes, exits and unloads JAWS from memory. JAWS cannot speak after it is unloaded. The current gesture mode will be set to touch navigation if it is not already active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Script: GestureToggleShowTouchKeyboard 

Description 

Available in both Touch Navigation and Text Reading, activates the Start Touch Keyboard button to show or hide the on-screen keyboard.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: GestureToggleTextReview 

Description 

Use text review to allow text reading gestures for items which have text, such as a name or value, but text reading is not supported using UIA. This gesture is available in both Touch Navigation and Text Reading.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Script: GestureToggleTouchCursor 

Description 

Use this gesture to toggle between the Touch and PC Cursor when the gesture mode is set to Speech Settings.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: InvalidTouchCursorAction 

Description 

the action normally performed by the script assigned to this key is not available when the touch cursor is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: KillUIAObject 

Description 

Releases the UIA object.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: ObjectNavigateToFirstChild 

Description 

In advanced navigation mode, the touch cursor moves to the first child of the current object in the UIA tree hierarchy.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: ObjectNavigateToFirstElementInProcessID 

Description 

If the touch cursor is set to object Navigation, moves to and speaks the first element with the same process ID as the element at the touch cursor location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: ObjectNavigateToLastElementInProcessID 

Description 

If the touch cursor is set to object Navigation, moves to and speaks the last element with the same process ID as the element at the touch cursor location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: ObjectNavigateToNextSibling 

Description 

In advanced navigation mode, the touch cursor moves to the next sibling object at the current level of the UIA tree hierarchy.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: ObjectNavigateToParent 

Description 

In advanced navigation mode, the touch cursor moves to the parent of the current object in the UIA tree hierarchy.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: ObjectNavigateToPriorSibling 

Description 

In advanced navigation mode, the touch cursor moves to the prior sibling object at the current level of the UIA tree hierarchy.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: PassThroughNextGesture 

Description 

The next gesture performed after this will be sent to Windows, and normal gesture handling will resume afterwards. Useful if you have a gesture conflict. Available in all gesture modes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.00 and later

Script: RouteTouchToFocus 

Description 

Routes the touch cursor to the focus, leaving the touch cursor active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: SayUIAPoint 

Description 

Speaks the screen coordinates of the UIA element at the Touch cursor location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: SayUIARect 

Description 

Speaks the screen location of the rectangle for the UIA element at the Touch cursor location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: SetGestureModeNext 

Description 

Cycles through the three gesture modes, Touch Navigation, Text Reading, and Speech Settings, to the next available mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: SetGestureModePrior 

Description 

Cycles through the three gesture modes, Touch Navigation, Text Reading, and Speech Settings, to the prior available mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: ShowUIAElementProperties 

Description 

The properties and patterns of the UIA element at the Touch cursor are displayed in the virtual viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TogglePerModeGestures 

Description 

Use to send all gestures, except this one and the pass through gesture, directly to Windows. When you use this gesture again without passing it through to Windows, normal JAWS handling of gestures will resume. Available in all gesture modes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.00 and later

Script: TouchBottomOfFile 

Description 

If the gesture mode is set to Text Reading, moves to the bottom of the document or text area.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: TouchChangeElementMovementNext 

Description 

If the gesture mode is set to Touch Navigation, moves forward through the rotor of navigation types to set the type of element moved to with the touch flick up or down navigation. For instance, you can choose to move by headings, links, form controls, and so on.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchChangeElementMovementPrior 

Description 

If the gesture mode is set to Touch Navigation, moves backward through the rotor of navigation types to set the type of element moved to with the touch flick up or down navigation. For instance, you can choose to move by headings, links, form controls, and so on.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchCloseApp 

Description 

Issues a command to close the application. The application will prompt for save before closing if necessary.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchEnd 

Description 

If the gesture mode is set to Text Reading, moves to the end of the line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchExploreEnded 

Description 

When touch exploration ends, the touch cursor is positioned at the location where the finger was lifted from the screen.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToNextButton 

Description 

Moves to the next button element with the Touch cursor. If no next button was found, the Touch cursor does not move and a message is spoken indicating that there are no more buttons.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextCheckBox 

Description 

Moves to the next checkbox element with the Touch cursor. If no next checkbox was found, the Touch cursor does not move and a message is spoken indicating that there are no more checkboxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextComboBox 

Description 

Moves to the next combo box element with the Touch cursor. If no next combo box was found, the Touch cursor does not move and a message is spoken indicating that there are no more combo boxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextDocument 

Description 

Moves to the next document element with the Touch cursor. If no next document was found, the Touch cursor does not move and a message is spoken indicating that there are no more documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextEdit 

Description 

Moves to the next edit element with the Touch cursor. If no next edit was found, the Touch cursor does not move and a message is spoken indicating that there are no more edits.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextFormControl 

Description 

Moves to the next form control element with the Touch cursor. If no next form control was found, the Touch cursor does not move and a message is spoken indicating that there are no more form controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextGroup 

Description 

Moves to the next group element with the Touch cursor. If no next group was found, the Touch cursor does not move and a message is spoken indicating that there are no more groups.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextHeading 

Description 

Moves to the next heading element with the Touch cursor. If no next heading was found, the Touch cursor does not move and a message is spoken indicating that there are no more headings.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextHyperlink 

Description 

Moves to the next hyperlink element with the Touch cursor. If no next hyperlink was found, the Touch cursor does not move and a message is spoken indicating that there are no more hyperlinks.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToNextImage 

Description 

Moves to the next image element with the Touch cursor. If no next image was found, the Touch cursor does not move and a message is spoken indicating that there are no more images.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextLandmark 

Description 

Moves to the next landmark element with the Touch cursor. If no next landmark was found, the Touch cursor does not move and a message is spoken indicating that there are no more landmarks.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchGoToNextList 

Description 

Moves to the next list element with the Touch cursor. If no next list was found, the Touch cursor does not move and a message is spoken indicating that there are no more lists.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextListItem 

Description 

Moves to the next list item element with the Touch cursor. If no next list item was found, the Touch cursor does not move and a message is spoken indicating that there are no more list items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextMenu 

Description 

Moves to the next menu, menu bar or menu item element with the Touch cursor. If no next menu, menu bar or menu item was found, the Touch cursor does not move and a message is spoken indicating that there are no more menu items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextPane 

Description 

Moves to the next pane element with the Touch cursor. If no next pane was found, the Touch cursor does not move and a message is spoken indicating that there are no more panes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextRadioButton 

Description 

Moves to the next radio button element with the Touch cursor. If no next radio button was found, the Touch cursor does not move and a message is spoken indicating that there are no more radio buttons.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToNextRegion 

Description 

Moves to the next region element with the Touch cursor. If no next region was found, the Touch cursor does not move and a message is spoken indicating that there are no more regions.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextStaticText 

Description 

Moves to the next static text element with the Touch cursor. If no next static text was found, the Touch cursor does not move and a message is spoken indicating that there are no more static texts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextStatusBar 

Description 

Moves to the next status bar element with the Touch cursor. If no next status bar was found, the Touch cursor does not move and a message is spoken indicating that there are no more status bars.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextTab 

Description 

Moves to the next tab or tab control element with the Touch cursor. If no next tab or tab control was found, the Touch cursor does not move and a message is spoken indicating that there are no more tab controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextTable 

Description 

Moves to the next table element with the Touch cursor. If no next table was found, the Touch cursor does not move and a message is spoken indicating that there are no more tables.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToNextToolBar 

Description 

Moves to the next tool bar element with the Touch cursor. If no next tool bar was found, the Touch cursor does not move and a message is spoken indicating that there are no more tool bar.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToNextTree 

Description 

Moves to the next tree element with the Touch cursor. If no next tree was found, the Touch cursor does not move and a message is spoken indicating that there are no more trees.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorButton 

Description 

Moves to the prior button element with the Touch cursor. If no prior button was found, the Touch cursor does not move and a message is spoken indicating that there are no previous buttons.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorCheckBox 

Description 

Moves to the prior checkbox element with the Touch cursor. If no prior checkbox was found, the Touch cursor does not move and a message is spoken indicating that there are no previous checkboxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorComboBox 

Description 

Moves to the prior combo box element with the Touch cursor. If no prior combo box was found, the Touch cursor does not move and a message is spoken indicating that there are no previous combo boxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorDocument 

Description 

Moves to the prior document element with the Touch cursor. If no prior document was found, the Touch cursor does not move and a message is spoken indicating that there are no previous documents.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorEdit 

Description 

Moves to the prior edit element with the Touch cursor. If no prior edit was found, the Touch cursor does not move and a message is spoken indicating that there are no previous edits.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorFormControl 

Description 

Moves to the prior form control element with the Touch cursor. If no prior form control was found, the Touch cursor does not move and a message is spoken indicating that there are no previous form controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorGroup 

Description 

Moves to the prior group element with the Touch cursor. If no prior group was found, the Touch cursor does not move and a message is spoken indicating that there are no previous groups.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorHeading 

Description 

Moves to the prior heading element with the Touch cursor. If no prior heading was found, the Touch cursor does not move and a message is spoken indicating that there are no previous headings.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorHyperlink 

Description 

Moves to the prior hyperlink element with the Touch cursor. If no prior hyperlink was found, the Touch cursor does not move and a message is spoken indicating that there are no previous hyperlinks.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorImage 

Description 

Moves to the prior image element with the Touch cursor. If no prior image was found, the Touch cursor does not move and a message is spoken indicating that there are no previous images.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorLandmark 

Description 

Moves to the prior landmark element with the Touch cursor. If no prior landmark was found, the Touch cursor does not move and a message is spoken indicating that there are no previous landmarks.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: TouchGoToPriorList 

Description 

Moves to the prior list element with the Touch cursor. If no prior list was found, the Touch cursor does not move and a message is spoken indicating that there are no previous lists.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorListItem 

Description 

Moves to the prior list item element with the Touch cursor. If no prior list item was found, the Touch cursor does not move and a message is spoken indicating that there are no previous list items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorMenu 

Description 

Moves to the prior menu, menu bar or menu item element with the Touch cursor. If no prior menu, menu bar or menu item was found, the Touch cursor does not move and a message is spoken indicating that there are no previous menu items.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorPane 

Description 

Moves to the prior pane element with the Touch cursor. If no prior pane was found, the Touch cursor does not move and a message is spoken indicating that there are no previous panes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorRadioButton 

Description 

Moves to the prior radio button element with the Touch cursor. If no prior radio button was found, the Touch cursor does not move and a message is spoken indicating that there are no previous radio buttons.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorRegion 

Description 

Moves to the prior region element with the Touch cursor. If no prior region was found, the Touch cursor does not move and a message is spoken indicating that there are no previous regions.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorStaticText 

Description 

Moves to the prior static text element with the Touch cursor. If no prior static text was found, the Touch cursor does not move and a message is spoken indicating that there are no previous static texts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorStatusBar 

Description 

Moves to the prior status bar element with the Touch cursor. If no prior status bar was found, the Touch cursor does not move and a message is spoken indicating that there are no previous status bars.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorTab 

Description 

Moves to the prior tab or tab control element with the Touch cursor. If no prior tab or tab control was found, the Touch cursor does not move and a message is spoken indicating that there are no previous tab controls.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorTable 

Description 

Moves to the prior table element with the Touch cursor. If no prior table was found, the Touch cursor does not move and a message is spoken indicating that there are no previous tables.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchGoToPriorToolBar 

Description 

Moves to the prior tool bar element with the Touch cursor. If no prior tool bar was found, the Touch cursor does not move and a message is spoken indicating that there are no previous tool bar.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchGoToPriorTree 

Description 

Moves to the prior tree element with the Touch cursor. If no prior tree was found, the Touch cursor does not move and a message is spoken indicating that there are no previous trees.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchHome 

Description 

If the gesture mode is set to Text Reading, moves to the beginning of the line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchMoveToFirstElement 

Description 

If the gesture mode is set to Touch Navigation, moves to the first element and speaks it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchMoveToLastElement 

Description 

If the gesture mode is set to Touch Navigation, moves to the last element and speaks it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchMoveToNextElementByType 

Description 

If the gesture mode is set to Touch Navigation, moves forward to the next element matching the type chosen in the type navigation rotor. For instance, if the navigation type is set to headings, you will move to the next heading, if available. If the move failed, a sound is played.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchMoveToPriorElementByType 

Description 

If the gesture mode is set to Touch Navigation, moves backward to the prior element matching the type chosen in the type navigation rotor. For instance, if the navigation type is set to headings, you will move to the prior heading, if available. If the move failed, a sound is played.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchNextElement 

Description 

If the gesture mode is set to Touch Navigation, moves to the next element and reads it. If the move failed, a sound is played.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchPageDown 

Description 

If the gesture mode is set to Text Reading, moves down a page if supported by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: TouchPageUp 

Description 

If the gesture mode is set to Text Reading, moves up a page if supported by the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: TouchPriorElement 

Description 

If the gesture mode is set to Touch Navigation, moves to the prior element and reads it. If the move failed, a sound is played.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchQuickNavEnableToggle 

Description 

Temporary toggle of quick navigation keys for touch navigation. Use the Quick Settings option Touch Quick Keys to configure the application to enable or disable touch navigation quick keys.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchRightClick 

Description 

If necessary, sets the focus to the current element if possible before bringing up the context menu if one exists.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchSayAll 

Description 

If the gesture mode is set to Touch Navigation, performs a Say All using the touch cursor to move through the application and speak each element.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchSayCharacter 

Description 

Says the character at the touch location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayCurrentElement 

Description 

If the gesture mode is set to Touch Navigation, speaks the item at the location of the Touch cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchSayNextCharacter 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the next character.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayNextLine 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the next line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayNextParagraph 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the next paragraph.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayNextWord 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the next word.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayPriorCharacter 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the prior character.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: TouchSayPriorLine 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the prior line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 18.0 and later

Script: TouchSayPriorParagraph 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the prior paragraph.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayPriorWord 

Description 

If the gesture mode is set to Text Reading, moves to and speaks the prior word.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchSayWord 

Description 

Says the word at the touch location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TouchScrollDown 

Description 

If possible, scroll the view of the screen down.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchScrollLeft 

Description 

If possible, scroll the view of the screen to the left.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchScrollRight 

Description 

If possible, scroll the view of the screen to the right.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchScrollUp 

Description 

If possible, scroll the view of the screen up.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchSetFocus 

Description 

If possible, sets focus to the item at the touch cursor location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchStopCurrentSpeechOutput 

Description 

Stop the current speech output. This gesture is available in all modes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchTapCurrentElement 

Description 

When the element at the Touch cursor is double tapped, JAWS tries to set focus, invoke, or toggle the expand/collapse state of the element. This gesture is available in both Touch Navigation and Text Reading mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchTextReviewNext 

Description 

The touch cursor is reactivated and moved to the next element from the current location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchTextReviewOff 

Description 

When text review mode is turned off, the Touch cursor is reactivated at the location of the current element.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchTextReviewOn 

Description 

If the element at the Touch cursor has text, the text review mode allows it to be read using the normal cursor navigation commands. If there is no text for the element at the current Touch cursor location, an error sound is played and the text review mode is not turned on.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchTextReviewPrior 

Description 

The touch cursor is reactivated and moved to the prior element from the current location.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 15.0 and later

Script: TouchToggleSelectionMode 

Description 

Toggles text selection on/off when the gesture mode is set to Text Reading. When selection is enabled, using any of the text reading gestures will select the specific unit as well as move to it. For instance, if you flick down or up with one finger to move by line, JAWS moves to the next or prior line and also selects it.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Script: TouchTopOfFile 

Description 

If the gesture mode is set to Text Reading, moves to the top of the document or text area.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 18.0 and later

Script: TrySetGestureModeForTextReading 

Description 

If text reading is available for the current touch element, switches the gesture mode to text reading. Plays the touch navigation error sound if the text reading mode is not available.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

User Interaction Functions

A User Interaction function provides or returns information about activities caused by user interaction with JAWS. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of User Interaction, such as the script for SkimReadDialog, for example. However, the focus of the present discussion is on functions related to User Interaction that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of User Interaction functions include:

ExMessageBox

InputBox

MessageBox

dlgSelectFunctionToRun

For a complete listing of User Interaction functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script displays a message box to which you must respond by pressing SPACE or Enter on one of its buttons.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Messages
@msgTitle
Test Message Box
@@
@msgText
I am a test message box. Press one of the buttons to accept or cancel the message.
@@
@msgYes
You said "yes."
@@
@msgNo
You said "No."
@@
@msgCancel
You said "Cancel."
@@
EndMessages
Script MyMessageTest ()
Var
            Int iOption
iOption = ExMessageBox (msgText, msgTitle, MB_YESNOCANCEL)
If iOption ==    IDYes
            SayMessage (ot_status,msgYes)
ElIf iOption == IDNo
            SayMessage (ot_status, msgNo)
ElIf iOption == IDCancel
            SayMessage (ot_status, msgCancel)
EndIf
EndScript

Function: DlgCustomizeColumns 

Description 

Displays a dialog that contains options for indicating how column headers are spoken or brailled. This function requires the caller to supply column header text delimited by a vertical bar character. This function also requires the caller to supply a key in the form of a string to store the custom information. The function also returns the current or modified speech and braille custom column information.

Returns 

Type: Int
 Description: FALSE if the DlgCustomizeColumns is already open, TRUE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: Contains a list of vertical bar character delimited column header text.
 Include: Required
 

Param 2: 

Type: String
 Description: A key to identify specific custom column information.
 Include: Required
 

Param 3: 

Type: String
 Description: A string used for the dialog title.
 Include: Optional
 

Param 4: 

Type: String
 Description: The current or modified Speech Column information.
 Include: Optional
 * Returns data by reference
 

Param 5: 

Type: String
 Description: The current or modified Braille Column information.
 Include: Optional
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: DlgCustomizeListview 

Description 

Displays a dialog that contains options for indicating how Listview column headers are spoken or brailled.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the Listview of interest.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 6.00 and later

Function: DlgGetCustomSummaryInfo 

Description 

Displays a dialog that contains options for labeling cells and cell ranges in spreadsheets.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the worksheet.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the cell or cell range (Example, A1 or A1:B1).
 Include: Required
 

Param 3: 

Type: String
 Description: The description for the cell or cell range.
 Include: Required
 

Param 4: 

Type: String
 Description: The file name of the JSI file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Function: DlgSelectAVoiceProfile 

Description 

Displays a dialog that contains a set of Voice Profiles. The user can select a voice profile as their default profile or can select a profile to be application specific.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: DlgSelectControls 

Description 

Displays a list box containing controls you may want to perform any one of the following actions: right single click, left single click, left double click, or Move To. You may change the dialog window title, display any combinations of the buttons, and specify a default.

Returns 

Type: Int
 Description: An integer value indicating what type of mouse action is required to activate the selected task tray icon, whether it be Left Mouse Button, Right Mouse Button, or double click of the left mouse button.
 

Parameters 

Param 1: 

Type: String
 Description: The list of controls.
 Include: Required
 

Param 2: 

Type: Int
 Description: The number of controls.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: The new window title.
 Include: Required
 

Param 4: 

Type: Int
 Description: The mask that indicates the buttons desired. See the available buttons in HjConst.jsh with the prefix bt_.
 Include: Required
 

Param 5: 

Type: Int
 Description: The default button as specified by the mask value.
 Include: Required
 

Param 6: 

Type: Int
 Description: the index of the item which should have the focus when the dialog is invoked. (JAWS 12.0 and above)
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: dlgSelectFunctionToRun 

Description 

Presents a list of functions to be run and displays their current value. Pressing the space bar or the Execute button will change the return value of the selected function, based on how the function was written. It is much like dlgSelectScriptToRun except that it does not merely speak, but the new return values are placed in the list box.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: strList This is the delimited list to be presented in the list box. It is in the same format as the dlgSelectScriptToRun function.
 Include: Required
 

Param 2: 

Type: String
 Description: Enter the string consisting of the Dialog's name.
 Include: Required
 

Param 3: 

Type: Int
 Description: Enter True if the items are to be sorted alphabetically, false otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 4.51-10.0  

2.    JAWS 11.0 and later  

 Function: DlgSelectItemInList 

Description 

Displays a dialog that contains a set of menu items. When the dialog is okayed, the one based index of the selected item is returned.

Returns 

Type: Int
 Description: This is 0 if the dialog was cancelled, otherwise the one based index of the selected item.
 

Parameters 

Param 1: 

Type: String
 Description: A "\007" delimited set of menu items.
 Include: Required
 

Param 2: 

Type: String
 Description: A string containing the name you want to appear as the title for the Menu Select dialog.
 Include: Required
 

Param 3: 

Type: Int
 Description: If TRUE, then the contents of the list will be sorted.
 Include: Required
 

Param 4: 

Type: Int
 Description: the index of the item which should have the focus when the dialog is invoked. (JAWS 5.0 and above)
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51-10.0

 Function: DlgSelectItemInList 

Description 

Displays a dialog that contains a set of menu items. When the dialog is okayed, the one based index of the selected item is returned.

Returns 

Type: Int
 Description: This is 0 if the dialog was cancelled, otherwise the one based index of the selected item.
 

Parameters 

Param 1: 

Type: String
 Description: A "\007" delimited set of menu items.
 Include: Required
 

Param 2: 

Type: String
 Description: A string containing the name you want to appear as the title for the Menu Select dialog.
 Include: Required
 

Param 3: 

Type: Int
 Description: If TRUE, then the contents of the list will be sorted.
 Include: Required
 

Param 4: 

Type: Int
 Description: the index of the item which should have the focus when the dialog is invoked. (JAWS 5.0 and above)
 Include: Optional
 

Param 5: 

Type: string
 Description: a list of up to 5 button names delimited with the vertical bar character "ButtonCaption1|ButtonCaption2l|...ButtonCaption5"
 Include: Optional
 

Param 6: 

Type: int
 Description: The 1-based button index of the custom button invoked, 0 for cancel, -1 for OK.
 Include: Optional
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: DlgSelectScriptToRun 

Description 

Displays a dialog that contains a set of scripts. Scripts can be performed from this dialog.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: A "\007" delimited set of script names. Aliases can also be included in this list. Example: ScriptDialog (VerbosityLevel:Verbosity\007ScreenEcho). This would create a listbox containing entries; Verbosity and ScreenEcho.
 Include: Required
 

Param 2: 

Type: String
 Description: A string containing the name you want to appear as the title for the script dialog. If this parameter is "", "Perform Script" is used for the title.
 Include: Required
 

Param 3: 

Type: Int
 Description: If TRUE, then the contents of the list will be sorted.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DlgSysTray 

Description 

Displays a list box containing the icons on the System Tray

Returns 

Type: Int
 Description: An integer value indicating what type of mouse action is required to activate the selected task tray icon, whether it be Left Mouse Button, Right Mouse Button, or double click of the left mouse button.
 

Parameters 

Param 1: 

Type: String
 Description: The list of Task tray icons.
 Include: Required
 

Param 2: 

Type: Int
 Description: The number of Task tray icons.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ExMessageBox 

Description 

This function displays a Windows Standard Message Box. It is very much like the function MessageBox except it allows you to specify the Message Box title and the type of message box (i.e. The buttons that are used and the icon that is to be displayed). This function also returns a value that indicates which button was pressed on the Message Box.

Returns 

Type: Int
 Description: Returns an integer value indicating which button was pressed on the message box.
 

Parameters 

Param 1: 

Type: String
 Description: The text of the message that you would like to be displayed in the main body of the message box.
 Include: Required
 

Param 2: 

Type: String
 Description: The text of the Message Box's title.
 Include: Required
 

Param 3: 

Type: Int
 Description: One or more of the Message Box type specifiers that are listed in HJConst.jsh, separated by a single vertical bar. An example of such is: MB_YESNOCANCEL|MB_DEFBUTTON1 making the Yes button the default.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: InHJDialog 

Description 

Checks to see if one of the dialog boxes generated by JFW is active. These include JAWSFind, GraphicsLabeler, DlgSelectItemInList, and DlgSysTray.

Returns 

Type: Int
 Description: TRUE if a dialog is active, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: InputBox 

Description 

This function displays a simple dialog box containing four controls. One control is an edit box in which you can enter information. Another control is a Static Text window containing the prompt of the edit box. The other two controls are the OK and Cancel buttons. If you enter text into the Edit box and press the OK button, the text you typed in the Edit box is returned to the calling function by way of the third variable of the function, which is a string variable that is passed by reference to the calling function.

Returns 

Type: Int
 Description: Returns 1 if the OK button was pressed. Returns 0 if the cancel button was pressed.
 

Parameters 

Param 1: 

Type: String
 Description: The text of the message that you would like to be displayed in the prompt of the Edit Box.
 Include: Required
 

Param 2: 

Type: String
 Description: The text of the Dialog Box's title.
 Include: Required
 

Param 3: 

Type: String
 Description: This parameter is passed to the calling funcction or script by reference. If you type text in the Edit box and press the OK button, this parameter returns the text that you typed to JFW. If you do not enter text into the Edit box or you press the Cancel button, this parameter contains a NULL string,
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: IsSelectItemDlg 

Description 

First check the focus to see if it is in the JFW application. Then check for control ID to see if it is the select item in the dialog list.

Returns 

Type: Int
 Description: Returns zero if it is false and one if it is true.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsSelectScriptDlg 

Description 

First check the focus to see if it is in the JFW application. Then check for control ID to see if it is the SelectScriptList control.

Returns 

Type: Int
 Description: Returns zero if it is false and one if it is true.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MessageBox 

Description 

This is used to make a message box pop up on the desktop. It can be included within an If...Then...Else...statement so that when a certain event occurs, the needed message pops up.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: This parameter must be either a text string enclosed in quotes, a variable name that contains a string value, or a script function that returns a string value.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: StartJAWSTaskList 

Description 

The JTL allows the user to minimize, maximize, close, start, and switch to applications

Returns 

Type: Int
 Description: The value is 0 if JAWSTaskList.dll can not be loaded, or 1 if the function is called from the dll successfully.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: TimedMessageBox 

Description 

Use to assert a message box for a given amount of time while awaiting processing.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the desired MB_ constants from HjConst.jsh, or simply 0 for default behavior. You can use the ICONERROR or other ICON constants to provide known graphics and system beeps.
 Include: Required
 

Param 2: 

Type: String
 Description: Enter the text of the message box window.
 Include: Required
 

Param 3: 

Type: String
 Description: Enter the text for the title of the window.
 Include: Required
 

Param 4: 

Type: Int
 Description: Enter the time in milliseconds to have the message box stay on the screen.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

User Options Functions

A User Options function provides or returns information about activities caused by user interaction with JAWS. However, starting with JAWS 13.0, the Quick Settings user interface replaced the older style AdjustJAWSOptions dialog.

For backwards compatibility, many legacy functions for the older style dialogs continue to ship with JAWS. But all customizations relevant to Quick Settings should be handled through the Quick Settings functions. Only in this way can your own customized Quick Settings appear in the Quick Settings User interface.

 Nevertheless, if you still wish to create your own user interface for customized applications, the legacy functions are still applicable through the older-style tree view user interface that does not include a search capability as does Quick Settings or Settings Center.

 

 

Some examples of legacy User Options functions include:

AddCustomNodes

cStrDefaultList

OptionsTreeCore

For a complete listing of legacy User Options functions, see the topics in this category book of the Reference Guide.

For more details on customizing the Quick Settings user interface, see the topic in the General Scripting Concepts book called Customized Quick Settings.

Function: AddCustomNodes 

Description 

This companion function to OptionsTreeCore lives in Default and operates on the string sent to the OptionsTreeCore function, adding node paths where paths did not exist. See the description for OptionsTreeCore for complete examples.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The string upon which to operate, adding the node paths where they don't exist.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: The node name to explicitly use for all strings not containing node paths. Leave this blank for JAWS to fill in the node name based upon the configuration set which is active at runtime.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: AlphaNumCombinations 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: CapsIndicate 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: CapsIndicateDuringSayAll 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: ConvertListToNodeList 

Description 

When you need to add a whole group of options in the same branch of the tree view, use this function to give each option the same node path. Pass the group in the standard list format using the vertical bar (|) symbol as the primary array delimitor, and the colon (:) symbol as the divider between the callback function and the display text.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The list of list item segments, delivered in the dlgSelect*ToRun format
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: The node path explicit to the list you specified in the first parameter.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: CustomLabelsSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: DocumentPresentationSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: FlashMoviesRecognize 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: GraphicsShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: IndentationIndicate 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: InsertCustomNodesInBranch 

Description 

Inserts a node list at the beginning of the list of nodes under the branch.

Returns 

Type: string
 Description: The branch with the new nodes inserted at the beginning of the list of nodes under the branch name.
 

Parameters 

Param 1: 

Type: string
 Description: The branch into which you want to insert a node list.
 Include: Required
 

Param 2: 

Type: string
 Description: The new nodes which you want to inserts. The Node list must be in the form node pipe node pipe . . . node pipe.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: LanguageDetectChange 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: NavigationQuickKeysSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: OptionsTreeCore 

Description 

This function is equivalent to VerbosityCore, except that it formats the string for and presents the "Adjust JAWS Options" (Insert+v) dialog box.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: List of items, wherein the list is segmented using the vertical bar (|) symbol. Each segment is divided with the colon (:) symbol, where segment 1 is the callback function name and segment 2 is the display text, which may or may not contain a node path. You must have a callback function and a corresponding hlp callback function with the same name as segment 1 of each array slice. See UserOptions.jss and accompanying files for string and function format.
 Include: Required
 

Param 2: 

Type: int
 Description: Enter TRue for this optional parameter, if you do not want this function to update item strings which do not have node paths. If you ignore or leave this parameter FALSe, your items will be formatted with the node you specify in the strNewNode parameter. Ignoring these parameters is the fastest way to get your items in in their own group.
 Include: Optional
 

Param 3: 

Type: string
 Description: Enter the explicit path in which to place all items in your list which do not have nodes.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: PageRefresh 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: PrependItemWithNode 

Description 

Prepares list item string segment to be used in an array passed to the dlgSelectTreeFunctionToRun function.

Returns 

Type: string
 Description: the modified string segment with the path string.
 

Parameters 

Param 1: 

Type: string
 Description: This is the string segment which contains the function callback, a colon, and the list item display text.
 Include: Required
 

Param 2: 

Type: string
 Description: This is the branch, or path of branches. Note that it should not end with the node path separator. Examples of nodes would be "General Options" or "Reading Options.Sayall Options" (note noperiod at end of example; this is added by the function.)
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: ProgressBarSetAnnouncement 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: PunctuationSetLevel 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: SayAllReadsBy 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: ScreenEchoSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: SmartWordReadingSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: SynthesizerMute 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: TopAndBottomEdgeIndicate 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TreeCoreGetDefaultBrailleMarkingList 

Description 

Returns the list of options for marking with dots 7 and 8 on the Braille display. This string is formatted for the JAWS tree view.

Returns 

Type: String
 Description: the list of options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TreeCoreGetDefaultBrailleOptions 

Description 

returns all the default Braille options with their complete node paths. These are the options for your Braille display.

Returns 

Type: String
 Description: the list of options.
 

Parameters 

Param 1: 

Type: int
 Description: True if the root node is to be discarded when building the branch to display, false otherwise. Default is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TreeCoreGetDefaultEditingOptions 

Description 

Constructs the branch of the Options tree belonging to Editing Options.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Editing Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultGeneralOptions 

Description 

Constructs the branch of the Options tree belonging to General Options.

Returns 

Type: string
 Description: The branch of the Options tree belonging to General Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TreeCoreGetDefaultNumbersOptions 

Description 

Constructs the branch of the Options tree belonging to Numbers Options.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Numbers Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TreeCoreGetDefaultOptions 

Description 

This function returns the string list of all the default options with node paths for the AdjustOptions dialog.

Returns 

Type: String
 Description: the list of options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TreeCoreGetDefaultReadingOptions 

Description 

Constructs the branch of the Options tree belonging to Reading Options.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Reading Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TreeCoreGetDefaultSayAllOptions 

Description 

Constructs the branch of the Options tree belonging to SayAll Options.

Returns 

Type: string
 Description: The branch of the Options tree belonging to SayAll Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultSpellingOptions 

Description 

Constructs the branch of the Options tree belonging to Spelling Options.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Spelling Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorFormsOptions 

Description 

Constructs the branch of the Options tree belonging to Forms Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Forms Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorGeneralOptions 

Description 

Constructs the branch of the Options tree belonging to General Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to General Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorGraphicsOptions 

Description 

Constructs the branch of the Options tree belonging to Graphics Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Graphics Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorHeadingAndFrameOptions 

Description 

Constructs the branch of the Options tree belonging to Heading And Frame Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Heading And Frame Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorLinksOptions 

Description 

Constructs the branch of the Options tree belonging to Links Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Links Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorListAndTableOptions 

Description 

Constructs the branch of the Options tree belonging to List And Table Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to List And Table Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorOptions 

Description 

This function returns the list of options for the Virtual Cursor, formerly html options.

Returns 

Type: String
 Description: the list of options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: TreeCoreGetDefaultVCursorTextOptions 

Description 

Constructs the branch of the Options tree belonging to Text Options under the Virtual Options branch.

Returns 

Type: string
 Description: The branch of the Options tree belonging to Text Options under the Virtual Options branch.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TreeCoreGetDefaultVCursorTopLevelOptions 

Description 

Constructs the branch of the Options tree belonging to the top level options under the Virtual Cursor Options.

Returns 

Type: string
 Description: The the branch of the Options tree belonging to the top level options under the Virtual Cursor Options.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Function: TypingEchoSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: UOGrade2Rules 

Description 

Function to toggle the grade II rule to use.

Returns 

Type: string
 Description: The braille translation rule mode.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorAbbreviationsExpand 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorAccessKeysShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorAcronymsExpand 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorAttributesIndicate 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorBlockQuotesIdentifyStartAndEnd 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorButtonsShowUsing 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorCustomPageSummary 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorFormFieldsIdentifyPromptUsing 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorFormsModeAutoOff 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorFramesShowStartAndEnd 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorGraphicalLinksSet 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorGraphicsSetRecognition 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorGraphicsSetRecognitionJlp 

Description 

Help callback function which provides help for the selected setting and item in the tree view inspired by the dlgSelectTreeFunctionToRun internal function.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value which may be set by the internal dlgSelectTreeFunctionToRun function.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorGraphicsShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorHeadingsAnnounce 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorImageMapLinksShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorInlineFramesShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorLayoutTables 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorLinksIdentifySamePage 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorLinksIdentifyType 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorListsIdentifyStartAndEnd 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorRepeatedTextSkip 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorScreenTrack 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorTablesShowStartAndEnd 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Function: vCursorTableTitlesAnnounce 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorTextLinksShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: vCursorUntaggedGraphicalLinkShow 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: VerbositySetLevel 

Description 

Callback function for the dlgSelectTreeFunctionToRun function. The int parameter is set to TRUE when the tree is refreshed, FALSE if the corresponding option was executed.

Returns 

Type: string
 Description: The human-readable string name of the new setting.
 

Parameters 

Param 1: 

Type: int
 Description: The value set by the internal dlgSelectTreeFunctionToRun function. 0 = change setting, 1 = raetain current setting.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 9.0 and later

Utility Functions

A Utility function returns information about JAWS activity relative to the current application with focus or current state of JAWS with respect to controls and other objects structures. Utility functions are intended only for determining information you may utilize from within your own scripts and functions, and/or as a debugging tool.

Many scripts that ship with JAWS fall into the category of Utility (formerly referred to as "Homerow"), such as the script for HomeRowToggle, for example. There are many useful debugging utility scripts that you may use sparingly so as not to generate a large buffer. they include:

·         UtilityManageSayLogging

·         UtilityManageScriptCallStackLogging

·         UtilityManageSwitchLogging

·         UtilityNodeCapture

The main focus of the present discussion is on Utility functions that you may call from your own scripts or that you may utilize to gain access to information that you may then use in your own scripts and functions.

Some examples of Utility functions include:

·         CollectWindowInfo

·         GetRightLeaf

·         GetTreeInfo

·         OutputDebugString

For a complete listing of Utility functions, see the topics in this category book of the Reference Guide.

Using the Logging Utility Scripts

SayDebugger generates the Say Logs that create a trace of which functions are responsible for speaking or double-speaking. Enable SayAlog by turning on the Scripts Utility with JAWSKey+Windows+NumpadMinus, followed by JAWSKey+Windows+UpArrow. The JAWS confirms with the phrase, "Say Logging On." Then disable the Homerow Utility.

Managing Logs

To manage the running log, press the same key combinations again: JAWSKey+Windows+NumpadMinus, followed by JAWSKey+Windows+UpArrow. Since the SayDebugger utility is already running, a dialog is activated containing the following options:

Pause Logging - Pause logging until you are ready to test something in particular. This avoids unnecessary clutter of information in your log and saves memory in your system. Also, Pause Logging becomes Resume Logging when logging is paused. Pause puts logging on hold, and resume starts logging again, appending to the existing log.

Show Log - Display a virtual viewer window full of all the data from the log thus far. Save the entire contents of the log at this point to a text file with standard selection and copy/paste commands. Note that Show Log does not stop the system from logging. Like many debugging tools, you must stop it manually.

Stop Logging - Stop and clear the existing log after you have displayed the log and saved a copy of it somewhere safe. Do not perform a Stop Logging action before you perform a Show Log action and before you have saved the contents, or they will be lost.

Reset Logging - Reset clears the currently running log and continues to log. This is the same as if you had stopped and restarted the SayLog.

Special Note:

Once you have saved the contents of the log, make sure to stop logging as soon as possible. Otherwise, a substantial buffer in memory begins to accumulate quickly.

Note that nothing is written to the log while the list of options for managing the log is showing, nor while you are showing the log output in the virtual viewer.

Tips to Remember about Logging

1.    After turning on logging, you must turn off Script Utility Mode.

2.    The action of turning on Logging does not itself present a dialog.

3.    To manage your log, be outside of another JAWS user interface dialog (AKA an HJ dialog), preferably outside a dialog that does not do well with other dialogs on top of it. An example of this is an alert of some kind. So dismiss the alert before managing SayLog again.

4.    When managing the log, always perform a ShowLog first and copy it somewhere before you Stop Logging.

5.    After you successfully save the text of the log, do not spell check it or alter its format in any way.

6.    Stop logging as soon as possible after obtaining and saving whatever information you need to avoid eating up real memory in your system.

Once you have a log of a particular problem which you cannot resolve on your own, you may send the text file to Freedom Scientific for technical support help with the problem.

Function: CollectWindowInfo 

Description 

collects the technical information about a window.

Returns 

Type: string
 Description: The information retrieved for the window.
 

Parameters 

Param 1: 

Type: handle
 Description: The window for which the information will be collected.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: GetRightLeaf 

Description 

Traverses the window tree to find the right-most leaf window, starting from the specified root window.

Returns 

Type: handle
 Description: The right-most leaf window handle.
 

Parameters 

Param 1: 

Type: handle
 Description: The starting window handle, the root position.
 Include: Required
 

Param 2: 

Type: string
 Description: ByRef The string describing the path from the root to the leaf.
 Include: Required
 

Param 3: 

Type: int
 Description: ByRef The hierarchical x position of the leaf window.
 Include: Required
 

Param 4: 

Type: int
 Description: ByRef The hierarchical y position of the leaf window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: GetTreeInfo 

Description 

Used by TreeCapture script to traverse the window tree and retrieve informatin about each window in the tree.

Returns 

Type: string
 Description: The collected technical information about all windows in the tree.
 

Parameters 

Param 1: 

Type: handle
 Description: The starting window, the root of the window tree to be traversed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: HomeRowToggle 

Description 

Script Utility Mode contains many tools for obtaining information useful when developing scripts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51-10.0

Script: MouseMovementDecrement 

Description 

This scripting tool decreases the number of pixels moved by the mouse. The mouse movement distance is the number of pixels that the mouse moves for the MouseUp, MouseDown, MouseLeft and MouseRight keystrokes. If the current setting is 1, the new setting will be 50.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MouseMovementDefault 

Description 

The default value is three pixels.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: OutputDebugString 

Description 

Sends a string to the debugger for display. The debugger may be a utility program such as DBGVIEW.EXE.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: String to be displayed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayDebugger 

Description 

Call SayDebugger in various say functions to add the debug info to the say debug log when it is on.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The name of the function calling the debugger.
 Include: Required
 

Param 2: 

Type: variant
 Description: the first parameter used by the calling function.
 Include: Optional
 

Param 3: 

Type: variant
 Description: the second parameter used by the calling function.
 Include: Optional
 

Param 4: 

Type: variant
 Description: the third parameter used by the calling function.
 Include: Optional
 

Param 5: 

Type: variant
 Description: the fourth parameter used by the calling function.
 Include: Optional
 

Param 6: 

Type: variant
 Description: the fifth parameter used by the calling function.
 Include: Optional
 

Param 7: 

Type: variant
 Description: the sixth parameter used by the calling function.
 Include: Optional
 

Param 8: 

Type: variant
 Description: the seventh parameter used by the calling function.
 Include: Optional
 

Param 9: 

Type: variant
 Description: the eighth parameter used by the calling function.
 Include: Optional
 

Param 10: 

Type: variant
 Description: the ninth parameter used by the calling function.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 11.0 and later

Script: ScreenSensitiveHelpTechnical 

Description 

This keystroke provides useful information when writing scripts.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ToggleHomeRow 

Description 

Toggles Home Row mode ON/OFF. Home Row mode is a shifted state for the keyboard. It is analogous to the NUM LOCK on the numeric keypad. When it is on, the alphabet keys and number keys can be used to perform script functions. When Home Row mode is turned OFF, the keys perform their standard functions.

Returns 

Type: Int
 Description: "ON" = 1, "OFF" = 0.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityCopyInfo 

Description 

This scripting tool copies the window output information spoken by the F1 keystroke to the clipboard.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityCopyMSAAObjectInfo 

Description 

This scripting tool copies the MSAA output information spoken by the F9 keystroke to the clipboard.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityDebugResearchItRuleSet 

Description 

This diagnostic tool presents the output from ResearchIt raw into the virtual viewer, so you can see the error codes, html or other markup, and any return statements such as XTD errors from Xquery-based rule sets.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Script: UtilityFindFirstAttribute 

Description 

This scripting tool Moves the Scripting Utility to the first requested attribute. Attributes are defined using the Set Attribute scripting tool. The attributes are cycled in the following order: bold, italic, underline, strikeout, and highlight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityFindLastAttribute 

Description 

This scripting tool Moves the Scripting Utility to the last requested attribute. Attributes are defined using the Set Attribute scripting tool. The attributes are cycled in the following order: bold, italic, underline, strikeout, and highlight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityHelp 

Description 

These functions are designed to aid in writing scripts and functions.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UtilityInitializeHomeRowPosition 

Description 

This command allows you to set the current position in the window hierarchy referenced by the script utilities to the window containing the active cursor

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityJumpToOutputMode 

Description 

Jumps to the next output mode for the window info scripting tool. The modes jumped to are: Window handle, window type and real window name.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 7.00 and later

Script: UtilityJumpToOutputModeReverseOrder 

Description 

Jumps to the previous output mode for the window info scripting tool. The modes jumped to are: Window handle, window type and real window name.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.00 and later

Script: UtilityLeftMouseButton 

Description 

This scripting tool presses the left mouse button at the script Utility position.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilityManageSayLogging 

Description 

If say logging is off, turn it on; script utility mode is not exited when logging is toggled on. If say logging is on, exits script utility mode and presents a list of choices for managing say logging. Press Enter on an item in the list to activate it and exit the list. Use Pause/Resume Logging to pause and resume logging, Stop Logging to turn off say logging. Reset Logging will clear logging and continue to log as if logging were stopped and restarted. Show Log displays the say log in the virtual viewr. You can select and copy text from the log while in the virtual viewer, press Escape when done to dismiss the virtual viewer. When say logging is on, scripted speech functions are captured and information is added to the log, except when using the say log utility itself. Use say logging very sparingly to avoid filling up a huge buffer with the say log. This tool is the answer for immediately discovering where errant speech is coming from, and presents a full call stack for your examination.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: UtilityManageScriptCallStackLogging 

Description 

If script call stack logging is off, turn it on; script utility mode is not exited when logging is toggled on. If script call stack logging is on, exits script utility mode and presents a list of choices for managing script call stack logging. Press Enter on an item in the list to activate it and exit the list. Use Pause/Resume Logging to pause and resume logging, Stop Logging to turn off script call stack logging. Reset Logging will clear logging and continue to log as if logging were stopped and restarted. Show Log displays the script call stack log in the virtual viewr. You can select and copy text from the log while in the virtual viewer, press Escape when done to dismiss the virtual viewer. When script call stack logging is on, functions AppendToScriptCallStackLog and AppendToScriptCallStackLogEx are used to add information to the log. Use script call stack logging sparingly to avoid filling up a huge buffer with the script call stack log. AppendToScriptCallStackLog adds the calling function and its call stack to the log. AppendToScriptCallStackLogEX adds a log entry with whatever data you supply as a parameter. This tool is for diagnosing who is calling your function, what data is being supplied, and any additional variable data you wish to verify using AppendToScriptCallstackLogEX.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: UtilityManageSwitchLogging 

Description 

If switch logging is off, turn it on; script utility mode is not exited when logging is toggled on. If switch logging is on, exits script utility mode and presents a list of choices for managing switch logging. Press Enter on an item in the list to activate it and exit the list. Use Pause/Resume Logging to pause and resume logging, Stop Logging to turn off switch logging. Reset Logging will clear logging and continue to log as if logging were stopped and restarted. Show Log displays the switch log in the virtual viewr. You can select and copy text from the log while in the virtual viewer, press Escape when done to dismiss the virtual viewer. When switch logging is on, calls to functions SwitchToScriptFile and SwitchToConfiguration are captured and the script call stack is added to the log. Also, a sound is played when SwitchToScriptFile or SwitchToConfiguration is called. SwitchToScriptFile and SwitchToConfiguration function calls can be tricky to diagnose or debug, and this tool makes your flow apparent using call stacks.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilityMoveToChild 

Description 

This tool moves the Scripting Utility to the first child of the current window. The first child window is usually the first control in the tab order for the dialog. JAWS speaks the required information according to the Output Mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityMoveToFirstWindow 

Description 

This tool moves the Scripting Utility to the first window of the same logical level. Useful for moving through the items at a given level, following the tab order. Speaks information according to the output mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityMoveToLastWindow 

Description 

This tool moves the Scripting Utility to the last window of the same logical level. Useful for moving through the items at a given level, following the tab order. Speaks information according to the output mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityMoveToNextWindow 

Description 

This tool moves the Scripting Utility to the next window of the same logical level. Useful for moving through the items at a given level, following the tab order. Speaks information according to the output mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityMoveToParent 

Description 

This tool moves the Scripting Utility to the parent of the current window. Information about the parent window is spoken according to the Output Mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityMoveToPriorWindow 

Description 

This tool Moves the Scripting Utility to the prior window of the same logical level. Useful for moving through the items at a given level, following the tab order. Speaks information according to the output mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityNextAttribute 

Description 

This scripting tool moves the Scripting Utility to the next requested attribute. Attributes are defined using the UtilitySetFontMode Script. The attributes are cycled in the following order: bold, italic, underline, strikeout, and highlight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityNodeCapture 

Description 

This scripting tool displays a synopsis of information in the virtual viewer about the current script utility window. Information includes name, class, controlID and more. Pressing Escape dismisses the virtual viewer and returns you to the script utility mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: UtilityPriorAttribute 

Description 

This scripting tool moves the Scripting Utility to the prior requested attribute. Attributes are defined using the UtilitySetFontMode Script. The attributes are cycled in the following order: bold, italic, underline, strikeout, and highlight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UtilityPutInfoInBox 

Description 

Output modes for the Script Utility window are the window's properties such as name, type, class, control ID, etc. and are selected by the f3 keystroke in Script Utility Mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityPutMSAAObjectInfoInBox 

Description 

Output modes for MSAA are the MSAA object's properties such as name, type, subtype code, role, state and more.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UtilityResetOutputMode 

Description 

The utility output modes are SayTypeAndText, focus window handle, control ID, window class, window type, Sub Type, and first real window name.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityRouteJAWSCursorToPc 

Description 

This scripting tool routes the JAWS or Invisible cursor to the window currently referenced by the script utilities if the window is visible. When the window currently referenced by the script utilities is visible, this command will route the JAWS or Invisible cursor to that window

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UtilitySayCurrentMSAAMode 

Description 

This diagnostic scripting tool reports the value of the MSAA mode currently being used by the scripts. The MSAA mode may be set in the JCF file, or by the scripts using opt_MSAA_mode. The MSAAMode setting can change what JAWS says while navigating in lists and trees or changing focus.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilitySayInfoAccess 

Description 

This scripting tool says the requested information (Output Mode) in the current window. The Output Mode is defined by using the UtilitySetOutputMode. The Output Mode is cycled in the following order: window handle, control ID, window class, window type, and first real window name. When UtilitySayInfoAccess is selected twice in quick succession, the requested information is spelled. Spell Mode does not apply to integers.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySayMenuMode 

Description 

This scripting tool says the menu state as described by MenusActive function or GlobalMenuMode variable. In your diagnostics, you may find issues where visually the menus don't exist but JAWS thinks the menu is active.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilitySayMSAAObjectInfoAccess 

Description 

This scripting tool says the MSAA Output mode information about an object specified by the Set MSAA Output Mode f10 keystroke. The MSAA Object is the object under the active cursor.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySayMSAAObjectOutputMode 

Description 

This scripting tool says the currently selected output mode for MSAA objects. You can set the output mode for MSAA objects by pressing Home-Row+F10.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySayOutputMode 

Description 

This scripting tool says the current setting for the output mode such as: real window name, window subtype code, Window type, window class, control ID, window handle, and SayTypeAndText.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySayWindow 

Description 

This scripting tool will read all the text contained within the window currently referenced by the script utility.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UtilitySayWindowPromptAndText 

Description 

This scripting tool is similar to the regular INSERT+Tab key command, except it returns information for the window currently referenced by the script utility.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySetFontMode 

Description 

This scripting tool sets the Attribute Mode, which indicates the attribute for Script Utility to find. When selected repeatedly, the attributes are cycled in the following order: bold, italic, underline, strikeout, and highlight.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySetMSAAObjectOutputMode 

Description 

This scripting tool cycles through the output modes for MSAA objects. Use the F9 keystroke to hear the information indicated by the output mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySetMSAAObjectOutputModeReverseOrder 

Description 

This scripting tool cycles through the output modes for MSAA objects. Use the F9 keystroke to hear the information indicated by the output mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySetOutputMode 

Description 

This scripting tool sets the Output Mode for the Script Utility window. When repeatedly selected, the Output Mode is cycled in the following order: Window handle, control ID, window class, window type, window subtype code, window style bits, real window name, window name, window text restricted, window text inclusive, highlighted text and SayTypeAndText.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilitySetOutputModeReverseOrder 

Description 

This scripting tool sets the Output Mode for the Script Utility window. When repeatedly selected, the Output Mode is cycled in the following order: Window handle, control ID, window class, window type, window subtype code, window style bits, real window name, window name, window text restricted, window text inclusive, highlighted text and SayTypeAndText.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: UtilityShowLastUnknownFunctionName 

Description 

This scripting tool displays in the virtual viewer the most recent function name that cause an unknown function call to be reported. Press Escape to dismiss the virtual viewer and return to script utility mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilityShowObjectHierarchyInfo 

Description 

This scripting tool displays in the virtual viewer information about the MSAA object under the active cursor and its hierarchical ancestors. Level 0 is the current object, level 1 is its parent, 2 its grand parent, etc. Press Escape to dismiss the virtual viewer and return to script utility mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: UtilityShowObjectList 

Description 

This scripting tool shows the list of MSAA objects from the current script utility window in the virtual viewer. Press Escape to dismiss the virtual viewer and return to script utility mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: UtilityShowObjectListInfoByName 

Description 

This scripting tool shows information about each MSAA object from the current script utility window in the virtual viewer. Press Escape to dismiss the virtual viewer and return to script utility mode. This information comes from internal function GetObjectInfoByName.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: UtilityShowSDMControls 

Description 

This scripting tool traverses the SDM controls in the script utility window and displays information about them in the virtual viewer. Press Escape to dismiss the virtual viewer and return to script utility mode. SDM controls are part of Microsoft Office dialogs.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilityShowUIAFocusObjectTreeInfo 

Description 

If the current utility window has objects exposed by iAccessible Object, and there is an object that has the keyboard focus, this scripting tool uses the virtual viewer to display information about the tree of objects in the window starting at the focus object. The information is displayed in the virtual viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: UtilityShowUIAFocusParentObjectTreeInfo 

Description 

If the current utility window has objects exposed by iAccessible Object, and there is an object that has the keyboard focus, This scripting tool uses the virtual viewer to display information about the tree of objects in the window starting at the focus object's parent. The information is displayed in the virtual viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: UtilityShowUIAObjectFocusAncestorsInfo 

Description 

If there is a focus object, this scripting tool displays its information and its ancestors. Starts at level 0, which is the focus object.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: UtilityShowUIAObjectFocusInfo 

Description 

If there is a focus object, displays its information in the virtual viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: UtilityShowUIATopObjectTreeInfo 

Description 

If the current utility window has UIA objects, this scripting tool displays information about the tree of objects in the window starting at the top level object. The information is displayed in the virtual viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: UtilitySpeakWindowVisibility 

Description 

This script utility will speak the visibility status of the Script Utility window.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityTestKeys 

Description 

When key testing is on, this scripting tool ensures that keystrokes are not passed through to the application. Instead, the name of the key and it's hexidecimal value are spoken and shown in braille. Press the Script Utility Mode toggle key to turn off Key Text.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: UtilityToggleShowUnknownFunctionCallStack 

Description 

This scripting tool aids your diagnostics by indicating where an unknown function or script call is coming fron. If show unknown function call stack is on, each unknown function announcement displays in the virtual viewr the function call stack at the time the unknown function announcement was triggered. The toggle will remain on until toggled off or until JAWS is restarted. Press Escape to dismiss the virtual viewer and return to script utility mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilityToggleSpeakWindowVisibility 

Description 

When this function is turned on, this scripting tool announces the status of a window's visibility as you tab through the window hierarchy.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: UtilityToggleSuppressUnknownFunctionCallNotification 

Description 

Allows the script developer to temporarily toggle off unknown function notification. This scripting tool is useful when swapping modules in and out, or removing functions from the call order as a diagnostic method for debugging your scripts. Unknown function call notification will revert back to on when JAWS is restarted, or when it is toggled back on.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: UtilityToggleUIAObjectBrowserMode 

Description 

If any iAccessible object exist for the current script utility window, this scripting tool attempts to build a tree structure of the objects for navigation. If the tree structure cannot be obtained, the mode does not toggle on. When the UIA object browser is toggled to on, the script utility navigation keys navigate the UIA object tree instead of the window hierarchy. If the UIA object browser is on when script utility mode is exited, the UIA object browser is also exited.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: UtilityToggleUseMSAA 

Description 

This scripting tool toggles the script utility functions between using cached MSAA and direct MSAA. The default setting used by the script utility functions for the MSAA is cached.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: UtilityToggleXMLDomDocBrowserMode 

Description 

When on a web page, this scripting tool toggles on/off a mode which allows for browsing of the FSXMLDom structure. When this mode is on, keys used for navigating the window structure are hooked to navigate the FSXmlDom structure. The information is displayed in the virtual viewer, which can be read using the cursor keys.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 20.0 and later

Script: UtilityTreeCapture 

Description 

This scripting tool displays the collection of information about the window structure starting with the current script utility window. Pressing Escape dismisses the virtual viewer and returns you to the script utility mode.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Script: UtilityWindowClassReassign 

Description 

This scripting tool is similar to the regular window class reassign dialog. This scripting tool opens the window class reassign dialog containing the class for the window currently referenced by the script utilities.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Virtual Viewer Functions

A Virtual Viewer function processes or returns information about events caused by user interaction either with an application that supports Virtual Viewer activity automatically, or user interaction with JAWS directly on demand. Examples of automatic Virtual Viewer activity include when you launch a browser like Google Chrome, Edge chromium, Firefox, or Internet Explorer, or when you run a PowerPoint slide show. An example of user interaction that causes JAWS to display information in the Virtual Viewer is when you request screen-sensitive help from JAWS on demand.

Many scripts that ship with JAWS involve the use of the Virtual Viewer. However, the focus of the present discussion is about functions that you may call from your own scripts and functions or those that you may overwrite from those in default.jsss or from the built-in functions.

Some examples of Virtual Viewer functions include:

·         EnsureNoUserBufferActive

·         AddHotKeyLinks

·         UserBufferActivate

·         UserBufferDeactivate

·         UserBufferClear

·         UserBufferAddFormattedMessage

·         UserBufferAddText

For a complete listing of Virtual Viewer functions, see the topics in this category book of the Reference Guide.

Additional Resources

For a detailed discussion and numerous code samples for using the Virtual Viewer, see the topic in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

Function: AddHotKeyLinks 

Description 

Adds the standard HotKeyHelp and WindowKeysHelp text and links to the buffer.

Returns 

Type: Void
 Description: no return description.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: EnsureNoUserBufferActive 

Description 

Deactivates the user buffer and, by default, clears its contents.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: True if you do not want to clear the user buffer, false otherwise.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: RedirectToUserBuffer 

Description 

This function formats and sends text to the User Buffer and initiates a sayAll. %modifiers are processed.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: string to format and send to the User Buffer.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RedisplayPrevField 

Description 

Scripts can override this function to redisplay a virtual buffer that was active prior to the display of a help buffer. This function is called if a user buffer is active and its associated window name (returned by UserBufferWindowName) is null. It is called from CloseButton after the current user buffer has been deactivated and immediately before UpALevel exits. If it does not wish to redisplay a field it should call the default version of RedisplayPrevField before returning.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The value of UserBufferPrevWindowName() prior to the call to UserBufferDeactivate().
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: SayFocusAfterExitUserBuffer 

Description 

Used to speak the focus after Escape is used to exit the user buffer. Called by function ExitUserBuffer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: UpdateResultsViewerTitle 

Description 

This function modifies the Results Viewer's Window Title.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The new Window Title.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: UserBufferActivate 

Description 

The User Virtual buffer may be used as a replacement focus for graphical or other windows where the real focus is not meaningful. the User Virtual Buffer maybe populated with text. Each piece of text may have an associated function assigned to it so that when Enter or the Left Mouse button is presssed in this text, the function will be called.

Returns 

Type: Int
 Description: true if the buffer was activated, false if already active.
 

Parameters 

Param 1: 

Type: Int
 Description: true to trap (default) false to allow all keys to be passed to the application.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferActivateEx 

Description 

The User Virtual buffer may be used as a replacement focus for graphical or other windows where the real focus is not meaningful. the User Virtual Buffer maybe populated with text. Each piece of text may have an associated function assigned to it so that when Enter or the Left Mouse button is presssed in this text, the function will be called. This function is like UserBufferActivate except that it accepts parameters to allow a script to identify the user buffer. The passed values are stored for return by UserBufferWindowName, UserBufferWindowType, UserBufferWindowTypeCode, and UserBufferWindowControlID. When UserBufferDeactivate is called these values are copied for return by UserBufferPrevWindowName, etc.

Returns 

Type: Int
 Description: true if the buffer was activated, false if already active.
 

Parameters 

Param 1: 

Type: String
 Description: The name that you want to assign the virtual buffer.
 Include: Required
 

Param 2: 

Type: String
 Description: The window type that you want to assign the virtual buffer. It has to be a string.
 Include: Required
 

Param 3: 

Type: Int
 Description: The type code for the Virtual buffer as an Integer.
 Include: Required
 

Param 4: 

Type: Int
 Description: The Control Id for the Virtual Buffer as an Integer.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: UserBufferAddFormattedMessage 

Description 

Formats a short or long message, based on the output type of ot_user_requested_information and using the supplied replaceable parameters. To be used where a choice of short or long message may be added to the user buffer, and both the short and long message take an identical parameter list.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The long message to be formatted.
 Include: Required
 

Param 2: 

Type: string
 Description: The short message to be formatted.
 Include: Required
 

Param 3: 

Type: string
 Description: The first replaceable parameter in the formatted message.
 Include: Optional
 

Param 4: 

Type: string
 Description: The second replaceable parameter in the formatted message.
 Include: Optional
 

Param 5: 

Type: string
 Description: The third replaceable parameter in the formatted message.
 Include: Optional
 

Param 6: 

Type: string
 Description: The fourthreplaceable parameter in the formatted message.
 Include: Optional
 

Param 7: 

Type: string
 Description: The fifth replaceable parameter in the formatted message.
 Include: Optional
 

Param 8: 

Type: string
 Description: The sixth replaceable parameter in the formatted message.
 Include: Optional
 

Param 9: 

Type: string
 Description: The seventh replaceable parameter in the formatted message.
 Include: Optional
 

Param 10: 

Type: string
 Description: The eighth replaceable parameter in the formatted message.
 Include: Optional
 

Param 11: 

Type: string
 Description: The ninth replaceable parameter in the formatted message.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 13.0 and later

Function: UserBufferAddLink 

Description 

Adds a link to the virtual user buffer using the specified text and function.

Returns 

Type: Int
 Description: true if the text was added, false otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: The text to be added to the user buffer (if this doesn't end in a newline character then one will be added).
 Include: Required
 

Param 2: 

Type: String
 Description: The function name including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
 Include: Required
 

Param 3: 

Type: String
 Description: The name to be used in the list links dialog. If omitted, the text from the first parameter, the user buffer text, is used.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: UserBufferAddText 

Description 

This function adds the text to the Virtual User Buffer along with the specified function. The function's display name is used in the links dialog as a human readable name in place of the code function name.

Returns 

Type: Int
 Description: true if the text was added, false if not.
 

Parameters 

Param 1: 

Type: String
 Description: The text to be added to the buffer (if this doesn't end in a newline character then one will be added)
 Include: Required
 

Param 2: 

Type: String
 Description: the function name including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
 Include: Optional
 

Param 3: 

Type: String
 Description: the name to be used in the list links dialog when it is invoked when the User Virtual Buffer is active.
 Include: Optional
 

Param 4: 

Type: String
 Description: the name of the font used for ins+f when located in this text.
 Include: Optional
 

Param 5: 

Type: Int
 Description: the point size of the font used for ins+f when located in this text.
 Include: Optional
 

Param 6: 

Type: Int
 Description: the attribute flags used for ins+f when located in this text for.
 Include: Optional
 

Param 7: 

Type: Int
 Description: the text colour.
 Include: Optional
 

Param 8: 

Type: Int
 Description: the background color.
 Include: Optional
 

Param 9: 

Type: Int
 Description: add a line break to this string automatically, true by default.
 Include: Optional
 

Param 10: 

Type: int
 Description: Control Type (see WT_XX constants in HJConst.jsh (JAWS 7.0 and higher)
 Include: Optional
 

Param 11: 

Type: int
 Description: Control State, see CTRL_STATE constants in HJConst.jsh (JAWS 7.0 and higher)
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferAddTextResultsViewer 

Description 

This function adds the text to the Virtual User Buffer along with the specified function. The function's display name is used in the links dialog as a human readable name in place of the code function name. This Results Viewer version of the UserBufferAddText function also sends text to the Results Viewer's web control.

Returns 

Type: Int
 Description: true if the text was added, false if not.
 

Parameters 

Param 1: 

Type: String
 Description: The text to be added to the buffer (if this doesn't end in a newline character then one will be added)
 Include: Required
 

Param 2: 

Type: String
 Description: the function name including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
 Include: Optional
 

Param 3: 

Type: String
 Description: the name to be used in the list links dialog when it is invoked when the User Virtual Buffer is active.
 Include: Optional
 

Param 4: 

Type: String
 Description: the name of the font used for ins+f when located in this text.
 Include: Optional
 

Param 5: 

Type: Int
 Description: the point size of the font used for ins+f when located in this text.
 Include: Optional
 

Param 6: 

Type: Int
 Description: the attribute flags used for ins+f when located in this text for.
 Include: Optional
 

Param 7: 

Type: Int
 Description: the text colour.
 Include: Optional
 

Param 8: 

Type: Int
 Description: the background color.
 Include: Optional
 

Param 9: 

Type: Int
 Description: add a line break to this string automatically, true by default.
 Include: Optional
 

Param 10: 

Type: int
 Description: Control Type (see WT_XX constants in HJConst.jsh (JAWS 7.0 and higher)
 Include: Optional
 

Param 11: 

Type: int
 Description: Control State, see CTRL_STATE constants in HJConst.jsh (JAWS 7.0 and higher)
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: UserBufferAddTextWithHTML 

Description 

Add text with legal HTML links where the href attribute points to a source to run via the default application. This is not a full HTML document, you must continue to use the standard font / point size / colors codes from Windows / JAWS rather than HTML, but provides a way to run external links not done via runtime macros. The HTML a tag must be done legally, e.g. a name to properly run. Bad HTML gets ignored

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The text to be added to the buffer. This text may optionally contain HTML hyperlinks and need not be small chunks. While the links are added in as link on their own lines, all remaining newline characters and white space are as you have them.
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE to add a line break at the end of the text. This would result in two if your text ends with one.
 Include: Optional
 

Param 3: 

Type: String
 Description: the name of the font used for ins+f when located in this text.
 Include: Optional
 

Param 4: 

Type: Int
 Description: the point size of the font used for ins+f when located in this text.
 Include: Optional
 

Param 5: 

Type: Int
 Description: the attribute flags used for ins+f when located in this text for.
 Include: Optional
 

Param 6: 

Type: Int
 Description: the text colour.
 Include: Optional
 

Param 7: 

Type: Int
 Description: the background color.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 11.00 and later

Function: UserBufferClear 

Description 

This function clears the User Virtual Buffer ready to be repopulated with text and functions.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferClearResultsViewer 

Description 

This function clears the User Virtual Buffer ready to be repopulated with text and functions. The Results Viewer version of the UserBufferClear function also clears the window contents of the Results Viewer web control.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: UserBufferDeactivate 

Description 

When this occurs, JAWS will track the normal focus rather than allow navigation in the User Virtual Buffer.

Returns 

Type: Int
 Description: true if the buffer was deactivated, false if not active.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: UserBufferDeactivateResultsViewer 

Description 

Closes the Results Viewer.

Returns 

Type: Int
 Description: true if Results Viewer was active and closed, false if not active.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: UserBufferGetFontInfo 

Description 

This function returns the font information set by the user for all text added to the buffer for which this information is not specified.

Returns 

Type: Int
 Description: true if get was successful.
 

Parameters 

Param 1: 

Type: String
 Description: font name.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: point size.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: Int
 Description: attributes of text eg attrib_bold & attrib_italic etc.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: color value for text color.
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: Int
 Description: color value for background color.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: UserBufferGetLength 

Description 

This function returns the number of characters in the User Buffer.

Returns 

Type: Int
 Description: number of characters (including newlines).
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferGetText 

Description 

This function returns the text in the user buffer. It is useful when you want to save and restore the contents.

Returns 

Type: String
 Description: the text.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferIsActive 

Description 

This function determines if the User Virtual Buffer is currently active.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: UserBufferIsActiveResultsViewer 

Description 

Determines if the Results Viewer is active.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: UserBufferIsTrappingKeys 

Description 

This function determines if the User Virtual Buffer is currently trapping keys.

Returns 

Type: Int
 Description: true or false.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferPrevWindowName 

Description 

This function retrieves the window name that was assigned to the previously active virtual buffer. It is the value returned by UserBufferWindowName prior to the last invocation of UserBufferDeactivate.

Returns 

Type: String
 Description: Returns the window name of the previous virtual buffer.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: userBufferPrevWindowType 

Description 

This function retrieves the Window type name that was assigned to the previous virtual buffer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: UserBufferSetFontInfo 

Description 

This function allows user to specify default font name, point size, attribs and text/background colors, so this info doesn't have to be added for each segment of text.

Returns 

Type: Int
 Description: true if set was successful.
 

Parameters 

Param 1: 

Type: String
 Description: font name.
 Include: Required
 

Param 2: 

Type: Int
 Description: point size.
 Include: Required
 

Param 3: 

Type: Int
 Description: attributes of text eg attrib_bold & attrib_italic etc.
 Include: Required
 

Param 4: 

Type: Int
 Description: color value for text color.
 Include: Required
 

Param 5: 

Type: Int
 Description: color value for background color.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: UserBufferWindowName 

Description 

This function retrieves the window name that was specified by the UserBufferActivateEx function.

Returns 

Type: string
 Description: the user buffer window name
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 6.10 and later

Function: userBufferWindowType 

Description 

This function retrieves the Window type name that was specified by the UserBufferActivateEx function.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Voices Functions

A Voices script or function provides or returns information about Voices activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether or how to speak with the currently loaded synthesizer, or perhaps whether to change to a different available synthesizer. JAWS may also utilize information returned by a Voices function for comparison purposes, etc.

Voices information may be about the context voice - the PC cursor voice, the JAWS message voice, and so on. It may be about the speech rate, pitch, synthesizer person, spell decrement or increment pitch, even the language of the synthesizer in use.

Some scripts that ship with JAWS fall into the category of Voices, such as the scripts for changing the voice rate permanently to a slower or faster rate or the script for SelectAVoiceProfile, for example. However, the focus of the present discussion is on functions related to Voices that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Voices functions include:

ChangeVoiceSetting

GetActiveSynthLanguage

ResetVoiceSettings

GetActiveProfileName

GetActiveSynthInfo

For a complete listing of Voices functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script provides information on demand about the currently loaded voice profile. The information is displayed in a Virtual Viewer window for you to read as you prefer. Try running the script after selecting different voice profiles with different installed voice synthesizers such as the default Eloquence synthesizer or some of the Vocalizer synthesizers available for installation from the Freedom Scientific website.

It is assumed that the script and its related function are being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Messages
; For sMsgVoiceInfo, the various replaceable parameters are obvious from their context in the message.
@sMsgVoiceInfo
For Synthesizer %1, the global voice is set to the person called %2.
%2's voluume is %3%, rate is %4, pitch is %5, and punctuation level is %6.
%2's language is %7 and the default voice profile for %2 is %8.
But the %1 synthesizer can also read in the following installed languages:
%9.
@@
EndMessages
String Function GetPunctuationName (Int iPuncLevel)
If iPuncLevel == 0
            Return cmsgPunctuationNone
ElIf iPuncLevel == 1
            Return cmsg278_l ; Some
ElIf iPuncLevel == 2
            Return cmsg279_l ; Most
ElIf iPuncLevel == 3
            Return cmsg280_l ; All
EndIf
EndFunction
Script MySynthInfoTest ()
Var
            String sShortName,
            String sLongName,
            String sDriver,
            String sLanguage,
            Int iVolume,
            Int iRate,
            Int iPitch,
            Int iPuncLevel,
            String sPunctuation,
            String sPerson,
            String sLanguages,
            String sDefaultProfileName,
            String sText ; needed to format the string from all the replaceable parameters in sMsgVoiceInfo
If ! GetActiveSynthInfo (sShortName, sLongName, sDriver)
            Return
EndIf
sLanguage = GetActiveSynthLanguage ()
sDefaultProfileName = GetDefaultProfileName ()
; The following call obtains information by reference
; for the context voice passed to the function in the first parameter.
GetVoiceParameters (vctx_global,iVolume, iRate, iPitch, iPuncLevel, sPerson)
; Convert punctuation integer into user-friendly name.
sPunctuation = GetPunctuationName (iPuncLevel)
; Get list of installed languages.
sLanguages = GetSynthLanguages (cscBufferNewLine) ; Parse the language list so each one is on a separate line.
sText = FormatString (sMsgVoiceInfo,
            sLongName,
            sPerson,
            IntToString (iVolume),
            IntToString (iRate),
            IntToString (iPitch),
            sPunctuation,
            sLanguage,
            sDefaultProfileName,
            sLanguages)
EnsureNoUserBufferActive ()
UserBufferAddFormattedMessage (sText, sText)
UserBufferAddText (cscBufferNewLine + cmsgBuffExit)
UserBufferActivate ()
JAWSTopOfFile ()
SayAll ()
EndScript

Additional Resources

For more details on working with the virtual viewer, see the summary in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

Function: ChangeVoiceSetting 

Description 

Changes the setting for the active voice. This depends on the voice parameter and direction (up or down) in which to change the setting. The setting will be increased or decreased by 10 percent of the range for the given parameter. If True is passed to the SayAll parameter, there will be an audible indication that the setting has changed. This is the main control center for changing voice parameters.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the constant definition for the voice parameter to set. These are found in HjConst.jsh. Examples of such are V_RATE and V_PITCH.
 Include: Required
 

Param 2: 

Type: Int
 Description: Enter the constant definition for the direction to change the setting. These are found in HjConst.jsh and are V_UP and V_DOWN.
 Include: Required
 

Param 3: 

Type: Int
 Description: Enter true to bypass the audio indication, or false to have the function announce the setting change.
 Include: Required
 

Param 4: 

Type: int
 Description: True to save the new voice rate; default is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DecreaseVoicePitch 

Description 

When this key is pressed, the pitch of the active voice will be decreased. JAWS will announce "Lower" with each press of the keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DecreaseVoiceRate 

Description 

This script is deprecated, and is here for backwards compatibility. It calls the new DecreaseVoiceRateTemporary script.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: DecreaseVoiceRatePermanent 

Description 

Decreases the active voice rate and saves the new rate to the current speech profile. The touch gesture for this command is available when the gesture mode is set to Speech Settings.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: DecreaseVoiceRateTemporary 

Description 

When this key is pressed, the rate of the active voice will be temporarily decreased. JAWS will announce "Slower" with each press of the keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: DecreaseVoiceVolume 

Description 

When this key is pressed, the volume of the active voice will be decreased. JAWS will announce "Softer" with each press of the keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetActiveProfileIndex 

Description 

Returns the index of the currently active voice profile.

Returns 

Type: int
 Description: The index of the currently active voice profile.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetActiveProfileName 

Description 

Returns the name of the currently active voice profile.

Returns 

Type: string
 Description: The name of the currently active voice profile.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetActiveSynthInfo 

Description 

This function retrieves the active synthesizer's short name, long name and driver.

Returns 

Type: Int
 Description: TRUE if synth information was retrieved, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: the short name of the synth as defined in SynthNShortName in JFW.ini.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: String
 Description: the long name of the synth as defined in SynthNLongName in JFW.ini.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: the driver name of the synth as defined in SynthNDriver in JFW.ini.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetActiveSynthLanguage 

Description 

This function gets the name of the synth language in use.

Returns 

Type: String
 Description: the language name.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetDefaultProfileIndex 

Description 

Returns the index of the default voice profile.

Returns 

Type: int
 Description: The index of the default voice profile.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

Function: GetDefaultProfileName 

Description 

Returns the name of the default voice profile.

Returns 

Type: string
 Description: The name of the default voice profile.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetDefaultSynthInfo 

Description 

This function retrieves the default synthesizer's short name, long name and driver.

Returns 

Type: Int
 Description: TRUE if synth information was retrieved, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: the short name of the synth as defined in SynthNShortName in JFW.ini.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: String
 Description: the long name of the synth as defined in SynthNLongName in JFW.ini.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: String
 Description: the driver name of the synth as defined in SynthNDriver in JFW.ini.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: GetSynthLanguages 

Description 

This function retrieves a list of the currently active synthesisers supported languages.

Returns 

Type: String
 Description: the list of synthesiser languages.
 

Parameters 

Param 1: 

Type: String
 Description: the delimiter to use to separate the languages in the list.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetSynthPitchRange 

Description 

Assigns the minimum and maximum possible pitch settings to the parameters taken by reference.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type the variable to receive the minimum pitch seting for your synthesizer.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: Type the variable to receive the maximum pitch setting for your synthesizer.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetSynthRateRange 

Description 

Assigns the minimum and maximum possible rate settings to the parameters taken by reference.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type the variable to receive the minimum rate setting for your synthesizer.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: Type the variable to receive the maximum rate setting for your synthesizer.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetVoiceParameters 

Description 

Retrieves the parameters for the voice context you specify. These include Volume, Rate, Pitch, Punctuation and person.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the variable to receive the voice volume setting.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: Int
 Description: Type the variable to receive the voice rate setting.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: Int
 Description: Type the variable to receive the voice pitch setting.
 Include: Required
 * Returns data by reference
 

Param 5: 

Type: Int
 Description: Type the variable to receive the voice punctuation setting.
 Include: Required
 * Returns data by reference
 

Param 6: 

Type: String
 Description: Type the variable to receive the voice person setting.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetVoicePerson 

Description 

Using the Voice Context name, the person for the active voice is returned.

Returns 

Type: String
 Description: The current voice person setting.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: This parameter is optional. Setting a value of true, saves the voice settings to the application file. The default is to save it in the default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetVoicePitch 

Description 

Using the Voice Context name, the pitch setting for the active voice is returned.

Returns 

Type: Int
 Description: The current voice pitch setting.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: This parameter is optional. Setting a value of true, saves the voice settings to the application file. The default is to save it in the default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetVoiceProfileCount 

Description 

Returns the count of available voice profiles.

Returns 

Type: int
 Description: The the count of available voice profiles.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 10.0 and later

Function: GetVoiceProfileNames 

Description 

Returns a "\007" delimited list of profile names.

Returns 

Type: string
 Description: The delimited list of voice profile names.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.10 and later

Function: GetVoicePunctuation 

Description 

Using the Voice Context name, the punctuation setting for the active voice is returned.

Returns 

Type: Int
 Description: The current voice punctuation setting.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: This parameter is optional. Setting a value of true, saves the voice settings to the application file. The default is to save it in the default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetVoiceRate 

Description 

Using the Voice Context name, the rate setting for the active voice is returned.

Returns 

Type: Int
 Description: The current voice rate setting.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: This parameter is optional. Setting a value of true, saves the voice settings to the application file. The default is to save it in the default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetVoiceVolume 

Description 

Using the Voice Context name, the volume setting for the active voice is returned.

Returns 

Type: Int
 Description: The current voice volume setting.
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: This parameter is optional. Setting a value of true, saves the voice settings to the application file. The default is to save it in the default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetVoiceVolumeRange 

Description 

Assigns the minimum and maximum possible volume settings to the parameters taken by reference.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type the variable to receive the minimum volume setting for your synthesizer.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: Int
 Description: Type the variable to receive the maximum volume setting for your synthesizer.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HasUserDefinedVoiceProfiles 

Description 

Returns TRUE if there are user defined voice profiles. Returns 0 otherwise.

Returns 

Type: Int
 Description: Returns TRUE if there are user defined voice profiles. Returns 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.10 and later

Script: IncreaseVoicePitch 

Description 

When this key is pressed, the pitch of the active voice will be increased. JAWS will announce "Higher" with each press of the keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: IncreaseVoiceRate 

Description 

This script is deprecated, and is here for backwards compatibility. It calls the new IncreaseVoiceRateTemporary script.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: IncreaseVoiceRatePermanent 

Description 

Increases the active voice rate and saves the new rate to the current speech profile. The touch gesture for this command is available when the gesture mode is set to Speech Settings.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Script: IncreaseVoiceRateTemporary 

Description 

When this key is pressed, the rate of the active voice will be temporarily increased. JAWS will announce "Faster" with each press of the keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 13.0 and later

Script: IncreaseVoiceVolume 

Description 

When this key is pressed, the volume of the active voice will be increased. JAWS will announce "Louder" with each press of the keystroke.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: InFSVoiceSettingsDialogBox 

Description 

Used to determine whether or not one of the dialog boxes that are used to modify the voice settings is currently open.

Returns 

Type: Int
 Description: 1 if one of the dialog boxes that are used to modify the voice settings is currently open. 0 otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 9.0 and later

Function: InitializeGlobalVoiceSettings 

Description 

Each global setting variable will take on the corresponding voice setting for the global voice context.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the constant definition or a variable to represent the voice parameter to set.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsSpeechOff 

Description 

Used to determine if the synthesizer is muted.

Returns 

Type: Int
 Description: TRUE if the synthesizer is muted. False if the synthesizer is not muted.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: MuteSynthesizer 

Description 

When speech on demand is enabled, toggles between full speech and speech on demand. Otherwise, toggles between full speech and no speech.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: MuteSynthesizerToggle 

Description 

If using a software synthesizer, it maybe a good idea to mute JAWS when using applications such as VoiceChat programs. This will allow the sound card to be available. Running the script once will cause JAWS to be silenced. Running the script the second time will turn the speech back on. You can use the "Adjust JAWS Verbosity" dialog to mute JAWS. Next time you press the keystroke to open the dialog, it will unmute JAWS without bringing up the dialog.

Returns 

Type: String
 Description: description of value to be displayed as value of Mute Synth option.
 

Parameters 

Param 1: 

Type: Int
 Description: true if current value is to be returned, false if value is to be updated and returned.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: NullAllGlobalSettings 

Description 

By default, this function is used to reset all the settings for all the voices. When set to true, the voices will all take on the setting of the voice parameter for the voice whose context you specify. See its use in SetGlobalVoiceSettings and ResetVoiceSettings.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: The voice parameter to be reset.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ResetSynth 

Description 

Reinitializes the synthesizer with the proper volume, rate, and pitch settings. Used to bring the synthesizer back to normal if it has gotten out of sync with JAWS.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: ResetVoiceSettings 

Description 

Resets the voice setting back to its normal state prior to manipulation of the voice. This is only true if you have taken care to call the SetVoiceGlobalSettings before you started manipulating the voice. After the settings are restored, the globals are set to null.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: RestoreVoiceSettings 

Description 

If you changed your voice setting with a keystroke, such as Alt+Control+PAGE UP or Alt+Control+PAGE DOWN for voice rate, press this keystroke to restore your voice setting to its normal state.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayAllInProgress 

Description 

determines if sayAll is active.

Returns 

Type: Int
 Description: TRUE or FALSE
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayUsingVoice 

Description 

Speak a string of text using a specific synthisizer voice.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: Type in the constant representing the voice to be used. These constants are defined in the file hjconst.jsh and are listed below: VCTX_GLOBAL, VCTX_MESSAGE, VCTX_KEYBOARD, VCTX_SCREEN, VCTX_PCCURSOR, VCTX_JAWSCURSOR
 Include: Required
 

Param 2: 

Type: String
 Description: Type the text that is to be spoken, or specify a variable name or script function that can provide the required text string. Text strings that are typed must be enclosed within quotation marks.
 Include: Required
 

Param 3: 

Type: Int
 Description: Type in one of the following constants that represent the output mode to be used: OT_STRING, OT_LINE, OT_WORD, OT_CHAR, OT_FIELD, OT_CHUNK, OT_SAYALL, OT_SPELL, OT_PHONEMIC, OT_APP_NAME, OT_DIALOG_NAME, OT_CONTROL_NAME, OT_MDI_NAME, OT_WINDOW_NAME, OT_GRAPHIC, OT_HELP, OT_STATUS, OT_SELECTED, OT_TEXT, OT_POSITION, OT_STATIC, OT_FONT, OT_KEYBOARD, OT_CURSOR, OT_DEBUG.
 Include: Required
 

Param 4: 

Type: Int
 Description: Not available yet
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SelectAVoiceProfile 

Description 

All the voice profiles you have defined will be presented in a list. Make your selection and press enter. This works like the change voice profile option in the JAWS User Interface.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 10.00 and later

Function: SetActiveVoiceProfileByIndex 

Description 

Sets the active voice profile to the one with the given index.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: The index of a voice profile.
 Include: Required
 

Param 2: 

Type: Int
 Description: This optional parameter was added in JAWS 10.0. The default value for the parameter is FALSE. This parameter controls whether or not JAWS makes the change permanent by saving the change in active voice profile to Default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SetActiveVoiceProfileByName 

Description 

Sets the active voice profile to the one with the given name.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: string
 Description: The name of a voice profile.
 Include: Required
 

Param 2: 

Type: Int
 Description: This optional parameter was added in JAWS 10.0. The default value for the parameter is FALSE. This parameter controls whether or not JAWS makes the change permanent by saving the change in active voice profile to Default.jcf.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: SetAllVoicesToGlobals 

Description 

Resets all voice parameters to their former position. Pass the parameter whose settings you wish to reset.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Type the constant definition representing the voice parameter to be reset.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetSynth 

Description 

Causes JFW to switch to the specified synthesizer.

Returns 

Type: Int
 Description: TRUE if change was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: The short name of the synthesizer found in JFW.INI. This name must be in quotes. For example, you can find the short name for Eloquence by looking in JFW.INI for the entry "Synth1Name=eloq." You would then use the line SetSynth("eloq") in your script or function.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SetSynthLanguage 

Description 

For synthesizers that support multiple languages, changes the synthesizer to the specified language.

Returns 

Type: Int
 Description: TRUE if change was successful, FALSE otherwise.
 

Parameters 

Param 1: 

Type: String
 Description: Enter the language to be switched to, exactly as it appears in the Synthesizer Language submenu of the Language menu. Example; SetSynthLanguage ("American English")
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SetVoiceGlobalSettings 

Description 

The setting for the given parameter and voice context are stored in global variables. If this is not done before manipulating the given parameter for the given voice context, it will be impossible to restore it.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the constant representing the voice parameter to be stored. These are found in HjConst.jsh. Examples of such are V_RATE and V_PITCH
 Include: Required
 

Param 2: 

Type: String
 Description: Enter a variable, string literal or constant definition representing the voice context name to be stored.
 Include: Required
 

Param 3: 

Type: Int
 Description: Enter a variable or integer representing the current setting for the parameter of the given voice context.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SetVoiceParameters 

Description 

sets the parameters for the voice context you specify. These include Volume, Rate, Pitch, Punctuation and person.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type the variable to setthe voice volume setting.
 Include: Required
 

Param 3: 

Type: Int
 Description: Type the variable to set the voice rate setting.
 Include: Required
 

Param 4: 

Type: Int
 Description: Type the variable to set the voice pitch setting.
 Include: Required
 

Param 5: 

Type: Int
 Description: Type the variable to set the voice punctuation setting.
 Include: Required
 

Param 6: 

Type: String
 Description: Type the variable to set the voice person setting.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetVoicePerson 

Description 

Sets the person of the voice you specify to the amount passed to the second parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: String
 Description: The new person to which you wish to set the voice context.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetVoicePitch 

Description 

Sets the pitch of the voice you specify to the amount passed to the second parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: The new value to which you wish to set the pitch.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetVoicePunctuation 

Description 

Sets the punctuation of the voice you specify to the amount passed to the second parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: The new value to which you wish to set the punctuation.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 4.51-12.0  

2.    JAWS 13.0 and later  

 Function: SetVoiceRate 

Description 

Sets the rate of the voice you specify to the amount passed to the second parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: The new value to which you wish to set the rate.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-12.0

 Function: SetVoiceRate 

Description 

Sets the rate of the voice you specify to the amount passed to the second parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: The new value to which you wish to set the rate.
 Include: Required
 

Param 3: 

Type: int
 Description: Use true if the speech rate change should be permanent, false if it should be temporary. Default value is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 13.0 and later

Function: SetVoiceSetting 

Description 

Sets the parameter of the voice context you specify to the desired setting. It is recommended that you use ChangeVoiceSetting if you simply wish to change the setting. See ChangeVoiceSetting if you want to use this function in another script or function.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: Enter the constant definition for the voice parameter you wish to set. A listing of these are found in HjConst.jsh. Examples of such are: V_PITCH and V_RATE
 Include: Required
 

Param 2: 

Type: Int
 Description: Enter a variable or the integer for the new setting for your parameter. See ChangeVoiceSetting to see the calculations we use for voice changes.
 Include: Required
 

Param 3: 

Type: String
 Description: Enter a variable or the string literal representing the Voice Context name.
 Include: Required
 

Param 4: 

Type: Int
 Description: Enter the value V_UP or V_DOWN to alert the function in which direction this setting is moving. This is only used to speak the appropriate message as the setting changes.
 Include: Required
 

Param 5: 

Type: Int
 Description: Enter true if you want the function to perform as though SayAll were in progress, false otherwise. If true, no announcement will be spoken when the voice changes.
 Include: Required
 

Param 6: 

Type: int
 Description: True to save the new voice rate; default is false.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetVoiceVolume 

Description 

Sets the volume of the voice you specify to the amount passed to the second parameter.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: String
 Description: The name of the voice context as defined in HjConst.jsh with the prefix VTX_.
 Include: Required
 

Param 2: 

Type: Int
 Description: The new value to which you wish to set the volume.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpeechInUse 

Description 

Checks to see if speech output is being used.

Returns 

Type: Int
 Description: TRUE if synthesizer is active, FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SpeechOff 

Description 

Causes the synthesizer to be muted. This is particularly useful when you need to free the synthesizer so that a wave file can be played. You can reverse this action with SpeechOn

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: True if speech is to be turned off and stay off until specifically turned back on with the SpeechOn(True) method, false otherwise. Setting this parameter to true will allow speech to remain off even if an application switches voice profiles. Note that true will cause SpeechOff to respond more slowly since the synthesizer is unloaded, so if you are temporarily turning speech off then back on again in a script process then do not set this parameter to True. This optional parameter is available as of JAWS 11 update 1.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SpeechOn 

Description 

UnMutes the synthesizer. Reverses the action of SpeechOff.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: int
 Description: True if speech is to be turned back on after having been turned off by the SpeechOff(true) method, false otherwise. This optional parameter is available as of JAWS 11 update 1.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SpeechOnDemandToggle 

Description 

Toggles between Speech on Demand and Speech Mute. Not available in Full Speech mode. When Speech on Demand is enabled, only specific actions designed for reading content will be allowed to speak.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 19.00 and later

Function: StopSpeech 

Description 

Silences the synthesizer. Same as pressing the CTRL key.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: StopSpeech 

Description 

Silences speech. If you press this keystroke during SayAll, speech is stopped and the cursor will land on the last word spoken.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 6.20 and later

Function: UseSapi5ForSayAll 

Description 

This function returns TRUE if SAPI 5 should be used for Say All and returns FALSE otherwise.

Returns 

Type: Int
 Description: TRUE if SAPI 5 should be used for Say All. FALSE otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Window Functions

A Window function returns information about a specific window within the Windows hierarchy, such as the window's name, class, type, etc. JAWS uses this information to determine whether to speak and display anything about the window in Braille.

Some examples of Window functions include:

·         GetFocus

·         GetCurrentWindow

·         GetFocusRect

·         FindWindow

·         FindTopLevelWindow

·         FindDescendantWindow

·         IsDescendedFromWindow

·         FocusFollowsMouse

For a complete listing of Window functions, see the topics in this category book of the Reference Guide.

Note: SDM (Standard Dialog Manager) dialogs are handled somewhat differently from most Microsoft Window controls. They are discussed in the Object Model and MSAA category summary topic page of the Reference Guide. These legacy types of dialogs are seldom used anymore by Microsoft Office applications.

Code Sample

The below code sample checks for a dialog to be active. If so, then the GetWindowClass function is called. If the class is known, JAWS speaks and flashes it in Braille.

Since JAWS 11, the GetFocus function can provide optionally by reference helpful MSAA information about the current object ID and child ID of the current object. If this information is available, the screen reader also speaks and flashes it in Braille.

 If the information is not available, the screen reader speaks and flashes an error message.

 

To set up the example, simply open any dialog in Notepad and run the script from any control. It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script TestWindowClass ()
Var
            String sClass,
            Int iObjID,
            Int iObjChildID,
            String msgClassNotFound
msgClassNotFound = "I couldn't find the class."
If DialogActive ()
            sClass = GetWindowClass (GetFocus (iObjID, iObjChildID))
            If sClass != cscNull
                        SayMessage (Ot_User_Requested_information, sClass + cscSpace + IntToString (iObjID) + cscSpace + IntToString (iObjChildID))
                        Return
            Else
                        SayMessage (ot_error, msgClassNotFound) ; no class obtained
            EndIf
EndIf
EndScript

Additional Resources

A full discussion about the Microsoft Windows architecture and hierarchy, as well as SDM dialog controls is outside the scope of the Freedom Scientific Developer Network. For details on working with these topics, refer to the Microsoft Developer Network at:

ChildWindow Class (System.Windows.Controls) and Appendix B: Standard Dialog Manager Support (Windows).

Script: ActivateSearchBox 

Description 

Activates the Search Box in QuickSettings and Settings Center. Outside of these windows, the keystroke is passed to the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 13.00 and later

Function: CheckForReminderDialog 

Description 

If the window handle received is the Reminder dialog, then it is assigned to a global variable for use by the ToggleOutlookReminder script.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Enter the handle of the window to check.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Script: CloseDocumentWindow 

Description 

Applications with a Multiple Document Interface can have more than one document or workspace open. This keystroke closes one of these windows without exiting the application.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: DoChildWindows 

Description 

Speaks the window information for each child window at the same logical level.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the starting window or a function that can provide it.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: DoesWindowBelongToFocusedThread 

Description 

Determines if hwnd belongs to the same thread as the window with focus.

Returns 

Type: Int
 Description: TRUE if hwnd belongs to the same thread as the app with focus, FALSE otherwise
 

Parameters 

Param 1: 

Type: handle
 Description: Handle of window to check.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 12.0 and later

Function: EnumerateChildWindows 

Description 

This function calls a specified function for each child of the starting window. This function must be defined as: int function SomeName(handle hwnd). This function must return true if the enumeration should continue or false if it should stop.

Returns 

Type: Int
 Description: true if the enumeration completed, false if it was terminated by the callback function returning false for a window.
 

Parameters 

Param 1: 

Type: Handle
 Description: starting handle.
 Include: Required
 

Param 2: 

Type: String
 Description: The name of the script function to call for each child window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindDescendantWindow 

Description 

Find the descendant window with the specified Control ID.

Returns 

Type: Handle
 Description: The handle of the window that is found. This is 0 if the window is not found.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the parent window that will serve as the starting point for the search.
 Include: Required
 

Param 2: 

Type: Int
 Description: The Control ID of the window for which you are searching.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: FindTopLevelWindow 

Description 

Find the top level window with the specified window class and/or window name. If you do not wish to search based on one of the arguments, use "" for that argument

Returns 

Type: Handle
 Description: The handle of the window that is found. This is 0 if the window is not found.
 

Parameters 

Param 1: 

Type: String
 Description: The window class that will be used to find the desired window.
 Include: Required
 

Param 2: 

Type: String
 Description: The window name that will be used to find the desired window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: FindWindow 

Description 

This function starts at the specified window and searches all of its children to find one with the specified Class or Window Name. If the handle is 0 then a top level window is sought (ie equivalent to calling FindTopLevelWindow). Leave the name blank to find a window with a class but any name or leave the class blank to find a window with any class but a particular name.

Returns 

Type: Handle
 Description: the window handle of the found window.
 

Parameters 

Param 1: 

Type: Handle
 Description: starting window.
 Include: Required
 

Param 2: 

Type: String
 Description: class name to search for.
 Include: Required
 

Param 3: 

Type: String
 Description: the name of the window to find.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: findWindowByType 

Description 

This function allows the scripter to find a child window of a given window with a specified window type.

Returns 

Type: handle
 Description: the handle of the window with the specified type if found, or 0 if no window with the specified type exists under the starting window's hierarchy.
 

Parameters 

Param 1: 

Type: handle
 Description: the starting window
 Include: Required
 

Param 2: 

Type: int
 Description: the window type (one of the WT_ constants from hjconst.jsh).
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.00 and later

Function: FindWindowWithClassAndId 

Description 

this function is useful when control IDs are not unique in an application and you need to find a child window with a given control ID and class name.

Returns 

Type: handle
 Description: the handle of the window if found, NULL otherwise
 

Parameters 

Param 1: 

Type: handle
 Description: starting handle
 Include: Required
 

Param 2: 

Type: string
 Description: the class name
 Include: Required
 

Param 3: 

Type: int
 Description: the control ID of the child
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 6.10 and later

Function: FocusWindowSupportsUIA 

Description 

Determines if the focus window supports UIA.

Returns 

Type: int
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: GetAppletName 

Description 

Retrieves the name of the applet of the requested window handle.

Returns 

Type: String
 Description: The name of the applet.
 

Parameters 

Param 1: 

Type: Handle
 Description: Window of interest. If not included, then the current window is used.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetAppMainWindow 

Description 

Determines the window handle for the Main window of the active application.

Returns 

Type: Handle
 Description: Provides the window handle of the application's Main window.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window. GetCurrentWindow is often used as the parameter.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetBottomLineOfWindow 

Description 

Attempts to retrieve the text from the bottom line of the dialog or application. The bottom line of the application is usually the status line of the active window.

Returns 

Type: string
 Description: The text from the bottom line of the dialog or application, if it could be retrieved.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: GetControlID 

Description 

Determines the Control ID for the specified child window in a dialog box. Each list box, edit field, radio button, etc. in a dialog has a unique control ID number. Child windows that contain static text all have the same control ID.

Returns 

Type: Int
 Description: Provides a numeric ID for the specified dialog control, or returns 0 when a dialog box is not active.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function provides information for the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide a window handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetControlIDString 

Description 

Retrieves the ID string for a control on a .Net Windows Form. This string is actually the name of the variable used by the programmer to name the field so it may or may not be useful. GetControlID is not useful in .Net applications because numeric control IDs are automatically assigned by the runtime and are

Returns 

Type: String
 Description: a control's ID String
 

Parameters 

Param 1: 

Type: Handle
 Description: This function provides information for the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide a window handle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.2 and later

Function: GetCurrentControlID 

Description 

Determines the control ID of the active child window in a dialog box. Each list box, edit field, radio button, and so on, in a dialog has a unique control ID number. Child windows that contain static text all have the same control ID. This function performs the same task as GetControlID but it does not require a window handle.

Returns 

Type: Int
 Description: Provides a numeric ID for the active dialog control, or returns 0 when a dialog box is not active.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetCurrentWindow 

Description 

Determines the window handle for the window that contains the active cursor. In contrast, the GetFocus function uses an analytic process to find the window that currently has the focus, regardless of which cursor is active.

Returns 

Type: Handle
 Description: Provides a handle for the active window.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetDocumentLoadState 

Description 

This is currently supported in applications that use the Freedom Scientific Document Server module.

Returns 

Type: int
 Description: One of the values listed in hjconst.h under Document Load States.
 

Parameters 

Param 1: 

Type: HANDLE
 Description: The window at the document whose state is to be queried.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: GetFirstChild 

Description 

Determines the first child window that may have been created by a specific parent window. This function is useful when you wish to move down through the stack of window handles.

Returns 

Type: Handle
 Description: Provides the handle of the first child window or returns a value of 0 when a child window cannot be found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetFirstWindow 

Description 

Provides the handle for the first window that is at the same logical level as a specified window handle. It is used to get to the beginning point of a series of windows.

Returns 

Type: Handle
 Description: Provides the handle for the first window that is at the same logical level or returns 0 when a window is not found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFocus 

Description 

Obtains the window handle for the window that has the focus. It always seeks the PC cursor or highlighted item that has the focus. It does not take into account which cursor is active. In contrast, the GetCurrentWindow function is less sophisticated. It simply obtains the handle for the window in which the active cursor is located.

Returns 

Type: Handle
 Description: Provides the window handle for the window with the focus.
 

Parameters 

Param 1: 

Type: int
 Description: MSAA object ID for the object with focus. Available in Jaws 11 update 1 and later.
 Include: Optional
 

Param 2: 

Type: int
 Description: MSAA child ID for the object with focus. Available in Jaws 11 update 1 and later.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFocusRect 

Description 

Gets the coordinates of a focus rectangle.

Returns 

Type: Int
 Description: TRUE if the focus rectangle is successfully retrieved.
 

Parameters 

Param 1: 

Type: Int
 Description: the handle of the window containing the focus rectangle.
 Include: Required
 

Param 2: 

Type: Int
 Description: the left edge of the focus rectangle after the function is called.
 Include: Required
 

Param 3: 

Type: Int
 Description: the right edge of the focus rectangle after the function is called.
 Include: Required
 

Param 4: 

Type: Int
 Description: the top edge of the focus rectangle after the function is called.
 Include: Required
 

Param 5: 

Type: Int
 Description: the bottom edge of the focus rectangle after the function is called.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFocusRectBottom 

Description 

Gets the coordinates of the bottom edge of a focus rectangle.

Returns 

Type: Int
 Description: Screen coordinate of bottom edge of focus rectangle.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window containing the focus rectangle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFocusRectLeft 

Description 

Gets the coordinates of the left edge of a focused rectangle.

Returns 

Type: Int
 Description: Screen coordinate of left edge of focus rectangle.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window containing the focus rectangle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFocusRectRight 

Description 

Gets the coordinates of the right edge of a focus rectangle.

Returns 

Type: Int
 Description: Screen coordinate of right edge of focus rectangle.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window containing the focus rectangle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetFocusRectTop 

Description 

Gets the coordinates of the top edge of a focus rectangle.

Returns 

Type: Int
 Description: Screen coordinate of top edge of focus rectangle.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window containing the focus rectangle.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetForegroundWindow 

Description 

Retrieves the handle to the current foreground window. This is generally the main window of the active application, but can sometimes be the handle of a dialog box. Marginally faster than GetAppMainWindow.

Returns 

Type: Handle
 Description: The handle of the foreground window.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetItemRect 

Description 

Gets the bounding rectangle surrounding the specified item or items. Items can be combined using the bitwise (|) operator. When two or more items are combined, the resulting rectangle enclosed each of the items.

Returns 

Type: Int
 Description: TRUE if the bounding rectangle is successfully retrieved.
 

Parameters 

Param 1: 

Type: Int
 Description: The x coordinate of the point where the target item exists. If nX and nY are 0, then the current item rectangle will be retrieved.
 Include: Required
 

Param 2: 

Type: Int
 Description: The y coordinate of the point where the target item exists. If nX and nY are 0, then the current item rectangle will be retrieved.
 Include: Required
 

Param 3: 

Type: Int
 Description: The left edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 4: 

Type: Int
 Description: The right edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 5: 

Type: Int
 Description: The top edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 6: 

Type: Int
 Description: The bottom edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 7: 

Type: Int
 Description: The item type. Can be IT_CHUNK, IT_WORD, IT_CHAR, IT_FIELD, IT_COLORFIELD, IT_PROMPT, IT_CARET, IT_BOUNDINGRECT, IT_MAGNIFIED, IT_LINE, IT_PRIOR_WORD, IT_NEXT_WORD, or IT_HIGHLIGHT. Types can be combined using the bitwise (|) operator. For example, if you want to get the rectangle that surrounds an edit control and its prompt, use IT_BOUNDINGRECT | IT_PROMPT for this parameter.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetLastWindow 

Description 

Provides the handle for the last window that is at the same logical level as a specified window handle. It is used to get to the end point of a series of windows.

Returns 

Type: Handle
 Description: Provides the handle for the last window that is at the same logical level or returns 0 when a window is not found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: GetNavModuleVersionInfo 

Description 

Retrieves information about the nav module responsible for the passed in window handle.

Returns 

Type: String
 Description: String describing the nav module that is handling the passed in window.
 

Parameters 

Param 1: 

Type: Handle
 Description: Window of interest
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.00 and later

Function: GetNextWindow 

Description 

Provides the next window handle in a series of window handles that are all at the same logical level. It is used to move across a list of window handles.

Returns 

Type: Handle
 Description: Provides the handle of the next window in the stack or returns a value of 0 when another window cannot be found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetOwningAppName 

Description 

Determines the executable name and extension of the application to which a window belongs.

Returns 

Type: string
 Description: the executable name and extension of the application which owns the window.
 

Parameters 

Param 1: 

Type: handle
 Description: The window to test for its owning application.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 8.00 and later

Function: GetOwningAppNameAndVersionNumberForWindow 

Description 

Retrieves the path and major version number for the application which owns the specified window.

Returns 

Type: int
 Description: True if an application path and its major version number could be retrieved, false otherwise.
 

Parameters 

Param 1: 

Type: handle
 Description: The specified handle for which the information is to be retrieved.
 Include: Required
 

Param 2: 

Type: string
 Description: byRef/sApp The full path to the application.
 Include: Required
 

Param 3: 

Type: int
 Description: byRef/majorVersion The major version number of the application.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 16.00 and later

Function: GetParent 

Description 

Determines which window created a specified child window. For Example, when a dialog box pops up, it could be used to determine the window handle of the window that created the dialog box. It can be used to move up through a list of window handles in order to get to a specific window.

Returns 

Type: Handle
 Description: This is the handle of the parent window.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetPriorWindow 

Description 

Provides the prior window handle in a series of window handles at the same logical level. It is used to move across a list of window handles.

Returns 

Type: Handle
 Description: Provides the handle of the prior window in the stack or returns a value of 0 when another window cannot be found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetRealWindow 

Description 

Moves up through the list of window handles in search of a real window. A real window is one that has a title.

Returns 

Type: Handle
 Description: Provides the handle of the real window.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetRibbonStatus 

Description 

This function returns the status and descriptive information about the Microsoft Ribbon in the current application. It will work with and without the virtual ribbon enabled; but, with the virtual ribbon enabled, unless the real focus is on a lower ribbon item, it will not obtain lower ribbon information when the virtual cursor is reviewing lower ribbon objects since they don't really have focus.

Returns 

Type: int
 Description: TRUE or FALSE, depending on whether the ribbon data was obtained for the currently focused application.
 

Parameters 

Param 1: 

Type: int
 Description: The state is 0 when the focus is not in the ribbon but the ribbon is expanded, 1 the focus is in the upper ribbon, 2 the focus is in the lower ribbon, 3 the ribbon is collapsed. If the state is 0, 1 or 2, the ribbon is expanded, if it is 3, it is collapsed.
 Include: Required
 * Returns data by reference
 

Param 2: 

Type: string
 Description: The name of the active tab if the upper or lower ribbon has focus.
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: string
 Description: The name of the lower ribbon group if a lower ribbon group item has focus.
 Include: Required
 * Returns data by reference
 

Param 4: 

Type: string
 Description: The description of the group of the lower ribbon item with focus.
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Function: GetScrollBarInfo 

Description 

Retrieves information about a ScrollBar

Returns 

Type: int
 Description: The current position of the thumb on the ScrollBar
 

Parameters 

Param 1: 

Type: Handle
 Description: handle to a ScrollBar window or NULL to use the window containing the active cursor
 Include: Required
 

Param 2: 

Type: int
 Description: the minimum value of the ScrollBar
 Include: Required
 * Returns data by reference
 

Param 3: 

Type: int
 Description: the maximum value of the ScrollBar
 Include: Required
 * Returns data by reference
 

Version 

This function is available in the following releases:

1.    JAWS 11.0 and later

Function: GetTextInFocusRects 

Description 

Retrieves the contents of all focus rectangles into a single buffer.

Returns 

Type: String
 Description: The contents of the focus rectangles.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetTextInRect 

Description 

This function gets text inside a rectangle specified by four points on the screen representing the top, bottom, left, and right boundaries of the rectangle.

Returns 

Type: String
 Description: Text inside the rectangle.
 

Parameters 

Param 1: 

Type: Int
 Description: Left edge of rectangle.
 Include: Required
 

Param 2: 

Type: Int
 Description: top edge of rectangle.
 Include: Required
 

Param 3: 

Type: Int
 Description: right edge of rectangle.
 Include: Required
 

Param 4: 

Type: Int
 Description: bottom edge of rectangle.
 Include: Required
 

Param 5: 

Type: Int
 Description: attributes of text to include. Use 0 to include all text or use a combination of attribute flags to only return text with those attributes.
 Include: Optional
 

Param 6: 

Type: Int
 Description: color of text to include, use IgnoreColor constant for any color.
 Include: Optional
 

Param 7: 

Type: Int
 Description: background color of text to include.
 Include: Optional
 

Param 8: 

Type: Int
 Description: Whether or not to add line breaks or to get the text as one long string.
 Include: Optional
 

Param 9: 

Type: Int
 Description: The prefered coordinate system in which the value should be returned This is only a recommendation and will not work in all places. See the COORDSYS_xxx constants in hjconst.jsh.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetTextInWindow 

Description 

Retrieves any text located within the window rectangle.

Returns 

Type: string
 Description: The text in the window.
 

Parameters 

Param 1: 

Type: handle
 Description: The handle from which text is to be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 8.00 and later

Function: GetTopLevelWindow 

Description 

Similar to GetAppMainWindow. These two functions differ however in that GetAppMainWindow will always return the handle for the main window of the application. In contrast, the GetTopLevel function can be used within dialog boxes to return the handle of the main dialog window when there may be several child windows which are also real windows. This can be useful when the GetRealWindow function does not return the handle of the main dialog. A real window refers to a window with a title.

Returns 

Type: Handle
 Description: The handle of the TopLevel window, as opposed to the AppMainWindow.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the handle for the starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowAtPoint 

Description 

Gets the handle of the window at the specified point. For example, this function can be used with MouseMovedEvent to get the handle of the window containing the mouse pointer.

Returns 

Type: Handle
 Description: The handle of the window at the point specified by x and y. The value is 0 if a valid window handle is not found.
 

Parameters 

Param 1: 

Type: Int
 Description: The horizontal (x) value of the point.
 Include: Required
 

Param 2: 

Type: Int
 Description: The vertical (y) value of the point.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowBottom 

Description 

Gets the screen coordinate for the bottom of the window of interest.

Returns 

Type: Int
 Description: Screen coordinate of bottom edge of window.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowClass 

Description 

This obtains the window class name of a window. Most standard windows (non SDM windows) have a window class name and a window type name. Window class names are generally unique to specific windows in specific applications.

Returns 

Type: String
 Description: The string is the class name.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function provides information for the window that is identified by a window handle. Type a variable name or choose a script function to provide the window handle it needs.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetWindowExStyleBits 

Description 

This function returns the window extended style bit flags. See the WS constants in the standard winUser.h.

Returns 

Type: Int
 Description: the bit flags.
 

Parameters 

Param 1: 

Type: Handle
 Description: the window whose style bits are required.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 12.00 and later

Function: GetWindowHierarchyX 

Description 

This function gets the hierarchical position of the supplied window relative to the first window at the same level, ie it counts the windows at the same level and returns this window's position.

Returns 

Type: Int
 Description: The position of the window relative to the first at the same level.
 

Parameters 

Param 1: 

Type: Handle
 Description: handle of starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowHierarchyY 

Description 

This function gets the hierarchical position of the supplied window relative to the first ancestor for this window, ie counts the parent, grandparent, great grandparent etc.

Returns 

Type: Int
 Description: The position of the window relative to the first existing ancestor.
 

Parameters 

Param 1: 

Type: Handle
 Description: handle of starting window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowLeft 

Description 

Gets the screen coordinate for the left of the window of interest.

Returns 

Type: Int
 Description: Screen coordinate of left edge of window.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowName 

Description 

Obtains the title of the specified window, such as for a main application window, dialog box, or document window. Not all windows have titles.

Returns 

Type: String
 Description: Provides the title of the window when a title is present. When a title is not present, the null value of "" is returned.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function to specify the window handle title that is desired.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetWindowOwner 

Description 

If possible, retrieves the name, including the full path, to the application which owns the window.

Returns 

Type: string
 Description: the path and name of the owning application, or null if the application could not be determined.
 

Parameters 

Param 1: 

Type: handle
 Description: Type the name of a variable or choose a script function to specify the window handle title that is desired.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: GetWindowRect 

Description 

Gets the bounding rectangle of the window whose handle is specified.

Returns 

Type: Int
 Description: TRUE if the bounding rectangle is successfully retrieved.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window for which the rectangle is requested. GetFocus can be used to return this value.
 Include: Required
 

Param 2: 

Type: Int
 Description: The left edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 3: 

Type: Int
 Description: The right edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 4: 

Type: Int
 Description: The top edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 5: 

Type: Int
 Description: The bottom edge of the bounding rectangle after the function is called.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowRight 

Description 

Gets the screen coordinate for the right of the window of interest.

Returns 

Type: Int
 Description: Screen coordinate of right edge of window.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowStyleBits 

Description 

This function returns the window style bit flags. See the WS constants in the standard winUser.h.

Returns 

Type: Int
 Description: the bit flags.
 

Parameters 

Param 1: 

Type: Handle
 Description: the window whose style bits are required.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowSubtypeCode 

Description 

Obtains the window subtype code number for the specified window. This function is similar to GetWindowTypeCode, but attempts to be even more specific. If no more specific information is available, returns the same thing as GetWindowTypeCode. For example, Calling GetWindowTypeCode using the window handle for the Taskbar would return WT_TABCONTROL, and calling GetWindowSubtypeCode would return WT_TASKBAR, a more specific type of tab control. See the documentation for GetWindowTypeCode for more details.

Returns 

Type: Int
 Description: The window subtype number for the specified window.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function provides information for the window that is identified by a window handle. Type a variable name or choose a script function to provide the window handle it needs.
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE to never use the DOMServer to obtain this info
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowText 

Description 

Retrieves the text contained in a window.

Returns 

Type: String
 Description: The retrieved text.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window containing the requested text. GetFocus can be used to return this value.
 Include: Required
 

Param 2: 

Type: Int
 Description: TRUE if only highlighted text is requested, otherwise FALSE.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

This function is available in the following releases:

1.    JAWS 10.0 and later  

2.    JAWS 4.51-9.00  

 Function: GetWindowTextEx 

Description 

Retrieves the text contained in a window. It functions similar to GetWindowText but allows you to select whether or not to retrieve the text in all child windows.

Returns 

Type: String
 Description: The retrieved text.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window containing the requested text. GetFocus can be used to return this value.
 Include: Required
 

Param 2: 

Type: Int
 Description: Enter TRUE if only highlighted text is requested, otherwise FALSE.
 Include: Required
 

Param 3: 

Type: Int
 Description: Enter TRUE if text within child windows should be included, FALSE if only text from this window should be retrieved.
 Include: Required
 

Param 4: 

Type: Int
 Description: Enter TRUE to inhibit NewTextEvent's for any new strings returned by this function that have not yet triggered a NewTextEvent. Enter FALSE if this function should not affect NewTextEvent's. The default is TRUE. (Available as of JAWS 10.0 Update 1)
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 10.0 and later

 Function: GetWindowTextEx 

Description 

Retrieves the text contained in a window. It functions similar to GetWindowText but allows you to select whether or not to retrieve the text in all child windows.

Returns 

Type: String
 Description: The retrieved text.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window containing the requested text. GetFocus can be used to return this value.
 Include: Required
 

Param 2: 

Type: Int
 Description: Enter TRUE if only highlighted text is requested, otherwise FALSE.
 Include: Required
 

Param 3: 

Type: Int
 Description: Enter TRUE if text within child windows should be included, FALSE if only text from this window should be retrieved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51-9.00

Function: GetWindowTitleForApplication 

Description 

Used by SayWindowTitleForApplication to retrieve the title and subtitle that will be spoken by the SayWindowTitle script.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The application window.
 Include: Required
 

Param 2: 

Type: handle
 Description: The real window.
 Include: Required
 

Param 3: 

Type: handle
 Description: The current window.
 Include: Required
 

Param 4: 

Type: int
 Description: The type code of the current window.
 Include: Required
 

Param 5: 

Type: string
 Description: ByRef The main title that is retrieved.
 Include: Required
 

Param 6: 

Type: string
 Description: ByRef The subtitle, if any, that is retrieved.
 Include: Required
 

Param 7: 

Type: int
 Description: ByRef True if the message to announce the title should announce a page name for the subtitle, false otherwise.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: GetWindowTop 

Description 

Gets the screen coordinate for the top of the window of interest.

Returns 

Type: Int
 Description: Screen coordinate of top edge of window.
 

Parameters 

Param 1: 

Type: Int
 Description: Handle of window of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: GetWindowType 

Description 

Obtains the window type name of a window. Most standard windows (non SDM windows) have a window type name and a window class name. Examples of window types are: static text, edit field, check box, radio button, etc. The same window type names are commonly used in many different Windows applications.

Returns 

Type: String
 Description: The string is the window type.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function provides information for the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the window handle it needs.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: GetWindowTypeCode 

Description 

Obtains the window type code number for the specified window. These numbers are the same for English and non-English versions of JAWS. Many window type numbers have constant values assigned to them in the file HJCONST.JSH. The GetWindowType function returns these constants instead of the window type number.

Returns 

Type: Int
 Description: The window type number for the specified window.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function to provide the window handle it needs.
 Include: Required
 

Param 2: 

Type: int
 Description: TRUE to never use the DOMServer to obtain this info
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HasFocusRect 

Description 

Determines if the specified window has a focus rectangle (Not implemented currently).

Returns 

Type: Int
 Description: "True" or "False", 1 or 0.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window to check
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HasTitleBar 

Description 

Determines whether a window has a title bar. If the window has a title bar, then the function returns a constant value of TRUE. If the window does not have a title bar, then a constant value of FALSE is returned. Windows that typically have title bars are dialog boxes and main application windows.

Returns 

Type: Int
 Description: "TRUE" = 1, "FALSE" = 0.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function examines the window that is identified by a window handle. Type the name of a variable or choose a script function that can provide the window handle it needs.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: HideRectangleWindow 

Description 

Hides, or removes from the screen, the rectangle created by ShowRectangleWindow.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: InRibbons 

Description 

Tests to determine if the focus is currently in the ribbons.

Returns 

Type: int
 Description: true if the focus is on a ribbon tab or on a lower ribbon, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 16.0 and later

Function: InTextWindow 

Description 

Determines if the focus is in a window which may contain selectable text, such as an edit window.

Returns 

Type: int
 Description: true if in a window where text may be selected and copied, false otherwise
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: InvalidateRect 

Description 

The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn.

Returns 

Type: int
 Description: If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.
 

Parameters 

Param 1: 

Type: handle
 Description: of window.
 Include: Required
 

Param 2: 

Type: int
 Description: Rectangle left.
 Include: Required
 

Param 3: 

Type: int
 Description: Rectangle top.
 Include: Required
 

Param 4: 

Type: int
 Description: Rectangle right.
 Include: Required
 

Param 5: 

Type: int
 Description: Rectangle bottom.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: IsDescendedFromWindow 

Description 

Tests to see if the two windows have an ancestor/descendant relationship.

Returns 

Type: int
 Description: True The windows have an ancestor/descendant relationship.
 

Parameters 

Param 1: 

Type: handle
 Description: The window which is to be tested for ancestory over the descendant window.
 Include: Required
 

Param 2: 

Type: handle
 Description: The window which is to be tested for descendancy from the ancestor window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 7.00 and later

Function: IsPointInWindow 

Description 

Compares the specified pixel coordinates with the window boundaries of the window whose handle is indicated in the perimeter hwnd to determine whether it is within the boundaries of that window.

Returns 

Type: Int
 Description: Returns one if the specified point is contained in the indicated window. Returns zero otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window of interest.
 Include: Required
 

Param 2: 

Type: Int
 Description: The horizontal coordinate of the pixel location of interest.
 Include: Required
 

Param 3: 

Type: Int
 Description: The vertical coordinate of the pixel location of interest.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsScanCursorClass 

Description 

Tests if the supplied class name is recognized as one which is valid for the JAWS Scan or Invisible Scan cursor. The GenericUIAClasses section in the JCF file specifies class names which are used to allow scan cursor versions of the review cursors.

Returns 

Type: int
 Description: True if the supplied class name is valid for scan cursor activation, false otherwise.
 

Parameters 

Param 1: 

Type: string
 Description: The window class name to test. To be a valid class name for the scan cursors, the supplied class name must start with one of the class names listed as valid in the GenericUIAClasses section of the JCF file.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 21.0 and later

Function: IsWindowDisabled 

Description 

Checks the status of the current window or control. Returns FALSE if the window is active; TRUE if the window is disabled.

Returns 

Type: Int
 Description: TRUE if window is disabled, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window to check. This can be obtained through the GetFocus or GetCurrentWindow functions.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsWindowObscured 

Description 

Checks to see if this window is covered by any others and therefore cannot be entirely seen.

Returns 

Type: Int
 Description: TRUE if window is at least partially covered, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window to check. This can be obtained through the GetFocus or GetCurrentWindow functions.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: IsWindowVisible 

Description 

Checks the visual status of the window. This function will return true even if the window is completely covered by other windows. See function IsWindowObscured for a way to find out if a particular window is covered. Returns TRUE if the Window is visible on the screen, FALSE if the window is not visible on the screen.

Returns 

Type: Int
 Description: TRUE if window on screen, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window to check. This can be obtained through the GetFocus or GetCurrentWindow functions.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: lvGetItemColumnRect 

Description 

Gets the bounding rectangle of the item in specific column of listview or listcontrol.

Returns 

Type: Int
 Description: TRUE if the bounding rectangle is successfully retrieved.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window for which the rectangle is requested.
 Include: Required
 

Param 2: 

Type: Int
 Description: of column, starting at zero.
 Include: Required
 

Param 3: 

Type: Int
 Description: The left edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 4: 

Type: Int
 Description: The right edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 5: 

Type: Int
 Description: The top edge of the bounding rectangle after the function is called.
 Include: Required
 

Param 6: 

Type: Int
 Description: The bottom edge of the bounding rectangle after the function is called.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 5.10 and later

Function: lvGetNumOfColumns 

Description 

Gets the number of columns(if any) of a list control or listview.

Returns 

Type: Int
 Description: Number of columns in a list control or list view.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the list control or list view.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: lvIsReportListStyle 

Description 

Identifies the style of list control or list view.

Returns 

Type: Int
 Description: TRUE if style is Report or list, otherwise FALSE.
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the list control or list view.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: MoveToWindow 

Description 

Moves the active cursor to the specified window. If the window contains text, then the cursor is positioned on the first character. Otherwise, it is positioned at the center of the window. If the PC cursor is active when this function is used, then the JAWS cursor is activated and it is moved to the new position.

Returns 

Type: Int
 Description: "WAS_SUCCESSFUL" = 1 (window was found), "WAS_NOT_SUCCESSFUL" = 0 (window was not found).
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that indicates the window handle where the active cursor is to be moved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: navGetAppMainObjectID 

Description 

Determines the object ID for the Main object of the active application.

Returns 

Type: Handle
 Description: Provides the object ID of the application's Main object.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an object ID. Type the name of a variable or choose a script function that can provide the handle for the starting object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetCurrentObjectID 

Description 

Retrieves the Object ID of the object at the location of the active cursor. The object ID is used in a number of functions to retrieve information about objects.

Returns 

Type: Handle
 Description: the Object ID or 0 if the Object ID cannot be retrieved.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetFirstChildObjectID 

Description 

Determines the first child object of a specific parent object. This function is useful when you wish to move down through the stack of object IDs.

Returns 

Type: Handle
 Description: Provides the handle of the first child object or returns a value of 0 when a child object cannot be found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an object ID. Type the name of a variable or choose a script function that can provide the handle for the starting object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetFirstObjectID 

Description 

Obtains the Object ID of the first Object in a series of objects. It can provide the object ID that is needed by other object navigation functions.

Returns 

Type: Int
 Description: Provides Object ID.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetFocusObjectID 

Description 

Retrieves the Object ID of the object at the focus point. The object ID is used in a number of functions to retrieve information about objects.

Returns 

Type: Handle
 Description: the Object ID at the focus point, or 0 if the Object ID cannot be retrieved.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetLastObjectID 

Description 

Obtains the Object ID of the last Object in a series of objects. It can provide the object ID that is needed by other object navigation functions.

Returns 

Type: Int
 Description: Provides Object ID.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: navGetNextObjectID 

Description 

Provides the next Object ID in a series of Object IDs that are all at the same logical level. It is used to move across a list of control objects.

Returns 

Type: Handle
 Description: Provides the Object ID of the next object in the stack or returns a value of 0 when another object cannot be found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an Object ID. Type the name of a variable or choose a script function that can provide the handle for the starting object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetObjectContainerHelp 

Description 

Retrieves the container help string of the object with the specified parent window and Object ID. If a parent window and object ID is not defined, then the object at the active cursor is used.

Returns 

Type: String
 Description: the container help string of the specified object.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the Object ID for object whose information is to be retrieved. If a an object ID is not provided, navGetCurrentObjectID will be used to provide a default ID.
 Include: Optional
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetObjectHelp 

Description 

Retrieves the help string of the object with the specified parent window and Object ID. If a parent window and object ID is not defined, then the object at the active cursor is used.

Returns 

Type: String
 Description: the help string of the specified object.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the Object ID for object whose information is to be retrieved. If a an object ID is not provided, navGetCurrentObjectID will be used to provide a default ID.
 Include: Optional
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: navGetObjectName 

Description 

Retrieves the name of the object with the specified parent window and Object ID. If a parent window and object ID is not defined, then the object at the active cursor is used.

Returns 

Type: String
 Description: the name of the specified object.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the Object ID for object whose information is to be retrieved. If a an object ID is not provided, navGetCurrentObjectID will be used to provide a default ID.
 Include: Optional
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetObjectTypeCode 

Description 

Retrieves the object type code of the object with the specified parent window and Object ID. If a parent window and object ID is not defined, then the object at the active cursor is used.

Returns 

Type: Int
 Description: the object type code of the specified object.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the Object ID for object whose information is to be retrieved. If a an object ID is not provided, navGetCurrentObjectID will be used to provide a default ID.
 Include: Optional
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetObjectTypeString 

Description 

Retrieves the object type string of the object with the specified parent window and Object ID. If a parent window and object ID is not defined, then the object at the active cursor is used.

Returns 

Type: String
 Description: the object type string of the specified object.
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the Object ID for object whose information is to be retrieved. If a an object ID is not provided, navGetCurrentObjectID will be used to provide a default ID.
 Include: Optional
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: navGetParentObjectID 

Description 

Determines which object is directly above the specified child object. For Example, when a dialog box pops up, it could be used to determine the window handle of the window that created the dialog box. It can be used to move up through a list of object IDs in order to get to a specific object.

Returns 

Type: Handle
 Description: This is the handle of the parent object.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an object ID. Type the name of a variable or choose a script function that can provide the handle for the starting object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetPrevObjectID 

Description 

Provides the previous Object ID in a series of Object IDs that are all at the same logical level. It is used to move across a list of control objects.

Returns 

Type: Handle
 Description: Provides the Object ID of the prior object in the stack or returns a value of 0 when another object cannot be found.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an Object ID. Type the name of a variable or choose a script function that can provide the handle for the last object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navGetRealObjectID 

Description 

Moves up through the list of objects in search of a real object. A real object is one that has a title.

Returns 

Type: Handle
 Description: Provides the object ID of the real object.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an object ID. Type the name of a variable or choose a script function that can provide the handle for the starting object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

JAWS 5.0 and later

Function: navGetTopLevelObjectID 

Description 

Similar to navGetAppMainObjectID. These two functions differ however in that navGetAppMainObjectID will always return the object ID for the highest level object in the application. In contrast, navGetTopLevelObjectID can be used within dialog boxes to return the object ID of the main dialog object when there may be several child windows which are also real windows. This can be useful when the navGetRealWindowObjectID function does not return the object ID of the main dialog. A real object refers to a object with a title.

Returns 

Type: Handle
 Description: The handle of the TopLevel object, as opposed to the AppMain Object.
 

Parameters 

Param 1: 

Type: Handle
 Description: This function starts with the object that is identified by an object ID. Type the name of a variable or choose a script function that can provide the handle for the starting object.
 Include: Required
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: navSayObjectTypeAndText 

Description 

Speaks the name and type of the object indicated by the function's parameters or, if called with no parameters, located at the current cursor's location. This function is similar to SayWindowTypeAndText, except that it is more specific. If a particular window contains multiple objects, this function will speak information about the one at the cursor, while SayWindowTypeAndText will speak information about the enclosing window. If the window does not contain multiple objects, then the functions operate identically. When this function is used, it marks the text it reads so that the Say Highlighted Text and Say NonHighlighted Text functions do not repeat the same information when they are triggered.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the Object ID for object whose information is to be retrieved. If a an object ID is not provided, navGetCurrentObjectID will be used to provide a default ID.
 Include: Optional
 

Param 2: 

Type: Handle
 Description: Type a variable name or choose a script function that can provide the window handle for the parent window. If a window handle is not provided, then GetCurrentWindow() will be used to provide a default handle.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.0 and later

Function: PostMessage 

Description 

Provides limited access to the Windows PostMessage function (See the Windows Platform SDK or a Windows programming book for details) It is only possible to use numeric values for wParam and lParam. No strings or other structures can be passed.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Window to which the message should be posted.
 Include: Required
 

Param 2: 

Type: Int
 Description: Message to be sent.
 Include: Required
 

Param 3: 

Type: Int
 Description: wParam value for the message, defaults to 0.
 Include: Optional
 

Param 4: 

Type: Int
 Description: lParam value for the message, defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: Refresh 

Description 

Refreshes the screen.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: 1 means force the refresh, 0, only if needed.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RefreshWindow 

Description 

Refreshes the contents of a window and all windows contained within it. This is much faster than refreshing the entire screen.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window to be refreshed.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: RegisterWindowMessage 

Description 

Passes the call through to the Windows API function RegisterWindowMessage.

Returns 

Type: int
 Description: A system-wide unique identifier for the message.
 

Parameters 

Param 1: 

Type: string
 Description: String to be registered as a defined windows message.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 7.10 and later

Function: RibbonsActive 

Description 

Tests to determine if the focus is currently on a ribbon tab or in a lower ribbon.

Returns 

Type: int
 Description: Ribbons_Inactive if it cannot be determined that the focus is in a ribbon, RibbonTabs_Active if on a ribbon tab, or LowerRibbon_Active if it is determined that the focus is in the lower ribbons.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 11.0 and later

Script: SayBottomLineOfWindow 

Description 

Reads the bottom line of the active window. In most cases, this is the status line.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayFocusedWindow 

Description 

Called by the focus changed event or keys that report the item that has focus such as INSERT+TAB. Designed to be replaced by application specific script files that may want to do special handling for the window with focus without replacing the entire focus changed event.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayFocusRect 

Description 

Says the contents of focus rectangle. Returns TRUE if any text was spoken, FALSE otherwise.

Returns 

Type: Int
 Description: "True" or "False", 1 or 0.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayFocusRects 

Description 

Says the contents of focus rectangles. If there is only one such rectangle, this acts like SayFocusRect, which says only the first one. If there is more than one, says the contents of all of them.

Returns 

Type: Int
 Description: TRUE if text was spoken, FALSE otherwise.
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window.
 Include: Required
 

Version 

This function is available in the following releases:

JAWS 4.51 and later

Function: SayParentGroupboxForWindowPromptAndText 

Description 

Used by SayWindowPromptAndText to speak group box names in Winforms and other apps where the group box is the parent of the control with focus.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Script: SaySpecialWindowClasses 

Description 

Cycles through 4 groups: parent windows, child windows, previous and next windows. Just keep pressing the CTRL+INSERT+F2 and it will say the window classes. For more info on windows use the script utility functions.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayToBottom 

Description 

Says the active window from the position of the active cursor to the bottom of the window. The cursors do not move as text is read, the window will not scroll to display additional text.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

Script: SayTopLineOfWindow 

Description 

Reads the top line of the active window. In most cases, this is usually the title of the window.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayWin8AppWindowTitle 

Description 

Used by the SayWindowTitle script to speak the title of a modern or universal application.

Returns 

Type: int
 Description: True if the windows whose title to be spoken is a metro or universal app, false otherwise.
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 17.0 and later

Function: SayWindow 

Description 

Reads the specified window. It reads either highlighted text or all text in the window.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that provides the handle of the window that is to be spoken.
 Include: Required
 

Param 2: 

Type: Int
 Description: Type a constant to determine how much information is to be read: READ_EVERYTHING" = 0, "READ_HIGHLIGHTED" = 1.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: SayWindowPromptAndText 

Description 

Says the prompt and type of the window or control as well as the text in the window that has focus. When the virtual cursor is active and in a web page, the control information is spoken using the current verbosity setting for the control the first time this keystroke is pressed. Subsequent presses of this keystroke cause JAWS to speak the control again, which may or may not sound different, followed by a message in the message voice which tells you the setting being used.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayWindowPromptAndTextPostProcess 

Description 

Used by SayWindowPromptAndText to run the various functions after the control's window prompt and text is spoken.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The handle of the window passed from SayWindowPromptAndText.
 Include: Required
 

Param 2: 

Type: int
 Description: The subtype code passed from SayWindowPromptAndText.
 Include: Required
 

Param 3: 

Type: int
 Description: The training mode saved and passed from SayWindowPromptAndText.
 Include: Required
 

Param 4: 

Type: int
 Description: ProcessFlags The flag set denoting which optional processes should run after the window prompt and text is spoken. See HJConst.jsh for the list of flags.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 12.0 and later

Script: SayWindowTitle 

Description 

Says the application title, dialog box title, and item with focus.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SayWindowTitleForApplication 

Description 

Used by the SayWindowTitle script to speak the title of an application or its dialog.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: handle
 Description: The application window.
 Include: Required
 

Param 2: 

Type: handle
 Description: The real window.
 Include: Required
 

Param 3: 

Type: handle
 Description: The current window.
 Include: Required
 

Param 4: 

Type: int
 Description: The type code of the current window.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 14.0 and later

Function: SayWindowTypeAndText 

Description 

Reads a specified series of information from a window. It reads the window title (when one is present), the window type, the contents in the window, and provides related information about the current dialog option. This function marks the text it reads so that the Say NonHighlighted text and Say Highlighted text functions do not repeat the same information when they are triggered.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Type the name of a variable or choose a script function that provides the handle of the window that is to be read.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SendMessage 

Description 

Provides limited access to the Windows SendMessage function (See the Windows Platform SDK or a Windows programming book for details) It is only possible to use numeric values for wParam and lParam. No strings or other structures can be passed. The return value is always treated as an integer.

Returns 

Type: Int
 Description: result of the SendMessage call.
 

Parameters 

Param 1: 

Type: Handle
 Description: Window to which the message should be sent.
 Include: Required
 

Param 2: 

Type: Int
 Description: Message to be sent.
 Include: Required
 

Param 3: 

Type: Int
 Description: wParam value for the message, defaults to 0.
 Include: Optional
 

Param 4: 

Type: Int
 Description: lParam value for the message, defaults to 0.
 Include: Optional
 

Version 

This function is available in the following releases:

1.    JAWS 5.10 and later

Function: SetFocus 

Description 

Moves the focus to a specified window.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: Handle of window to which focus should be moved.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: SetParentDims 

Description 

The top, left, bottom, and right values of the current application main window are assigned to variables. These variables are used by Frame Viewer.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Function: ShowRectangleWindow 

Description 

When first called, creates a transparent window with a red rectangle border. Subsequent calls moves the window using the new size and location specified by the coordinate parameters. All keystrokes and mouse clicks are passed through this window.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Int
 Description: the left edge of the rectangle.
 Include: Required
 

Param 2: 

Type: Int
 Description: the top edge of the rectangle.
 Include: Required
 

Param 3: 

Type: Int
 Description: the right edge of the rectangle.
 Include: Required
 

Param 4: 

Type: Int
 Description: the bottom edge of the rectangle.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 15.0 and later

Function: SpeakWindowInformation 

Description 

This function speaks the window's type and text, including static text, if relevant of the window whose handle is provided.

Returns 

Type: Void
 

Parameters 

Param 1: 

Type: Handle
 Description: The handle of the window whose information is desired.
 Include: Required
 

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: VirtualizeCurrentControl 

Description 

This keystroke displays the text of the current control in the Virtual Viewer. You can then select the text and copy and paste it to another application, such as an e-mail message.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 8.00 and later

Script: VirtualizeWindow 

Description 

This keystroke displays the text in the current window in the Virtual Viewer. You can then select the text and copy and paste it to another application, such as an e-mail message. This is especially useful in error dialog boxes.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

1.    JAWS 4.51 and later

Script: WindowClassReassign 

Description 

Some programs use non-standard Window classes, making it difficult for JAWS to recognize and read them properly. This command gets the class of the current window and lets you assign it to a known class, so JAWS can speak it properly.

Returns 

Type: Void
 

Parameters 

No Parameters

Version 

This function is available in the following releases:

JAWS 4.51 and later

API Tools

The API tools provide advanced users with the ability to interact with FS tools previously not readily available to the public. It is assumed you are familiar with the concepts of using the dynamic link library (DLL) format, etc. So its concepts are not explained. However, the specific topic pages have all the detailed information about the functions available to you for your customized application work to tie into JAWS.

The API tools include:

FS Braille Displays API

FSAPI

Research It DLL API

 

FS Braille Display API

The FSBrlDspAPI provides a high-level API for communicating with Freedom Scientific's current line of Braille displays.

Installation Instructions

Install the file called FSBrlDspAPI.DLL into the Windows\System32 folder as a shared component. The DLL contains an accurate version resource. Never install an older version of this DLL on top of one that already exists in the Windows\System32 folder.

FSBrlDspAPI supports displays connected via serial or USB. For Windows XP in particular, a file called FSBRLDSP.SYS must be in the Windows\System32 folder in order that USB connections work properly.

The Focus Braille displays require Firmware 1.05 or later in order to function properly with USB.

DLL Functions 

The DLL functions are all described, each in their own topics in this Reference Guide as follows:

·         fbOpen

·         fbClose

·         fbConfigure

·         fbWrite

·         fbGetCellCount

·         fbGetDisplayName

·         fbGetFirmwareVersion

·         fbBeep

·         fbSetVariBraille

Note: All functions support GetLastError to obtain more information about the cause of errors. Standard Windows error codes are used exclusively.

fbBeep

Description

Sounds the speaker on the Focus display. Note: This function only works on the Focus.

Usage

FSBRLAPI BOOL WINAPI fbBeep(HANDLE hDisplay);

Parameters

HANDLE hDisplay

A handle previously obtained from fbOpen.

Returns

BOOL: TRUE on success, FALSE on failure.

fbClose

Description

Closes the display

Usage

FSBRLAPI BOOL WINAPI fbClose(HANDLE hDisplay);

Parameters

HANDLE hDisplay

hDisplay - a handle previously obtained from fbOpen.

Returns

BOOL: TRUE on success, FALSE on failure.

fbGetCellCount

Description

Obtains the number of cells on the display.

Usage

FSBRLAPI int WINAPI fbGetCellCount(HANDLE hDisplay);

Parameters

HANDLE hDisplay

A handle previously obtained from fbOpen.

Returns

INT: The number of cells on the display, 0 if error.

fbGetDisplayName

Description

Obtains the name of the display

Usage

FSBRLAPI BOOL WINAPI fbGetDisplayName(HANDLE hDisplay,LPSTR lpszName, int nMaxChars);

Parameters

HANDLE hDisplay

A handle previously obtained from fbOpen.

LPSTR lpszName

lpszName - buffer to receive the name of the display

INT nMaxChars

nMaxChars - space available in lpszName. This should be set to at least 16.

Returns

BOOL: TRUE on success, FALSE on failure.

fbGetFirmwareVersion

Description

Obtains the firmware version

Usage

FSBRLAPI BOOL WINAPI fbGetFirmwareVersion(HANDLE hDisplay,LPSTR lpszVersion,int nMaxChars);

Parameters

HANDLE hDisplay

A handle previously obtained from fbOpen.

LPSTR lpszVersion

lpszVersion - buffer to receive the version info

INT nMaxChars

nMaxChars - space available in lpszVersion. This should be set to at least 16.

Returns

BOOL: TRUE on success, FALSE on failure.

fbOpen

Description

Initializes display for communications

Usage

FSBRLAPI HANDLE WINAPI fbOpen(LPCSTR lpszPort,HWND hwndNotify,UINT umsgNotify);

Parameters

LPCSTR lpszPort

lpszPort- indicates the port to which a Braille display is connected. it should be the name of a Communications port e.g. COM1, or USB. If this parameter is NULL or contains an empty string, the system will search for a display, first trying USB and then trying com ports (COM1 through COM4).

HWND hwndNotify

hwndNotify - the handle of a window to which braille display input and disconnect information should be posted.

UINT umsgNotify

umsgNotify - a Windows message number which should be used when posting messages.

Returns

HANDLE: On success, this function returns a handle to the opened Display. On failure, it returns INVALID_HANDLE_VALUE.

 Messages

the hwndNotify and umsgNotify passed in to fbOpen are used to notify the application of events related to the display. The event type is indicated in wParam and the event details in lParam. The event types currently defined are FB_DISCONNECTED which means that the display has been disconnected, FB_INPUT which indicates that a key or button on the display has been pressed or released, and FB_EXT_KEY which indicates a Focus 2 extended key was pressed or released. FB_DISCONNECTED provides no additional information in lParam. The lParam of FB_INPUT should be cast to a LPBYTE and processed as a sequence of four bytes, the details of which are described below. The lParam of FB_EXT_KEY is an extended key state bit mask value also described below. The FB_EXT_KEY message is only received if the Focus 2 has been configured for extended keys. See fbConfigure.

Key Event

 

·         byte0=3 (3 indicates a key event)

·         BYTE1=Braille keys.

·         BYTE2=assorted keys.

·         BYTE3= GDF keys.

 

BYTE 1: Braille keys (1=key down, 0=key up).

  -------- ------------------- -----------------------
   Bit      Description         Supported Displays  
  0        Braille dot 1 key   Focus (1 & 2)
  1        Braille dot 2 key   Focus (1 & 2)
  2        Braille dot 3 key   Focus (1 & 2)
  3        Braille dot 4 key   Focus (1 & 2)
  4        Braille dot 5 key   Focus (1 & 2)
  5        Braille dot 6 key   Focus (1 & 2)
  6        Braille dot 7 key   Focus (1 & 2)
  7        Braille dot 8 key   Focus (1 & 2)
  -------- ------------------- -----------------------

BYTE 2: Assorted keys (1=key down, 0=key up).

  -------- ------------------------ -----------------------
   Bit      Description              Supported Displays  
  0        Left Whiz Wheel press    all
  1        Right Whiz Wheel press   all
  2        Left shift key           Focus (1 & 2)
  3        Right shift key          Focus (1 & 2)
  4        Left advance bar         Focus (1 & 2)
  5        Right advance bar        Focus (1 & 2)
  6        undefined                n/a
  7        Braille spacebar         Focus (1 & 2)
  -------- ------------------------ -----------------------

BYTE 3: GDF keys (1=key down, 0=key up).

  -------- ----------------------- -----------------------------------------------------
   Bit      Description             Supported Displays  
  0        Left GDF button         Focus
  1        Right GDF button        Focus
  2-3      undefined               n/a
  4        Left Bumper Bar Up      Focus 2 configured for extended keys (80 cell only)
  5        Left Bumper Bar Down    Focus 2 configured for extended keys (80 cell only)
  6        Right Bumper Bar Up     Focus 2 configured for extended keys (80 cell only)
  7        Right Bumper Bar Down   Focus 2 configured for extended keys (80 cell only)
  -------- ----------------------- -----------------------------------------------------

Cursor Router Buttons

 

BYTE0=4 (4 indicates cursor router button)

BYTE1=button number 0-40

BYTE2: state (1=key down, 0=key up).

BYTE3:row (0=bottom, 1=top).

 

BYTE 2: state

Bit 0 is set to 1 when the button is pressed, and 0 when the button is released. This is the same for all displays.

BYTE 3: row

This byte denotes the router button row number. The default is 0, which indicates the 1st row. Currently there are devices that have one or two rows hence this value is limited to 0 or 1. In the future there may be more rows.

Whiz Wheels

Note: The "up" direction on the left wheel is away from the operator. The "down" direction on the right wheel is away from the operator.

 

BYTE0=5 (5 indicates Whiz Wheel)

BYTE1=unit number, direction, count.

 

BYTE 1:

  -------- ---------------------------------------------------- -----------------------
   Bit      Description                                          Supported Displays  
  0-2      Pulses (1-7, number of clicks the wheel was moved)   all
  3        Direction (0 = up, 1 = down).                        all
  4-5      Whiz Wheel (0 = left, 1 = right).                    all
  6-7      undefined                                            n/a
  -------- ---------------------------------------------------- -----------------------

Extended Keys (Focus 2 configured for extended keys)

 

Bit masks for 32-bit value (1=key down / 0 = key up):

  ------------ -------------------
  Bit Mask     Description
  0x00000010   Left Rocker Up
  0x00000020   Left Rocker Down
  0x00000040   Right Rocker Up
  0x00000080   Right Rocker Down
  ------------ -------------------

All other bits are reserved and set to zero.

fbSetVariBraille

Description

Sets the firmness of dots on the display

Usage

FSBRLAPI BOOL WINAPI fbSetVariBraille(HANDLE hDisplay,BYTE byFirmness);

Parameters

HANDLE hDisplay

A handle previously obtained from fbOpen.

BYTE byFirmness

byFirmness - a value between 0 and 255. Larger values make the dots more pronounced.

Returns

BOOL: TRUE on success, FALSE on failure.

FSAPI

The FSAPI functions much like any other object. In fact, you could probably use the CreateObject function from the scripts to point to it and run functions. But this would cause unnecessary overhead, unless you want to test overhead.

The FSAPI therefore functions like an object model for third party programs to access JAWS. Even a web page with a Java script could do it if the security settings were correct.

The FSAPI allows other programs to control Freedom Scientific products. Currently the only supported product is JAWS. FSAPI has shipped with JAWS since JAWS 8.0 Update 2.

If you want your program to make JAWS say, Braille, or do something, you can use the FS API to do it. FSAPI.DLL contains a COM object as well as several exported functions. This means you can call it through COM. You will not have to know where FS API lives on the user system, as you would if it were linked statically. But you can also call FSAPI functions exports as declared in FSAPI.H if COM cannot be used.

We strongly recommend using COM because this obviates the need to determine where on the system FSAPI.DLL resides and dynamically load the library. You cannot really staticly bind to fsapi.lib because your program will not start if FSAPI.DLL does not reside in the same directory as the directory where your program is installed. The COM approach does not suffer from these same limitations.

Note: In Visual Basic, the apostrophe is used for comments rather than the semicolon.
 A VBScript example of using the COM object is:
 

Set o = CreateObject("freedomsci.jawsapi")
' Creates the object variable pointing to FSAPI.
Call o.SayString("Hello and Hi")
' Accesses the member function sayString from FSAPI.
Call o.RunFunction("sayline")
' Accesses the member function sayString from FSAPI.

 

 

The available functions are described below.

SayString

 

NAME SayString
PURPOSE
            Instructs  Jaws to speak a string of text.
USAGE
            SayString(StrinToSpeak,bInterrupt);
PARAMETERS
            StrinToSpeak the text to be spoken
            bInterrupt whether or not to discard any text already being spoken at the time this function is called. If this parameter is TRUE, any
    text currently being spoken will be discarded.
RETURNS
            TRUE ifJaws  is running and if the text was scheduled to be spoken.
            FALSE if the text was not scheduled to be spoken.
REMARKS
            This function will return before the text has finished speaking

 

StopSpeech

 

NAME StopSpeech
PURPOSE
            Instructs  Jaws to stop speaking immediately
USAGE
            StopSpeech();
RETURNS
            TRUE if  JAWS is running and if the speech was stopped.
            FALSE if Jaws is not running.

 

RunScript

 

NAME RunScript
PURPOSE
            Instructs Jaws  to run a script.
USAGE
            RunScript(ScriptName);
PARAMETERS
            ScriptName the name of the  script to be run.
RETURNS
            TRUE if  Jaws is running and if the script was scheduled to be
    executed.
            FALSE if the script was not scheduled to be executed.
REMARKS
            A return value of TRUE only indicates that a script execution
    has been scheduled, not that the script has been run. When Jaws tries to execute a script by that name, it first searches for the script in the application script file and then in thedefault  script file. If no such script exists, an error message will be spoken.

 

RunFunction

 

NAME RunFunction
PURPOSE
            Instructs Jaws  to run a script function.
USAGE
            RunFunction(ScriptName);
PARAMETERS
            FunctionName the name of the  function to be run.
RETURNS
            TRUE if  Jaws is running and if the function was scheduled to be executed.
            FALSE if the function was not scheduled to be executed.
REMARKS
            A return value of TRUE only indicates that a function execution has been scheduled, not that the script has been run. When Jaws tries to execute a function by that name, it first searches for the function in the application script file and then in the default  script file. If no such function exists, an error message will be spoken.

 

Research It DLL API

Lookup Module API

A lookup module is a dynamic link library (dll) encapsulating a particular lookup technology. A lookup module may support single or multiple lookup sources. The lookup module that ships with JAWS is able to support multiple lookup sources. For each lookup source, a “rule set” defines the important details of the lookup such as the rule set name, information source, query definition, and parsing details. When the lookup module is called, the data passed into the lookup module contains the name of the rule set to be used to perform the lookup. If you want to extend the lookup module, you need only define a rule set.

All lookup modules must support the following API methods:

Initialize

Initialize performs any initialization necessary for the lookup module. Any initialization that must not be performed in DllMain (thread creation, synchronization, etc.) should be performed here. Call Initialize prior to calling any other lookup module functions.
 

Syntax
HRESULT Initialize(void);
Return Value
Returns S_OK (0x00000000L) if initialization was successful, otherwise E_FAIL (0x80004005L). If initialization fails, the DLL should not be used.

 

DeInitialize

DeInitialize performs any cleanup necessary for the lookup module. Any destruction that must not be performed in DllMain (thread destruction, synchronization, etc.) should be performed here. Call DeInitialize after all use of the lookup module is complete, immediately prior to calling FreeLibrary.
 

Syntax
HRESULT DeInitialize(void);
Return Value
Returns S_OK (0x00000000L) if deinitialization was successful, otherwise E_FAIL (0x80004005L).

 

GetInterfaceSchema

GetInterfaceSchema returns the numeric version of the supported interface. The interface version specified in this documentation is 1. Should additional functions later be supported, the interface version will increment.
 

Syntax
HRESULT GetInterfaceSchema(
DWORD& dwSchema);
Parameters
dwSchema [out]
dwSchema will receive the API schema supported by the Lookup Module.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, a non-zero value is returned.

 

GetFriendlyName

GetFriendlyName returns the friendly name(s) for a lookup module or the rule sets belonging to the module. If a lookup module has no rule sets associated with it, it returns the localized name for the lookup module. If a lookup module has rule sets, it returns a bar-delimited list of colon-delimited file name:friendly name pairs for the lookup module. For most lookup modules, there will only be a single localized name. However, for the Freedom Scientific Lookup Module, the bar delimited group of localized file names and friendly names consist of the localized rule set names supported by the lookup module.
 

Syntax
HRESULT GetFriendlyName (
LPWSTR lpszName,
DWORD& dwSize
);
Parameters
lpszName [out]
            A pointer to a buffer that receives a localized name for the module or file name-friendly name pairs for supported rule sets.
dwSize [in, out]
The size of the lpszName buffer in wide chars. If the output data is larger than the supplied buffer, upon return, this variable will hold the required size.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, one of the following errors may be returned:
E_INVALID_ARG (0x80070057L)
            lpszName is NULL or dwSize is 0.
E_INSUFFICIENT_BUFFER (0x802A0001L)
lpszName is not large enough to hold the return data.

 

Describe

Describe returns a localized description of the lookup module or specified rule set.
 

Syntax
HRESULT Describe (
LPCWSTR lpszRuleSet,
LPWSTR lpszOut,
DWORD& dwSize
);
Parameters
lpszRuleSet [in, optional]
A null terminated string containing the name of the RuleSet for which the description should be returned. If this value is null, then the general description for the lookup module is returned.
lpszOut [out]
A pointer to a buffer that receives the output data.
dwSize [in, out]
The size of the lpszOut buffer in wide chars. If the output data is larger than the supplied buffer, upon return, this variable will hold the required size.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, one of the following errors may be returned:
E_INVALIDARG (0x80070057L)
            In the case of the generic Freedom Scientific Lookup Module, this error is returned if lpszRuleSet is NULL (it is optional in general, but not in this specific case). Also returned if lpszOut is NULL or dwSize is 0.
E_RULESET_NOT_FOUND (0x802A0002L)
The rule set specified by lpszRuleSet is not supported by the lookup module.
E_INSUFFICIENT_BUFFER (0x802A0001L)
lpszName is not large enough to hold the return data.

 

Invoke

Invoke requests a query from a lookup module. This function performs a synchronous lookup. Aasynchronous lookups are not supported in JAWS. Different combination of the input arguments may be used depending on the lookup module.
 

Syntax
HRESULT Invoke (
LPCWSTR lpszRuleSet,
LPCWSTR lpszIn,
LPCWSTR lpszContext,
DWORD dwOffset,
LCID lcidAppLocale,
LPWSTR lpszOut,
DWORD& dwSize,
LPVOID lpExtra = NULL
);
Parameters
lpszRuleSet [in, optional]
An optional null-terminated string that contains the name of the rule set that the lookup module must use to perform the query.
lpszIn [in]
A null terminated string containing the input data for the query. This may be the word or phrase at the current cursor. This value may be NULL if the lookup module utilizes the Context and Offset arguments.
lpszContext [in]
A null terminated string containing context data for the query. For example, some lookup modules may utilize the sentence or paragraph containing the target word. This argument can be NULL.
dwOffset [in]
The 0-based offset of the targeted word in lpszContext. 0xffffffff indicates no offset.
lcidAppLocale [in]
The locale ID of the calling application. This will allow us to select the appropriate localized lookup source, display a localized UI, or return error messages in the application’s language.
lpszOut [out]
A pointer to a buffer that receives the output data. Depending on the lookup module, this could be an error, command, replacement string, etc.
dwSize [in, out]
The size of the lpszOut buffer in wide chars.
lpExtra [in]
This argument may be optionally used to pass additional information to the lookup module. The content and format of the data depends on the requirements of the lookup module. The value can be NULL.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, one of the following errors may be returned:
E_INVALIDARG (0x80070057L)
The rule set specified by lpszRuleSet is not supported by the lookup module.
E_INSUFFICIENT_BUFFER (0x802A0001L)
lpszName is not large enough to hold the return data. In this case, dwSize is set to the buffer size (in characters including the null terminator) required to hold the data.
E_RULESET_NOT_FOUND (0x802A0002L)
            The requested rule set was not found.
E_REQUEST_FAILED (0x802A0003L)
            The lookup attempt failed. Indicates a malformed query.
E_REQUEST_NO_RESULTS (0x802A0004L)
            The lookup succeeded, but there were no results for the search term.
E_REQUEST_TIMEOUT (0x802A0005L)
            The lookup took longer than the allowed amount of time.

 

Rule Set and Query Format

The generic Freedom Scientific lookup module supports the ability to do lookups with user-defined rule sets. A rule set consists of a query and a variety of settings that specify how the rule set is exposed to the end-user and how the query is executed. To create a custom rule set, you must provide two files, a rule set file (.RUL) and a query file (.QRY) with the following conditions:

The files must have the same name (except for extension).

The rule set file is an INI-formatted file. The file contains one section, [Details].

In the details section of the rule set file, you may provide the following keys:

+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Key Name                          | Value                                                                                                                                                                                                      |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FriendlyName                      | A string specifying a “friendly” name for the rule set. Mandatory. Maximum 100 characters.                                                                                                                 |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Description                       | A string containing a brief description for the rule set. Optional. Maximum 500 characters.                                                                                                                |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Timeout                           | An unsigned integer containing the timeout in milliseconds to be used for queries. Any query using this rule set will be aborted if it exceeds the timeout specified.                                      |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Version                           | Internal use only. A string of the format “x.x.x” that specifies the version of the rule set. This will be used for Freedom Scientific-distributed rule sets in order to provide automatic update service. |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

 

Example of a Valid Rule Set

The following is an example of a valid rule set:
 

[Details]
FriendlyName=Wikipedia
Description=Look up an encyclopedia entry for a word or phrase.
Timeout=15000

 

The query file contains an XQuery function that queries the desired resource, parses results, and returns as its output a single string. In addition to XQuery functions, the XQilla extension and XSLT functions are also available for use from the query. For more information, see: XQilla XQuery Extension Functions.

Within the query file, you can use the token |ARG_1...ARG_n| to mark a location where input should be substituted into the query string. The token need not be placed directly into a search URL; the query author can place it into a variable that can be further parsed or modified prior to using it. This allows you to pass multiple arguments into |ARG_1...ARG_n| and parse them into separate variables within the query code.

Example of a Valid Query

The following is an example of a valid query:
 

declare namespace wiki = "http://opensearch.org/searchsuggest2";
declare variable $new_line := '
';
declare variable $doc := doc("http://en.wikipedia.org/w/api.php?action=opensearch&search=|ARG_1...ARG_n|&format=xml");
for $item in $doc/wiki:SearchSuggestion//wiki:Item[1]
return (fn:normalize-space(data($item//wiki:Description)), $new_line)

 

In this query, the |ARG_1...ARG_n| token will be replaced by the search term that is passed down from the script.

 

Additional Resources

For more details on Research It, see Creating Research It Rules

For the functions used to customize Research It Rules using the JAWS Scripting Language, see the category book in the reference guide, Research It.

Copyright Information

PUBLISHED BY
 Vispero, Inc.
 17757 US Highway 19 N, Suite 560
 Clearwater, FL 33764
 USA
 www.FreedomScientific.com
 

Information in this document is subject to change without notice. No part of this publication may be reproduced or transmitted in any form or any means electronic or mechanical, for any purpose, without the express written permission of Freedom Scientific.

Copyright © 2020 Freedom Scientific, Inc. All Rights Reserved.

The following are registered trademarks of Freedom Scientific, Inc. in the United States and other countries:

·         Freedom Scientific Developer Network (FSDN)

·         Freedom Scientific Scripting Language

·         JAWS

·         MAGic

·         OpenBook

·         Focus Braille Displays

BrailleX is a registered trademark of F.H. Papenmeier GmbH & Co. KG in the United States and other countries.

The following are registered trademarks of Microsoft Corporation in the United States and/or other countries:

Microsoft

Windows 10

Windows 8.1

Windows 8

Windows 7

Windows Vista

Windows XP

Windows Server

.Net Framework

Microsoft Developer Network

Microsoft Active Accessibility

UI Automation

IAccessible Interface

Windows Presentation Foundation (WPF)

Universal Windows Platform (UWP)

 

 The Script Manager application shipping with JAWS as of JAWS 2020 is used by permission of its copyright holder, Copyright 1998-2003 by Neil Hodgson at www.Scintilla.org.

 

Operators

The Freedom Scientific Scripting language supports the use of many operators. Operators are grouped by usage at heading level 2 elements, and each operator within that group is at a heading level 3 element along with its relevant descriptive information. Where the name of the operator is a punctuation character symbol or group of characters, it is spelled out in parentheses after the character or group of characters.

Unless otherwise specified, the version where the operator was first made available to the Scripting language was JAWS 4.5.

Arithmetic Operators

Operator: + (plus)

Use the + (plus) operator in equations to indicate addition or to concatenate strings enclosed in quotation marks.

Operator: - (minus)

Use the - (dash) minus operator in equations to indicate subtraction.

Operator: * (asterisk)

Use the * (asterisk) operator in equations to indicate multiplication.

Operator: / (slash)

The / slash operator is used in equations to indicate division.

Operator: % (percent)

The result of the modulus operator (%) is the remainder when the first operand is divided by the second.

Comparison Operators

Operator: == (double equal)

The == (double equal) operator asks whether the first condition is equal to the second condition.

Operator: != (is not equal to)

The != (exclamation mark equal to) operator asks whether the first condition is not equal to the second condition.

Operator: >= (greater than or equal to)

The >= (greater than or equal to) operator asks whether the first condition is greater than or equal to the second condition.

Operator: > (greater)

The > (greater than) operator asks whether the first condition is greater than the second condition.

Operator: <= (less than or equal to)

The <= (less than or equal to) operator asks whether the first condition is less than or equal to the second condition.

Operator: < (less than)

The < (less than) operator asks whether the first condition is less than the second condition.

Logical Operators

Operator: && (double ampersand)

The && (double ampersand) operator asks whether the first condition is true, and additionally whether the second condition is true.

Operator: || (double vertical bar)

The || (double vertical bar) ) operator asks whether the first condition is true, or if the second condition is true. If the first condition is true, the second condition is not evaluated. It does not matter which condition is true

Operator: ! (Exclamation point)

The ! (exclamation mark) operator negates the expression to which it is applied. It is equivalent to the "not" keyword.

Bitwise Operators

Operator: & (ampersand)

The & (ampersand) bitwise operator compares each bit of its first operand to the corresponding bit of its second operand. If both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

The best example of how to use this operator is in the NewTextEvent function in default.jss. In this function, it is used for a binary comparison of two binary numerical values. The value of nAttibutes is a multiple digit binary numerical value that indicates all the attributes applying to the buffer string. Each attribute is indicated by whether a certain bit in the byte is turned on. The & operator returns all values that exist in both numerical values. For example, if the value of nAttributes is 01001010, then the seventh bit in the result byte of nAttributes & ATTRIB_HIGHLIGHT is set to 1 (ATTRIB_HIGHLIGHT = 64 or 01000000 binary). The second bit in the result byte of nAttributes & ATTRIB_BOLD is set to 1 (ATTRIB_BOLD = 2 or 00000010 binary). The fourth bit in the result byte of nAttributes & ATTRIB_UNDERLINE is set to 1 (ATTRIB_UNDERLINE = 8 or 00001000 binary). But the third bit in the result byte of nAttributes & ATTRIB_ITALIC is set to 0 since ATTRIB_ITALIC is 4 or 00000100 binary and the third bit in the nAttributes byte is 0.

Operator: | (vertical bar)

The | (bitwise vertical bar) operator compares each bit of its first operand to the corresponding bit of its second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

This operator does a bit-by-bit comparison of two numerical values which is similar to that of the & operator. For example, the statement 00100110 | 11000000 returns 11100110.

Operator: ~ (tilde(

Use the ~ (tilde) operator with & and | (the "and" and "vertical bar")bitwise operators to mask off or exclude a bit from being processed. A good example is in default.jss in the ObjStateChangedEvent function in the following statement:
 IndicateControlState(iObjType,nState&~(CTRL_CHECKED|CTRL_UNCHECKED))
 The statement ensures that if the control is partially checked, the unchecked and checked states are not processed and therefore not indicated by JAWS.

Operator << (less than less than)

Bitwise left shift. Use to shift the bits in a bitwise pattern left. Often, this is done to move a bit to a specific position in a bit set before performing some other bitwise operation.

Operator >> (greater than greater than)

Bitwise right shift. Use to shift the bits in a bitwise pattern right. Often, this is done to move a bit to a specific position in a bit set before performing some other bitwise operation.

Miscellaneous Operators

Operator: = (equals)

Use this operator to assign a value to a variable.

Operator: . (dot)

Use the dot operator to assign or retrieve the name of an item in a collection when the name of the item is known. For example, you can use Months.January to access the item called January in the Months collection. But you may not use The dot operator to access the name of the item if the name of the item is enclosed in quotes, contained in a variable, or is returned by a function call.

Version: This operator is available as of JAWS 11.

Operator: New

 

Use the New operator to create an instance of an array of collection. You must specify the size and dimensions of the array when creating a new array and when creating an instance of the array.

Version: This operator is available as of JAWS 11.

Operator: [] (left bracket, right bracket)

Use brackets to specify the size of an array when creating the array . Also, you may use them to access elements of an array. If the array is multi-dimensional, you must separate the index for each dimension by commas. For example, [3,5] specifies the element on the third row and fifth column of the array.

Additionally, use brackets to assign or retrieve the name of an item in a collection if the name of the item is enclosed in quotes, contained in a variable, or is returned by a function call.

Version: This operator is available as of JAWS 11.

Operator: () (left-parenthesis right-parenthesis)

Use to enclose a parameter list for a function call, or to establish order of precedence.

Calling Scripts and Functions

The Freedom Scientific Scripting language supports many ways to call scripts and functions. This summary includes general descriptions and definitions of the more commonly used methods for calling scripts and functions, as well as a few code samples illustrating how to call them.

Script versus Function

Scripts and functions are standard blocks of code that govern JAWS behavior. A script is a block of code that may be tied to a keystroke or key combination the user must press in order for the script to execute. A script includes numerous steps that JAWS should perform on demand if the user presses the keystroke or key combination bound to the script.

On the other hand, a function is not performed based on the user pressing a particular keystroke or key combination. Rather, it is called by various means: by a script, by another function, or as a result of a system event. A function can return information after completing the steps within it. A script cannot return information, although both a script and a function can shift control to a different block of code. Additionally, a function may accept data from a calling script or function via parameters, and it may return a value to a calling script or function.

There are three types of functions:

·         Event - performed by JAWS automatically when Windows events occur. Without event functions, JAWS cannot speak and/or display in Braille any system changes automatically. JAWS recognizes many system events that have corresponding functions in the Freedom Scientific scripts where behavior is defined for these events. You cannot create new event functions of these types yourself. But if an application exposes events through a COM object, you can write new script functions that attach to the object for events, and that run when the application events occur. Use the function, ComAttachEvents, to attach functions to exposed COM events, and use the function, ComDetachEvents, to detach them.

 

Additionally, with caution, you may overwrite existing default event functions, and you may create application-specific versions of default event functions. For more details on working with event functions, see Events.

·         Built-in and Default Functions - an ever-growing list of built-in and default functions exposed to the Freedom Scientific Scripting language. These functions ship with JAWS and are used in the shipping code both in default and application-specific script files. With caution, you may use these functions to create and/or modify your own custom script sets. The built-in and default functions are the building blocks of your scripts and functions. For a complete listing of built-in and default functions, see all the category books and their summaries in the JAWS Reference Guide.

·         User-Defined Functions - developed either by Freedom Scientific script developers or by an independent script developer. Typically, they are created for an application the shipping version of JAWS does not support, and/or to enhance an application that JAWS does support. As with built-in and default functions, you may modify and overwrite user-defined functions, and call them from a script or from another function.

Hierarchy of Rules for Calling Scripts and Functions

JAWS performs functions based on their names and locations within the hierarchy of the script files that ship with the product, as well as script files located in your user settings\(language) folder. The rules for processing scripts and functions are as follows:

1.    Each time a function is called from within a script or another function, JAWS searches the application-specific script file first, assuming the application has focus. The application may have layered script files, and so the search starts at the top-most application script file and searches down through any script files linked through the Use statement. If the function is contained within the application-specific script file, then JAWS performs the function and stops processing.

2.    When JAWS does not find the function in the application-specific script file or files linked to it through the Use statement, then JAWS searches the default script file. If JAWS finds the function in the default script file, then JAWS performs the function and stops processing.

3.    When JAWS does not find the function in the default script file, then JAWS searches the list of built-in and default functions. If JAWS finds the function, then JAWS performs the function and stops processing.

4.    When JAWS does not find the function in the built-in and default functions, then JAWS announces, "unknown function call to", followed by the name of the function. JAWS then spells out the name of the unknown function. This error message warns you that the function JAWS tried to call may have a name that is misspelled, the function may have been deleted, or the function may not have been written.

For example, supposed you overwrite the SayLine script in your application-specific script file because processing for how the current line is spoken should be handled differently in your application from the way that the default JAWS functionality processes this script. Of course, the default version of the SayLine script still exists in the default script file. As long as your application has the focus, JAWS performs your overwritten SayLine script found in your application-specific script file rather than the default SayLine script found in the default script file.

Types of Parameters

Although scripts may receive parameters, they are almost never coded to do so. If you code a script to receive parameters, you may pass specific values to its parameters by use of key map files.

Functions may take parameters, and in fact, typically do so. parameters may be required or optional, and they may be passed by reference or not.

Parameters may be required or optional. If a parameter is optional, you must precede its declaration in the parameter list by the keyword, Optional. All subsequent parameters in the parameter list are also optional. So you only need to utilize the keyword, Optional, once in the parameter list. All parameters are required unless you use the keyword, Optional, and all parameters preceding the keyword, Optional, are required.

Whether a parameter is required or optional, it may be passed by reference or not. If you specify a non-aggregate parameter in a parameter list with the keyword, ByRef, the variable is passed by reference. This means that the variable is updated by any changes it receives when the function is called, and those changes are retained when the function is exited.

By contrast to non-aggregate variables, collections and arrays are automatically passed by reference. therefore, the keyword, ByRef, is not required when you declare collections and arrays as parameters.

If a function receives a non-aggregate variable that you have not specified as being ByRef, the variable receives a copy of the variable rather than a pointer reference to it. Therefore, any changes to the variable made in the function are discarded when the function exits.

Examples of Parameter Lists for Functions

·         Required - passed to the function when it is called. the syntax is parameter type followed by parameter name.
 
 

            String sMyName

 

·         Optional - passed to the function when it is called. The syntax is the keyword, Optional followed by parameter type followed by parameter name or names
 

            Optional String sMyName
            or
            Optional String sFirstName, String sMyLastName, Int iAge

 

·         ByRef - passed by the function when it is called rather than to it. The syntax is parameter type followed by the keyword, ByRef followed by parameter name
 
 

            String ByRef sMyName

 
 Note: When a function is declared with by reference parameters, those parameters must be included in any calls to that function.
 
 

Return Statements

A Return statement gives you great flexibility over how to call scripts and functions. A Return statement is used to terminate execution of the script or function in which it appears, and to shift control (and the value of an expression if you provide one) to the calling script or function. But since a script cannot return a value, never follow a return statement in a script by a value.

For more details on working with Return statements, see the topic in the Control Flow book at Return Statements.

Postponing Processing within a Script or Function

When you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait before it continues processing. It all depends on what event you need to complete processing, how much control you need over the wait time, and how you wish JAWS to behave after that event completes. Available methods in the Scripting language include:

·         Pause - waits for other tasks to complete.

·         Delay - waits for focus and new text events to complete with a timed delay you control and optionally by suppression of checking on whether those events have completed.

·         ScheduleFunction and UnscheduleFunction - ScheduleFunction Tells the script to schedule a function to run in a set amount of time, then continue processing the currently running function while waiting on the scheduled function to run. You may use UnscheduleFunction to cancel a scheduled function.

·         QueueFunction - waits to perform a function passed to it after JAWS has stopped speaking. You may queue more than one function to be performed in order.

·         ScheduleFunctionAfterWindowGainsFocus - allows you to call a function after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

·         SetFocusToWindowAndScheduleFunction - allows you to set focus to a particular window after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

Pause and Delay

Pause and Delay statements allow you to postpone execution of succeeding statements in your scripts and functions. Pause gives you the least control but may be all you need in order to accomplish your goal. Delay gives you more control, and allows you to specify how long to postpone processing, depending on whether focus and new text changes have completed.

For more details on working with Pause and Delay statements, see Pause and Delay.

Scheduling Functions

Scheduling functions give you the most control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these types of function calls let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions. As mentioned above, there are several types of scheduling functions.

For more details on working with scheduling functions, see Scheduling Functions.

Enumerator Function Calls

Enumerator functions call a callback function, which in turn may process the window optionally, and either stop or continue the enumeration depending on what the callback function tests and returns. For more details on working with enumerator functions, see Enumerator Functions.

Customizing Scripts and Functions from Default and Built-in Code

When you want to customize your own script files, or when you want to personalize the script sets that ship with JAWS, there are numerous methods you can use. You may create your own user-defined scripts and functions in your own script sets that do not ship with JAWS. but you may also customize existing code by modifying scripts and functions.

Choose your method for customizing your scripts and functions depending on what you need to accomplish: Are you customizing for your own needs in an application already supported by JAWS, or are you creating your own script set for an application JAWS does not support? Are you customizing an existing script or function for a specific application, or do you mean to affect JAWS behavior across all applications? How you code your customized scripts and functions may have very unpredictable results, or it may be a very powerful enhancement. It all depends on careful planning and cautious coding. We always recommend that you back up any code that ships with JAWS before customizing any code directly. Below are some methods for customizing scripts and functions.

MyExtensions

Script binary file stacking does not allow for events in the JAWS script source file (default.jss) to be overwritten in script binary files that are used by the default script binary file (default.jsb). Therefore, MyExtensions.jss and its resulting binary file, MyExtensions.jsb, are intended for you to add custom scripts and functions to the Freedom Scientific default scripts and functions, rather than for you to overwrite default scripts and functions.

You may generate a user default.jsb in the JAWS root folder settings\(language) folder. This default.jsb, compiled from its own default.jss script source file, utilizes the shared default.jsb that ships with the Freedom Scientific JAWS. In other words, it is in the user default.jss file that you should overwrite default scripts and functions.

CAUTION: Make sure that default.jss in the user area calls the one in the shared area by including a use statement for default.jsb. If this Use statement is missing, you will experience catastrophic failure when JAWS attempts to run any scripts that are in the shared default script file but not in the user default script file. Be sure that your script or function in the User default file calls the version in the shared default file where you want to defer to the default behavior of the script or function.

MyExtensions.jss and MyExtensions.jsb ship with JAWS. These files are located in the JAWS root folder of the shared settings\(language) folder. Once you compile the MyExtensions.jss file, thus creating a MyExtensions.jsb file, JAWS places these custom script source and binary files in the user settings\(language) folder.

Note: This assumes that you are using Script Manager to compile. If you elect to use your own text editor, you must ensure that you compile to the correct folder, or copy the files there manually.

MyExtensions.jss contains the following commented-out sections to help you understand the types of code blocks such a file expects:

·         The script source file begins with the typical Include statements that any script source file should have to ensure code integrity during compilation with the default JAWS scripts and functions. These are as follows:

o   Include "hjConst.jsh"

o   Include "hjGlobal.jsh"

o   Include "common.jsm"

o   Any other Include statements of header files specific to your own script set.

·         In order not to have to re-install your own script sets after JAWS automatic updates, place any additional use statements for your custom script binary files below any other "Include" statements of header files specific to your script set.

·         By default, JAWS 13 processed a literal full string match when the == operator was used on strings. The ;#Pragma line can allow the == operator to work as it did prior to JAWS 13, which was a partial comparison. If you need the == and != operators to work with partial comparisons only, add the appropriate statement below your use and Include statements. For more details on working with ;#Pragma StringComparison statements, see ;#Pragma StringComparison Directive.

·         Next are two functions that are necessary and run every time your script set loads and unloads. Use AutoStartEvent to obtain or construct object pointers or other flags or globals you need to initialize when your script set loads. Use AutoFinishEvent to destruct or unload your objects, or nullify any other flags or globals.

·         Add your own user-defined scripts and functions, and compile to create your own MyExtensions.jsb in your user settings\(language) folder.

Overwriting Default Scripts and Functions

The fundamental reason for overwriting a script or function JAWS already provides is that you want that script or function to behave differently from JAWS behavior for some special circumstance of your own. It may be for something specific to a script set you are writing for an application JAWS does not support. Or it may be for an application JAWS does support but for which you want a different behavior from JAWS default behavior.

A safe method for overwriting scripts and functions includes the use of several key function calls that ensure the default scripts and functions still work as expected. Some common function calls that you may use include:

·         PerformScript

·         CallScriptByName

·         CallFunctionByName

Using Scope to Redirect Function Calls

A very safe method for ensuring that a function call to an overwritten function is made only when you want it to be made employs the scope capabilities of the Scripting language to redirect from where the function should be processed. the syntax of scope is to use the name of the script source file where the function code is located, followed by two colons (::) and then by the name of the function as you would normally call it. for example, to call FocusChangedEvent and make sure that it is the one from the default script source file that is actually called, you write:
 

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 from within your own code in your script source file.

 

For more details on working with how to redirect function calls, see Redirecting Function Calls Using Scope.

Code Samples

Below are some code samples for the various types of script and function calls described in this summary.

Function with Optional Parameters Code Sample

The below code sample declares the String parameter as a required parameter but the Integer parameter as optional.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Optional Int iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If iAccountNumber then
            SayInteger (iAccountNumber)
EndIf
EndFunction
Script MyNameTest ()
SpeakNames (sName1) ;omits the optional parameter, just says "My name is Mary".
SpeakNames (sName2, iAccount2) ; speak both required and optional parameters.
EndScript

Function with By Reference Parameters Code Sample

The below code sample provides the integer parameter by reference.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Int ByRef iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If sMyName == sName1 then
            iAccountNumber = iAccount1
ElIf sMyName == sName2 then
            iAccountNumber = iAccount2
Else
            iAccountNumber = 0
EndIf
EndFunction
Script MyNameTest ()
Var
            Int iNum
; Any non-aggrigate variable declared in the function parameter list as ByRef is received by the function as being by reference.
; This means that the function knows where the variable is stored in memory and can change it.
; The function has the ability to change the variable, whether or not it actually does so.
; Any non-aggrigate variable received by a function receives only a copy of the variable, and any changes made to the variable do not persist when the function is exited.
SpeakNames (sName1, iNum)
SayInteger (iNum)
SpeakNames (sName2, iNum)
SayInteger (iNum)
SpeakNames (cscNull, iNum) .
SayInteger (iNum)
EndScript

PerformScript Code Sample

The PerformScript keyword must be followed by a defined script name. For example, if you write:
 SayLine (),
 you are calling the function. But if you write:
 PerformScript SayLine(),
 you are calling the script SayLine (), as if you had pressed the keystroke bound to that script.

Script SayLine ()
If MyConditions then ;whatever your special conditions are in your user-defined MyConditions function...
            DoMyFunction ; do whatever it is you want, like spell the line instead of speaking it in your DoMyFunction call.
            Return
EndIf
PerformScript SayLine () ; Call the default SayLine script bound to the keystroke, Insert+UpArrow.
EndScript

CallScriptByName Code Sample

A function call to PerformScriptByName lets you call dynamically a script whose name is passed as the first parameter. In other words, the script name does not need to be known during compilation, and the script name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the script to be run. then optionally, it takes up to nine variant script parameters.

The below nonsense sample for a supported browser for a Web site that has multiple headings checks to see if the current line is blank. If it is, then the script calls the MoveToNextHeading script to jump to the next heading level 2 on the page.

Script MySayLine ()
If StringIsBlank (GetLine () ) then
            PerformScriptByName ("MoveToNextHeadingLevelN",2)
            Return
EndIf
PerformScript SayLine () ; current line is not blank.
EndScript

CallFunctionByName Code Sample

A function call to CallFunctionByName lets you call dynamically a function whose name is passed as the first parameter. In other words, the function name does not need to be known during compilation, and the function name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the function to be run. then optionally, it takes up to nine variant parameters.

Note: Using CallFunctionByName bypasses checking parameter types that is processed when a function is invoked normally. The Return type is the same as that of the function being called.

The below code sample spells out the word at the cursor from within Notepad. although simply calling SpellString will do the same thing, this is simply to illustrate the syntax of how to use CallFunctionByName.

Script MyTest ()
If ! StringIsBlank (GetLine ()) then
            CallFunctionByName ("SpellString",getWord())
            Return
EndIf
SayLine() ; The line is blank.
EndScript

Output types

The Freedom Scientific Scripting language supports the use of many output types in order to control what is spoken and displayed in Braille at any given time. Output types are constants that represent numeric values indicating how and under what circumstances to output any content you specify in your scripts and functions.

When determining which output type to use in a function call that requires an output type parameter, you need to consider the context of the message, and also whether the message may be turned off from within JAWS Settings Center. For example, the output type for error messages is typically set to OT_ERROR, although this output type may be turned off from within Settings Center.

Definitions of Output Types

The output type constants are all listed in the default constant file, HJConst.jsh. Their values range from screen messages to help messages and smart help messages to tutor help messages, and more.

Note: The settings for the user verbosity of some output types are off by default. For example, tool tips are off by default in JAWS. Generally speaking, forcibly enabling an output type for one that the user could otherwise normally turn off from within Settings Center is not recommended because it disables the user's ability to control that setting. Therefore, be judicious when applying the following logic and do so only for very specific situations. We use the tool tip output type as an example. Tool tip is one of the output types that you may control from within Settings Center:

1.    Save the status of the setting for tool tips verbosity in a local variable.

2.    Test that status for whether it is on or off. If it is off, turn it on.

3.    Under the conditions of the event where you want to cause a message to be announced no matter how the user normally has tool tips set to output, call the function containing the tool tip output type parameter for that message to be announced just for the specific scenario you need announced.

4.    Restore the status of the tool tips verbosity to how it was set prior to turning it on to ensure that your message is processed correctly and gets announced. This is where you may use the value stored in that local variable as shown in Step 1 above.

Most of the names of the output type constants are self-explanatory. The Below list contains brief descriptions where a definition may clarify how to utilize the output type. Unless the description specifies Braille, no Braille flash message is processed from an output type. The following output type constants are available:

OT_BUFFER

OT_NO_DISABLE: Used to ensure that content is spoken regardless of what user verbosity settings and message lengths for output are in effect

OT_HELP: Braille output is "help" followed by content

OT_APP_START

OT_JAWS_MESSAGE: Braille output is "jm" followed by content that is not on screen but meant to convey something from JAWS specifically

OT_SCREEN_MESSAGE: Content is intended to convey screen message that is typically not a part of content at the cursor location but is visually on screen elsewhere, or is related to what is at the cursor location

OT_CONTROL_NAME

OT_CONTROL_TYPE

OT_DIALOG_NAME

OT_DIALOG_TEXT

OT_DOCUMENT_NAME

OT_SELECTED_ITEM

OT_ITEM_STATE

OT_POSITION

OT_ERROR: Braille output is "err" followed by an error message

OT_ITEM_NUMBER

OT_TOOL_TIP

OT_STATUS

OT_CONTROL_GROUP_NAME

OT_SMART_HELP: Braille output is "shlp" followed by content

OT_SELECT

OT_TUTOR

OT_ACCESS_KEY

OT_HELP_BALLOON: Braille output is "hbln" followed by content, for Windows XP

OT_USER_REQUESTED_INFORMATION: Braille output is "usr" followed by content that user requests on demand

OT_CONTROL_DESCRIPTION

OT_DEBUG

OT_TOASTS: Braille output is "tst" followed by auto-play notofications of thumb drives; available as of JAWS 17.0.1377 and later in Windows 8.1, and JAWS 18 in Windows 10

The following are duplicates:

·         OT_HELP_BEGINNER

·         OT_WINDOW_NAME

·         OT_APP_NAME

·         OT_MESSAGE

·         OT_STATIC

·         OT_SELECTED

Use this one only for internal testing:
 OT_STRING: Used only for debugging

·         OT_GRAPHIC

·         OT_CHAR: Uses speech markup appropriate to speaking by character. Uses pitch change for capitalization if voices are set to change pitch for capitalization.

·         OT_WORD: Uses speech markup appropriate to speaking by word. Speaks a string of spaces as "space".

·         OT_CHUNK: Speaks a specified chunk of information based on the particular parameters of the calling function utilizing the output type

·         OT_LINE: Uses speech markup appropriate to speaking by line. Speaks a string of spaces as "blank".

·         OT_SPELL

·         OT_SAYALL

·         OT_KEYBOARD

·         OT_USER_BUFFER: Used to redirect SayMessage and SayFormattedMessage strings to the User Buffer

·         OT_PHONETIC_CHAR: Speaks characters phonetically

·         OT_BRAILLE_MESSAGE: Used only for debugging

·         OT_HIGHLIGHTED_SCREEN_TEXT

·         OT_NONHIGHLIGHTED_SCREEN_TEXT

·         OT_MOUSE_SPEECH

·         OT_MOUSE_SPEECH_CONTROL_TYPE

·         OT_MOUSE_SPEECH_ITEM_STATE

·         OT_ANNOUNCE_POSITION_AND_COUNT

The following are depricated output modes:

·         OT_TEXT

·         OT_WINDOW_INFORMATION

·         OT_DIALOG_INFORMATION

·         OT_APP_INFORMATION

·         OT_FONT

·         OT_CURSOR

Code Samples of Output Type Usage

Following are several code samples to illustrate the power of output types.

Message Length Verbosity

This code sample makes use of the long and short message verbosity capabilities of JAWS:

Script TestOutputTypes ()
; This silly message speaks a message that is not on screen and displays it as a flash message in Braille as long as the Braille flash message and Braille message verbosity is set to the default values.
; Depending on whether the user verbosity is set to process long or short messages, either the long message or the short one is spoken and Brailled.
; By default, long messages are always processed.
Var
            String msgMyLongMessage_l,
            String msgMyShortMessage_s
Let msgMyLongMessage_l = "Hello, I am a long message."
Let msgMyShortMessage_s = "Hello."
SayMessage (OT_HELP, msgMyLongMessage_l,msgMyShortMessage_s)
EndScript

Setting the Output Type for Proper Processing

This code sample places the setting of the output type to spell text phonetically into a local variable. It then tests for whether that option is on or off; if off, it turns on the output type. It processes a nonsense message using the "spell" output type. Then it restores the setting for the output type to its former state if necessary. Finally, it processes the message again, this time with the output type in its normal state.

Script TestChangingOutputTypeStatus ()
Var
            String msgMyLongMessage_l,
            String msgMyShortMessage_s,
            Int iSpellPhonetic
msgMyLongMessage_l = "Hello there."
msgMyShortMessage_s = "Hello."
iSpellPhonetic = GetJCFOption(OPT_spell_phonetic)
If !iSpellPhonetic then
            SetJCFOption(OPT_spell_phonetic,on)
EndIf
; Spell the message phonetically.
SayMessage(ot_spell,msgMyLongMessage_l,msgMyShortMessage_s)
If GetJCFOption(OPT_spell_phonetic) != iSpellPhonetic then
            SetJCFOption(OPT_spell_phonetic,iSpellPhonetic) ; restore to prior state
EndIf
; Spell the message normally.
SayMessage(ot_spell,msgMyLongMessage_l,msgMyShortMessage_s)
EndScript

Output Type for use in the Virtual Viewer

This code sample places the text of the message into the virtual viewer. Press Esc to exit the virtual viewer if you run this sample in a script.

SayMessage(ot_user_buffer,"Hello, world.")

Implementing a Virtual Viewer Window

JAWS offers a unique method for viewing certain types of documents and for displaying certain types of information on the screen. A "virtual document" is a simplified and logically displayed, navigable representation of a complex document which itself may not be directly navigable. JAWS automatically virtualizes the user's experience in the supported browsers: Google Chrome, Edge Chromium, Firefox, and Internet Explorer, and applications such as Adobe Acrobat Reader, and Microsoft Outlook read-only messages. Braille tracks what JAWS announces as you navigate through a virtualized message or document, Web page or HTML help window. Since UIA support is ever more robust, there are situations where you can have one browser window automatically virtualized and another not. An example where not virtualizing a browser window works best is the Google web-based EMail application. and, in some cases, JAWS provides a mixture of virtualized and un-virtualized options within the same browser application - for example, Google Docs.

The Virtual Viewer Window

The Freedom Scientific Scripting language lets you create virtual viewer windows using scripts and built-in functions. The virtual viewer is also referred to as the user buffer. And numerous functions and constant definitions refer to the "user buffer".

The virtual viewer window (user buffer) displays text and other elements reformatted so you may peruse the content without affecting the current application. For example, JAWS utilizes the virtual viewer to display on demand hotkey help, general Windows help, screen-sensitive help, and more. Once the virtual viewer window has the focus, you may examine its content by using any standard reading commands and with SayAll.

Typically, you may dismiss a virtual viewer window by pressing ESCAPE or ALT+F4. And if it contains links to non-virtualized environments, you may dismiss a virtual viewer window by pressing ENTER on those links.

 When JAWS displays information in the virtual viewer, the virtual cursor is active. As mentioned above, you can use normal navigation keystrokes to read all the text in the virtual viewer window. But you may also select any part of that text and copy it to the clipboard.

 

By default, when a script or function generates text to be displayed in the user buffer, that text is displayed in the virtual viewer as black on a white background, has a font size of 12 and a font type of Arial. The text displayed in the virtual viewer is identical to text found in any word processor or text editor. But you may control how the text is displayed, and even whether it is visually displayed at all, depending on what functions you use to place text into the virtual viewer, and whether certain JAWS options are enabled.

At Times, you may prefer virtualized text to be invisible in order not to distract from what is visually on screen. If the option to show virtual viewer on screen is turned off, the virtual viewer does not appear visually on screen; however, the virtual viewer does appear to the speech and Braille user as if it were actually on the screen. Examples of this occur in Microsoft Excel and in Microsoft PowerPoint slide shows.

The Results Viewer

Since JAWS 11.0, JAWS offers an application called the Results viewer, which is an extension of the virtual viewer concept. But a Results viewer window is actually a separate application that runs as part of the extensive JAWS features. A virtual viewer window typically exists as a direct user request for information specifically from the current application. Screen-sensitive help is an example.

Some differences between the virtual viewer and the Results Viewer application are that the virtual viewer window closes when it looses focus. The Results Viewer application remains open until you close it, which means that it may remain open when focus is switched away from it to another application. You may use the mouse to click links in the Results Viewer but not in the virtual viewer. And you can have only one instance of a Results Viewer window at a time.

The Results Viewer is an application that you invoke to gather information from the Internet or from specific applications. JAWS populates a Results Viewer window with the content gathered for you to navigate, copy and paste, etc. Information shown when you invoke the Research-It feature is an example of a Results Viewer window, and it typically displays HTML elements - e.g., links. Speech History is another, but it has no HTML, just text.

So again, the Results Viewer can display HTML; whereas, the Virtual Viewer cannot. Thus, the Results Viewer can display headings, links, tables, etc. You must enter it as HTML, programmatically or statically. JAWS does not include HTML functions. If you include HTML tags when sending text to the Results Viewer, the Results Viewer application interprets the whole string as HTML. In summary: you must be familiar with HTML coding practices if you wish to generate complex content with HTML elements to display in a Results Viewer window.

Displaying Text in a Virtual Viewer or Results Viewer Window

For all virtual viewer code to work properly, your script source file must contain at least the following three Include statements:
 

Include "hjconst.jsh"
Include "hjglobal.jsh"
Include "common.jsm"

 

Checking the Virtual Viewer Status

Before you display text in the virtual viewer, ensure that the virtual viewer is not already running through another script or function. If the virtual viewer is already active, you should deactivate it. Deactivating the virtual viewer before you display new information in it prevents the text from running together. To do this, you should either:

·         Place the function, EnsureNoUserBufferActive(), before any other function calls that activate and display text in the virtual viewer.

·         Use built-in or default functions to test for whether the user buffer is already active and clear it if it is not.

Use the built-in function, UserBufferIsActive, to check the status of the virtual viewer. The function returns an integer value of 1 when the virtual viewer is active, and returns an integer value of 0 when the viewer is not active. When the virtual viewer is active, you use the built-in function, UserBufferDeactivate, to close the virtual viewer. This function closes the virtual viewer just as if you had pressed ESCAPE from the keyboard.

As with the call to EnsureNoUserBufferActive, always place both the UserBufferIsActive and the UserBufferDeactivate functions within a conditional statement before calling any function that activates the virtual viewer. And again, unless you really want to append to already existing text in the user buffer, make sure to clear the user buffer so that the virtual viewer displays only the text you direct it to display.

Code Samples

In below code samples, the first two are equivalent but the third one is not. the first two clear the user buffer so that you may populate the virtual viewer with new content. The third code sample lets you append to existing content in the user buffer.

;Checks for whether the user buffer is active and if so, deactivates and clears its content.
If UserBufferIsActive () Then
            UserBufferDeactivate () ; close the virtual viewer
            UserBufferClear ()
EndIf
;By default, checks for and clears the user buffer if it is active. If the optional parameter passed to this function is set to TRUE, the buffer content is retained.
EnsureNoUserBufferActive () ; Closes the virtual viewer and clears its buffer content if the viewer is already active.
; Allows for appending to the user buffer that already exists in the virtual viewer
EnsureNoUserBufferActive (TRUE) ; Closes the virtual viewer but does not clear its buffer content.

Checking the Active Cursor

Checking if the virtual cursor is active is different from determining whether the user buffer is active. The Returns are the same in that:

·         Returns an integer value of TRUE if the Virtual PC cursor is enabled, or if the user virtual buffer is active.

·         Returns an integer value of FALSE if the virtual PC cursor is disabled, or if the virtual user buffer is not active.

 

IsVirtualPCCursor () ; Checks to see if the Virtual PC cursor is being used to navigate within the window with focus.
UserBufferIsActive () ; Determines if the User Virtual Buffer is currently active.

Creating and Displaying the Messages

To display messages in the virtual viewer, you should store them as constants in a message (.jsm) file. Use JAWS message formatting conventions. You may format the text of messages to be displayed in the virtual viewer with spaces, hard returns, tab stops, etc. JAWS retains the format of your messages when processing them for displaying in the virtual viewer.

For messages you plan to use to speak or flash in Braille, you may create a long and a short version of the same message. But for messages you plan to display in the virtual viewer, you must test for whether to display a long or a short message because the virtual viewer functions do not take both long and short message parameters in the same function call. So although you can still create a long and a short version of the same message, you must test for whether to display one or the other before calling the function that places the text into the virtual viewer.

You can also use placeholders in messages to be displayed in the virtual viewer. Using placeholders allows for text to be added to the message at the time JAWS processes the script.

After you have created your messages and determined that the virtual viewer is not active, you are ready to display text in the virtual viewer. You can use numerous functions for this purpose. But some of the more common methods include calls to:

·         SayMessage

·         SayFormattedMessage

·         UserBufferAddText

·         UserBufferAddFormattedMessage

For the SayMessage and SayFormattedMessage functions, The first parameter is the output type that directs JAWS how to speak or display the message. Use the output type constant, OT_USER_BUFFER, in either function to direct JAWS to display your message in the virtual viewer.

The second parameter for SayMessage and SayFormattedMessage is the text of the message you wish JAWS to speak or display. Since the output type parameter passed in the current scenarios is for displaying text in the virtual viewer,this parameter can be a quoted string of text, a string variable containing the text or a message constant contained within a JAWS message (.jsm) file.

The functions that allow more parameters and thus give you more control over the text and how it is displayed in the virtual viewer allow for things like the type of font, its color, and so on. All these functions are listed in the Reference guide in the section on Virtual Viewer Functions.

Code Sample 1: Simple Virtual Viewer Functions

The below code sample checks for whether the user verbosity level is higher than beginner level. If it is, the short message is passed to the user buffer. If not, the long message is passed. This is a very simple example of how to test and control the length of the message passed to the user buffer.

If you want very specific control over the length of the message passed to the user buffer, you may need to overwrite built-in message functions or functions that pass messages to the user buffer with your own particular tests in order to determine whether a long or short message should be passed to the user buffer for displaying in the virtual viewer.

If GetJcFOption (Opt_User_Mode) >= intermediate ; user verbosity is set to intermediate or advanced for the current application.
            SayMessage (ot_user_buffer, msgHello_s)
Else
            SayMessage (ot_user_buffer, msgHello_l)
EndIf

Code Sample 2: Using SayMessage and SayFormattedMessage

The below code sample uses calls to both SayMessage and SayFormattedMessage functions to display text in the user buffer, passing it a message that is formatted with a string that may change depending on conditions you determine.

If the key assigned to the script is pressed twice quickly, then several messages are passed to the user buffer to be displayed in the virtual viewr, including the very commonly displayed message, "Press Esc to close this message". That message is found in the common.jsm message file that ships with JAWS and so you need an include statement for "common.jsm" in your script source file, as shown here.

Also, notice that the test message to be displayed in the virtual viewr has an extra blank line in the message definition. Any information you place into a message constant using the Messages ... EndMessages format allows you to include formatting: spaces, tabs, hard returns, etc., as mentioned above. Alternatively, you may add the constant, cscBufferNewLine, to force a blank line in the virtual viewer.

Finally, the script is written in such a way that if you press the key assigned to the script just once after the virtual viewer is already displaying the test message, nothing happens.

Messages
@msgTestMessage
Hi. I am a test message.
@@
@msgMyUserBufferTestMessage
I am %1.
@@
@msgNotVirtual
not %1
@@
EndMessages
Script MyUserBufferTest ()
If IsSameScript ()
            EnsureNoUserBufferActive ()
            SayMessage (ot_user_buffer, msgTestMessage)
            SayFormattedMessage (ot_user_buffer,
                        FormatString (msgMyUserBufferTestMessage, cmsgVirtualViewer))
            SayMessage (ot_user_buffer, cmsgBuffexit)
            Return
EndIf
If Not UserBufferIsActive ()
            SayFormattedMessage (ot_JAWS_message,
                        FormatString (msgNotVirtual, cmsgVirtualViewer))
EndIf
EndScript

Code Sample 3: Using Functions that Control How Text is Displayed

The below code sample shows how you might take advantage of the UserBufferAddText function to populate the virtual viewer window with very specific control of the way the text is displayed. In the code sample where the optional parameters are used, note that the parameters passed to the function are from constants found in the common.jsm file that ships with JAWS. Also, note that when optional parameters are passed, all of them must be passed up to the point where you no longer need to make a change from the default parameters.

You may mix calls to SayMessage, SayFormattedMessage, and UserBufferAddText. But for purposes of clarity, the two sample scripts below call the function, UserBufferAddText.

The first example shows very simple calls to the function but passes the required string parameter in different ways.

Messages
@msgMyTest
Hello, I am a test.
@@
@msgMyVirtualViewer
I am a message in the virtual viewer.
@@
EndMessages
String Function MyUserBufferText ()
Return msgMyVirtualViewer
EndFunction
Script MyUserBufferTest ()
; Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
;The below three function calls populate the text to be displayed in the virtual viewer when the script is run.
; You may call SayMessage and SayFormattedMessage instead of UserBufferAddText; but notice the extra control you have by utilizing this function call.
; Pass a simple message constant as the first parameter, which is required. But pass nothing else as aalll other parameters are optional.
UserBufferAddText (msgMyTest)
; Pass a function that returns a string as the first parameter, which is required. but pass nothing else as all other parameters are optional.
UserBufferAddText (MyUserBufferText ())
; Pass some text as the first parameter, which is required.
; Then for the optional parameters, pass nothing for the next two parameters, the font name as Aerial, size as 12, no attributes, and foreground color of black and background color of white.
; This level of specificity dictates that JAWS should display the text of the first parameter in the virtual viewer with these conditions applied.
UserBufferAddText (MyUserBufferText, cScNull, cScNull, cFont_Aerial, 12, 0, rgbStringToColor(cColor_BLACK), rgbStringToColor (cColor_White))
; Pass the message constant from common.jsm for closing the virtual viewer.
; Pass a blank line.
UserBufferAddText (cscBufferNewLine)
UserBufferAddText (cmsgBuffExit)
; Now activate the user buffer to receive the user buffer text just populated.
If ! UserBufferIsActive ()
            UserBufferActivate ()
EndIf
; Ensure that the virtual cursor begins at the top of the virtual viewer window.
JAWSTopOfFile ()
; Say the first line of text.
SayLine ()
EndScript

In the next example, we call UserBufferAddText again but passing it many of the optional parameters with different information from the defaults that the function expects. This shows how to control the way text is displayed in the virtual viewer. We also call RedirectToUserBuffer as the last function call so that a SayAll from the top of the virtual viewer window begins when the script is run.

Const
            iAccount1 = 12345,
            iAccount2 = 54321,
            sMary = "Mary",
            sJohn = "John"
Messages
@msgMyAccountTitle
Account Numbers by First Name
@@
@msgMyAccount
I am %1 and my account is %2.
@@
@msgUnknownAccount
I don't have a name for %1 account.
@@
EndMessages
String Function MyFunctionTest (Int iNum)
If iNum == iAccount1
            Return FormatString (msgMyAccount, sMary, IntToString (iNum))
ElIf iNum == iAccount2
            Return FormatString (msgMyAccount, sJohn, IntToString (iNum))
Else
            Return FormatString (msgUnknownAccount, IntToString (iNum))
EndIf
EndFunction
Script MyAccountUserBufferTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
; The below function calls populate the text to be displayed in the virtual viewer when the script is run.
; Pass the title to be displayed as the first line in the virtual viewer..
UserBufferAddText (msgMyAccountTitle)
; Pass a function name for a function that returns a string, then nothing for the next two parameters, then the font type, size, and foreground and backgbround colors to be displayed in the virtual viewer.
; The function itself passes a hard return by default. but for readability in the virtual viewer, add an extra blank line to the first parameter of each call.
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount1), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount2), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (0), cScNull, cScNull, cFont_Times, 12, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
; Pass a blank line along with the message constant from common.jsm for closing the virtual viewer, and cause a SayAll to begin from the top when the script is run.
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
EndScript

Displaying Keystrokes as Links

In addition to text, you can create keystroke links in the virtual viewer. To do this, you add the KeyFor function within the body of any individual message stored in a JAWS message file. The KeyFor function requires the name of a script as its only parameter.

When JAWS displays the message containing the KeyFor function in the virtual viewer, JAWS retrieves the keystroke for the script named passed as a parameter to the function. The keystroke is displayed as a link that you can activate by pressing ENTER on the line containing the keystroke. The keystroke is displayed in underlined, blue text on the same white background as other text contained within the virtual viewer.

The syntax for using the KeyFor function in a message is:
 %KeyFor (ScriptName)
 
 The percent sign preceding the function name acts as a placeholder for the keystroke within the message. The script name does not include the parentheses and can be located in either the default or an application-specific script source file.

Code Sample: Creating a Link to be Displayed in the Virtual Viewr

The below code sample shows a very simple message and a link to JAWS hotkey help as you would display it in the virtual viewer.

Messages
@msgHelpMessage
Below is a link to common helpful JAWS commands.
@@
@msgKeyForFunctionTest
To see a list of general JAWS hot keys, press %KeyFor (HotKeyHelp).
@@
EndMessages
Script MyKeyForFunctionTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
EnsureNoUserBufferActive ()
;The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
;The below function calls populate the text to be displayed in the virtual viewer when the script is run.
UserBufferAddText (msgHelpMessage + CscBufferNewLine)
; The below call passes the name of the message containing the link. It must be called by the FormatString function to be processed properly.
;The next parameter is a string representing the function name, including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
; The third parameter is a string representing the name to be used in the list links dialog when it is invoked with the Virtual viewer active.
; The rest of the optional parameters are not necessary because the defaults already handle them.
UserBufferAddText (FormatString(msgKeyForFunctionTest), cFuncHotKey, cMsgHotKeysFunc)
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Checking Whether the Virtual Viewer window is Displayed Visually

By default in most applications, text displayed in the virtual viewer is visible on the screen. But there may be times when you wish to suppress the text from showing visually because it interferes with the actual visible data. An example of this is when you display a chart in Excel in the virtual viewer. You would not want the virtual viewer version of the chart to obscure the visual version of the chart.

You may turn off displaying of virtual viewer text in general through the JAWS user interface in the Settings Center dialog. But you may also handle this through your scripts and functions for special cases.

Code Sample

The below code sample checks for whether the virtual viewer is set to be displayed visually. if it is, we turn it off temporarily, show virtual viewer text, and then turn it on again. If it is not set, perhaps the user had disabled the feature. so we leave it as is.

Script ShowVirtualViewerTest ()
Var
            Int iVirtViewer,
            String sText
iVirtViewer = GetJCFOption(OPT_VIRT_VIEWER)
sText = "This text is not displayed on screen because the option to display text in the virtual viewer visually is off."
If iVirtViewer == TRUE ; Virtual viewer is visible.
            SetJCFOption (OPT_VIRT_VIEWER, 0) ; Turn it off.
EndIf
UserBufferClear ()
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
If iVirtViewer == TRUE ; Virtual viewer was on before displaying text in the virtual viewer.
            SetJCFOption (OPT_VIRT_VIEWER, iVirtViewer) ; Turn it back on.
EndIf
EndScript

Giving a Title to the Virtual Viewer Window

By default, when JAWS displays text in a virtual viewer window for something like screen-sensitive text, if the user requests the title of the window, JAWS provides a generic message, "Virtual Viewer". That message is spoken and flashed in Braille. But there may be times when you want your virtual viewer text to be displayed with a special name for the virtual viewer window in which it appears. For example, in Microsoft Excel charts, if the user requests the title of the chart being displayed in the virtual viewer, JAWS provides this information specifically instead of indicating the generic message.

In order to make your scripts and functions behave properly for this special case, you must do two things:

1.    Overwrite the default script called SayWindowTitle so that it knows under what special circumstance to indicate the window name of your special virtual viewer window.

2.    Use the special function, UserBufferActivateEx instead of the more general function, UserBufferActivate, to activate the user buffer in your script that displays the special virtual viewer window.

The UserBufferActivateEx function takes four required parameters. The first parameter is a string containing the window name for your special virtual viewer window. This parameter passes a window name to be used internally by your overwritten SayWindowTitle script. It is not a window name that appears at all in the text of your special virtual viewer window. The second parameter is also a string, indicating the type of window you are generating. You may leave this string blank by using the constant, cscNull, which in effect is an empty string. The third and fourth parameters are integer values representing the window type code and control ID for your special virtual viewer window. You may use 0 for each of these parameters.

Code Sample

The below code sample overwrites the default script called SayWindowTitle for the special case of your special virtual viewer window. You may restrict the conditions even further than what is shown here to ensure that only the window name for your special virtual viewer window is processed. but this code sample simply test for whether the window name of the virtual viewer is not empty.

Script SayWindowTitle ()
Var
            String sVirtWindowName
sVirtWindowName = UserBufferWindowName ()
If UserBufferIsActive ()
            If sVirtWindowName != cscNull
                        SayMessage (ot_user_requested_information, sVirtWindowName)
                        Return
            EndIf
EndIf
PerformScript SayWindowTitle ()
EndScript
Script WindowTitleVirtualViewerTest ()
Var
            String sTitle,
            String sText
sTitle = "My Virtual Viewer Window"
sText = "I am a message in this special virtual viewer window that has a name."
EnsureNoUserBufferActive ()
UserBufferActivateEx (sTitle,cscNull,0,0)
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Results Viewer Functions

Starting with JAWS 11.0, the Results Viewer application has been available for customization through your own scripts and functions. Its functions behave in a very similar manner to the functions for displaying text in the virtual viewer.

Additional Resources

For more details on working with all types of functions for the Virtual Viewer and Results Viewer, see the category books and summaries in the JAWS Functions book of the Reference Guide.

Web App Scriptability

Since JAWS 17, the Freedom Scientific Scripting language supports scripting specifically for a Web App in a browser. When referring to a browser, it is always assumed that browser is supported by JAWS. Hence, a scripter may create domain-specific scripts for a web page or web application. When a specific domain is viewed in a supported browser, the domain-specific scripts are loaded in addition to the host application scripts. Thus, the behavior in the domain-specific app supersedes application behaviors.

The ability to customize a Web app through the Freedom Scientific Scripting language allows you to:

Associate a script set (.jss/.jsb, .jkm, .jcf and .jdf) with a given domain name by adding an entry in the [Domains] section of confignames.ini, which associates the website domain with the name of the script set for the domain.

Obtain well-formed XML from the DOM Server which represents Freedom Scientific's view of the browser webpage or application at any given point in its execution. Note that, while the FS XML DOM is based on the application's DOM, extra FS attributes have been added to the nodes.

Use the Scripting language, along with a Com Object such as the MSXML engine and XPath queries, to parse and interact with the XML as a node tree.

Request that the DOM Server act upon a particular element in that node tree by finding the equivalent node in the real DOM and invoking an action.

Write custom scripts based on the information in this node tree (e.g., find the nth heading on the page and read it, find the following table, add up the numbers in the last row of the table, and speak the total, all without moving the virtual cursor).

 

Definitions

 

·         DOM Server - Freedom Scientific’s module which is used to construct a virtual view of a document hosted in a web browser.

·         Layering - When one script set is loaded on top of another such that scripts in the set loaded later supersede scripts loaded in an earlier set. Scripts which are not overridden in a set loaded later are inherited from a set loaded earlier.

·         Supported Browser - Currently Freedom Scientific supports the following web browsers:

o   Firefox.

o   Google Chrome.

o   Microsoft Edge Chromium

o   Internet Explorer.

·         Web Application - An application hosted in a web browser.

·         Well-formed XML - XML which may be parsed by the MSXML Com object without errors.

·         XML (Extensible Markup Language) - A well-formed markup language for describing complex documents.

·         XPath: An XML query language that allows the parsing and querying of information in an XML document.

 

Examining a Webpage with the XMLDom Browser

 

 JAWS has extensive tools you can use in addition to, or instead of, writing functions to obtain XML information about a particular webpage. From the page you want to inspect:

1.    Toggle the Script Utility on with JAWSKey+WINDOWS+NumpadMINUS.

2.    Press ALT+X. The entire page XML information is presented in the virtual viewer for you to examine.

3.    Use the keystrokes normally used for determining window classes, control types, and so on - namely: F3 and F1, except that now these keystrokes provide information such as nodename, tag info, number of children (elements), etc. TAB and SHIFT+TAB move to next/prior siblings of an element if they exist. F2 and SHIFT+F2 move down and back up through the tree of nodes. You can use the cursor to examine more closely the text that is displayed in the virtual viewer for the current node.

4.    Toggle the XMLDom browser mode off when done examining the webpage by pressing ALT+X and by toggling off the Script Utility itself with JAWSKey+WINDOWS+NumpadMINUS. If you toggle off the Script Utility before toggling off the XMLDom browser mode, it immediately reverts to a normal view of the webpage.

 

Designing a Custom Script Using Special Functions

You must enable your custom scripts to load within any of the supported browsers by adding a section and certain lines to Confignames.ini. Note that this is not the same as the information presented in Domain-Specific Utilities where you are using the existing JAWS utilities such as Settings Center to specify how you prefer JAWS to behave for a certain domain. For example, you want JAWS to speak your bank site's numbers differently than the way you want JAWS to speak numbers everywhere else. So you choose to change some text Processing options in Settings Center just for that site. Your ConfigNames.ini file contains a section called [Confignames] and entries in that section refer specifically to that bank site. A .jcf file gets created with the same name as your bank's site to match the entry in ConfigNames.ini.

For the present discussion however, let's assume that your custom scripts are the sample provided by Freedom Scientific for the Sharepoint Web app from Microsoft. For this and any other custom scripts to run within your browser, you must create or add to the ConfigNames.ini file in your User\Settings(language-specific) folder with the section called [Domains]. The entries in this section must be in the form: specific Web domain = (equals sign) followed by the name of your custom script set. So in this example, your Confignames.ini file would show this:
 

[Domains]
fsservices-my.sharepoint.com=SharePointWeb

 

Note: This particular entry already exists but is commented out in the Shared ConfigNames.ini file located in Program Data\Freedom Scientific\JAWS\Version\Settings\Language-specific folder.

Using Regular Expressions for ConfigNames.ini Entries

'Regular expression' entries were introduced in JAWS 2020 for use in the ConfigNames.ini file. Regex is short for regular expression, a string of text used to create patterns to help match, locate, and manage text. Programming languages utilize this basic concept for searches, etc. to manage patterns such as wildcards.

Suppose that you develop a set of custom scripts for your specialized Web-based application, but you do not want the custom scripts to load everywhere within the application, or you want every domain that includes your application's name in some way always to load your custom scripts. A regular expression entry in the ConfigNames.ini [domains] section may be very helpful to control when custom scripts load or do not load.

Use the following guidelines and syntax for regular expression entries where "Custom Script" is the actual name of your custom script set, domain.com is the URL, and subpath is a subset of that domain:
 

·         Custom script loads for any domain matching the URL obtained from the address bar:
 

regex:domain.com=CustomScript

·         Custom script loads for URLs matching the given domain and subpath instead of matching just the domain:
 

regex:.*domain.com/subpath/.*=CustomScript

·         Custom script should not load and JAWS loads browser default settings and scripts:
 

regex:URL=

·         Custom script loads for a local file within a supported browser matching the name of your local file:
 

regex:file:.*MyFile.html=Custom Script

 Or only for my local file in a specified path:
 

regex:file:C:\path1\path2\MyFile.html=CustomScript

 

 

Functions for Customized Web App Scripts

Some of the functions you can use to customize your Web Aps include:
 

·         GetDocumentXML - returns XML for the current virtual document. It obtains well-formed XML for the entire document from the Dom Server for parsing using the MSXML com object.

·         GetElementXML - returns XML for the current virtual element. It obtains well-formed XML for the current element and its direct ancestors, depending on parameters passed to the function, from the Dom Server for parsing, using the MSXML com object. Passing a 0 retrieves only the current elemet's information. Passing 1 retrieves the element's parent; passing 2 retrieves the element's grandparent, etc. Passing -1 retrieves all ancestors of the element.

·         PerformActionOnElementWithTagAndAttribute - finds an element in the DOM by tag and attrib/value pair and performs an action on it such as setFocus, makeVisible or doDefaultAction.

·         PerformActionOnElementWithId - finds an element in the DOM by its unique ID and performs an action on it such as setFocus, makeVisible or doDefaultAction.

 

For example, let's say you want to create a custom script for the Freedom Scientific site itself. Use the function GetDocumentXML or GetElementXML to determine what content to utilize to pass parameters to the functions that perform one of the actions described above. Then return the string from either function into the User Buffer in the virtual viewer or copy the string to the clipboard. Paste the copied string into a text editor like Notepad where you can save the content and examine it at leeisure.

Special Note:
 In order to pass the FSID parameter to the function, PerformActionOnElementWithId, the FSID must be obtained for the current session of the page. It is a dynamically changing value, much like a window handle that changes each time the Web page loads. Therefore, you must use the FSId returned by GetDocumentXML or GetElementXML just before you pass it to PerformActionOnElementWithId. Clearly, it is less convenient to use PerformActionOnElementWithId rather than PerformActionOnElementWithTagAndAttribute. But both functions can be very useful. See the sample script set for Sharepoint that ships with JAWS, and is presented below for your convenience.

Once you have the various values you need from the XML code, you may add to the browser's .jss file or simply create your own special script source file that, when compiled, will generate the custom script set for you. Add your script set's name to the ConfigNames.ini file section called, [Domains] as described above. For example, your custom script set could be for the Freedom Scientific site and be called "MyFSWeb". The entry in the Confignames.ini file in the [Domains] section would be something like this:
 

www.freedomscientific.com=MyFSWeb

 

The default scripts load "FSXMLDomFunctions.jsb". This file contains a set of functions which can be called to perform some routine tasks without having to write the code from scratch each time it is needed. You can read the documentation in the FSXMLDomFunctions.jsd file, and the source code is available in the FSXMLDomFunctions.jss file.

Code Samples

Some samples are provided below based on the Freedom Scientific main webpage for illustration purposes only. clearly, you can easily make JAWS start reading or hide elements from a particular point through the Flexible Web feature, or simply by using quick keys. Nevertheless, these samples illustrate how these functions can help you determine the information you need to customize your web app scripts.

Example 1: Moving to the Search Button

Suppose all you want to do is to be able to move with your own custom script key to the Search button on the freedom Scientific page. First obtain the element's XML info either by using the GetDocumentXMl function or better yet with the newer function, GetElementXML. Here's how:

1.    From the www.freedomscientific.com webpage, move directly onto the button called "Search".

2.    Write a script that obtains the XML information for this element:
 

Script GetElementInfo ()
Var
            String eXMLInfo
;initialize
eXMLInfo = cscNull
eXMLInfo = GetElementXML ()
If  eXMLInfo () != cscNull
            SayString "Found info")
            CopyToClipboard (eEXMLInfo)
Else
            SayString ("element info not found")
EndIf
EndScript

 

Now examine the XML information just retrieved by pasting it into a text editor like Notepad. You should then be able to write a script that contains a call to PerformActionOnElementWithTagAndAttribute like this:
 

PerformActionOnElementWithTagAndAttribute (Action_SetFocus, "Button", "id", "BtnG")

 

Example 2: Moving to the Search Query edit field

Suppose instead that you want to move with your own custom script key to the Search edit query field on the freedom Scientific page. First obtain the element's XML info by moving to the element and then using a script test just like the one shown in stepd 2 of Sample 1 above. Paste the resulting XMl info into a text editor like Notepad and examine its contents. You can then write a script that puts focus directly on the field, as in the following:
 

PerformActionOnElementWithTagAndAttribute (Action_SetFocus, "INPUT", "name", "q")

 

Example 3: Activating the Shop Link

Finally, let's go shopping for products and services at the Freedom Scientific EStore. Again, you may use the script shown in Example 1 or a variant of it to obtain the XML of the Shop link on the Freedom Scientific webpage. You may need to vary the script slightly by passing it a parameter of 1 to get more useful data from an ancestor of the element. You could then write a script that activates this particular link as follows:
 

PerformActionOnElementWithTagAndAttribute (action_DoDefaultAction, "A", "href", "http://sales.freedomscientific.com/")

 

Running a Custom Script Set for your Web App

For the Sharepoint scripts that ship with JAWS, if the scripts are not working - that is, the toolbars cannot be activated by the JAWSKey+CTRL+F8 keystroke, or whatever other custom scripts you have coded, check the address of the current domain. If necessary, add another line to your confignames.ini file so that your custom scripts load for that specific domain.

Sample Code for SharePoint

Below is a sample script which may be used to interact with the xml on a page. This script finds and lists toolbar controls in the Sharepoint web application and allows the user to click the chosen control. The script set is included with JAWS since JAWS 17. It is available when you uncomment the entry for SharepointWeb found in Confignames.ini - as described above.

Additional Resources

From the Microsoft Developer Network pages:

·         Sampel of XPath syntax

·         Sampel of using parser though script syntax will be slightly different, principle is same

 

From Wikipedia for Regular Expressions:  

 

Overview

UTF-8 is an acronym for UCS Transformation Format — 8-bit multibyte character encoding for Unicode. ANSI is an acronym for American National Standards Institute. For more technical information about the meanings of these terms, please visit:

http://en.wikipedia.org/wiki/UTF-8
 and
 http://en.wikipedia.org/wiki/ANSI
 and
 http://en.wikipedia.org/wiki/Unicode

For our purposes, ANSI and UTF-8 refer to a method for reading and writing files for JAWS to utilize where there are characters in the code or in the files whose character values are higher than ASCII 127. ASCII characters include all standard punctuation and alphanumeric characters for Western European languages, as well as various other symbols. From 127 to 256, there are characters like smiley faces, Greek characters, etc. Beyond 256 are over 109,000 Unicode characters, including Hebrew characters, Cyrillic characters, etc. Files containing such characters must be formatted properly in order to be interpreted by JAWS. So the UTF-8 file format for the Script Manager supports many languages other than English. This file format can even include characters that are used in Western European languages but have accent marks like vowels with an acute or umlaut mark.

For JAWS support to interpret UTF-8 file formats correctly, in the past, localizers had to manipulate script files that included Unicode characters one file at a time and by hand in order to save files with Unicode characters properly in UTF-8 format. Otherwise, files containing Unicode characters would wipe out those characters in when saving or compiling files with the JAWS Script Manager. The UTF-8 implementation for Freedom Scientific JAWS support via scripting should eliminate this problem.

Definitions

 Script source related files are those with extensions:

·         .jss - script source

·         .hss - hidden script source

·         .jsh - script header

·         .hsh - hidden script header

·         .jsm - script message

·         .jsd - script documentation

·         .sbl - speech symbols file

·         .jbt - JAWS Braille table file

·         .CHR - character substitution

Script binary files are those with the extension of .JSB. BOM (Byte Order Mark) is a series of three specific bytes (written in hex as 0xEF, 0xBB, and 0xBF respectively) which if present at the beginning of a file, indicates that the file is stored in UTF-8 format.

Remarks

The Script Manager is not a hex text editor, the only way to test whether a file is being read by JAWS in UTF-8 format is by inference.

Where UTF-8 is supported, the option in the Files menu of the Script Manager called UTF-8 Format appears as “checked” when the script Manager has read the file as a UTF-8 file.

If the Script Manager reads the file without the File menu option for UTF-8 Format checked, the file is considered to be an ANSI file.

If the File menu option for UTF-8 Format does not appear at all in the Files menu of Script Manager, it means that the current version/build of JAWS being run does not support UTF-8. (Note: If the current version/build of JAWS reader being run is supposed to support UTF-8 but there is no File menu option for UTF-8 Format available at all when a file is read or a new file created, no UTF-8 processing will be handled by JAWS with respect to that file at compile time.

Saving a UTF-8 Formatted Script File

Notes

When you open a script file using Script Manager, JAWS assumes that the file is formatted as an ANSI file. When you save the file, it is saved as an ANSI file. Unless you explicitly enable UTF-8 formatting for the current file, it is not saved as a UTF-8 file. Unless you direct it to be saved elsewhere, it will be saved in your User\Settings\(Language) folder.

If UTF-8 symbols are needed to appear on a Braille display, one or more .jbt files may need to be formatted as UTF-8 files.

 

The following example illustrates how to reformat your .jbt file for UTF-8:

1.    The .jbt file must temporarily replace the file whose name is identical in the Program Files folder for the current version of JAWS. Navigate to that folder. It’s path will be something like,
 C:\Program Files\Freedom Scientific\JAWS\xx.0

2.    Change the name of the file called “US_Unicode.jbt” to something like “#US_Unicode.jbt”.

3.    Copy the file with the same name as the original file whose name you just changed into the current folder. You should now have a file called “US_Unicode.jbt” file in the current folder as well as the renamed one that originally is part of the current JAWS build.

4.    From within Script Manager with the .jbt file open, find the option in the Files menu called "UTF-8 Format". The option is unchecked by default.

5.    Press ENTER on the option to enable UTF-8 formatting for the current file.

6.    Change or add whatever UTF-8 symbol is desired in the file, following its exact correct syntax.

7.    Save the file.

8.    Unload and reload JAWS without rebooting.

9.    From now on, the UTF-8 symbol coded into the .jbt file should be recognized by JAWS and displayed in Braille properly because the .jbt file has been saved with UTF-8 formatting enabled.

Script File Types

JAWS stores settings files in the product's root folder mostly under the settings\(language) folder. Most of the files are written in the familiar INI file format. With the exception of binary files (those with extension jsb), and with caution, you may edit all scripting settings files as follows:

with a text editor such as TextPad, NotePad++, or Notepad,

with the JAWS Script Manager,

or through the various "managers" provided directly by JAWS.

Whenever you plan to edit a script file that exists in the shipping version of JAWS directly through a text editor, you should back up the original files in a safe place. This ensures that you can restore files to their original state if you happen to edit a file's content in a way that causes unpredictable results.

If your script files require entries with Unicode characters, you must save them with UTF-8 formatting enabled. For more information on UTF-8 formatting, see Formatting Script Files for UTF-8.

Definitions of Extensions for Script File Types 

Following is a list of definitions for script file types by extension supported by the JAWS Scripting language. Each file type extension is followed by a brief description of how it is used.

For more information on the use of header files and on variables and constants, see
 Variables and Constants, and Non-Aggregate Variables,
 and Constants.

JBD - JAWS Braille Display

Used by the Papenmeier Braille displays. Their names generally begin with the prefix BrailleX. JAWS itself does not use these files, but they are needed by the BrailleX manager that comes with the Papenmeire displays.

JBS - JAWS Braille Structure

Structured mode settings for JAWS output to Braille displays. To make changes to these settings, choose the "Define Structured Mode..." button from the "Braille Settings" dialog in the JAWS Settings Center .

For more information on Structured Braille, see the topic called Structured Braille Functionality.

JCF - JAWS Configuration File

JAWS configuration settings for verbosity, text processing, keyboard processing, HTML options, window class reassignments, custom highlight options, etc. To make changes to .jcf files, use the Run JAWS Managers dialog, or Settings Center and Quick Settings dialogs.

You may edit .jcf files from within your script source files with functions like GetJCFOption_function and SetJCFOption respectively.

JSI - JAWS Script Initialization

Generated under certain circumstances when a change is made to Quick Settings for a specific application. the file is located in the PersonalizedSettings folder under the root folder of the JAWS user\Settings\(language) folder. the file's name is based on the application where it was generated. In other words, there is no default.jsi. But there are files like Word_MyDocument.docx.jsi. Such files are located in folders like C:\Users\MyName\Freedom Scientific\JAWS\(Vversion number)\Settings\(language)\PersonalizedSettings.

To prevent unpredictable results, it is not recommended that you edit .jsi files manually. However, it is possible and often practical to read from and write to .jsi files through script or function calls in your script source code. If you do, take care to consider the impact on the QuickSettings.his and SettingsCenter.ini files and even any .jcf files that may be associated with that .jsi file.

JDF - JAWS Dictionary File

Alternative pronunciations for words or characters that are not already pronounced correctly by the synthesizer. To edit dictionary entries in an existing .jdf file or to create a new .jdf file, use the JAWS Dictionary Manager.

You may edit .jdf files directly. Make entries one per line with the match text on the left and the replace text on the right. The match text should be the exact mispronounced word or characters, and the replace text should be a phonetically spelled representation of how the match text should be pronounced. Use the "." delimiter to begin and end each entry as well as for the left and right parts of each entry .

Note: JAWS processes Dictionary rules for all the text it reads. Therefore, be judicious in adding entries to the JAWS dictionary files in order to avoid slower responsiveness while navigating. Adding dictionary rules only for the applications where they are needed also helps to shorten processing time.

JGF - JAWS Graphics File

A list of numeric graphic specifiers paired with textual descriptions for each. When JAWS encounters a labelled graphic, it speaks the assigned text description. If a Braille textual description is also assigned for a numeric graphic specifier, JAWS displays that graphic label on any attached Braille display. To add to or edit graphics, use the Graphics Labeler (JAWSKey+g), or use the Auto-graphics labler, JAWSKey+Ctrl+g.

You can edit a graphics file manually. See how the file should be structured by examining the default.jgf file that ships with JAWS to understand how entries should be delimited and how the file sections should be managed. A .jgf file contains sections for various graphic resolutions as well as a section for symbols.

JFD - JAWS Frame Definition

Contains the definition for customized frames. the file is located in the root folder of the JAWS user\Settings(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jfd file is called Textpad.jfd.

You may utilize the JAWS user interface to create a frame with the key combinations JAWSKey+LeftBracket to set the upper left corner and JAWSKey+RightBracket to set the bottom right corner of an arbitrary rectangle on the screen. With the JAWS dialog that results from these actions, you may then enter a frame name, synopsis, and description much like you do in the Script Manager when generating new scripts and functions. You may even add a keystroke assignment so that the frame is acted upon by JAWS - for example, in response to an event or to a user pressing that keystroke combination. If you add a key assignment to a frame definition, that assignment is added to the application's .jkm file. The Synopsis and Description fields for the frame definition ensure that keyboard help for that key assignment is available to the user upon request.

You may also edit a .jfd manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JFF - JAWS Frame File

Contains all the information associated with customized frames with respect to how JAWS should act upon them. The file is located in the root folder of the JAWS user\Settings\(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jff file is called Textpad.jff.

The information contained in the file is sectioned in brackets with the name given to each frame that has been created. Following the name of the frame in brackets on separate lines are the specifics about the frame: whether it should be silent, spoken, Brailled, and upon what conditions or events, etc.

You may also edit a .jff manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JKM - JAWS Key Map

A list of keystrokes assigned to JAWS scripts. To add, remove, or change key assignments, use the Keyboard Manager, JAWSKey+8.

You may edit key map files directly. For more detailed information on working with key map files, see JAWS Key Map Files.

JSB - JAWS Script Binary

Binary files created by the JAWS compiler from JAWS Script Source (.jss or .hss) files. Such binary files are loaded each time an application receives focus by moving to the Windows foreground. JAWS uses compiled binary files because they execute more quickly than interpreted script text. Binary files may not be edited manually in any way. They are not available to a text editor.

JSD - JAWS Script Documentation

Generated by the JAWS Script Manager whenever scripts or functions are created in a script source (.jss or .hss) file. using the Script Manager. These files include very specific information about the name, synopsis, and description of each script or function in the associated source file. Optionally, they may even contain category information related to the type of script or function being documented. The synopsis and description entries for a script are used to provide JAWS Keyboard help. So be careful to create meaningful documentation for these entries.

You may create/edit a .jsd file manually. In fact, you must do so if you are creating script source files through a text editor other than the JAWS Script Manager to ensure complete and accurate documentation of your scripts and functions, and to ensure that any scripts tied to key assignments have meaningful keyboard help.

JSS - JAWS Script Source<

JAWS script source code. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format.

You may use the JAWS Script Manager to create/edit script source files. Compile source files by pressing Ctrl+s from the script Manager. Assuming that your source code compiles without errors, the .jss, a .jsd, and .jsb files of the same root name as your source file are all added to the root folder of the JAWS user\settings\(language) folder.

Alternatively, you may use a text editor like TextPad to create and edit script source code. This means that you will need to utilize command line commands or compile statements available through your text editor's user interface pointing to the JAWS compiler in order to compile that source code.

HSS - Hidden Script Source<

Hidden JAWS script source code has not been used in shipping JAWS for some time. But you may wish to keep your personal customized code private for professional reasons. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format. Again, hidden source files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But all the information that applies to exposed script source (.jss) files applies to hidden source ffiles with respect to "Include" statements, formatting for UTF-8, etc.

Another way to handle the use of hidden source files for a script set is to utilize "Use" or "Import" statements in the exposed script source (.jss) file. These statements assume that the hidden source files have compiled correctly and are available as binary (.jsb) files to be compiled along with the exposed .jss file. For more information on "Include", "Use", and "Import" statements, see Compiler Directives.

JSH - JAWS Script Header

Definitions for variables and constants to be used throughout your script source files. "Include" statements in your script source files are necessary for header files to be available at run-time and properly compiled.

HSH - Hidden Script Header

Hidden definitions for variables and constants to be used throughout your script source files. Typically, hidden header files are not exposed in the script set of your files. Hidden header files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But "Include" statements in your script source files (both .jss and .hss) are necessary for hidden header files to be available at run-time and properly compiled.

JSM - JAWS Script Message

Definitions for message constants to be used throughout your script source files. "Include" statements in your script source files are necessary for message files to be available at run-time and properly compiled.

INI Files

Numerous types of .ini files ship with JAWS. The files are located in different folders on your system, depending on their purpose. The SettingsCenter.ini file, for example, is one that should never be edited manually.

To prevent unpredictable results, it is not recommended that you edit .ini files manually. However, it is possible and often practical to read from and write to .ini files through script or function calls in your script source code.

HIS History

Used to hold history information for settings changes made through the JAWS user interface. To prevent unpredictable results, you should never edit These files manually.

QS Quick Settings

 Used to hold Quick Settings definitions. These files work in conjunction with their associated .qsm files. A .qsm file is written in XML and so has a different structure from the .jsm files that are added to script source files by "Include" statements.

 

QSM quick Settings Message

Message file specifically for Quick Settings options. These files work in conjunction with their associated .qs files. A .qsm file is written in XML and so has a different structure for message constants from the .jsm files that are added to script source files by "Include" statements. For more details on how to utilize .qsm files, see Customized Quick Settings.

SBL - Speech Symbols File

Used to look up language information for a specified synthesizer, or to load the JAWS default speech symbols file when no synthesizer symbols file exists for the synthesizer in effect. The .sbl files contain entries for symbols (mainly punctuation). JAWS processes how and even whether symbols are pronounced depending on the punctuation level in effect.

JAWS ships with many speech symbols files for supported speech synthesizers. Just as the folders containing scripts and configuration files are named with language abbreviations, the .sbl files support languages like: enu (English), deu (German), esn (Spanish). The list of synthesizers and languages JAWS supports is robust and growing, including most Western european languages with their Latin alphabets but also those with Cyrilic alphabets like Russian. Also supported are numerous Asian languagess such as: Japanese, Chinese (Cantonese and Mandarin), and right-to-left languages like Arabic and Hebrew.

You may edit an .sbl manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. An .sbl file is broken into sections, each of which lists the symbols for a particular language that synthesizer supports. For example, if you want to add an entry to the eloq.sbl (Eloquence synthesizer symbols file), you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other symbols already exist for that language section of the .sbl file.

Note: you cannot create a new language section in an .sbl file for a language that is not supported by that file's synthesizer.

Finally, if the symbol you are adding is a Unicode character, you must save the .sbl file with UTF-8 formatting enabled.

In JAWS 17, .sbl files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .sbl files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

CHR - Character Substitution

Used since JAWS 15 to process character substitutions (spelling and/or pronunciation corrections) for certain spoken behaviors in the languages supported by the speech synthesizer in effect. Each .chr file bears the name of its associated speech synthesizer (e.g., VocalizerExpressive.chr). But not all synthesizers require associated .chr files.

Unlike an .sbl file, a .chr file may contain entries that are not symbols. Entries may be alphanumeric characters as well. JAWS processes how characters are pronounced under certain circumstances regardless of the punctuation level in effect.

The .chr files that ship with JAWS since JAWS 15 are located in the JAWS root folder in the Settings\(language) folder.

In JAWS 17, .chr files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .chr files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

You may edit a .chr manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. A .chr file is broken into sections, each of which lists characters to be substituted for a particular language that synthesizer supports. For example, if you want to add an entry to the VocalizerExpressive.chr file, you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other entries already exist for that language section of the .chr file.

Within each language section, entries correspond to characters to be processed with substitutions. The key part of each entry is represented in one of two ways: the desired character entered directly, or a Unicode sequence representing the desired character (e.g., U+201C for Left Double Quotation Mark). For each entry, the value is the string to be substituted for the character. For example, the string to be substituted for a Left Double Quotation Mark could be "Left Double Quote" instead in English and whatever is appropriate in say, Spanish. But you must make each entry in the relevant language section of the file.

Note: You cannot create a new language section in a .chr file for a language that is not supported by that file's synthesizer.

The behaviors JAWS may process using .chr files occur when the user:

·         invokes any spelling command : word, line, to or from cursor, etc.

·         invokes a command to speak the current character.

·         navigates by character with left/right arrow keys.

·         types characters, and typing ecdho is set either to Characters or to Characters and Words.

Finally, you must format a .chr file as an INI-style file with UTF-8 formatting enabled.

VPF - Voice Profile

Since JAWS 16.0 and later, .vpf files have been used to support the enhanced language switching capabilities for speech synthesizers. JAWS stores the Voice Profiles .vpf files in the JAWS root folder under the settings\(VoiceProfiles) folder. The moment you make any adjustment to a voice profile, a file is created in your own User\Settings\VoiceProfiles folder with all the correct section names and entries for your customized voice profiles. Each speech synthesizer has its own voice profile file.

The sections of a Voice Profile .vpf file include:

·         Options - used to define profile defaults.

·         Context sections - formatted as three-letter language abbreviation followed by a dash, followed by a context name (e.g., [ENU-PCCursor] is for English United States PCCursor voice).

·         Sections for Voice Aliases - formatted as three-letter language abbreviations followed by the term, voice alias (e.g., [enu-Voice Aliases]).

·         Language Aliases - used In order to support language detection on the internet ISO 639/3066 language codes as well as Microsoft and other variants of these.

·         Voice Alias Translations - used to localize Voice Alias names (e.g., [enu-UI Voice Alias translation]).

·         Default Voice Aliases - used to define the default for each voice alias.

JBT - JAWS Braille Table

Used to look up Braillle symbols for the Braille format in use for the current JAWS session. This file governs how Braille symbols and what sets of symbols are displayed in Braille. For example, if the US_Unicode.jbt is in effect, all Unicode characters available in that file become possible to display in Braille as applications are run that may present such symbols. The .jbt files are located in the Freedom Scientific folder for the specific version of JAWS running in the Program Files folder of your system.

A .jbt Braille table may specify up to 7 dot pattern cells per unicode character. Make each entry for any symbol or Unicode character you are adding as a special cell dot pattern on a separate line.

You may edit a .jbt file manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. The file is broken into sections (sets of symbols), each of which lists the entries for that set (i.e., ANSI, Unicode Greek, etc. in the US-Unicode.jbt file). Make sure to add any entries at the end of the existing set of symbols for the correct set.

Finally, if the entry you are adding is a Unicode character, you must save the .jbt file with UTF-8 formatting enabled.

RUL and QRY - Rule and Query

Specifically used for the JAWS Research-It feature. For detailed information on how to customize these types of files, see Creating Research It Rules.

SBAK - Settings Backup

Since JAWS 18 and later, you have been able to create settings backup files for restoring user settings from another version of the product, or merging user settings to another system with the same version. This process is similar to the older process called Merge that allowed you to merge user settings from a prior version of JAWS to a current version. The Merge feature was removed in JAWS 17 due to a major relocation refactor. This was necessary to speed up the localization process for the growing number of languages JAWS supports. Starting with JAWS 18 and later, .sbak files provide an even more robust process for backing up and restoring user settings for whatever language you have installed.

Additional Resources

Settings Files

Reserved Files.

Calling Scripts and Functions

Overview

UTF-8 is an acronym for UCS Transformation Format — 8-bit multibyte character encoding for Unicode. ANSI is an acronym for American National Standards Institute. For more technical information about the meanings of these terms, please visit:

http://en.wikipedia.org/wiki/UTF-8
 and
 http://en.wikipedia.org/wiki/ANSI
 and
 http://en.wikipedia.org/wiki/Unicode

For our purposes, ANSI and UTF-8 refer to a method for reading and writing files for JAWS to utilize where there are characters in the code or in the files whose character values are higher than ASCII 127. ASCII characters include all standard punctuation and alphanumeric characters for Western European languages, as well as various other symbols. From 127 to 256, there are characters like smiley faces, Greek characters, etc. Beyond 256 are over 109,000 Unicode characters, including Hebrew characters, Cyrillic characters, etc. Files containing such characters must be formatted properly in order to be interpreted by JAWS. So the UTF-8 file format for the Script Manager supports many languages other than English. This file format can even include characters that are used in Western European languages but have accent marks like vowels with an acute or umlaut mark.

For JAWS support to interpret UTF-8 file formats correctly, in the past, localizers had to manipulate script files that included Unicode characters one file at a time and by hand in order to save files with Unicode characters properly in UTF-8 format. Otherwise, files containing Unicode characters would wipe out those characters in when saving or compiling files with the JAWS Script Manager. The UTF-8 implementation for Freedom Scientific JAWS support via scripting should eliminate this problem.

Definitions

 Script source related files are those with extensions:

·         .jss - script source

·         .hss - hidden script source

·         .jsh - script header

·         .hsh - hidden script header

·         .jsm - script message

·         .jsd - script documentation

·         .sbl - speech symbols file

·         .jbt - JAWS Braille table file

·         .CHR - character substitution

Script binary files are those with the extension of .JSB. BOM (Byte Order Mark) is a series of three specific bytes (written in hex as 0xEF, 0xBB, and 0xBF respectively) which if present at the beginning of a file, indicates that the file is stored in UTF-8 format.

Remarks

The Script Manager is not a hex text editor, the only way to test whether a file is being read by JAWS in UTF-8 format is by inference.

Where UTF-8 is supported, the option in the Files menu of the Script Manager called UTF-8 Format appears as “checked” when the script Manager has read the file as a UTF-8 file.

If the Script Manager reads the file without the File menu option for UTF-8 Format checked, the file is considered to be an ANSI file.

If the File menu option for UTF-8 Format does not appear at all in the Files menu of Script Manager, it means that the current version/build of JAWS being run does not support UTF-8. (Note: If the current version/build of JAWS reader being run is supposed to support UTF-8 but there is no File menu option for UTF-8 Format available at all when a file is read or a new file created, no UTF-8 processing will be handled by JAWS with respect to that file at compile time.

Saving a UTF-8 Formatted Script File

Notes

When you open a script file using Script Manager, JAWS assumes that the file is formatted as an ANSI file. When you save the file, it is saved as an ANSI file. Unless you explicitly enable UTF-8 formatting for the current file, it is not saved as a UTF-8 file. Unless you direct it to be saved elsewhere, it will be saved in your User\Settings\(Language) folder.

If UTF-8 symbols are needed to appear on a Braille display, one or more .jbt files may need to be formatted as UTF-8 files.

 

The following example illustrates how to reformat your .jbt file for UTF-8:

1.    The .jbt file must temporarily replace the file whose name is identical in the Program Files folder for the current version of JAWS. Navigate to that folder. It’s path will be something like,
 C:\Program Files\Freedom Scientific\JAWS\xx.0

2.    Change the name of the file called “US_Unicode.jbt” to something like “#US_Unicode.jbt”.

3.    Copy the file with the same name as the original file whose name you just changed into the current folder. You should now have a file called “US_Unicode.jbt” file in the current folder as well as the renamed one that originally is part of the current JAWS build.

4.    From within Script Manager with the .jbt file open, find the option in the Files menu called "UTF-8 Format". The option is unchecked by default.

5.    Press ENTER on the option to enable UTF-8 formatting for the current file.

6.    Change or add whatever UTF-8 symbol is desired in the file, following its exact correct syntax.

7.    Save the file.

8.    Unload and reload JAWS without rebooting.

9.    From now on, the UTF-8 symbol coded into the .jbt file should be recognized by JAWS and displayed in Braille properly because the .jbt file has been saved with UTF-8 formatting enabled.

Variables and Constants

The Freedom Scientific Scripting language supports the use of variables and constants.

Variables

As in all programming languages, variables available in the Scripting language are for storing values of differing types of data. Values stored in variables can change simply by running a script or function, or by conditions that occur as a result of running a script or function.

Variables may be local or global. You must declare global variables outside of a script or function by preceding them with the keyword, Globals. Then you must precede each variable name by its type.

Global variables persist for the life of the JAWS program session, whereas local variables persist only for the life of the script or function where you declare them.

Variable types may be either non-aggregate, meaning that only one value of a specific type can be stored in the variable at a time, or they can be types that may store a set of values such that the set of values is of a specific type or of varied types. Non-aggregate variable types include but are not limited to integers and strings; whereas, aggregate types include collection and array types.

For more specific information on variables and their types, and how to utilize them in the Freedom Scientific Scripting language, see the following:

Non-Aggregate Variables

Collection Type Variables

Array Type Variables

Examples of Local and Global Variables

Use the let keyword in statements within scripts or functions. Note: As of JAWS 11.0, the let keyworkd is optional.
 
 Example of a local variable declaration and assignment:
 
 

Function Test ()
Var
            Int iControl
Let iControl = 1500 ; assigns the value of 1500 to the local integer variable, iControl.
;or you could write the statement as:
iControl = 1500 ; same meaning as the above example since "Let" is an optional keyword.
...
EndFunction

 
 Example of a global variable declared outside a script or function:
 
 

Globals
            Int ghWnd ; handle global variable
            String gsMyName ; a string variable to hold a person's name

 

Assign a value from the return value of a built-in function to a variable. Note: Ensure that the variable and the function are of the same type. Otherwise, the compiler will generate a syntax error when you try to compile your script file. For Example:
 
 

            hWnd = GetFocus () ; since the function returns a window handle.
            Let iControl = GetControlID (GetFocus ())

 

Constants

Unlike variables, constants do not change value. They are useful for storing hard-to-remember strings of characters with an easy-to-remember name. When declaring constants outside of a script or function, you must precede them by the keyword, Const. However, if the constants you are declaring are specifically message constants with mmulti-line strings of characters or with other special characteristics, you may choose to use the keywords, Messages and EndMessages for declaring them. See belo examplesw.

The Freedom Scientific Scripting language has no restrictions on the number of constants you can create, or on the number of constants that have the same value. Sometimes you will find it useful to have more than one constant name for the same value. For example, the constants named “True” and “On” may both have the value of 1. Depending on the circumstances, it may be more practical to use one or the other for readability in your scripts and functions.

Assigning Values to Constants

There are several syntax options for assigning values to constants:

Assign a value to a constant when you declare it. Once you do so, that value may not change. In other words, you cannot assign a value to a constant outside of its declaration. The "let" keyword is never used when declaring a constant and assigning it a value. However, constants may include replaceable parameters whose value may change. For specifics on how to assign and utilize constants, see Constants.

Examples of constants declared outside a script or function:

Const
            FSHQ="Freedom Scientific Headquarters",
            FSWH="Freedom Scientific Warehouse"
            sHelloMessage="Hello, world!"
Messages
@msgMyWorkplace ; the replaceable parameter, %1, is drawn from within a function call to the FormatString function.
I work at %1.
@@
EndMessages

Code Samples

SayMessage(ot_line,sHelloMessage)
SayFormattedMessage(ot_line,FormatString(MyWorkplace,FSHQ))

Or you could easily change the message upon some condition to the following:

SayMessage(ot_line,sHelloMessage)
SayFormattedMessage(ot_line,FormatString(MyWorkplace,FSWH))

Remarks:

Since the constant msgMyWorkplace includes a replaceable parameter, it may be used in the FormatString function as the first parameter, with the second parameter being some other constant (in this case, either FSHQ or FSWH. Although you could hard-code a character string for that second parameter, it will be easier to maintain the code if later on you want to change your workplace say to the Freedom Scientific Engineering Department.

Non-Aggregate Variables

The Freedom Scientific Scripting language offers several types of variables you can define for your scripts and functions. The type of a variable determines the set of values a variable may hold.

For example, non-aggregate variable types are for variables that may hold only one value at a time; whereas, aggregate variable types are for variables that may hold a set of values simultaneously. Aggregate variable types include collections and arrays. Collections may hold items of different types, but arrays are defined to hold items of a specific type and only that type, (e.g., the StringArray or IntArray type.)

For more information about aggregate variable types, see Collection Type/> and Array Type.

Remarks

Declare all variables with a name and a type before using them within a script or function.

Give each variable a unique name to distinguish it from other functions and names used in a particular script or in the script source file itself.

Do not try to use duplicate variable names within the same scope because doing so will cause errors at compile time. Also keep in mind that local variables with the same names as global variables take precedence over those global variables.

Non-aggregate Variable Types

Non-aggregate variable types allow variables to store only one type of information. They include:

·         Integer - stores numeric values

·         String – stores a string of characters

·         Handle - stores a window handle value

·         Object - stores an object

·         Variant – Stores data that is not assigned to a specific type

 

Integer - stores numeric values

The numeric value stored in an integer must be a positive or negative integer or 0. Floating point numbers are not allowed as values for integer variables. JAWS initializes all integer variables to zero each time a script or function is called where integer variables are declared.

 
 Syntax: Int VariableName
 Example:

            Int iCheckNumber
            Let iCheckNumber = 1000

 

Back to list of Non-aggregate Variables
 

String - Stores a string of characters

 A string may contain letters, numbers, punctuation marks, and spaces. If the string must contain Unicode characters, see Formatting Script Files for UTF-8 to understand how to format your script files so that they honor that character set as well as the standard ASCII character set. To assign a value to a string variable, enclose the characters in quotation marks.

JAWS initializes all string variables to null (no value) when a script or function is called where string variables are declared. Null values may be represented as a pair of quotation marks with no spaces between them, or by the cscNull constant found in the common.jsm default message file.

 
 Syntax: String VariableName
 Example:

            String sMyName ; declares the string
            Let sMyName = “John Smith”

 Back to list of Non-aggregate Variables
  

Handle - stores a window handle value

The operating system dynamically and automatically assigns a window handle to each window within any running application. A window handle is a unique integer that changes each time an application is closed and reopened. For example, when you launch Microsoft Word, the document edit window may have a window handle value of 1000. But when you close Word and then reopen it, the window handle will be another integer.

Since a handle is an integer, it can be used like any other integer variable. But you can use handle integer variables only for identifying window handles. In other words, you cannot store a handle value in an integer variable.

JAWS initializes all handle integer variables to zero each time a script or function is called where handle variables are declared.

 
 Syntax: Handle VariableName
 Example:

            Handle hwnd
            Let hwnd=GetFocus()

 

Back to list of Non-aggregate Variables
  

Object - stores an object

An object variable refers to the types of objects used within software such as Microsoft Office applications.

JAWS initializes all object variables to null (no value) each time a script is called where object variables are declared.

 
 Syntax: Object VariableName
 Example:

            Object oMyAppPointer
            Let oMyApptPointer = getObjectFromEvent(hwnd, ObjID_Window, 0, childID)

 

Back to list of Non-aggregate Variables
  

Variant – Stores data that is not assigned to a specific type

A variant variable is used to store data whose type may vary when assigned.

 
 Syntax: Variant VariableName
 Example:

            Variant vCalendar ; may contain string for day, integer for day of month, etc.
            Let vCalendar = "Today"
            Let vCalendar = 31

 

Back to list of Non-aggregate Variables

Declaring Variables

The Freedom Scientific Scripting language allows you to declare both local and global variables. You may use local variables only in the script or function where you declare them, and you must declare them to precede the code that utilizes them. Typically, you place local variables at the top of a script or function where you plan to use them. but this is a convention, not a requirement.

You may use global variables in two ways from within the current script source (.jss) file: 1) from any script or function where you declare them; or, 2) by referring to a header (.jsh) file that contains the declared global variables you want to use. In this case, you must add an "Include" statement with the name of the relevant header file. Typically, you add the "Include" statement at the top of the script source file. but this is a convention, not a requirement.

Unlike languages with block scoping, though, a variable declared anywhere in a script or function is scoped to the script or function. Therefore, duplicate definitions within the local scope are not allowed in the Freedom Scientific Scripting language.

Since global variables may be accessed by any script set, if you want to keep your global variables private to your script set, be sure to declare them in the script source file instead of the header file, and use names for the global variables that are not likely to be chosen by someone else in their scripts.

Declaring Local Variables

By convention, you may declare local variables within a script or function immediately following the beginning line of the script or function. But you may also place them elsewhere in a script or function as long as your declarations precede the code that utilizes them. Begin local variable declarations with the keyworkd "Var".

For better readability, consider declaring each variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Example:

Var
            String sFirstName,
            String sLastName,
            Int iCheckNumber ; from my checkbook

Declaring Global Variables

It is good practice to declare global variables within a script file immediately following any include and Use statements. This makes them easier to find later. but you may place them anywhere outside of a script or function as long as your declarations precede the code that utilizes them. Begin global variable declarations with the keyword “Globals”.

For better readability, consider declaring each global variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Once you create global variables and assigned values to them, they retain those values even after you close the application that uses them. In other words, unless you reboot the system or unload and reload the screen reader itself, if you reopen that same application, the screen reader remembers the values for any global variables from that application's script file. If you want to clear global variables, you must unload the screen reader from memory and reload it, or you must create some function that re-initializes them each time the application is reopened.

Example:

Globals
            String gsFirstName,
            String gsLastName,
            Handle ghDocWnd ; handle of document wwindow

Using a Header File to Store Variables

As mentioned above, it may be more practical to declare global variables in a script header file. Typically, a header file has an extension of .jsh. When you want to access a header file to declare global variables, you must refer to it with an “Include” statement in the script source file where you want to use the global variables. For examples, see the script source file included in your shared user\settings\(Language) folder. One of the “include” statements for this file is “hjglobal.jsh”. Since the global variables declared in that header file are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions. If you add an “Include” statement for the HJGlobal.jsh file within an application-specific script source file, those global variables become available to that script source file.

Constants

Unlike variables, constants do not change value. They are most useful for hard-to-remember strings of characters or long numbers. Constants should have mnemonic names since it is easier to remember a name than a number or long string of characters.

The Freedom Scientific Scripting language has no restrictions as to how many constant names you assign to a particular value. For example, in the default JAWS constants file, HJConst.jsh, there are constants named True and On - both of which hold the value 1. It is more intuitive to understand a code statement that checks a condition for values of True or On than a code statement that checks for the integer 1. Once you declare the constants, JAWS recognizes all of the constant names with the same value.

If the string of characters being stored in a constant includes Unicode characters, ensure that the script files where the constants are declared and utilized are formatted properly for UTF-8. For more information on UTF-8, see Formatting Script Files for UTF-8./

Advantages of Using Constants

There are several advantages to using constants in scripts:

·         It is easier to remember a constant name than its value. And it is more intuitive when the constant name is a readable word like “True” or “on”.

·         It is much easier to maintain code when constant names are used rather than hard-coded strings of characters or hard-coded integer values.

·         Changing the value of a string of characters or an integer that is used throughout code is much easier to maintain if that value is stored in a constant. The change is made just in one place. In other words, simply changing the constant declaration affects the code wherever that constant is applied.

·         The Freedom Scientific Scripting language does not support direct declaration of a negative integer constant, as in "VBTrue = -1". However, it does support using hexadecimal representation of any integer, including negative integers, as in "VBTrue = 0xffffffff". Note: This is because the Scripting language uses four bytes to store numbers, and if the highest bit is a 1, the numbers are signed so that they are negative.

Declaring Constants

You may declare constants anywhere outside of a script or function, but conventionally, they are declared at the beginning of a script source (jss) file or in a header (jsh or jsm) file. Begin declaration of constants either with the keyword, Const for simple constants, or with the keyword pattern that generates a block of message constants. A message block of constants begins with the keyword, Messages, and ends with the keyword, EndMessages.

Simple Constants

For simple constants, place each constant declaration on a separate line followed by a comma, except for the last one. For example:

Const
            True = 1,
            False = 0,
            On = 1,
            Off = 0,
            FS = "Freedom Scientific",
            FSZipCode = "33764" ; since this is used as a string, not for computing

Formatted Message Constants

Although you may declare string constants such as for window names, window classes, and so on, it is much more practical to declare message constants as formatted strings. This ensures that when JAWS processes message constants, they are indicated properly in speech, Braille, and in the virtual viewer, if applicable. Furthermore, formatted message constant declarations may include replaceable parameters so that varied information may populate messages when JAWS processes them, depending on conditions you determine through scripts and functions or through events.

When declaring and using message constants, especially those you wish to format with replaceable parameters in them, be sure to:

Populate the message constant with text (it can be long and have multiple paragraphs), including spaces, tabs, and hard returns.

If desired, create the text of the message constant with the "%" character followed by a number to indicate a replaceable parameter within the message. You may use multiple replaceable parameters in the same message.

Use the FormatString function in order to populate the message with appropriate replacement strings for the replaceable parameters in the message constant. The FormatString function returns a string that is already formatted properly for you to pass to a function that outputs formatted strings .

Utilize only functions that process formatted strings correctly, or enclose the string parameters in a call to the FormatString function. For example, if you pass the SayMessage function a formatted string, it cannot process any replaceable parameters; so the output may yield unexpected results. Instead, use one of the functions that processes formatted strings. These include:

SayFormattedMessage

SayFormattedMessageWithVoice

UserBufferAddFormattedMessage

For a complete list of formatting functions, see the String Functions category page of the Reference Guide called Strings Functions
 and
 Text Format Functions.

Syntax of Formatted Messages

Use the following format for message constants:
 The keyword, “Messages”
 On a new line, the name of the constant beginning with the at (@) symbol.
 As many lines as necessary for the content of the message, including hard returns, to generate multiple paragraphs, even replaceable parameters.
 On a new line, a double at (@@) symbol to end the constant declaration.
 On a new line, the keyword, “endMessages” to end the block of message constants.

You may repeat the pattern for as many message constants as you wish of "@" followed by message constant name, constant message itself, and a double "@" symbol to complete each message constant within the block beginning and ending with the keywords, Messages and EndMessages. It is good practice to begin the names message constants with the letters "msg" to distinguish them from other types of string constants. Also, if the constant takes replaceable parameters, place a comment above each message constant declaration explaining the purpose of the replaceable parameter.

Code Sample

 

Messages
@msgFSHeadquarters
11800 31
st
 CT North
St. Petersburg, FL
@@
@msgFSPhoneNumbers
800-444-4443
or
727-803-8000
@@
;for msgMyWorkplace, %1 is the name of the workplace.
@msgMyWorkplace
I work at %1.
@@
EndMessages

 

Using a Header File to Store Constants

Unless the constants you are declaring apply only to the current script source file, it is more practical to declare constants in a script header file. Typically, a header file has an extension of .jsh or .jsm. When you use a header file to declare constants, you must refer to that header file with an “Include” statement in the script source file where you want to use the constants. For examples, see the script source file that ships with the JAWS Shared user\settings\(Language) folder. One of the "include" statements for this file is "hjconst.jsh". Another is "common.jsm". Since the constants declared in these header files are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions.

If you add an "Include" statement for the HJConst.jsh file within an application-specific script source file, for example, those constants become available to that script source file.

Structured Braille Functionality

JAWS offers two methods for showing information on any Braille display installed on your system: Line Mode and Structured Braille Mode.

Line Mode shows text on a Braille display literally as it appears on the screen - white space and all. This may seem to be the most desirable on the surface, but actually, it presents quite a challenge for Braille users. Very often, information is formatted with a lot of spaces or tabs so that it lines up in the most aesthetically visually pleasing manner. The Braille reader may find it difficult at best to navigate the information in a meaningful way, or to discern its format, due to the extraneous white space that appears on the Braille display.

Structured Braille Mode parses information about the current object on the screen so that it takes up as little room as possible on the Braille display. Even on larger Braille displays that have 80 cells for showing text, it is often difficult to show formatted information in a way that it can be understood efficiently and quickly. Structured Braille provides a means whereby the components of an object can be "structured" to show the most information with the least amount of characters.

Many types of objects lend themselves readily to a component-based system for presenting information. Rather than displaying information strictly in a linear manner. So again, Structured Braille uses a consistent method to show as much information as possible about an object while taking up as little room as possible on a Braille display.

Objects include textual information such as lists, tables, HTML elements such as links and heading levels. But objects also include controls in dialogs, such as buttons, list views, tree views, checkboxes, and so on. Additionally, objects may have states such as being checked or unchecked, being collapsed or expanded, etc.

The Freedom Scientific Scripting language, together with its internal code, makes it possible to show many components of objects through Structured Braille. And in fact, you can manipulate how many or how few of the components are shown for any particular type of object.

JAWS ships with Structured Braille mode enabled by default. You can toggle between Line and Structured modes from the PC keyboard or from the Braille display with the keys assigned to handle this. Or you can use the JAWS Settings Center user interface. In fact, you can use the Settings Center to define specifically how much or how little of each component you want shown.

Take time to examine some of the functions in the Braille script source file that ships with the JAWS screen reader to see how functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

The .jbs File

JAWS handles Structured Braille components through the JAWS Braille Structure (.jbs) files that ship with the screen reader. The default.jbs file handles the most common types of objects, and application-specific .jbs files handle many of the applications the screen reader supports. These files are set up in a very specific format in order for the components to be shown properly on your Braille display. You can edit them manually through a text editor like the Script Manager, or your own text editor. And you may utilize the many functions that ship with JAWS to read from and write to such INI-style files, or to enhance for your own purposes what the existing .jbs files do. You may even add your own application-specific .jbs files other than those that ship with JAWS.

However, it is recommended that you do not change any of the .jbs files that ship with JAWS in the Freedom Scientific root folder of the Shared Settings\(language) folder. Rather, if you wish to experiment manually or through functions with any of these files, do so in your own user Settings\language) folder.

For more details on working with a .jbs file, see the topic under Settings and Configurations called Script File Types.

Components of Structured Braille

The control types and components recognized by Structured Braille are quite numerous. Moreover, you may also add your own custom control types for your own applications. You can work with the existing standard control types and add your own custom components for them through functions or through the JAWS Settings Center. And you can work with many functions that let you manipulate what information components show, and when they show that information.

When you add a custom control type, you add sections for custom controls to the JBS file, in the form:

[CustomControl1]
[CustomControl2]
...

 In the function, BrailleCallbackObjectIdentify, CustomControl1 evaluates to WT_CUSTOM_CONTROL_BASE+1, CustomControl2 evaluates to WT_CUSTOM_CONTROL_BASE+2, etc. WT_CUSTOM_CONTROL_BASE is a constant in HJConst.jsh.

 

It is critical to understand that the standard control types are numbered in a very specific manner tied to their subtype codes for the most part. They have both internal and scripting references. Should you attempt to add your own control type in hjConst.jsh, you will generate very unpredictable Braille results.

Valid Components

Components recognized by JAWS for customizing controls include:

·         Name

·         Type

·         State

·         Value

·         Position

·         Level

·         ContainerName

·         ContainerType

·         dlgName

·         dlgType

·         dlgText

·         dlgPageName

·         Other

·         LiveRegion

 

LiveRegion

As of the JAWS 18 December 2016 update and later, LiveRegion provides a generic means for you to add the contents of an ARIA live region to data for controls on a webpage. This is analogous to adding a screen frame, a region of the visible screen, which has been available since JAWS 4.0.

An ARIA live region is a portion (often a region) of a webpage or web application which is dynamically updated and whose content may be automatically spoken. Such a region is typically used for providing real-time status information on a webpage that may or may not be related to the focused control. An example of this is the Google Sheets web application. It uses a Live Region to present the data and coordinates of the currently focused spreadsheet cell, while focus remains on a control which inherently presents no meaning to the end user. Thus, Google Sheets works for a speech user but would be totally unuseable for a Braille user without a component such as LiveRegion.

The LiveRegion component is relevant only when a webpage or web application has focus and the application hosting the webpage or web application supports ARIA. Browsers that support ARIA include Internet Explorer, Firefox, Chrome, or modern applications using a web interface. When you add the LiveRegion component to a control type section of a JBS file, the text of the specified ARIA live region is added to the Braille structured data in the order specified by the component list, if that control type gains focus on the webpage. The format of the component name is “liveRegion”, or “liveRegion:xxx” where xxx specifies the HTML ID string attribute of a specific ARIA live region to include. If the colon is omitted, the content of the last live region updated will be included for the LiveRegion component of the structured data.

Note: By allowing the specification of an ID, multiple Live Regions may be supported in multiple components for the same structured data - e.g., one tracking row totals and another tracking column totals in a spreadsheet.

 

 When Braille is updated, and a valid LiveRegion component exists, the script function BrailleAddLiveRegion is called in processing of the defined components for the focused control type, just as BrailleAddObjectName might be called, etc. The parameters of the BrailleAddLiveRegion function include the control type of the focused control, the id of the LiveRegion, and the text of the LiveRegion. You can use this information to fine-tune an overridden instance of BrailleAddLiveRegion, just as JAWS scripts specific to certain applications already do for the various BrailleAddObject functions.

 

General Remarks about Structured Braille Components

Since the purpose of Structured Braille is mainly to take up as little room as possible on your Braille display, some of the components shown for an object abbreviate the information, and localizes the abbreviation to the language in use. For example, a control that is of type button is shown as "btn" in English. Note though that Structured Braille never abbreviates the value or descriptive information, such as the name of a file in an edit control.

You may arrange Components of a control to show or be hidden on your Braille display. As of JAWS 15, the order in which components are shown by default takes advantage of the status cells on most Braille displays. So as of JAWS 15, the default arrangement of components is the type of the control in the status cells, its state (if applicable), its name, its value (if any), and its description (if available). If the control is part of a dialog, the name of the dialog appears as the rightmost component with the abbreviation, "dlg", following it.

For Microsoft Office ribbons in particular, if a hotkey is available, it is displayed as the last component of a ribbon control. Dialog controls however do not display their hot keys by default.

You can change whether components show, and how they are arranged on the display, through the JAWS Settings Center user interface by checking or unchecking them. You can even reverse the order in which dialog names appear. Some examples of how a control is shown by default include:

·         btn Open Open dlg - The Open dialog with focus on the Open button

·         chk < > Bold Font dlg - Font dialog with focus on the Bold checkbox which is currently unchecked

·         lrbn Bold btn Ctrl+B; Alt, H, 1 - lower ribbon Bold button in an Office application ribbon

Alternatively, you may edit a .jbs file manually. You may decide not only to rearrange the order but to hide certain components altogether, or to show ones that do not show by default, such as the hotkey components for dialog controls. The following sections of this overview explain how a .jbs file is arranged and how you may edit it manually to suit your own needs.

Sections of a .jbs File

A .jbs file is arranged by section. Each section name is contained in brackets and represents a control type JAWS supports in Structured Braille. As mentioned above, you may add custom control types for your own controls as long as you also add script code in the function, BrailleCallbackObjectIdentify, and the functions for the braille components to handle the components. That is, if you need to create a custom arrangement or component list for a particular control type in your custom application, you may add custom control types as sections to a .jbs file. and you may even add your own custom components.

[Component Aliases]

This section is for component alias names as they appear in the JAWS Settings Center user interface. They include items such as:

·         dlgText=Dialog Text

·         dlgPageName=Dialog Page Name

·         dlgName=Dialog Name

·         ContextHelp=Insert F1 Help

·         urbn=Upper Ribbon

·         lrbn=Lower Ribbon

The alias maps the component alias name to the script function that controls the alias. The alias name, to the right of the equal sign, is what appears in Settings Center. The entry to the left of the equals sign is the function name suffix that scripts use to output the component. The suffix is appended to the function, BrailleAddObject, to get the full function name. So for example, for DlgText, the function name is BrailleAddObjectDlgText.

If you need to add a custom component for your own application, add its alias name in this section. So you could add something like,:
 

MyCustomButtonName=Custom Button

 

[State Aliases]

This section is for component State Aliases as they appear in the JAWS user interface. It contains information such as:

·         csChecked=Checked

·         csUnchecked=Unchecked

·         csSubmenu=Submenu

[Control States]

This section is for component Control States as they appear on the Braille display when they are available. Not all states for controls have Braille equivalents. Control states include information such as:

·         csChecked=<x>

·         csUnchecked=< >

·         csSubmenu=->

·         csPressed=<=>

Standard Control Types

The next sections are numbered by the subtype code of the control. For example, the control subtype code for a standard button is 1. Therefore, the section for button is called [SubtypeCode1]. A comment above the bracketed section name clarifies its meaning. Other examples of standard section names for control subtype codes include:

[SubtypeCode3] - Edit. Note that multi-line edit controls always use line mode rather than Structured Braille mode if not in a dialog.

[SubtypeCode19] - radio button

[SubtypeCode20] - Checkbox

[SubtypeCode95] - upper ribbon

Custom Control Types

This section is for components to be mapped to standard component categories for treatment by the internal code. For example, if you wish a custom component to be treated as a control's value, the mapping should be:
 CustomComponentName=Value

This affects how the JAWS user interface displays and allows you to show or hide the display of a given component on your Braille display. Examples of custom components would be something like for a table, as in components for Table number/Row/Column (where the cursor is within a table cell).

 

Entries of a Section in a .jbs File

The map for each entry for a control type, whether standard or custom, must include the key name of the entry, followed by an equals sign (=), followed by whatever contents you wish the entry to have. Parts with examples for each include:

·         Components - a list separated by commas of the components to be included for the current control subtype.
 Components=type,state,value,hotkey,description

·         Type - the abbreviation to appear in the status cells representing the control type
 Type=lrbn

·         Removed - the information to be hidden if you prefer not to show it. This is usually left blank unless you have removed something through the JAWS Settings Center.
 Removed=

·         Displayname - the actual name to be shown in the JAWS Settings Center for the current control subtype.
 DisplayName=Lower Ribbon

·         AlignmentPriority - the order in which components should be arranged, starting from leftmost component to rightmost component.
 AlignmentPriority=type,state,value

Code Samples - Custom Controls

Below are two samples of how you would customize a control. First, a customized lower ribbon control is shown, and then a custom control for an object for which you have created your own information to be shown when the cursor is on that object.

For the first example, note that the numbering here is the same as that in the default.jbs file. The difference is that you are creating this section in your own application-specific .jbs file and placing it in your own user Settings\(language) folder.

;Section for Custum Control 96, my special ribbon control.
[subtypecode96]
Components=Type,State,Value,Hotkey,Description
Type=lrbn
Removed=
DisplayName=My Lower Ribbon
AlignmentPriority=Type,State,Hotkey

The second example shows a custom control for your own custom control type, not one normally associated with the standard control types. And notice that the section for this object begins with the number 1. This does not indicate that its subtype is button. Rather, it is the first custom control in this special .jbs file that is associated with your own custom application. Remember! You can create custom controls for your own custom types as long as you add sections to the .jbs file for the custom controls, and handle them with the function, BrailleCallbackObjectIdentify, along with any custom component functions as needed. Standard, that is, non-custom control types, must be one of the recognized control subtype codes listed in hjConst.jsh. They have specific numbers. You cannot add your own subtype code number and expect JAWS to recognize that subtype code because JAWS uses the subtype code numbers both in the Scripting language and internally.

[Component Aliases]
MyObjName=My Object Name
MyObjValue=My Object Value
;for custom control 1, my custom control type
[CustomControl1]
Components=Type,MyObjName,MyObjValue
Type=obj
Removed=
DisplayName=My Object
AlignmentPriority=Type,MyObjName

To make your special custom control be recognized and work properly, you need to overwrite the BrailleObjectCallbackIdentify function and add your own special code in that function as it applies to your special object. Then you need to write functions for your special object to be applied by the callback function when the cursor in your application is on the object.

For example, in Microsoft Word, there are special functions for the objects that are footnotes and endnotes. These functions call the BrailleAddString and other Braille functions to present a footnote or endnote properly in Braille when the cursor lands on such an object in a Microsoft Word documentt.

 

 If Braille is showing the controls in structured mode, use BrailleAddObjectName to show a customized name for a control. Structured braille is used almost everywhere, except in multiline edits of a document or in a command window. You can find examples of BrailleAddObjectName in many script files. The WordBrl.jss and Excelbraille.jss files contain this and many other functions customized to handle specialized braille output for the Word and Excel applications.

 

If you do customize adding a Braille component yourself (for example, by using BrailleAddString in the BrailleAddObjectName function), you must return true. Returning true indicates to JAWS that the scripts handled the component so that the internal braille doesn't also attempt to handle it. Always return by calling down the stack to the next brailleAddObjectName to pass control to internal JAWS for handling everything that you didn't handle yourself.

If you need to define special types of controls which aren't handled in the normal way, for instance, you want to create an entirely new type of Braille structure, you can use the BrailleCallbackObjectIdentify function to tell Braille that this is a new type of control. If you define a new type of control you must define the custom control in the .JBS file for the application. You can see examples of this in word.jbs and excel.jbs. But, if all you needd to do is tell Braille to use a specific name for controls, you don't need to overwrite BrailleCallbackObjectIdentify or define anything in the .JBS file.

Each type of component used by Braille - name, value, state, etc. - has a function which can be overwritten to send specific text to the display. Since Braille is so frequently updated, you want to make sure that the code you add in the function for adding the component doesn't tie up the system with too much processing.

For more details on working with Braille functions, and particularly those that show information in Braille, see the summary in the JAWS Functions book of the Reference Guide called Braille Output.

Compiler Directives

The Freedom Scientific Scripting language supports the use of several compiler directives to facilitate how files are compiled and utilized at run-time. Compiler directives employ specific keywords and are as follows:

Include

Use

Import

Prototype

;#Pragma StringComparison

;#Pragma UsePoFile

ScriptFileVersion and ScriptFile

Include Statement

Adds the contents of a JAWS script header or message file to a script source file when compiled. This also means that such a file can be "included" in multiple source files.

For more information about variable, constant, and message header files that may be added to a script source file through the Include statement, see Variables and Constants.

For more details on the usage and syntax of the Include statement, see Include Directive.

Use Statement

Creates a link between the binary version of one script source file with the binary of another . the resulting linkage between the two binary files allows JAWS to call functions from the binary file in the Use statement as if those functions had been part of the original script source file where the Use statement appears.

For example, the statement, Use "UIA.jsb", is in the JAWS default script source file, default.jss. Along with several other Use statements, this statement is located near the top of the file after all the Include statements. The Use "UIA.jsb" statement tells JAWS to create a link between the compiled JAWS default script binary file, Default.jsb, and the UIA.jsb binary file. The resulting linkage between these two binary files allows the JAWS default binary file to make function calls from the UIA.jsb file as if those functions had been created in the JAWS default script source file or were part of the JAWS built-in functions.

For more details on the usage and syntax of the Use statement, see Use Directive.

Import Statement

Directs the compiler to refer to the script and/or function definitions in a script documentation file (.jsd) when compiled. Actually, both use and import statements make the definitions in a .jsd documentation available at compile time. The difference is that the Use statement links the binary files while the Import statement does not link them. In other words, the Import statement makes the actual script and function definitions from a specified script documentation file available to the compiler during compilation. But the binary files are not linked. Therefore, function types and parameter definitions from that script documentation file are processed when compiled.

Linking a script binary file more than once in multiple source files for the same script set may cause problems at run-time. If you have a script set that requires function definitions from a binary file at run-time other than the file you are compiling, and if the compiler needs access to the function definitions in the script documentation file associated with that binary file so that it can compile, employ the Import statement instead of the Use statement. In this way, you are directing the compiler to access the script and function definitions in the script documentation file instead of linking the binary file more than once.

For more details on the usage and syntax of the Import statement, see Import Directive.

Prototype Statement

Used in lieu of the Import statement to add a particular function definition from a script documentation (.jsd) file to a script source (jss) file. When the function definitions from the entire file are not needed, the Prototype statement omits the need for the entire script documentation file to be imported.

The Prototype statement is added outside of any script or function, as long as it precedes the location in the script source file where you call the function.

For more details on the usage and syntax of the Prototype directive, see Prototype Directive.

;#Pragma StringComparison Statement

Used to determine how string comparisons with the == and != operators should be processed by the compiler. The ;#Pragma statement must be followed either by the keywords, StringComparison full, or the keywords, StringComparison partial. Place the statements outside of any script or function code in a script source file.

Since JAWS 13, all string comparisons using the == and != operators behave as if the ;#Pragma StringComparison functionality were set to full. This is default behavior. But prior to JAWS 13, string comparisons were processed such that the comparison ended when the shorter of the two strings matched the longer of the two.

The scripter may direct the compiler as to how to process string comparisons: ;#Pragma StringComparison set to full or set to partial. If set to full, succeeding string comparisons using the == and != operators ensure that the compiler processes string comparisons fully regardless of which is shorter. If set to partial, the compiler processes string comparisons using the older method used in versions of JAWS prior to JAWS 13.

For more details on the usage and syntax of the ";#Pragma StringComparison" statement, see ;#Pragma StringComparison Directive.

;#Pragma UsePoFile Statement

Used to determine whether a script source file should be processed by the compiler to be backwards-compatible to versions of JAWS prior to 17. This specially formatted comment statement must reside outside of any script or function in the source .jss file. You only need to add the statement at all when you are creating or editing a script source file with JAWS 17 or later, and you need that script to work properly in a version of JAWS older than JAWS 17.

For more details on the usage and syntax of the ";#Pragma UsePoFile" statement, see ;#Pragma UsePoFile Directive.

ScriptFileVersion and ScriptFile

Used to version-lock the script source file to a specific version of the product. For more details on the usage and syntax of the "ScriptFileVersion" and "ScriptFile" statements, see ScriptFileVersion and ScriptFile Directives.

Customized Quick Settings

As of JAWS 11.0, the JAWS user interface for changing options in its many features changed from the Configuration Manager dialogs to the Settings Center dialog. In JAWS 13.0, this concept was extended with the introduction of the "Quick Settings" feature. This user interface replaced the AdjustJAWSOptions dialog available in prior versions of JAWS, providing easier navigation and searching of the myriad options JAWS offers. The older functions for developing AdjustJAWSOptions dialog remained in the product for legacy reasons.

The Freedom Scientific Scripting language supports customization of Quick Settings using special files and functions. To distinguish the files used for quick settings from other types of script files, there are two files with special extensions:

·         .qs - Quick Settings XML file containing all the information required to populate the Quick Settings user interface

·         .qsm - the associated Quick Settings XML message file containing all help messages for the user interface

A set of Quick Settings files must have the filename for the application to which the set belongs. So as with any other application-specific script files you develop, name your customized quick Settings files accordingly. For example, if your script source file has the name, MyApp.jss, then its associated Quick Settings files (if they exist) should have names like MyApp.qs and MyApp.qsm. Both .qs and .qsm files must exist in order for JAWS to process your customized Quick Settings correctly at run-time.

Data passed between the QuickSettings user interface and JAWS scripts is in XML format. You must use the Script Manager or another text editor that supports working with XML in order to edit existing XML files, or to create your own .qs and .qsm files.

In addition, the Scripting language provides numerous functions to assist with the manipulation of Quick Settings XML files. To use these functions in your own script source file, you must add the following statement after any "Include" statements at the top of your script source file:

Import QuickSet.jsd

 

For more details on working with the "Import" directive, see Import Directive.

For more information about working with compiler directives in general, see Compiler Directives.

The functions for working with Quick Settings files are all located in the QuickSet.jsd file that ships with JAWS in the root folder of the shared settings\(language) folder. You may also refer to the QuickSet.jss script source file located in the same folder to see how to apply functions for Quick Settings, and to the ddefault.qs and default.qsm files to see exactly how to format a Quick Settings .qs and .qsm file. Some examples drawn from these files are shown below.

When the user toggles an option within the Quick Settings user interface, JAWS saves the user's settings in user-specific configuration (.jcf or .mcf) files and at times also in .jsi or .ini files. The user-specific JAWS configuration files are located in the JAWS root folder of the user's Settings\(language) folder. Any user-specific .jsi files are located in the PersonalizedSettings folder, which is under the JAWS root folder of the user's Settings\(language) folder. Some .ini files - for example, those for voice settings, are located in the JAWS root folder of the user's Settings folder.

The .jcf, .jsi and .ini files all have section names whose entries apply to a particular type of setting. So it is critical that the .qs and .qsm files correctly indicate to what section a setting belongs and which functions or events apply to a setting.

The QS File

JAWS ships with numerous .qs files for various applications. The default.qs file contains the settings available to all applications JAWS supports.

If you are creating Quick Settings for your own applications, the .qs XML file you create must contain the following parts that must be coded properly for JAWS to process the file:

Category

A category is the heading for a group of settings, representing the tree node in the Quick Settings user interface. Each category contains a list of settings. Categories can be nested to any depth.

The .qs file must contain descriptions of each category and its contents. A category is represented by an ID, a unique string within the .qs file. The syntax for naming IDs is “CategoryName.SettingName”. If a category is nested, you must use the full category path in the ID name.

For example, GeneralOptions.UserVerbosity is the ID User Verbosity setting under the category of General Options.

Settings

A setting is represented by an ID. Like a category, a setting must have a unique string within the .qs file. A setting also must have an associated type that dictates how the user interface displays the setting at run-time. The types supported include:

·         List - to display a list of values, one of which may be selected.

·         Boolean - to display an option that may be toggled On or Off.

·         Information - to display the resultant of a setting. For example, to have the JAWS user interface display that cell monitoring is ON, use the information type for the setting to display which cell is being monitored.

A setting can be static or dynamic. For a static setting, the scripts do not determine the list of possible values of the setting. You can make a setting static by associating a setting section and a setting name. But within a static setting, both the section name and the file name may be dynamic.

The section name can be a variable set in the variable block. Variable blocks contain variables that you may substitute for names. A variable has an associated callback function to populate its value. When the QuickSettings feature loads, it calls the associated callback function and populates the variable.

A setting is dynamic if the scripts must supply its value or set of values rather than the value or values being stored in the .qs file. A setting can be enabled or disabled dynamically.

You may make a setting dynamic by associating callback events in the setting. When a dynamic setting needs to be loaded, JAWS requests a possible list of values from the callback event. Every time the user toggles a dynamic setting, the callback event is notified. The callback event is responsible for writing the setting.

A setting can have a list of dependent settings. When the setting value changes, each of the dependent settings is called to update its value based on the value of the parent setting.

You may also set variables as dependent entries in the .qs file. But there can be only one level of dependency processing. So if there are any dependents of the dependents, they are not called.

SettingsFile Section

JAWS uses the .jcf, .jsi, and .ini files to read setting changes and write to update those settings based on user interaction. The .jcf, .jsi, and .ini files have section names whose entries must correspond to the appropriate type of setting being read or written. For example, if the setting in the .qs file is not related to a .jcf option or a value event, you must specify the SettingsFile section accordingly. Section names may be for Non-JCFOptions, OSM, etc.

The section called "NonJCFOptions" is used for scripted settings which are not known to the internals of JAWS. These are settings that are unknown to the internal functions, SetJCFOption and GetJCFOption. So, for a non-JcFOption setting, the syntax is:

<SettingsFile Section="NonJCFOptions" Name="MySettingFunction"/>

For a setting that belongs to the OSM section, the syntax is:

<SettingsFile Section="OSM" Name="MyOSMSettingFunction"/>

For a setting that belongs to read/write events, the syntax is:

<SettingsFile ReadValuesEvent="GetMySettingsFunction" WriteValuesEvent="setMySettingsFunction"/>

The QSM File

The .qsm file allows you to associate label text and help text based on the ID of the category or the setting in the .qs file. The IDs must match. At run-time, the quick settings merges any application-specific settings with the default.qs and default.qsm files. JAWS Quick Settings user interface places your application-specific categories at the top of the tree. Likewise, if your application-specific .qsm file is adding to an existing category, whatever that .qsm file adds appears at the beginning of the existing category.

You may format messages you plan to pass as parameters in functions that read to and write from a .qs file as XML messages. Rather than trying to remember the exact XML syntax for a parameter that you must pass to a .qs XML function, it is easier to generate messages with meaningful names such that the text of the messages have all the correct formatting. For detailed examples, refer to the QuickSet.jss file that ships with JAWS. These are the files used by the default.qs file.

Code Samples for Messages

The below code samples show how to create messages with proper XML formatting. These are drawn from the QuickSet.jss file, the default script source file for the default.qs and default.qsm files - all of which ship with JAWS.

Messages
@ListReadResponseStart
<ReadResponse ID="ListItems">
@@
@ListValuesStart
<ListValues SettingsID="%1" SelectIndex="%2">
@@
@ListValue
<ListValue Text="%1"/>
@@
@ListValuesEnd
</ListValues>
@@
@ListReadResponseEnd
</ReadResponse>
@@
;\037 is the % character used to keep from interfering with formatted strings.
@VariableReadResponse
<ReadResponse ID="VariableResult">
<VariableValue ID="\037%1\037" Value="%2" />
</ReadResponse>
@@
EndMessages

Functions for Working with QS XML Files

Below is a sampling of the list of functions you may use to read from and write to .qs XML files for your own application-specific settings. For the complete list, refer to the QuickSet.jsd file that ships with JAWS.

Function: qsxmlMakeBooleanState

Description

This function returns the proper state string for use with Quick Settings xml since atomic types and values in xml are case-sensitive.

Syntax

qsxmlMakeBooleanState (nJAWSState)

nJAWSState is an integer value representing either TRUE or FALSE.

Returns

A string for the xml state (without the quotes) that represents the JAWS-usable TRUE/FALSE state constants.

Function: qsxmlMakeList

Description

Use to format xml creating list of available options to submit to the QuickSettings engine.

Syntax

qsxmlMakeList (SettingID, nSelectIndex, ListItems, nArraySize, Optional bDisabledSetting)

·         SettingID is a string representing the ID that came as a parameter to your custom callback function.

·         nSelectIndex is an integer value representing the item in the array to make the default list position.

·         ListItems is a StringArray representing the array of items, or available settings, for the callback function. Most common list items are integers or strings written to xml as strings.

·         nArraySize is an integer value representing the size or elements count in the listItems array.

·         Optional bDisabledSetting is an integer value you may set to TRUE to add the attribute to disable the setting. This leaves it in the window but renders it unavailable.

Returns

A string representing the QuickSettings callback function's response string for list items callbacks.

Function: qsxmlMakeBoolean

Description

Use to format xml creating the state of the checkbox to submit to the QuickSettings engine. Is used for settings of type Boolean which correspond to check boxes in QuickSettings.

Syntax

qsxmlMakeBoolean (SettingID, State, Optional bDisabledSetting)

·         SettingID is a string representing the Setting ID given as parameter to the callback function.

·         State is a string representing either the string literal "true" or "false" for xml formatting.

·         Optional bDisabledSetting is an integer value you may set to TRUE to add the attribute to disable the setting. This leaves it in the window but renders it unavailable.

Returns

A string representing the xml for the boolean callbacks.

Function: qsxmlMakeVariable

Description

This function returns xml format for the callback function associated with a variable in the qs xml.

Syntax

qsxmlMakeVariable (SettingsID, sValue

·         SettingID is a string representing the ID supplied as parameter to your custom callback function.

·         sValue is a string representing the variable's value.

Returns

A string representing the xml for the callback function associated with the variable.

Function: GetNonJCFOption

Description

Gets the "NonJCF" setting, similar to GetJCFOption except that the settings are gotten from the NonJCFOptions section of the JCF file. Just like GetJCFOption, the load order is: Get from application-specific file, and if not present, get from default file. Uses standard JAWS Settings layering.

Syntax

GetNonJCFOption (sOption, Optional nReadSource)

·         sOption is a string representing the string name of the option to retrieve, this is the key name.

·         Optional nReadSource is an integer representing the source from which to read: Constants in hjConst.jsh: rsStandardLayering, rsSession, rsFocus, or rsNoTransient

Returns

An integer representing the value of the setting in the current or default jcf file but only if it is in the NonJCFOptions section.

Function: LoadNonJcfOptions

Description

Loads settings from the default and application JCF files that are in the NonJCFOptions section. These are settings which are implemented solely through scripts, and are therefore unknown to internal JAWS functions. LoadNonJCFOptions should run each time an application gains focus so that script-implemented options in the JCF file load along with internal JCF options. If a script has customized options for an application, overwrite this function to load the application's customized options and then call this function for default handling of script-implemented options.

Creating Research It Rules

JAWS 11 introduced the Research It feature, providing quick access to data but at the same time making it easy to return to your primary task. Research It utilizes a "Lookup" source from the Internet, and presents findings in the JAWS virtual Results Viewer.

You may launch Research It from any application. The Research It user interface provides you with an edit field to type in a word or phrase to search, along with a list of Lookup resources from which to search, as well as numerous other controls that let you customize how to search. Once you press ENTER to begin a search, the virtual Results Viewer displays either an error message if nothing was found, or information from the chosen Lookup resource relevant to your search term. the information presented in the virtual Results Viewer is in a highly condensed format, thus eliminating all of the extra elements that clutter up a Web page - graphics, Flash objects, links to unrelated materials, etc.

When Research It finds results from a search term, the virtual results viewer window presents only the links and starting text for each relevant item found. From any of these links, you can press Enter to navigate to a condensed version of the Web page where the entire content of that particular link is located but without all the extraneous material that is normally displayed on that Web page utilizing a standard Web search engine.

For more details on working with the virtual viewer window and the virtual results viewer, see Implementing a Virtual Viewer Window.

Research It is customizable through its user interface, as mentioned above. You may choose from numerous Lookup resources that ship with JAWS. These include Wikipedia, WikiDictionary, various news sources, and so on. You may even choose which source should be the primary Lookup resource for search terms.

But in addition to the Research It user interface, you may customize Research It for application-specific Lookup resources that do not ship with JAWS. The xQuery language and the Freedom Scientific scripting language work hand-in-hand for customizing Live Resource Lookup (LRL) functionality. Over the years, some lookup sources initially provided with JAWS for Research It have had to be removed due to the everchanging dynamic redesign of some websites. Nevertheless, there is much you can do with rule sets of your own as well as with the currently shipping available lookup sources provided with JAWS.

Definitions

·         Lookup Module Raw Name - The name of a Lookup module as it appears in the file system without the path and extension.

·         Lookup Module Friendly Name - The localized name of a Lookup module. This name is used in the Settings Center user interface, as well as in the list of Lookup resources in the Research It user interface dialog.

·         Rule Set - An optional set of instructions for a Lookup Module. The rule set follows the Syntax defined by the Lookup module. A rule set allows a Lookup module to contain generic code that may be manipulated externally by the rules defined in the rule set.

·         The PrimaryLookupModule key is stored in the [Research It Options] section of the default JAWS configuration (jcf) file. The primary key may be application-specific.

Defining a Rule Set: The RUL and QRY Files

A Research It rule set contains two files that share a common filename with extensions .rul and .qry:

·         .rul - the Rule file containing the basic information needed to run the Research It query through the JAWS user interface.

·         .qry - the Query file containing the program that accesses an Internet website, sends any query data to that site, locates the desired data, and returns it to the JAWS virtual Results viewer.

For more details on working with the Rule (.rul) file, see The Rule File.

For more details on working with the Query (.qry) file, see The Query File.

Creating Rule Sets Within the JAWS Research It User Interface

Rather than using the tools discussed in the file referenced above, you may prefer to build your queries directly as rule sets that run in the JAWS Research It user interface. Simply create your .rul file, and then write your query in an editor like notepad and save it as your .qry file. If there are errors in the query code when you run the query from Research It, JAWS just reports that no results were found.

To obtain error and debugging information within Research It, you must use the JAWS Utility Mode, as described in "Research It: Creating Rule Sets for JAWS (Word file)". Download the file from the link located at: Creating Research It Rules for JAWS.

Running Queries Within the JAWS Research It user Interface

The fact that JAWS can utilize certain query tools (XQuery/XQilla) is due to the inclusion of a Freedom Scientific lookup module called LiveResourceLookup.dll. this module ships with JAWS since JAWS 11. It is located in the root folder of the JAWS LookupModule subfolder. This API allows the queries to run as a feature of JAWS. The module supports multiple lookup sources, those created by Freedom Scientific that ship with JAWS, and those created by third-party developers for their own queries. The three-letter prefix, lrl, used in the filenames of our own Research It files comes from the name of this module. It is useful to prefix the filenames this way to indicate the particular lookup module with which they should be associated. But if you are interacting with a lookup source that does not support XQuery, if you must protect proprietary data, or if your lookup source requires user authentication, you must create your own lookup module as a .dll API. For more details on this, see: Research It DLL API.

Research It Scripting Functions

There are numerous functions you may use for customizing Research It rules in your own applications. See to the LiveResourceLookup.jsd script documentation and its associated LiveResourceLookup.jss script source files that ship with JAWS. These files are located in the shared folders as follows:

·         LiveResourceLookup.JSS in the Shared Scripts folder, and

·         LiveResourceLookup.JSD in the Shared Scripts\Language folder.

 

For a complete listing of Research It functions, see the relevant category book of the Reference Guide.

Calling Scripts and Functions

The Freedom Scientific Scripting language supports many ways to call scripts and functions. This summary includes general descriptions and definitions of the more commonly used methods for calling scripts and functions, as well as a few code samples illustrating how to call them.

Script versus Function

Scripts and functions are standard blocks of code that govern JAWS behavior. A script is a block of code that may be tied to a keystroke or key combination the user must press in order for the script to execute. A script includes numerous steps that JAWS should perform on demand if the user presses the keystroke or key combination bound to the script.

On the other hand, a function is not performed based on the user pressing a particular keystroke or key combination. Rather, it is called by various means: by a script, by another function, or as a result of a system event. A function can return information after completing the steps within it. A script cannot return information, although both a script and a function can shift control to a different block of code. Additionally, a function may accept data from a calling script or function via parameters, and it may return a value to a calling script or function.

There are three types of functions:

·         Event - performed by JAWS automatically when Windows events occur. Without event functions, JAWS cannot speak and/or display in Braille any system changes automatically. JAWS recognizes many system events that have corresponding functions in the Freedom Scientific scripts where behavior is defined for these events. You cannot create new event functions of these types yourself. But if an application exposes events through a COM object, you can write new script functions that attach to the object for events, and that run when the application events occur. Use the function, ComAttachEvents, to attach functions to exposed COM events, and use the function, ComDetachEvents, to detach them.

 

Additionally, with caution, you may overwrite existing default event functions, and you may create application-specific versions of default event functions. For more details on working with event functions, see Events.

·         Built-in and Default Functions - an ever-growing list of built-in and default functions exposed to the Freedom Scientific Scripting language. These functions ship with JAWS and are used in the shipping code both in default and application-specific script files. With caution, you may use these functions to create and/or modify your own custom script sets. The built-in and default functions are the building blocks of your scripts and functions. For a complete listing of built-in and default functions, see all the category books and their summaries in the JAWS Reference Guide.

·         User-Defined Functions - developed either by Freedom Scientific script developers or by an independent script developer. Typically, they are created for an application the shipping version of JAWS does not support, and/or to enhance an application that JAWS does support. As with built-in and default functions, you may modify and overwrite user-defined functions, and call them from a script or from another function.

Hierarchy of Rules for Calling Scripts and Functions

JAWS performs functions based on their names and locations within the hierarchy of the script files that ship with the product, as well as script files located in your user settings\(language) folder. The rules for processing scripts and functions are as follows:

1.    Each time a function is called from within a script or another function, JAWS searches the application-specific script file first, assuming the application has focus. The application may have layered script files, and so the search starts at the top-most application script file and searches down through any script files linked through the Use statement. If the function is contained within the application-specific script file, then JAWS performs the function and stops processing.

2.    When JAWS does not find the function in the application-specific script file or files linked to it through the Use statement, then JAWS searches the default script file. If JAWS finds the function in the default script file, then JAWS performs the function and stops processing.

3.    When JAWS does not find the function in the default script file, then JAWS searches the list of built-in and default functions. If JAWS finds the function, then JAWS performs the function and stops processing.

4.    When JAWS does not find the function in the built-in and default functions, then JAWS announces, "unknown function call to", followed by the name of the function. JAWS then spells out the name of the unknown function. This error message warns you that the function JAWS tried to call may have a name that is misspelled, the function may have been deleted, or the function may not have been written.

For example, supposed you overwrite the SayLine script in your application-specific script file because processing for how the current line is spoken should be handled differently in your application from the way that the default JAWS functionality processes this script. Of course, the default version of the SayLine script still exists in the default script file. As long as your application has the focus, JAWS performs your overwritten SayLine script found in your application-specific script file rather than the default SayLine script found in the default script file.

Types of Parameters

Although scripts may receive parameters, they are almost never coded to do so. If you code a script to receive parameters, you may pass specific values to its parameters by use of key map files.

Functions may take parameters, and in fact, typically do so. parameters may be required or optional, and they may be passed by reference or not.

Parameters may be required or optional. If a parameter is optional, you must precede its declaration in the parameter list by the keyword, Optional. All subsequent parameters in the parameter list are also optional. So you only need to utilize the keyword, Optional, once in the parameter list. All parameters are required unless you use the keyword, Optional, and all parameters preceding the keyword, Optional, are required.

Whether a parameter is required or optional, it may be passed by reference or not. If you specify a non-aggregate parameter in a parameter list with the keyword, ByRef, the variable is passed by reference. This means that the variable is updated by any changes it receives when the function is called, and those changes are retained when the function is exited.

By contrast to non-aggregate variables, collections and arrays are automatically passed by reference. therefore, the keyword, ByRef, is not required when you declare collections and arrays as parameters.

If a function receives a non-aggregate variable that you have not specified as being ByRef, the variable receives a copy of the variable rather than a pointer reference to it. Therefore, any changes to the variable made in the function are discarded when the function exits.

Examples of Parameter Lists for Functions

Required - passed to the function when it is called. the syntax is parameter type followed by parameter name.
 
 

            String sMyName

 

Optional - passed to the function when it is called. The syntax is the keyword, Optional followed by parameter type followed by parameter name or names
 

            Optional String sMyName
            or
            Optional String sFirstName, String sMyLastName, Int iAge

 

ByRef - passed by the function when it is called rather than to it. The syntax is parameter type followed by the keyword, ByRef followed by parameter name
 
 

            String ByRef sMyName

 
 Note: When a function is declared with by reference parameters, those parameters must be included in any calls to that function.
 
 

Return Statements

A Return statement gives you great flexibility over how to call scripts and functions. A Return statement is used to terminate execution of the script or function in which it appears, and to shift control (and the value of an expression if you provide one) to the calling script or function. But since a script cannot return a value, never follow a return statement in a script by a value.

For more details on working with Return statements, see the topic in the Control Flow book at Return Statements.

Postponing Processing within a Script or Function

When you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait before it continues processing. It all depends on what event you need to complete processing, how much control you need over the wait time, and how you wish JAWS to behave after that event completes. Available methods in the Scripting language include:

·         Pause - waits for other tasks to complete.

·         Delay - waits for focus and new text events to complete with a timed delay you control and optionally by suppression of checking on whether those events have completed.

·         ScheduleFunction and UnscheduleFunction - ScheduleFunction Tells the script to schedule a function to run in a set amount of time, then continue processing the currently running function while waiting on the scheduled function to run. You may use UnscheduleFunction to cancel a scheduled function.

·         QueueFunction - waits to perform a function passed to it after JAWS has stopped speaking. You may queue more than one function to be performed in order.

·         ScheduleFunctionAfterWindowGainsFocus - allows you to call a function after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

·         SetFocusToWindowAndScheduleFunction - allows you to set focus to a particular window after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

Pause and Delay

Pause and Delay statements allow you to postpone execution of succeeding statements in your scripts and functions. Pause gives you the least control but may be all you need in order to accomplish your goal. Delay gives you more control, and allows you to specify how long to postpone processing, depending on whether focus and new text changes have completed.

For more details on working with Pause and Delay statements, see Pause and Delay.

Scheduling Functions

Scheduling functions give you the most control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these types of function calls let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions. As mentioned above, there are several types of scheduling functions.

For more details on working with scheduling functions, see Scheduling Functions.

Enumerator Function Calls

Enumerator functions call a callback function, which in turn may process the window optionally, and either stop or continue the enumeration depending on what the callback function tests and returns. For more details on working with enumerator functions, see Enumerator Functions.

Customizing Scripts and Functions from Default and Built-in Code

When you want to customize your own script files, or when you want to personalize the script sets that ship with JAWS, there are numerous methods you can use. You may create your own user-defined scripts and functions in your own script sets that do not ship with JAWS. but you may also customize existing code by modifying scripts and functions.

Choose your method for customizing your scripts and functions depending on what you need to accomplish: Are you customizing for your own needs in an application already supported by JAWS, or are you creating your own script set for an application JAWS does not support? Are you customizing an existing script or function for a specific application, or do you mean to affect JAWS behavior across all applications? How you code your customized scripts and functions may have very unpredictable results, or it may be a very powerful enhancement. It all depends on careful planning and cautious coding. We always recommend that you back up any code that ships with JAWS before customizing any code directly. Below are some methods for customizing scripts and functions.

MyExtensions

Script binary file stacking does not allow for events in the JAWS script source file (default.jss) to be overwritten in script binary files that are used by the default script binary file (default.jsb). Therefore, MyExtensions.jss and its resulting binary file, MyExtensions.jsb, are intended for you to add custom scripts and functions to the Freedom Scientific default scripts and functions, rather than for you to overwrite default scripts and functions.

You may generate a user default.jsb in the JAWS root folder settings\(language) folder. This default.jsb, compiled from its own default.jss script source file, utilizes the shared default.jsb that ships with the Freedom Scientific JAWS. In other words, it is in the user default.jss file that you should overwrite default scripts and functions.

CAUTION: Make sure that default.jss in the user area calls the one in the shared area by including a use statement for default.jsb. If this Use statement is missing, you will experience catastrophic failure when JAWS attempts to run any scripts that are in the shared default script file but not in the user default script file. Be sure that your script or function in the User default file calls the version in the shared default file where you want to defer to the default behavior of the script or function.

MyExtensions.jss and MyExtensions.jsb ship with JAWS. These files are located in the JAWS root folder of the shared settings\(language) folder. Once you compile the MyExtensions.jss file, thus creating a MyExtensions.jsb file, JAWS places these custom script source and binary files in the user settings\(language) folder.

Note: This assumes that you are using Script Manager to compile. If you elect to use your own text editor, you must ensure that you compile to the correct folder, or copy the files there manually.

MyExtensions.jss contains the following commented-out sections to help you understand the types of code blocks such a file expects:

·         The script source file begins with the typical Include statements that any script source file should have to ensure code integrity during compilation with the default JAWS scripts and functions. These are as follows:

o   Include "hjConst.jsh"

o   Include "hjGlobal.jsh"

o   Include "common.jsm"

o   Any other Include statements of header files specific to your own script set.

·         In order not to have to re-install your own script sets after JAWS automatic updates, place any additional use statements for your custom script binary files below any other "Include" statements of header files specific to your script set.

·         By default, JAWS 13 processed a literal full string match when the == operator was used on strings. The ;#Pragma line can allow the == operator to work as it did prior to JAWS 13, which was a partial comparison. If you need the == and != operators to work with partial comparisons only, add the appropriate statement below your use and Include statements. For more details on working with ;#Pragma StringComparison statements, see ;#Pragma StringComparison Directive.

·         Next are two functions that are necessary and run every time your script set loads and unloads. Use AutoStartEvent to obtain or construct object pointers or other flags or globals you need to initialize when your script set loads. Use AutoFinishEvent to destruct or unload your objects, or nullify any other flags or globals.

·         Add your own user-defined scripts and functions, and compile to create your own MyExtensions.jsb in your user settings\(language) folder.

Overwriting Default Scripts and Functions

The fundamental reason for overwriting a script or function JAWS already provides is that you want that script or function to behave differently from JAWS behavior for some special circumstance of your own. It may be for something specific to a script set you are writing for an application JAWS does not support. Or it may be for an application JAWS does support but for which you want a different behavior from JAWS default behavior.

A safe method for overwriting scripts and functions includes the use of several key function calls that ensure the default scripts and functions still work as expected. Some common function calls that you may use include:

·         PerformScript

·         CallScriptByName

·         CallFunctionByName

Using Scope to Redirect Function Calls

A very safe method for ensuring that a function call to an overwritten function is made only when you want it to be made employs the scope capabilities of the Scripting language to redirect from where the function should be processed. the syntax of scope is to use the name of the script source file where the function code is located, followed by two colons (::) and then by the name of the function as you would normally call it. for example, to call FocusChangedEvent and make sure that it is the one from the default script source file that is actually called, you write:
 

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 from within your own code in your script source file.

 

For more details on working with how to redirect function calls, see Redirecting Function Calls Using Scope.

Code Samples

Below are some code samples for the various types of script and function calls described in this summary.

Function with Optional Parameters Code Sample

The below code sample declares the String parameter as a required parameter but the Integer parameter as optional.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Optional Int iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If iAccountNumber then
            SayInteger (iAccountNumber)
EndIf
EndFunction
Script MyNameTest ()
SpeakNames (sName1) ;omits the optional parameter, just says "My name is Mary".
SpeakNames (sName2, iAccount2) ; speak both required and optional parameters.
EndScript

Function with By Reference Parameters Code Sample

The below code sample provides the integer parameter by reference.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Int ByRef iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If sMyName == sName1 then
            iAccountNumber = iAccount1
ElIf sMyName == sName2 then
            iAccountNumber = iAccount2
Else
            iAccountNumber = 0
EndIf
EndFunction
Script MyNameTest ()
Var
            Int iNum
; Any non-aggrigate variable declared in the function parameter list as ByRef is received by the function as being by reference.
; This means that the function knows where the variable is stored in memory and can change it.
; The function has the ability to change the variable, whether or not it actually does so.
; Any non-aggrigate variable received by a function receives only a copy of the variable, and any changes made to the variable do not persist when the function is exited.
SpeakNames (sName1, iNum)
SayInteger (iNum)
SpeakNames (sName2, iNum)
SayInteger (iNum)
SpeakNames (cscNull, iNum) .
SayInteger (iNum)
EndScript

PerformScript Code Sample

The PerformScript keyword must be followed by a defined script name. For example, if you write:
 SayLine (),
 you are calling the function. But if you write:
 PerformScript SayLine(),
 you are calling the script SayLine (), as if you had pressed the keystroke bound to that script.

Script SayLine ()
If MyConditions then ;whatever your special conditions are in your user-defined MyConditions function...
            DoMyFunction ; do whatever it is you want, like spell the line instead of speaking it in your DoMyFunction call.
            Return
EndIf
PerformScript SayLine () ; Call the default SayLine script bound to the keystroke, Insert+UpArrow.
EndScript

CallScriptByName Code Sample

A function call to PerformScriptByName lets you call dynamically a script whose name is passed as the first parameter. In other words, the script name does not need to be known during compilation, and the script name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the script to be run. then optionally, it takes up to nine variant script parameters.

The below nonsense sample for a supported browser for a Web site that has multiple headings checks to see if the current line is blank. If it is, then the script calls the MoveToNextHeading script to jump to the next heading level 2 on the page.

Script MySayLine ()
If StringIsBlank (GetLine () ) then
            PerformScriptByName ("MoveToNextHeadingLevelN",2)
            Return
EndIf
PerformScript SayLine () ; current line is not blank.
EndScript

CallFunctionByName Code Sample

A function call to CallFunctionByName lets you call dynamically a function whose name is passed as the first parameter. In other words, the function name does not need to be known during compilation, and the function name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the function to be run. then optionally, it takes up to nine variant parameters.

Note: Using CallFunctionByName bypasses checking parameter types that is processed when a function is invoked normally. The Return type is the same as that of the function being called.

The below code sample spells out the word at the cursor from within Notepad. although simply calling SpellString will do the same thing, this is simply to illustrate the syntax of how to use CallFunctionByName.

Script MyTest ()
If ! StringIsBlank (GetLine ()) then
            CallFunctionByName ("SpellString",getWord())
            Return
EndIf
SayLine() ; The line is blank.
EndScript

Domain-Specific Utilities

As of JAWS 17 and later, several of the Freedom Scientific utilities allow for customizing by domain Web-based applications, even those not specifically within a browser. The utilities supported for this type of customization include:

Dictionary Manager

Keyboard Manager

Settings Center

Script Manager

 

Utilities such as the Frame Viewer and Graphics Labeler are not customizable for specific domains and continue to behave as always. If you do nothing to customize domain-specific settings, JAWS continues to behave as always by default as well as for all supported applications.

Domain Option in the Files menu of the Utilities

The Script, Keyboard, and Dictionary managers have a menu item added to their respective File Menus to open or create domain-specific files.

Dictionary Manager

When the active application is Web-based, the Dictionary Manager has a menu item added to the File Menu that allows you to open the domain dictionary file. This action creates the dictionary as needed and opens it for you to customize just for that domain.

Script Manager

The Script Manager also allows you to create or open an existing domain-specific script source .jss file through the File Menu when the current application is web-based, and allows for assigning a script key in the domain-specific keymap .jkm file. When a script is assigned in a domain script file, any key assignments made in the New Script or Script Information dialogs writes the assignment to the domain keymap file. When a script is deleted with a key binding, the Script Manager deletes the key binding.

Keyboard Manager

The Keyboard Manager allows you to open the domain-specific .jkm keymap file through the File Menu when the current application is web-based. When the active document is the domain keymap file, the right pane shows domain, application, and default keystrokes, depending on the settings of the Key Filter. For practical purposes, domain-specific keystrokes are essentially an addition to the application keystrokes. Therefore, when you select an application in the Key Filter and a domain file is active, the keystrokes for the domain and application should be displayed. When you add a keystroke through the Add Keystroke Action dialog, the keystroke is added to the domain .jkm keymap file if a domain-specific .jkm keymap file is active.

Settings Center

When the current application is web-based, the Settings Center utility adds a list item to the applications list. The list item includes the file name followed by “(Domain).” Selecting this item creates the domain settings as needed and opens the domain configuration file.

ConfigNames.ini and .jcf Files

Your User\Settings\(Language) folder contains .jcf files for domains you set through Settings Center, as well as a ConfigNames.ini file. The domain-specific .jcf files are named by the domain name itself (e.g., www.freedomscientific.com.jcf. The ConfigNames.ini file contains a section called [ConfigNames]. Entries in this file are of the form domain-speicific .jcf filename followed by the Equals sign (=) followed by the filename again (e.g.,
 www.freedomscientific.com.jcf=www.freedomscientific.com.jcf
 Note that domain-specific .jdf, .jkm, and .jsb files are not included in the ConfigNames.ini file, only the domain-specific .jcf files you create.

Constants

Unlike variables, constants do not change value. They are most useful for hard-to-remember strings of characters or long numbers. Constants should have mnemonic names since it is easier to remember a name than a number or long string of characters.

The Freedom Scientific Scripting language has no restrictions as to how many constant names you assign to a particular value. For example, in the default JAWS constants file, HJConst.jsh, there are constants named True and On - both of which hold the value 1. It is more intuitive to understand a code statement that checks a condition for values of True or On than a code statement that checks for the integer 1. Once you declare the constants, JAWS recognizes all of the constant names with the same value.

If the string of characters being stored in a constant includes Unicode characters, ensure that the script files where the constants are declared and utilized are formatted properly for UTF-8. For more information on UTF-8, see Formatting Script Files for UTF-8./

Advantages of Using Constants

There are several advantages to using constants in scripts:

·         It is easier to remember a constant name than its value. And it is more intuitive when the constant name is a readable word like “True” or “on”.

·         It is much easier to maintain code when constant names are used rather than hard-coded strings of characters or hard-coded integer values.

·         Changing the value of a string of characters or an integer that is used throughout code is much easier to maintain if that value is stored in a constant. The change is made just in one place. In other words, simply changing the constant declaration affects the code wherever that constant is applied.

·         The Freedom Scientific Scripting language does not support direct declaration of a negative integer constant, as in "VBTrue = -1". However, it does support using hexadecimal representation of any integer, including negative integers, as in "VBTrue = 0xffffffff". Note: This is because the Scripting language uses four bytes to store numbers, and if the highest bit is a 1, the numbers are signed so that they are negative.

Declaring Constants

You may declare constants anywhere outside of a script or function, but conventionally, they are declared at the beginning of a script source (jss) file or in a header (jsh or jsm) file. Begin declaration of constants either with the keyword, Const for simple constants, or with the keyword pattern that generates a block of message constants. A message block of constants begins with the keyword, Messages, and ends with the keyword, EndMessages.

Simple Constants

For simple constants, place each constant declaration on a separate line followed by a comma, except for the last one. For example:

Const
            True = 1,
            False = 0,
            On = 1,
            Off = 0,
            FS = "Freedom Scientific",
            FSZipCode = "33764" ; since this is used as a string, not for computing

Formatted Message Constants

Although you may declare string constants such as for window names, window classes, and so on, it is much more practical to declare message constants as formatted strings. This ensures that when JAWS processes message constants, they are indicated properly in speech, Braille, and in the virtual viewer, if applicable. Furthermore, formatted message constant declarations may include replaceable parameters so that varied information may populate messages when JAWS processes them, depending on conditions you determine through scripts and functions or through events.

When declaring and using message constants, especially those you wish to format with replaceable parameters in them, be sure to:

1.    Populate the message constant with text (it can be long and have multiple paragraphs), including spaces, tabs, and hard returns.

2.    If desired, create the text of the message constant with the "%" character followed by a number to indicate a replaceable parameter within the message. You may use multiple replaceable parameters in the same message.

3.    Use the FormatString function in order to populate the message with appropriate replacement strings for the replaceable parameters in the message constant. The FormatString function returns a string that is already formatted properly for you to pass to a function that outputs formatted strings .

4.    Utilize only functions that process formatted strings correctly, or enclose the string parameters in a call to the FormatString function. For example, if you pass the SayMessage function a formatted string, it cannot process any replaceable parameters; so the output may yield unexpected results. Instead, use one of the functions that processes formatted strings. These include:

o   SayFormattedMessage

o   SayFormattedMessageWithVoice

o   UserBufferAddFormattedMessage

For a complete list of formatting functions, see the String Functions category page of the Reference Guide called Strings Functions
 and
 Text Format Functions.

Syntax of Formatted Messages

Use the following format for message constants:
 The keyword, “Messages”
 On a new line, the name of the constant beginning with the at (@) symbol.
 As many lines as necessary for the content of the message, including hard returns, to generate multiple paragraphs, even replaceable parameters.
 On a new line, a double at (@@) symbol to end the constant declaration.
 On a new line, the keyword, “endMessages” to end the block of message constants.

You may repeat the pattern for as many message constants as you wish of "@" followed by message constant name, constant message itself, and a double "@" symbol to complete each message constant within the block beginning and ending with the keywords, Messages and EndMessages. It is good practice to begin the names message constants with the letters "msg" to distinguish them from other types of string constants. Also, if the constant takes replaceable parameters, place a comment above each message constant declaration explaining the purpose of the replaceable parameter.

Code Sample

 

Messages
@msgFSHeadquarters
11800 31
st
 CT North
St. Petersburg, FL
@@
@msgFSPhoneNumbers
800-444-4443
or
727-803-8000
@@
;for msgMyWorkplace, %1 is the name of the workplace.
@msgMyWorkplace
I work at %1.
@@
EndMessages

 

Using a Header File to Store Constants

Unless the constants you are declaring apply only to the current script source file, it is more practical to declare constants in a script header file. Typically, a header file has an extension of .jsh or .jsm. When you use a header file to declare constants, you must refer to that header file with an “Include” statement in the script source file where you want to use the constants. For examples, see the script source file that ships with the JAWS Shared user\settings\(Language) folder. One of the "include" statements for this file is "hjconst.jsh". Another is "common.jsm". Since the constants declared in these header files are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions.

If you add an "Include" statement for the HJConst.jsh file within an application-specific script source file, for example, those constants become available to that script source file.

Collection Type Variables

Description

Collection New

A collection is a data type that may contain members of any type, and whose members are accessed by means of a key. Members of a collection need not be of the same data type as each other. After declaring a collection, create it using the keyword, New.

Items of a collection spring into existence the first time they are assigned. Assigning a collection member to a value makes that member's type the type of the value being assigned. Each member in a collection has a key of type string, and each member can contain a value of any data type.

You may access members of a collection by using the dot operator followed by the key name, or by the key as a string enclosed in square brackets.

Syntax

 

Var collection col
            Let col = new collection
            Let col.item = value

 

·         Col is a collection variable being declared and created.

·         Item is the name (or key) of a member in the collection being created.

·         Value is the value being assigned to a member of the collection.

Remarks

Declaring a collection does not create it. You must create the collection by means of the New statement.

Collection members are stored in alphabetical order of the member keys. If you know the name (or key) of a member in a collection, you can assign or retrieve that name (or key) using the dot operator. If the name (or key) of a collection member is enclosed in quotes or is contained in a variable, you must access that member using the variable name or quoted string enclosed inside square brackets instead of using the dot operator.

Collections are always passed to functions by reference.

Assigning one collection to another results in two variables referring to the same collection.

When retrieving a collection member into another variable, the script code must ensure that the value retrieved is stored in the appropriate type of variable. Retrieving a nonexistent item does not generate an error.

Code Sample

Script TestCollections ()
CollectionOfFruitCollections()
EndScript
Void Function FRTINIT(Collection Frt, String Type, string Prep, String Cut)
Let Frt.Type = Type
Let Frt.Prep = Prep
Let Frt.Cut = Cut
EndFunction
Void Function CollectionOfFruitCollections()
Var
            Collection Fruit,
            Collection frt,
            String key,
            String sMsgFruitInfo
sMsgFruitInfo = "%2 and %3 the %1."
Let Fruit = new collection
Let frt = new collection
FRTINIT(frt,"Bananas","peel","slice")
Let Fruit.Bananas = frt
Let frt = new collection
FRTINIT(frt,"Apples","core","slice")
Let Fruit.Apples = frt
Let frt = new collection
FRTINIT(frt,"Strawberries","sugar","halve")
Let Fruit.Strawberries = frt
Let frt = new collection
FRTINIT(frt,"Oranges","peel","section")
Let Fruit.Oranges = frt
Let frt = new collection
FRTINIT(frt,"Pears","peel","slice")
Let Fruit.Pears = frt
Let frt = new collection
FRTINIT(frt,"Cherries","hull","chop")
Let Fruit.Cherries = frt
Let frt = new collection
ForEach key in Fruit
            SayFormattedMessage(ot_line,
                        FormatString(sMsgFruitInfo,
                                    Fruit[key].Type,
                                    Fruit[key].Prep,
                                    Fruit[key].Cut))
EndForEach
EndFunction

Array Type Variables

Keywords:

·         IntArray

·         StringArray

·         HandleArray

·         ObjectArray

·         VariantArray

·         New

Description

An array is a data type that contains a fixed number of elements, and whose elements are accessed by means of an integer index. Arrays are created to hold the data type for which they are intended. For example, IntArrays hold integers, StringArrays hold strings, etc. A VariantArray holds data of type variant, which means that it may hold any data type.

After declaring an array, create it and specify the size of the array using the keyword, New. The array is fixed to be the size specified at the time it is created. Multiple dimensions may be created, and can be separated with a comma.

You may access elements in an array by means of indices enclosed in square brackets.

Syntax

 
 

Var
            TypeArray xArray
            Let xArray = new TypeArray(size)
            Let xArray[i] = value
Var
            TypeArray xyArray
            Let xyArray = new TypeArray(sizeX,sizeY)
            Let xyArray[i,j] = value

 

TypeArray is any of the types of arrays that may be created-- IntArray, StringArray, HandleArray, ObjectArray, or VariantArray.

XArray is an array variable being declared and created. It is a one-dimensional array.

Size is the number of elements in the one-dimensional array xArray.

XyArray is an array variable being declared and created. It is a one-dimensional array.

SizeX is the number of elements in the first dimension of the one-dimentional array xyArray.

SizeY is the number of elements in the second dimension of the one-dimensional array xyArray.

I is an index into the array.

J is an index into the second dimension of the one-dimensional array.

Value is a value assigned to an element of the array.

 
 

Remarks

Declaring the array does not create it. Creation of the array must be done by means of the New statement.

A VariantArray can contain items of any type. Collections can be elements of an array if that array is of type VariantArray. The script code should take care to manage the types of data in variant arrays appropriately.

Arrays are always passed to functions by reference.

Assigning one array to another will result in two variables referring to the same array.

There is no compile-time error if the wrong number of index expressions is specified for an array, or if an index attempts to access outside the bounds of the array.

There is also no runtime error notification, but the error may cause JAWS to lock. Therefore, take care to avoid illegal index references.

Code Sample

The below nonsense example shows the power of arrays and in fact of the VariantArray type.

Messages
;For sMsgGemInfo, %1 is the gem type, %2 the jewelry, %3 the occasion, %4 the number, and %5 the shape
@sMsgGemInfo
%5 %1 %2s for the %4 %3s
@@
EndMessages
Script TestArrays ()
ArrayOfGemsCollections()
EndScript
Void Function GmsInit(Collection Gms, String Name, string Type, String Occasion, Int Number, String Shape)
Let Gms.Name = Name
Let Gms.Type = Type
Let Gms.Occasion = Occasion
Let Gms.Number = Number
Let Gms.Shape = Shape
EndFunction
Void Function ArrayOfGemsCollections()
Var
            VariantArray Gems,
            Collection gms,
            Int i,
            String sMessage
Let Gems = new variantArray[5]
Let gms = new collection
gmsInit(gms,"emerald","pendant","birthday",6,"oval")
Let Gems[1] = gms
Let gms = new collection
GMSInit(gms,"diamond","ring","engagement",7,"square-cut")
Let Gems[2] = gms
Let gms = new collection
GMSInit(gms,"sapphire","bracelet","anniversary",9,"round")
Let Gems[3] = gms
Let gms = new collection
GMSInit(gms,"ruby","pairs of earring","graduation",8,"tear-drop")
Let Gems[4] = gms
Let gms = new collection
GMSInit(gms,"pearl","necklace","wedding",20,"cultured")
Let Gems[5] = gms
Let gms = new collection
For i = 1 to 5
            SayFormattedMessage(ot_line,
                        FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            )
EndFor
For i = 1 to 5
                        Let sMessage = FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            TypeString (sMessage+cscBufferNewLine)
EndFor
EndFunction

Keywords and Non-Required Keywords

The Freedom Scientific Scripting language supports the use of many keywords. But not all are required. Below is a listing of required and non-required keywords you may use in your scripts and functions.

Required Keywords

 The below list of required keywords are reserved for use by the Scripting language and cannot be used as variable names, function names, or script names. The list is broken out into areas of usage in level 3 headings and the keywords themselves in level 4 headings within the level 3 headings. Links direct you to relevant summary pages or overview pages for a more in-depth discussion of complex concepts.

 

Keywords for Functions and Scripts

Keywords for Control Flow

Keywords for Variables and Constants

Keywords for Compiler Directives

 

 

Keywords for Functions and Scripts

 The keywords in this section are for function and script code blocks. For more details on how to utilize Return statements, parameters, and function types, see Calling Scripts and Functions.

Function and EndFunction

Begins and terminates the definition of an individual function, whether it is a built-in, default, or user-defined function. Each function must begin and terminate with the keywords, Function and EndFunction.

When you use the Script Manager's "New Script" dialog to create a user-defined function, the Script Manager automatically places the keywords, Function and EndFunction into your file, separated by several blank lines for you to fill with your source code. But if you check the control in the dialog that refers to assigning a keystroke, the Script Manager automatically changes the keywords placed into your file to Script and EndScript. (See below.)

You may need to precede the Function keyword by the return type of the function. The name of the function is followed by a parameter list, whether those parameters are required or optional, and parameters that must be passed to the function by reference. The parameter list is enclosed in parentheses. For example a function might be called something like:

Void Function SpeakNames(String sMyName)

 

Script and EndScript

Begins and terminates the definition of an individual script, whether it is a default script or a user-defined script. Each script must begin and terminate with the keywords, Script and EndScript.

When you use the Script Manager's "New Script" dialog to create a user-defined script, the Script Manager automatically places the keywords, Script and EndScript, along with several blank lines into your file for you to fill in your source code. But if you uncheck the control in the dialog that refers to assigning a keystroke, the Script Manager automatically changes the keywords placed into your file to Function and EndFunction. (See above.)

The keyword, Script, must be followed by the name of the script and end with opening and closing parentheses. If using the Script manager "New Script" dialog, the Script manager automatically does this for you. Scripts can take parameters in a very specific format and manner, although most of the time they do not. For example, the following statement is valid:

Script MyTestScript ()

 But the following statement is in an invalid format for declaring a script or a function with parameters:

Script MyTestScript ("hello")

 

Return

Terminates execution of the script or function in which it appears. When used to return a particular value from within a function, add the information to be returned immediately after the Return keyword in the format the calling script or function expects. Doing so shifts control, along with any value, to the calling script or function.

Since a script cannot return values, using the Return keyword within a script terminates the script at the point the keyword is used.

For more details on how to utilize Return statements, see Return Statements.

Optional

Used to declare optional function parameters in a parameter list. All parameters you declare after the keyword, Optional, are assumed to be Optional parameters. For example, the following statement shows that the first parameter of the function is required when calling the function but the second is not:

Function SpeakNames (String sMyName, Optional Int iMyAccountNumber)

 

ByRef

 Used to declare that a parameter is to be passed by reference in a function. The following example shows that the parameter is to be passed by reference when the function is called rather than a copy being passed to the function when the function is called:

Function SpeakNames (String ByRef sMyName)

 

It is possible to list parameters such that some are passed by reference and some are not, regardless of whether the parameters are required or optional. The following example shows that a copy of the string is passed to the function, but the account number is passed by reference when the function is called:  Function SpeakNames (String sMyName, Int ByRef iAccountNumber)

Back to list of Required Keywords for Functions and Scripts
 

Keywords for Control Flow

For more details on working with conditional statement structures and looping functions, see the following:

 

·         Control Flow

·         Conditional statement Structures

·         Looping Functions

If, ElIf, Else, and EndIf

Used to create one form of a conditional control-flow code statement structure. The keywords, If and EndIf, are required to begin and terminate the statement structure. But unless more than one condition is being tested, ElIf, and Else are not necessary for an If-EndIf statement structure to be processed. The keyword, Then, is optional. (See the section on Non-Required Keywords below).

The ElIf keyword is an optional part of an If-EndIf statement structure. It allows you to create a second conditional branch in an If-EndIf statement structure. As with the If condition in the first branch, when the ElIf condition evaluates to true, the screen reader performs any statements following it.

The Else keyword is an optional part of an If-EndIf statement structure. It allows you to create another conditional branch that is processed only when any preceding conditions in theIf-EndIf statement structure have evaluated to false.

A completely formulated If-EndIf statement structure looks like the following sample:

If (My condition1) then
            ; process Statements
ElIf (My next condition) then
            ; process statements
; further ElIf conditions if needed...
            ;process statements for each ElIf condition
Else
            ; process statement when all above conditions are false.
EndIf

 

For, To, Descending, EndFor

The keyword, For, begins the For loop statement structure, and the keyword, EndFor, terminates the block. The keyword, To, is required. But the keyword, Descending, is required only to iterate in descending order.

Following the keyword, For, in the For loop statement block, you must have a statement that dictates how many times the loop should execute. As long as the condition in the For part of the statement block evaluates to TRUE, the loop continues processing any statements placed within the loop. When the condition becomes FALSE, the loop terminates. But the loop statement block must terminate with the keyword, EndFor, in order to compile properly.

ForEach, In, EndForEach

The keyword, ForEach, begins the ForEach loop statement structure, and the keyword, EndForEach terminates the statement block. The keyword, In, specifies which structure to process.

Following the keyword, ForEach, you must have a statement that dictates the structure whose items are to be processed. Any statements placed within the loop are processed for every item in the structure named in the ForEach part of the statement. The loop statement structure must terminate with the EndForEach keyword in order to compile properly.

While-EndWhile

Begins and terminates the While loop statement structure. A While loop must begin and terminate with the keywords, While and EndWhile.

The While keyword begins the While loop statement structure. It must be followed by a conditional statement that is evaluated each time the loop is repeated. As long as the condition in the While statement structure evaluates to true, the loop continues processing any statements placed within the loop. When the condition becomes false, the loop terminates. But the loop statement structure must terminate with the EndWhile keyword in order to compile properly.

 Back to list of Required Keywords for Control Flow 

Keywords for Variables and Constants

For more details on working with variables and constants, see the following:

 

·         Variables and Constants

·         Constants.

·         Non-aggregate Variables.

·         Collections

·         Arrays

Const

Begins a declaration section of constant values. All constant declarations follow on subsequent lines, each ending with a comma except for the last one.

The Const keyword and its declarations must appear outside of any individual script or function. Constant declarations are typically located at the top of a script source file or within a screen reader script header file.

Globals

Begins a declaration section of global variables. All global variable declarations follow on subsequent lines, each ending with a comma except for the last one.

The Globals keyword must appear outside of any individual script or function. Global variable declarations are typically located at the top of a script source file or within a screen reader script header file.

Var

Begins a declaration section of local variables. All local variable declarations follow on subsequent lines, each ending with a comma except for the last one.

The Var keyword must appear within an individual script or function where local variables are declared. The first line of a script or function usually contains the Var keyword, followed by at least one local variable declaration since local variables must be declared before they can be used.

Handle

Begins the definition of a handle variable type. The name of the variable follows: for example, Handle hwnd.

Int

Begins the definition of an integer variable type. The name of the variable follows: for example, Int iMyAccountNumber.

Object

Begins the definition of an object variable type. The name of the variable follows: for example, Object oMyObject.

String

Begins the definition of a string variable type. The name of the variable follows: for example, String sMyName.

Variant

Begins the definition of a variant variable type. The name of the variable follows: for example, Variant vMyVariant.

Keywords for Aggregate Variable Types

 The following keywords apply specifically to aggregate variable types. They include:

Collection

New

IntArray

StringArray

HandleArray

ObjectArray

VariantArray

 

Keywords for Compiler Directives

 The following are keywords for compiler directives. For more details on their usage, see Compiler Directives.

·         Include

·         Use

·         Import

·         #Pragma StringComparison

·         Prototype

·         ScriptFile

·         ScriptFileVersion

 Back to list of Required Keywords for Compiler Directives
 

Non-Required Keywords

The below list contains a few keywords that are no longer required but often make readability easier.

Then

Follows the condition being evaluated in either an If statement or and ElIf statement. For example the following two statements are evaluated in the same manner:

If (MyCondition) then
If (MyCondition)

Not

Reverses the condition of a statement that evaluates conditions in an If-EndIf statement structure. The keyword is placed between the keyword that begins an evaluation statement and the condition being evaluated.

The Not keyword is often replaced by the exclamation (!) operator, which is processed in the same manner when compiled. for example, the following two statements are evaluated in the same manner:

If Not (MyCondition)
If !(MyCondition)

Let

Begins the assignment of a variable to a value. The variable name followed by a single equals (=) sign followed by the value completes the statement. If the variable type is a string, the value must be enclosed in quotation marks.

For example, the following two statements are evaluated in the same manner:

Let sMyWorkplace = "Freedom Scientific"
sMyWorkplace = "Freedom Scientific"
and
let iMyAccountNumber = 12345
iMyAccountNumber = 12345

Void

Used to declare a function type as returning no value when returning to a calling script or function. A function that is declared as being of a type like Integer or String returns a value of that type to the calling script or function. If a function is not declared to be of any specific type, it is assumed to be of type Void.

Non-Aggregate Variables

The Freedom Scientific Scripting language offers several types of variables you can define for your scripts and functions. The type of a variable determines the set of values a variable may hold.

For example, non-aggregate variable types are for variables that may hold only one value at a time; whereas, aggregate variable types are for variables that may hold a set of values simultaneously. Aggregate variable types include collections and arrays. Collections may hold items of different types, but arrays are defined to hold items of a specific type and only that type, (e.g., the StringArray or IntArray type.)

For more information about aggregate variable types, see Collection Type/> and Array Type.

Remarks

Declare all variables with a name and a type before using them within a script or function.

Give each variable a unique name to distinguish it from other functions and names used in a particular script or in the script source file itself.

Do not try to use duplicate variable names within the same scope because doing so will cause errors at compile time. Also keep in mind that local variables with the same names as global variables take precedence over those global variables.

Non-aggregate Variable Types

Non-aggregate variable types allow variables to store only one type of information. They include:

·         Integer - stores numeric values

·         String – stores a string of characters

·         Handle - stores a window handle value

·         Object - stores an object

·         Variant – Stores data that is not assigned to a specific type

 

Integer - stores numeric values

The numeric value stored in an integer must be a positive or negative integer or 0. Floating point numbers are not allowed as values for integer variables. JAWS initializes all integer variables to zero each time a script or function is called where integer variables are declared.

 
 Syntax: Int VariableName
 Example:

            Int iCheckNumber
            Let iCheckNumber = 1000

 

Back to list of Non-aggregate Variables
 

String - Stores a string of characters

 A string may contain letters, numbers, punctuation marks, and spaces. If the string must contain Unicode characters, see Formatting Script Files for UTF-8 to understand how to format your script files so that they honor that character set as well as the standard ASCII character set. To assign a value to a string variable, enclose the characters in quotation marks.

JAWS initializes all string variables to null (no value) when a script or function is called where string variables are declared. Null values may be represented as a pair of quotation marks with no spaces between them, or by the cscNull constant found in the common.jsm default message file.

 
 Syntax: String VariableName
 Example:

            String sMyName ; declares the string
            Let sMyName = “John Smith”

 Back to list of Non-aggregate Variables
  

Handle - stores a window handle value

The operating system dynamically and automatically assigns a window handle to each window within any running application. A window handle is a unique integer that changes each time an application is closed and reopened. For example, when you launch Microsoft Word, the document edit window may have a window handle value of 1000. But when you close Word and then reopen it, the window handle will be another integer.

Since a handle is an integer, it can be used like any other integer variable. But you can use handle integer variables only for identifying window handles. In other words, you cannot store a handle value in an integer variable.

JAWS initializes all handle integer variables to zero each time a script or function is called where handle variables are declared.

 
 Syntax: Handle VariableName
 Example:

            Handle hwnd
            Let hwnd=GetFocus()

 

Back to list of Non-aggregate Variables
  

Object - stores an object

An object variable refers to the types of objects used within software such as Microsoft Office applications.

JAWS initializes all object variables to null (no value) each time a script is called where object variables are declared.

 
 Syntax: Object VariableName
 Example:

            Object oMyAppPointer
            Let oMyApptPointer = getObjectFromEvent(hwnd, ObjID_Window, 0, childID)

 

Back to list of Non-aggregate Variables
  

Variant – Stores data that is not assigned to a specific type

A variant variable is used to store data whose type may vary when assigned.

 
 Syntax: Variant VariableName
 Example:

            Variant vCalendar ; may contain string for day, integer for day of month, etc.
            Let vCalendar = "Today"
            Let vCalendar = 31

 

Back to list of Non-aggregate Variables

Declaring Variables

The Freedom Scientific Scripting language allows you to declare both local and global variables. You may use local variables only in the script or function where you declare them, and you must declare them to precede the code that utilizes them. Typically, you place local variables at the top of a script or function where you plan to use them. but this is a convention, not a requirement.

You may use global variables in two ways from within the current script source (.jss) file: 1) from any script or function where you declare them; or, 2) by referring to a header (.jsh) file that contains the declared global variables you want to use. In this case, you must add an "Include" statement with the name of the relevant header file. Typically, you add the "Include" statement at the top of the script source file. but this is a convention, not a requirement.

Unlike languages with block scoping, though, a variable declared anywhere in a script or function is scoped to the script or function. Therefore, duplicate definitions within the local scope are not allowed in the Freedom Scientific Scripting language.

Since global variables may be accessed by any script set, if you want to keep your global variables private to your script set, be sure to declare them in the script source file instead of the header file, and use names for the global variables that are not likely to be chosen by someone else in their scripts.

Declaring Local Variables

By convention, you may declare local variables within a script or function immediately following the beginning line of the script or function. But you may also place them elsewhere in a script or function as long as your declarations precede the code that utilizes them. Begin local variable declarations with the keyworkd "Var".

For better readability, consider declaring each variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Example:

Var
            String sFirstName,
            String sLastName,
            Int iCheckNumber ; from my checkbook

Declaring Global Variables

It is good practice to declare global variables within a script file immediately following any include and Use statements. This makes them easier to find later. but you may place them anywhere outside of a script or function as long as your declarations precede the code that utilizes them. Begin global variable declarations with the keyword “Globals”.

For better readability, consider declaring each global variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Once you create global variables and assigned values to them, they retain those values even after you close the application that uses them. In other words, unless you reboot the system or unload and reload the screen reader itself, if you reopen that same application, the screen reader remembers the values for any global variables from that application's script file. If you want to clear global variables, you must unload the screen reader from memory and reload it, or you must create some function that re-initializes them each time the application is reopened.

Example:

Globals
            String gsFirstName,
            String gsLastName,
            Handle ghDocWnd ; handle of document wwindow

Using a Header File to Store Variables

As mentioned above, it may be more practical to declare global variables in a script header file. Typically, a header file has an extension of .jsh. When you want to access a header file to declare global variables, you must refer to it with an “Include” statement in the script source file where you want to use the global variables. For examples, see the script source file included in your shared user\settings\(Language) folder. One of the “include” statements for this file is “hjglobal.jsh”. Since the global variables declared in that header file are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions. If you add an “Include” statement for the HJGlobal.jsh file within an application-specific script source file, those global variables become available to that script source file.

Strings Functions

A String function provides, processes, or returns information about a string of characters. One common use for these functions is to manipulate a string of characters in some way: chopping characters from the beginning or the end of a string, comparing two strings, parsing a string from a delimited list of strings, etc. JAWS uses this information to determine what to speak and display in Braille, for comparison purposes, and so on.

The Freedom Scientific Scripting language is rich with Strings functions for you to utilize in conjunction with many of the Say functions, such as SayFormattedMessage, for example. String functions may also be used to read from or write to an INI-style file.

 

Some examples of String functions include:

·         FindString

·         FormatString

·         IntToString

·         StringToInt

·         StringSegment

·         StringCompare

·         StringTrimCommon

For a complete listing of Strings functions, see the topics in this category book of the Reference Guide.

Code Sample

Often, string functions are used for comparing window classes, window names, etc. For instance, you may obtain the window title with a command to JAWS, Insert+t. But what if you just want the name of the document without the application name. In the below code sample, the script manipulates some string functions to obtain the title of an existing Notepad document without speaking or flashing in Braille the name of the application. There are numerous ways to accomplish this. The code sample is just meant to show how you might utilize string functions to obtain a simple piece of information.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, open Notepad into an existing document. then run the script from the document window of Notepad.

Script MyStringTest ()
Var
            Handle hReal,
            String sRealName,
            Int iRealLength,
            String sTitle
hReal = GetRealWindow (GetFocus ())
sRealName = GetWindowName (hReal)
iRealLength = StringLength (sRealName) ; the length of the entire real window name
; The next statement uses a combination of string functions:
; The StringContains function returns an integer representing the location where the real window name and the name of the application begin to match.
; For sample purposes only, the part of the string that represents the application name is hard-coded here.
; But hard-coding strings is typically not recommended because it is hard to maintain.
; In order to chop off the application name from the entire real window name, we must take the lenth of the window name and subtract the integer that StringContains returns from it.
; Then we can chop this number off from the real window name, and place the remaining string into the variable, sTitle.
sTitle = StringChopRight (sRealName, (iRealLength - StringContains (sRealName, " - Notepad")))
SayMessage (ot_JAWS_message, sTitle)
EndScript

Text Format Functions

A Text Format script or function provides or returns information about Text Format activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display Text Format information in Braille, for comparison purposes, and so on.

Text Format information may be about the font name, point size, or attributes of a character, about the attributes of a control, whether the text is intended to be read right to left instead of left to right, etc.

Some scripts that ship with JAWS fall into the category of Text Format, such as the script for SayFont, for example. However, the focus of the present discussion is on functions related to Text Format that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Text Format functions include:

·         AttributesChanged

·         IntToAttribName

·         AttributeEnumerate

·         GetCharacterAttributes

·         IsRtlChar

For a complete listing of Text Format functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script finds the first character in the text that is bolded.

To set up the example, simply type some text into the Wordpad document window. Using the Font options in the Home ribbon, change some text, not at the very top of the file, to be in bold. Then move to the top of the file and run the script. If bold text is found, the JAWS cursor moves to it, and the PC cursor is routed to the position and reactivated. Then the script confirms the font and speaks the current line where the bold text begins.

Take care when working with the Wordpad.jss script source file because it already contains scripts and functions by default that ship with JAWS. Place your sample code at the very bottom of the file. And make sure to remove this overwritten Wordpad.jss and its associated overwritten Wordpad.jsb and Wordpad.jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the Wordpad.jss script source file and compiled in the Wordpad.jsb script binary file.

Script MyAttributesTest ()
Var
            Int attributes
If GetWindowClass (GetFocus ()) == cwc_RichEdit50W
&& ! DialogActive () ; This is the Wordpad document window.
            If FindFirstAttribute (attrib_bold,TRUE) ; Restrict the search to the document window.
                        RoutePCToJAWS ()
                        PCCursor ()
                        SayFont ()
                        SayLine()
            EndIf
EndIf
EndScript

Keyword: Return

Description

A Return statement is used to terminate execution of the function or script in which it appears.

Use a Return statement within a function to shift control (and the value of an expression if you provide one) to the calling function or script. To define return values, precede the name of the function by the return type.

Since a script cannot return a value, never follow a return statement in a script by a value.

Syntax

Returning a Function Value

"function type" Function "function name" ("parameter list")

 

·         "function type" - returns one of the following types of values to the calling script or function:

o   Int - an integer value.

o   String - a string value.

o   Handle - a window handle.

o   Object - an object.

o   Variant - a variant value.

o   Void - no value.

 

·         Function - the keyword, Function, must follow the function type.

·         "function name" - the name of the function.

·         "Parameter list" - Parameters for the function must be enclosed in parentheses, each one declared and separated by commas, except for the last one. Each parameter declaration must include its type, the keyword, ByRef, if it is obtained by reference when the function is called, and its parameter name. Required parameters must always precede optional ones. All parameters declared after the keyword, Optional, are assumed to be optional. Parameters may be declared as being passed by reference whether they are required or optional.

 

Returning a Value/Expression

Return "value/expression"

When the Return keyword is used to shift control to a calling script or function with a value or expression (as from a conditional statement structure, the value and/or expression must match the function type. The only exception to this is where the function type is Void or Variant. An example of such a code fragment would be something like the following:

Return (GetWindowClass (hwnd) == cwc_RichEdit20
            && GetWindowName(hwnd) == wn_MyWindowName)
Or
Return ( ! StringIsBlank (gsMyDlgName)
            || ! StringIsBlank (gsMyDlgText) )

Remarks

If a Return statement is not followed by a value, its value is assumed to be Null.

A Return statement may return the result of evaluating the expression following it. The expression may be a simple value, or it may include a complex series of conditional tests or function calls. No matter how simple or complex the expression, the expression is evaluated and its result is returned to the calling function. The expression must evaluate to the type expected by the return statement.

Code Samples

The following examples illustrate how the Return statement may be used to shift control from a calling script or function, and how a Return statement may be used to shift control from within a conditional statement structure. although these examples are rather simplistic in nature, they show how the syntax is applied to a real block of code.

Assigning the Output of a Function to a Variable

When a function returns a value to the calling script or user-defined function, you may store that value in either a local or global variable. You can then use that variable to make decisions on what the calling script or user-defined function should do next.

String Function GetMyWorkPlace ()
Return "Freedom Scientific"
EndFunction
Script SayMyWorkplace ()
Var
            String sText
Let sText = GetMyWorkplace () ; store the return value of the called function in sText.
If sText != cscNullThen ; the function returned a value other than null or nothing.
            SayMessage (ot_Message, sText)
EndIf
EndScript

Using a Function as a Parameter For Another Function

You can use the return value of one function as the parameter for another. Using the previous example, the return value from the user-defined function, GetMyWorkplace, may be passed directly to the SayMessage function without storing it in a local variable first. The only disadvantage to this approach is that the function may not retrieve any text, causing JAWS to say nothing when the SayMessage function is called from the script.

String Function GetMyWorkPlace (Int iAnswer)
If iAnswer == TRUE then
            Return "Freedom Scientific"
Else
            Return cscNull
EndIf
EndFunction
Script SayMyWorkplace ()
Var
            Int iYes
; JAWS will never speak when the below function call to GetMyWorkplace is used in the SayMessage function
; because no value is assigned to the parameter passed to the function.
; Use the return value from GetMyWorkplace as the message text for SayMessage.
SayMessage (ot_message, GetMyWorkplace (iYes))
EndScript
Script SayMyWorkplace ()
; JAWS will always speak when the below function call to GetMyWorkplace is used in the SayMessage function ;
; because a value is assigned to the parameter passed to the function.
; Use the return value from the function, GetMyWorkplace, as the message text for SayMessage.
SayMessage (ot_message, GetMyWorkplace (TRUE))
EndScript

Returning Conditionally

The below sample is a very basic example of returning conditionally. The function is a string function because the values it returns are strings. Although you could hard-code the strings within the function as quoted strings, it is best practice to avoid hard-coding anywhere because you may need to use the constants elsewhere.

Const
            sUnchecked = "unchecked",
            sChecked = "checked",
            sPartially = "partially checked"
String Function GetStatusString (Int iState)
If iState == 0
            Return sUnchecked
ElIf iState == 1
            Return sChecked
ElIf iState == 2
            Return sPpartially
EndIf
Return cscNull ; "", that is, nothing.
EndFunction

Returning from a Script

The Return statement in the below nonsense script ensures that processing stops when the script is performed from within an active dialog. Otherwise, the confirming message that you are not in a dialog is processed and spoken if the script is performed outside of an active dialog.

Script MyDialogTest ()
Var
            String smsgNoDialog
Let smsgNoDialog = "not in a dialog"
If DialogActive () then ; built-in function that test for whether a dialog is active.
            Return ; do not continue processing at all; a dialog is active.
EndIf
; Only process this if not in a dialog.
SayMessage (ot_message,smsgNoDialog)
EndScript

Keywords: Pause, Delay

Description

Sometimes Pause and/or Delay statements are needed for slower PCs to process your scripts and functions efficiently. When you pass keystrokes from within your scripts or functions, or when you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait to continue processing. However, Pause and Delay statements should only be used where events are not available, or where scheduling a function is undesirable. So the code samples below are for illustration only.

The Pause and Delay functions differ in how much time and how much control they allow for the system to catch up with your script or function. The Pause function forces your script or function to stop processing so that other applications can complete tasks, but you cannot control the amount of time of that forced stop. Alternatively, the delay function lets you specify the amount of time in tenths of a second your script or function should wait before continuing to process instructions.

Pause

A pause statement causes JAWS to yield to the time requirements of other applications. Once other applications complete their tasks, JAWS resumes processing the script or function.

Syntax

 Pause ()
 

Remarks

Never place a Pause statement inside a While loop as it will cause very unpredictable results and may even result in a JAWS crash.

Code Sample

The below code sample passes a keystroke through to the application, and waits for a menu to be activated. Before JAWS performs the TypeKey function, the MenusActive function must determine if the menu bar is open. Once the menu is activated, it passes another specific keystroke. But if the menu is not activated, the code causes an error message to be processed.

TypeKey (skMyMenuKeystroke) ; Open the File menu.
Pause () ; Allow system to open the menu.
If MenusActive () then ; Make sure the menu bar opened.
            TypeKey (skMyOptionKeystroke) ; Activate the option desired .
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; menu bar did not open error message.
EndIf

 

Delay

A Delay statement gives you much more control than the Pause statement to wait to continue processing your script. Since the Pause function relies on other system processes, the amount of time your script is stopped can vary from system to system. If this amount of time is not enough for your script to process correctly and consistently, use Delay statements.

Syntax

 Delay (nTimeValue, nNoEvents)
 
 

·         nTimeValue is required. It is a positive integer value, indicating the length of time in tenths of a second that the script or function should wait before continuing to process its instructions.

·         nNoEvents is an optional second parameter. It is a numeric value, indicating to JAWS whether to suppress checking for, and processing, FocusChangedEvent and NewTextEvent functions before returning from the delay. When you pass this second optional parameter as TRUE, JAWS suppresses any processing of the FocusChanged or NewText events. But when you pass the parameter as FALSE, JAWS does not suppress the processing of these two events.

Code Samples

In the first code sample, the first TypeKey function activates the menu. JAWS then performs the Delay function to allow three tenths of a second for the menu to open. The MenusActive function then determines if the menu is open. If it is open, then JAWS performs the second TypeKey function and the menu option is activated. Otherwise, JAWS processes an appropriate error message.

TypeKey (skMyKeystroke) ; Open the File menu.
Delay (3) ; Allow system to open the menu.
If MenusActive () then
            TypeKey (skMyMenuOptionKeystroke) ; Activate the menu option.
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; The menu bar did not open.
EndIf

The second code sample is similar, except that the second optional parameter is used in the Delay statement. This forces JAWS to wait at least the three seconds for the menu to open because the nNoEvents parameter is set to TRUE. If it were set to FALSE, JAWS would not force the time limit to expire before continuing to process the function. In that case, JAWS simply would wait for focus changes to occur, and if the menu became active prior to the three seconds' time limit set by the first parameter, processing of function instructions would just continue. But setting the second parameter to TRUE ensures that JAWS will wait at least those three seconds before continuing to process function instructions.

TypeKey (skMyKeystroke) ; Open the File menu.
Delay (3, TRUE) ; Allow system to open the menu but do not suppress event changes.
If MenusActive () then
            TypeKey (skMyMenuOptionKeystroke) ; Activate the menu option.
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; The menu bar did not open.
EndIf

Scheduling Functions

There are several types of scheduling functions. Each type is described briefly below with its keyword, descriptions, syntax, returns, remarks (if any), and a code sample. Functions include:

·         ScheduleFunction and UnscheduleFunction

·         QueueFunction

·         ScheduleFunctionAfterWindowGainsFocus

·         SetFocusToWindowAndScheduleFunction

Note: You may schedule a script rather than a function by preceding the name of the script to be called with a dollar sign ($). (See the QueueFunction code sample below.)

In the code samples for each of the functions shown, Notepad is assumed to be the application, and the Script Manager is assumed to be the text editor. But of course, you may test these samples with your own applications.

Keywords: ScheduleFunction, UnscheduleFunction

Description

Unlike Pause and Delay, ScheduleFunction and UnScheduleFunction statements give you much more control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these statements let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions.

Schedule a function to run a user defined function in a set period of time. this is very useful when you want to perform a task and then check on the results at a specified later time. Use UnscheduleFunction if you want to cancel a scheduled function before it has run. Very often, the return value from a ScheduleFunction call is placed into a global variable so that a different script or function can make the related UnscheduleFunction call conditionally.

Syntax

 ScheduleFunction (FunctionName, Time)
 And
 UnscheduleFunction (ID)
 
 

·         For ScheduleFunction, FunctionName is a string representing the name of the function to be executed on a schedule.

·         For ScheduleFunction, Time is an integer representing the amount of time in tenths of a second to elapse before the function is executed.

·         For UnscheduleFunction, ID is the integer value returned by the ScheduleFunction call.

Returns

ScheduleFunction returns an integer ID that you can use to call UnScheduleFunction. If ScheduleFunction returns 0, it means that the timer was not set successfully.

UnscheduleFunction returns an integer value of TRUE if the call was found and canceled. Otherwise UnscheduleFunction returns FALSE.

Remarks

Once ScheduleFunction is called, call UnScheduleFunction to cause the user-defined event not to run.

UnscheduleFunction is used to cancel a ScheduleFunction call. UnscheduleFunction cannot be used without a call to ScheduleFunction.

Code Sample

Open Notepad and type a one-line sentence. then place the cursor at the beginning of the line. Use Script Manager to create the following example. This sample code gets the word at the cursor and speaks it. Then the code schedules a function to get the word at the cursor and spell it 5 seconds later as long as the script has not been reactivated. If the script has been reactivated, the code cancels the function to spell the word at the cursor and starts over again.

Globals
            Int ScheduleID
Void Function SpellIt ()
; Set the id to 0 so that we can test elsewhere if the function has already run.
ScheduleID = 0
; Now spell the word.
SpellString (GetWord ())
EndFunction
Script MyScheduleTest ()
; First, test if your user-defined function, SpellIt, is waiting to run; if so, cancel it.
If ScheduleID != 0
            UnscheduleFunction (ScheduleID)
EndIf
SayString (GetWord ())
; Now schedule your user-defined function, SpellIt, to run 5 seconds later,
; and save the schedule ID so it can be tested to see if the function has run.
ScheduleID = ScheduleFunction ("SpellIt",50)
EndScript

 

Keyword: QueueFunction

 

Description

Use this function to run the function being queued the next time JAWS stops speaking. You may call QueueFunction multiple times in a row, but you may queue only one function at a time. Functions are run in the order you add them to the queue. Stopping speech by pressing control or performing another such action clears the queue.

You can also queue scripts using QueueFunction. To queue a script instead of a function, precede the name of the script to be queued with the dollar sign ($).

Syntax

 QueueFunction ("FunctionName (parameter list)")
 
 

FunctionName is a string containing a function name. It must be enclosed in quotation marks.

Follow the function name by parentheses, and include the function's parameter list (but not as variable names) inside those parentheses. This is similar to how you call a function normally.

Returns

Returns the integer 1 if the function was queued.

Returns the integer 0 if the function was not queued.

Code Sample 1

In the below code sample, each time the user presses INSERT+UpArrow to have the current line in Notepad spoken, JAWS is queued to speak the word at the cursor of the current line after speaking the line itself.

Script SayLine ()
SayLine ()
QueueFunction ("SayWord ()")
EndScript

Code Sample 2

In the below code sample, each time the user presses INSERT+UpArrow to have the current line in Notepad spoken, JAWS is queued to speak the word, "Hello", after speaking the line itself. Notice that the parameter for the SayString function has a backslash (\) before the quotation marks. This is because JAWS needs the backslash prior to the quotation marks in order to interpret the quotation marks properly when they are being used in the manner shown by this sample.

Script SayLine ()
SayLine ()
QueueFunction ("SayString (\"Hello!\")")
EndScript

Code Sample 3

In the below example, the code queues the SayToCursor script. If the dollar sign were omitted, QueueFunction would look for a function to queue instead of a script. For testing in Notepad, place the cursor at different locations on the text you have written. Then press INSERT+UpArrow. You will hear the line spoken, and then spoken again but only up to the current cursor location (not including it) as if you had pressed INSERT+Home.

Script SayLine ()
SayLine ()
QueueFunction ("$SayToCursor ()")
EndScript

Keyword: ScheduleFunctionAfterWindowGainsFocus

 

Description

This function is probably most useful when you know the handle of an application that will soon gain focus and you want something specific to happen when it does. For instance, you might use it in a situation where a configuration setting is modified for an application that will soon gain focus and where the changed configuration should result in some specific behavior. So use this function to schedule a function to run the next time a given window gains focus.

The function is scheduled using the same mechanism that is used by a call to ScheduleFunction . In effect, ScheduleFunction is called to schedule the function specified by the FunctionName parameter the next time a Focus Changed Event occurs and the window handle of the window that just gained focus is the same as the window handle specified by the hwnd parameter.

Also, keep in mind that while the ScheduleFunction time parameter is in tenths of a second, the ScheduleFunctionAfterWindowGainsFocus time parameter is in milliseconds.

Syntax

 ScheduleFunctionAfterWindowGainsFocus (hwnd, "FunctionName", Timeout)
 
 

·         hwnd is the window handle of the window to wait to gain focus before scheduling the function.

·         FunctionName is the name of the function to be executed. It must be enclosed in quotation marks.

·         TimeOut is an integer value representing the maximum amount of time in milliseconds that the function should wait before canceling the scheduled function.

Returns

Returns an integer TRUE when the specified function was scheduled successfully .

Returns an integer FALSE when the function was not scheduled successfully.

Remarks

Unlike the value returned by a ScheduleFunction call, the value returned by a ScheduleFunctionAfterWindowGainsFocus call is not an ID. So you cannot use the return value from ScheduleFunctionAfterWindowGainsFocus for a latter call to UnScheduleFunction. The value returned by ScheduleFunctionAfterWindowGainsFocus indicates whether the function was scheduled successfully. Currently there is no mechanism for unscheduling a function that is scheduled using ScheduleFunctionAfterWindowGainsFocus.

Another key difference between using ScheduleFunctionAfterWindowGainsFocus and using ScheduleFunction is that only one function can be scheduled at a time using ScheduleFunctionAfterWindowGainsFocus. If you call ScheduleFunctionAfterWindowGainsFocus when a function that was previously scheduled using this function has not yet been called, the function will not be scheduled, and ScheduleFunctionAfterWindowGainsFocus will return FALSE. The function specified by the FunctionName parameter is scheduled at the end of focus change event processing after any necessary scripts have been loaded and the FocusChangedEvent function has been called.

ScheduleFunctionAfterWindowGainsFocus returns immediately without waiting for the specified amount of time. Instead, whenever a FocusChanged event is processed, JAWS checks to determine whether there is an unprocessed request to schedule a function after a given window gains focus. If there is such a scheduled function call, and if the function has timed out, the scheduled function is canceled.

Code Sample

In the below example, since the function is scheduled when the window gains focus, it will only run if the window looses and regains focus within the time limit set by the third parameter. We overwrite FocusChangedEvent in the Notepad script. but of course, this may be tested elsewhere. The function first calls the default FocusChangedEvent function using the "Scope" capabilities of the Scripting language. We use ScheduleFunctionAfterWindowGainsFocus so that when Notepad gains focus into its document window, SayAll automatically starts, but only if not in an active dialog. The scheduled call is canceled after five seconds.

Const
            fn_GoToTopAndSayAll = "GoToTopAndSayAll",
            FiveSec = 5000
Void Function GoToTopAndSayAll ()
JAWSTopOfFile ()
SayAll ()
EndFunction
Void Function FocusChangedEvent (Handle hwndFocus, Handle hwndPrevFocus)
default::FocusChangedEvent (hwndFocus, hwndPrevFocus)
If Not DialogActive () then
            ScheduleFunctionAfterWindowGainsFocus (hwndFocus, fn_GoToTopAndSayAll, FiveSec)
EndIf
EndFunction

Keyword: SetFocusToWindowAndScheduleFunction

 

Description

Use this function to set focus to a window and schedule a function to run after that window gains focus. This function first uses ScheduleFunctionAfterWindowGainsFocus to schedule the function, and then uses the SetFocus function to set focus to the window. All the comments in the description of the ScheduleFunctionAfterWindowGainsFocus function apply to SetFocusToWindowAndScheduleFunction.

Syntax

 SetFocusToWindowAndScheduleFunction (hwnd, "functionName", Timeout)
 
 

hwnd is the window handle of the window to wait to gain focus before scheduling the function.

FunctionName is a string representing the name of the function to be executed. the function name must be enclosed in quotation marks.

TimeOut is an integer value representing the maximum amount of time in milliseconds that the function should wait before canceling the scheduled function.

Returns

Returns an integer TRUE when the function was successfully scheduled and focus was set to the window.

Returns an integer value of FALSE if the function was not scheduled successfully.

Remarks

SetFocusToWindowAndScheduleFunction returns immediately without waiting for the specified amount of time. Instead, whenever a Focus Changed event is processed, JAWS checks to determine whether there is an unprocessed request to schedule a function after a given window gains focus. If there is, and the function has timed out, the scheduled function is canceled.

Code Sample

The below code sample overwrites FocusChangedEvent in the Notepad script. but of course, this may be tested elsewhere. The function first calls the default FocusChangedEvent function using the "Scope" capabilities of the Scripting language. Then we test for a dialog to be active. If so, we use SetFocusToWindowAndScheduleFunction so that when a dialog gains focus, the current control is repeated. The scheduled call is canceled after five seconds.

Function FocusChangedEvent(Handle hwndFocus, Handle hwndPrevFocus)
default::FocusChangedEvent(hwndFocus, hwndPrevFocus)
If DialogActive () then
            SetFocusToWindowAndScheduleFunction (hwndFocus,"SayObjectTypeAndText",50000)
EndIf
EndFunction

Additional Resources

Calling Scripts and Functions

Reference Guide

Enumerator Functions

The purpose of an enumerator function is to call a callback function, which may process the window optionally, and either stop or continue the enumeration, depending on what the callback function tests and returns. There are several built-in enumerator functions that ship with JAWS. Only a couple are shown below with brief descriptions. But we also include a code sample to show how an enumeration function may be implemented.

For a complete list of enumerator functions, see Reference Guide.

Example 1: EnumerateChildWindows

Description

This function calls a specified function for each child of the starting window. You must define it as an integer function with a handle parameter.

Syntax

EnumerateChildWindows (hWnd, FunctionCallback)

·         hWnd is the handle of the window from which to start enumeration.

·         FunctionCallback is a string containing the name of the function to call for each child window.

 

Returns

Returns an integer value of true if the enumeration completes.

Returns an integer value of false if the enumeration terminates when the callback function returns false for a window.

Example 2: EnumerateTypeAndTextStringsForWindow

 

Description

This function obtains information about each control using MSAA. The order in which items are enumerated is dictated by how they appear in the MSAA hierarchy. The callback function takes the following parameters: Int typeCode, Int stateCode, String name, String value, String Description. If the callback function returns 0, the enumeration stops. If it returns 1, the enumeration continues.

Syntax

EnumerateTypeAndTextStringsForWindow (hWnd, CallbackName)

·         hWnd is the handle of the window containing the controls to be enumerated.

·         CallbackName is a string containing the name of the function to call for each control.

 

Returns

Returns an integer value for the number of controls enumerated.

Code Sample

The below nonsense code sample checks any dialog in Notepad for the Open button. if the Open button is not found in the active dialog, the JAWS indicates an error message. if the Open button is found, the JAWS indicates that it found it.

Notice that the constants declared for the messages include a replaceable parameter %1 symbol. This is for use with the FormatString function in order to control part of the message depending on the item you wish to place into the message.

Finally, notice the use of the gbNotFound flag. If the error message for not finding the Open button were part of the callback function, then the JAWS would indicate the error message repeatedly as the callback function continues to search for the Open button. By using the flag, it is the script that determines whether to indicate the error message.

Const
            sOpenBtn= "Open", ;Open button in Open dialog
            sOpenDlg = "Open", ; real window name of Open dialog
            fn_LookForOpenButton = "LookForOpenButton", ; callback function name
            smsgFound = "I found the %1 button.",
            smsgNotFound = "I can't find the %1 button."
Globals
            Int gbNotFound ; for the script to determine whether to speak the error message.
Int Function LookForOpenButton (Int iType, Int nState, String sName, String sValue, String sDescription)
;This is the callback function for the EnumerateTypeAndTextForWindow test in the below script.
If iType == wt_button
&& sName == sOpenBtn
            SayFormattedMessage (ot_JAWS_message, FormatString(smsgFound,sName))
            gbNotFound = FALSE
            Return FALSE ; Stop looking.
Else
            gbNotFound = TRUE
            Return TRUE ; Keep looking.
EndIf
EndFunction
Script MyTest ()
Var
            Handle hReal
hReal = GetRealWindow (GetFocus())
If DialogActive ()
            EnumerateTypeAndTextStringsForWindow (hReal, fn_LookForOpenButton)
EndIf
If gbNotFound then
            gbNotFound = !gbNotFound ; Reverse the flag.
            SayFormattedMessage (ot_error, FormatString(smsgNotFound,sOpenBtn))
EndIf
EndScript

Keyword: ;#Pragma StringComparison

Description

The ;#Pragma StringComparison directive is used to determine how string comparisons with the == and != operators should be processed by the compiler. A ;#Pragma statement must be followed either by the keywords, "StringComparison full" or "StringComparison partial" without quotation marks. Place the statements outside of any script or function code in a script source file.

Syntax

;#Pragma StringComparison Full
Or
;#Pragma StringComparison Partial

·         The semicolon and number sign (;#) are the first two characters of the keyword, ;#Pragma.

·         ;#Pragma StringComparison Full directs the compiler to process any string comparisons with the == and != operator fully.

·         ;#Pragma StringComparison Partial directs the compiler to process any string comparisons with the == and != operators only until the shorter of the two strings is matched.

Code Samples

Set to Full

;#Pragma StringComparison Full
Script TestStrings()
Var
            String sMyName,
            String sYourName,
            String sMsgMatch,
            String sMsgNoMatch
let sMyName="Mary Smith"
let sYourName = "Mary Smith-Jones"
let sMsgMatch = "Found it!"
let sMsgNoMatch = "Not found"
If sMyName == sYourName then
            SayMessage(ot_JAWS_message,sMsgMatch) ; should not work with ;#Pragma StringComparison set to Full
else
            SayMessage(ot_JAWS_message,sMsgNoMatch) ; should work because ;#Pragma StringComparison set to Full
EndIf
EndScript

 

Set to Partial

;#Pragma StringComparison Partial
Script TestStrings()
Var
            String sMyName,
            String sYourName,
            String sMsgMatch,
            String sMsgNoMatch
let sMyName="Mary Smith"
let sYourName = "Mary Smith-Jones"
let sMsgMatch = "Found it!"
let sMsgNoMatch = "Not found"
If sMyName == sYourName then
            SayMessage(ot_JAWS_message,sMsgMatch) ; should work with ;#Pragma StringComparison set to Partial
else
            SayMessage(ot_JAWS_message,sMsgNoMatch) ; should not work because ;#Pragma StringComparison set to Partial
EndIf
EndScript

 

Remarks

Since JAWS 13, all string comparisons using the == and != operators behave as if the ;#Pragma StringComparison functionality were set to full. This is default behavior. But prior to JAWS 13, string comparisons were processed such that the comparison ended when the shorter of the two strings matched the longer of the two.

The scripter may direct the compiler as to how to process string comparisons: ;#Pragma StringComparison set to full or set to partial. If set to full, succeeding string comparisons using the == and != operators ensure that the compiler processes string comparisons fully regardless of which is shorter. If set to partial, the compiler processes string comparisons using the older method used in versions prior to JAWS 13.

Redirecting Function Calls Using Scope

The scope qualifier is used to specify the location where JAWS should search for a function or script. Unqualified function calls behave exactly as in the standard calling hierarchy for calling scripts and functions.

The syntax for using scope qualifiers is this: To call a specific instance of a script or function, precede its name by the basename of the file in which it resides, followed by two colons (::). If the base name contains spaces, replace the spaces in the call with the underline character (_).

Be careful when specifying scope. If you restrict a function to a specific scope, all of the calls made from that function are also restricted to that scope. For instance, if you make the following restriction:

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 then any function calls in the default FocusChangedEvent are also restricted to default.

 

Also be careful when specifying scope that you do not bypass any functions that may be layered in script binary (jsb) files between your script file and default. For instance, in a Microsoft Word script, specifying

Default::GetCustomTutorMessage ()

 would skip over the version of that function in the Office script binary (jsb) file. that binary file is part of the Microsoft Word script set. Generally, when restricting scope, it is safer to restrict it to Self rather than to Default unless you are sure that default is really the intended scope.

 

The search for a qualified name only occurs within the scope of the file to which the qualification refers. So if you call Default::SayString from within an application script source file, only default.jsb is searched for SayString. If that function also exists within the application script source file, it is ignored.

In addition to specifying a qualification by script file name, you may also specify that a built-in function be called. For example,

Builtin::SayLine ()

 specifies that the built-in SayLine function be called, not an overwritten SayLine function.

 

You may use as a qualifier, meaning that the name of the current script file should be searched. So, if you are writing script code in "MyApplication.jss", the following are identical qualifiers specifying that the search for SayCell should begin in the "MyApplication.jsb script binary file:

MyApplication::SayCell ()
Self::SayCell ()

Calling Scripts and Functions

The Freedom Scientific Scripting language supports many ways to call scripts and functions. This summary includes general descriptions and definitions of the more commonly used methods for calling scripts and functions, as well as a few code samples illustrating how to call them.

Script versus Function

Scripts and functions are standard blocks of code that govern JAWS behavior. A script is a block of code that may be tied to a keystroke or key combination the user must press in order for the script to execute. A script includes numerous steps that JAWS should perform on demand if the user presses the keystroke or key combination bound to the script.

On the other hand, a function is not performed based on the user pressing a particular keystroke or key combination. Rather, it is called by various means: by a script, by another function, or as a result of a system event. A function can return information after completing the steps within it. A script cannot return information, although both a script and a function can shift control to a different block of code. Additionally, a function may accept data from a calling script or function via parameters, and it may return a value to a calling script or function.

There are three types of functions:

·         Event - performed by JAWS automatically when Windows events occur. Without event functions, JAWS cannot speak and/or display in Braille any system changes automatically. JAWS recognizes many system events that have corresponding functions in the Freedom Scientific scripts where behavior is defined for these events. You cannot create new event functions of these types yourself. But if an application exposes events through a COM object, you can write new script functions that attach to the object for events, and that run when the application events occur. Use the function, ComAttachEvents, to attach functions to exposed COM events, and use the function, ComDetachEvents, to detach them.

 

Additionally, with caution, you may overwrite existing default event functions, and you may create application-specific versions of default event functions. For more details on working with event functions, see Events.

·         Built-in and Default Functions - an ever-growing list of built-in and default functions exposed to the Freedom Scientific Scripting language. These functions ship with JAWS and are used in the shipping code both in default and application-specific script files. With caution, you may use these functions to create and/or modify your own custom script sets. The built-in and default functions are the building blocks of your scripts and functions. For a complete listing of built-in and default functions, see all the category books and their summaries in the JAWS Reference Guide.

·         User-Defined Functions - developed either by Freedom Scientific script developers or by an independent script developer. Typically, they are created for an application the shipping version of JAWS does not support, and/or to enhance an application that JAWS does support. As with built-in and default functions, you may modify and overwrite user-defined functions, and call them from a script or from another function.

Hierarchy of Rules for Calling Scripts and Functions

JAWS performs functions based on their names and locations within the hierarchy of the script files that ship with the product, as well as script files located in your user settings\(language) folder. The rules for processing scripts and functions are as follows:

Each time a function is called from within a script or another function, JAWS searches the application-specific script file first, assuming the application has focus. The application may have layered script files, and so the search starts at the top-most application script file and searches down through any script files linked through the Use statement. If the function is contained within the application-specific script file, then JAWS performs the function and stops processing.

When JAWS does not find the function in the application-specific script file or files linked to it through the Use statement, then JAWS searches the default script file. If JAWS finds the function in the default script file, then JAWS performs the function and stops processing.

When JAWS does not find the function in the default script file, then JAWS searches the list of built-in and default functions. If JAWS finds the function, then JAWS performs the function and stops processing.

When JAWS does not find the function in the built-in and default functions, then JAWS announces, "unknown function call to", followed by the name of the function. JAWS then spells out the name of the unknown function. This error message warns you that the function JAWS tried to call may have a name that is misspelled, the function may have been deleted, or the function may not have been written.

For example, supposed you overwrite the SayLine script in your application-specific script file because processing for how the current line is spoken should be handled differently in your application from the way that the default JAWS functionality processes this script. Of course, the default version of the SayLine script still exists in the default script file. As long as your application has the focus, JAWS performs your overwritten SayLine script found in your application-specific script file rather than the default SayLine script found in the default script file.

Types of Parameters

Although scripts may receive parameters, they are almost never coded to do so. If you code a script to receive parameters, you may pass specific values to its parameters by use of key map files.

Functions may take parameters, and in fact, typically do so. parameters may be required or optional, and they may be passed by reference or not.

Parameters may be required or optional. If a parameter is optional, you must precede its declaration in the parameter list by the keyword, Optional. All subsequent parameters in the parameter list are also optional. So you only need to utilize the keyword, Optional, once in the parameter list. All parameters are required unless you use the keyword, Optional, and all parameters preceding the keyword, Optional, are required.

Whether a parameter is required or optional, it may be passed by reference or not. If you specify a non-aggregate parameter in a parameter list with the keyword, ByRef, the variable is passed by reference. This means that the variable is updated by any changes it receives when the function is called, and those changes are retained when the function is exited.

By contrast to non-aggregate variables, collections and arrays are automatically passed by reference. therefore, the keyword, ByRef, is not required when you declare collections and arrays as parameters.

If a function receives a non-aggregate variable that you have not specified as being ByRef, the variable receives a copy of the variable rather than a pointer reference to it. Therefore, any changes to the variable made in the function are discarded when the function exits.

Examples of Parameter Lists for Functions

·         Required - passed to the function when it is called. the syntax is parameter type followed by parameter name.
 
 

            String sMyName

 

·         Optional - passed to the function when it is called. The syntax is the keyword, Optional followed by parameter type followed by parameter name or names
 

            Optional String sMyName
            or
            Optional String sFirstName, String sMyLastName, Int iAge

 

·         ByRef - passed by the function when it is called rather than to it. The syntax is parameter type followed by the keyword, ByRef followed by parameter name
 
 

            String ByRef sMyName

 
 Note: When a function is declared with by reference parameters, those parameters must be included in any calls to that function.
 
 

Return Statements

A Return statement gives you great flexibility over how to call scripts and functions. A Return statement is used to terminate execution of the script or function in which it appears, and to shift control (and the value of an expression if you provide one) to the calling script or function. But since a script cannot return a value, never follow a return statement in a script by a value.

For more details on working with Return statements, see the topic in the Control Flow book at Return Statements.

Postponing Processing within a Script or Function

When you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait before it continues processing. It all depends on what event you need to complete processing, how much control you need over the wait time, and how you wish JAWS to behave after that event completes. Available methods in the Scripting language include:

·         Pause - waits for other tasks to complete.

·         Delay - waits for focus and new text events to complete with a timed delay you control and optionally by suppression of checking on whether those events have completed.

·         ScheduleFunction and UnscheduleFunction - ScheduleFunction Tells the script to schedule a function to run in a set amount of time, then continue processing the currently running function while waiting on the scheduled function to run. You may use UnscheduleFunction to cancel a scheduled function.

·         QueueFunction - waits to perform a function passed to it after JAWS has stopped speaking. You may queue more than one function to be performed in order.

·         ScheduleFunctionAfterWindowGainsFocus - allows you to call a function after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

·         SetFocusToWindowAndScheduleFunction - allows you to set focus to a particular window after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

Pause and Delay

Pause and Delay statements allow you to postpone execution of succeeding statements in your scripts and functions. Pause gives you the least control but may be all you need in order to accomplish your goal. Delay gives you more control, and allows you to specify how long to postpone processing, depending on whether focus and new text changes have completed.

For more details on working with Pause and Delay statements, see Pause and Delay.

Scheduling Functions

Scheduling functions give you the most control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these types of function calls let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions. As mentioned above, there are several types of scheduling functions.

For more details on working with scheduling functions, see Scheduling Functions.

Enumerator Function Calls

Enumerator functions call a callback function, which in turn may process the window optionally, and either stop or continue the enumeration depending on what the callback function tests and returns. For more details on working with enumerator functions, see Enumerator Functions.

Customizing Scripts and Functions from Default and Built-in Code

When you want to customize your own script files, or when you want to personalize the script sets that ship with JAWS, there are numerous methods you can use. You may create your own user-defined scripts and functions in your own script sets that do not ship with JAWS. but you may also customize existing code by modifying scripts and functions.

Choose your method for customizing your scripts and functions depending on what you need to accomplish: Are you customizing for your own needs in an application already supported by JAWS, or are you creating your own script set for an application JAWS does not support? Are you customizing an existing script or function for a specific application, or do you mean to affect JAWS behavior across all applications? How you code your customized scripts and functions may have very unpredictable results, or it may be a very powerful enhancement. It all depends on careful planning and cautious coding. We always recommend that you back up any code that ships with JAWS before customizing any code directly. Below are some methods for customizing scripts and functions.

MyExtensions

Script binary file stacking does not allow for events in the JAWS script source file (default.jss) to be overwritten in script binary files that are used by the default script binary file (default.jsb). Therefore, MyExtensions.jss and its resulting binary file, MyExtensions.jsb, are intended for you to add custom scripts and functions to the Freedom Scientific default scripts and functions, rather than for you to overwrite default scripts and functions.

You may generate a user default.jsb in the JAWS root folder settings\(language) folder. This default.jsb, compiled from its own default.jss script source file, utilizes the shared default.jsb that ships with the Freedom Scientific JAWS. In other words, it is in the user default.jss file that you should overwrite default scripts and functions.

CAUTION: Make sure that default.jss in the user area calls the one in the shared area by including a use statement for default.jsb. If this Use statement is missing, you will experience catastrophic failure when JAWS attempts to run any scripts that are in the shared default script file but not in the user default script file. Be sure that your script or function in the User default file calls the version in the shared default file where you want to defer to the default behavior of the script or function.

MyExtensions.jss and MyExtensions.jsb ship with JAWS. These files are located in the JAWS root folder of the shared settings\(language) folder. Once you compile the MyExtensions.jss file, thus creating a MyExtensions.jsb file, JAWS places these custom script source and binary files in the user settings\(language) folder.

Note: This assumes that you are using Script Manager to compile. If you elect to use your own text editor, you must ensure that you compile to the correct folder, or copy the files there manually.

MyExtensions.jss contains the following commented-out sections to help you understand the types of code blocks such a file expects:

·         The script source file begins with the typical Include statements that any script source file should have to ensure code integrity during compilation with the default JAWS scripts and functions. These are as follows:

o   Include "hjConst.jsh"

o   Include "hjGlobal.jsh"

o   Include "common.jsm"

o   Any other Include statements of header files specific to your own script set.

·         In order not to have to re-install your own script sets after JAWS automatic updates, place any additional use statements for your custom script binary files below any other "Include" statements of header files specific to your script set.

·         By default, JAWS 13 processed a literal full string match when the == operator was used on strings. The ;#Pragma line can allow the == operator to work as it did prior to JAWS 13, which was a partial comparison. If you need the == and != operators to work with partial comparisons only, add the appropriate statement below your use and Include statements. For more details on working with ;#Pragma StringComparison statements, see ;#Pragma StringComparison Directive.

·         Next are two functions that are necessary and run every time your script set loads and unloads. Use AutoStartEvent to obtain or construct object pointers or other flags or globals you need to initialize when your script set loads. Use AutoFinishEvent to destruct or unload your objects, or nullify any other flags or globals.

·         Add your own user-defined scripts and functions, and compile to create your own MyExtensions.jsb in your user settings\(language) folder.

Overwriting Default Scripts and Functions

The fundamental reason for overwriting a script or function JAWS already provides is that you want that script or function to behave differently from JAWS behavior for some special circumstance of your own. It may be for something specific to a script set you are writing for an application JAWS does not support. Or it may be for an application JAWS does support but for which you want a different behavior from JAWS default behavior.

A safe method for overwriting scripts and functions includes the use of several key function calls that ensure the default scripts and functions still work as expected. Some common function calls that you may use include:

·         PerformScript

·         CallScriptByName

·         CallFunctionByName

Using Scope to Redirect Function Calls

A very safe method for ensuring that a function call to an overwritten function is made only when you want it to be made employs the scope capabilities of the Scripting language to redirect from where the function should be processed. the syntax of scope is to use the name of the script source file where the function code is located, followed by two colons (::) and then by the name of the function as you would normally call it. for example, to call FocusChangedEvent and make sure that it is the one from the default script source file that is actually called, you write:
 

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 from within your own code in your script source file.

 

For more details on working with how to redirect function calls, see Redirecting Function Calls Using Scope.

Code Samples

Below are some code samples for the various types of script and function calls described in this summary.

Function with Optional Parameters Code Sample

The below code sample declares the String parameter as a required parameter but the Integer parameter as optional.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Optional Int iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If iAccountNumber then
            SayInteger (iAccountNumber)
EndIf
EndFunction
Script MyNameTest ()
SpeakNames (sName1) ;omits the optional parameter, just says "My name is Mary".
SpeakNames (sName2, iAccount2) ; speak both required and optional parameters.
EndScript

Function with By Reference Parameters Code Sample

The below code sample provides the integer parameter by reference.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Int ByRef iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If sMyName == sName1 then
            iAccountNumber = iAccount1
ElIf sMyName == sName2 then
            iAccountNumber = iAccount2
Else
            iAccountNumber = 0
EndIf
EndFunction
Script MyNameTest ()
Var
            Int iNum
; Any non-aggrigate variable declared in the function parameter list as ByRef is received by the function as being by reference.
; This means that the function knows where the variable is stored in memory and can change it.
; The function has the ability to change the variable, whether or not it actually does so.
; Any non-aggrigate variable received by a function receives only a copy of the variable, and any changes made to the variable do not persist when the function is exited.
SpeakNames (sName1, iNum)
SayInteger (iNum)
SpeakNames (sName2, iNum)
SayInteger (iNum)
SpeakNames (cscNull, iNum) .
SayInteger (iNum)
EndScript

PerformScript Code Sample

The PerformScript keyword must be followed by a defined script name. For example, if you write:
 SayLine (),
 you are calling the function. But if you write:
 PerformScript SayLine(),
 you are calling the script SayLine (), as if you had pressed the keystroke bound to that script.

Script SayLine ()
If MyConditions then ;whatever your special conditions are in your user-defined MyConditions function...
            DoMyFunction ; do whatever it is you want, like spell the line instead of speaking it in your DoMyFunction call.
            Return
EndIf
PerformScript SayLine () ; Call the default SayLine script bound to the keystroke, Insert+UpArrow.
EndScript

CallScriptByName Code Sample

A function call to PerformScriptByName lets you call dynamically a script whose name is passed as the first parameter. In other words, the script name does not need to be known during compilation, and the script name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the script to be run. then optionally, it takes up to nine variant script parameters.

The below nonsense sample for a supported browser for a Web site that has multiple headings checks to see if the current line is blank. If it is, then the script calls the MoveToNextHeading script to jump to the next heading level 2 on the page.

Script MySayLine ()
If StringIsBlank (GetLine () ) then
            PerformScriptByName ("MoveToNextHeadingLevelN",2)
            Return
EndIf
PerformScript SayLine () ; current line is not blank.
EndScript

CallFunctionByName Code Sample

A function call to CallFunctionByName lets you call dynamically a function whose name is passed as the first parameter. In other words, the function name does not need to be known during compilation, and the function name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the function to be run. then optionally, it takes up to nine variant parameters.

Note: Using CallFunctionByName bypasses checking parameter types that is processed when a function is invoked normally. The Return type is the same as that of the function being called.

The below code sample spells out the word at the cursor from within Notepad. although simply calling SpellString will do the same thing, this is simply to illustrate the syntax of how to use CallFunctionByName.

Script MyTest ()
If ! StringIsBlank (GetLine ()) then
            CallFunctionByName ("SpellString",getWord())
            Return
EndIf
SayLine() ; The line is blank.
EndScript

Reference Guide of JAWS Scripts and Functions

The Freedom Scientific Scripting Reference Guide for JAWS consists of many major category books. Each book contains a summary of the category it represents, along with code samples where appropriate. And the tree structure for each book lists all the scripts and functions for that category. Check the category books that have been added since the last published version of the FSDN, including: Annotations and Aggregate Data Types. In fact, even familiar category books are likely to have new functions for you to explorer - e.g., Cursors.

For example, the Cursors category book now includes information about the Scan cursors introduced in JAWS 2020. So this summary page provides a brief overview of what the cursor scripts and functions do. The tree structure for the Cursors category book includes the entire list of scripts and functions related to cursors at the next level down from the Cursors book summary.

To examine the details about any script or function in the tree structure list, arrow to a script or function name, and press ENTER. This causes the function's details to appear in the right pane. Press F6 to move to the right pane. Then use standard virtual key navigation to read the contents. Press F6 again to return to the tree structure.

As you navigate within a particular category book, you may find duplicate entries. This occurs where a script and function have the same name. An example is the SayAll script and the SayAll function, both of which appear under the category book called "Screen Text". So be sure to check out the summaries of both instances of any entries in the tree structure that appear twice.

When viewing a topic page for a particular script or function, be sure to read the version information for when it became available. This is important to avoid unexpected results in the version of JAWS for which you are coding. At times, a topic page for a script or function may present the entry twice, each entry with slightly different information. The information may vary especially with respect to the ranges of the versions of JAWS where the entry became available. For example, if a function is available through a particular version of JAWS and then gains an additional parameter for newer versions of JAWS, then the topic page for the function displays the function twice. Each entry has its specific parameters and the versions of JAWS in which it is available. An example is the FindString function. So it is critical to know in what version of JAWS the function you are working with is supported, and its expected behaviors.

Finally, take care when working with a source file that already ships with JAWS, such as the Notepad.jss or the Wordpad.jss script source file. Such files already contain scripts and functions by default. Place your sample code at the very bottom of the file. And make sure to remove this overwritten .jss and its associated overwritten .jsb and .jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the .jss script source file and compiled in the .jsb script binary file.

Conditional Statement Structures

Unlike other programming languages, the Freedom Scientific Scripting language does not allow for case or switch statement structures. However, the If-ElIf-Else-EndIf statement structure is a very powerful tool, described below in its various forms and syntax, along with some code samples.

Description

The If keyword marks the beginning of an If-EndIf statement. A fully formulated conditional If statement structure includes: If...ElIf...Else...EndIf. Any expressions appearing after the If are used to evaluate whether condition(s) is(are) true. Expressions after any ElIf statements do the same. For example, can a certain graphics character be found in the active window?

Every If statement structure must begin and end with the keywords, If and EndIf. But the keywords, Then and Else, are optional.

If-ElIf-Else-EndIf statement structures always ask whether a condition or set of conditions is true or false . When a condition is not met (false), then the actions that follow the Else are processed.

The statements processed when conditions are met typically are calls to other functions. But also, a common statement to place within an If-EndIf statement structure is a Return statement. That is, if a condition is true and processing is performed as a result, you may not wish to perform any further evaluation of conditions within the current statement structure. In that situation, place a Return statement after the function calls you do wish to perform when a condition is true.

 For more details on working with Return statements, see Return Function.

 

Syntax

 
 

If Condition 1
            Statements
ElIf Condition 2
            Statements
ElIf Condition #N
            Statements
Else
            Statements
EndIf

 

·         If Condition 1 is the statement that marks the beginning of the conditional statement structure. When this condition evaluates to true, all statements following the If Condition 1 statement are processed and any ElIf or Else conditions are skipped.

·         ElIf Condition #n statements are optional for evaluating further conditions beyond the first condition evaluated by the If Condition 1 statement. #N refers to any number because it is possible to have many conditional ElIf statements after the first If statement.

·         Else statement is optional and is processed only if all prior conditional If and/or ElIf statements have evaluated to false.

·         EndIf is the statement that marks the end of the conditional statement structure.

Compound Conditions

You may have compound conditions in an If-EndIf statement structure. For ease of readability, you should place each statement of a compound condition statement on its own line. Compound conditions may be "and" as well as "or" conditions. use the "&&" and "||" operators for this purpose.

When you make an "and" compound condition, all the conditions in the compound statement must evaluate to true in order for statements following the compound condition to be processed. Conversely, when you use an "or" compound condition, any one of the conditions within the compound condition may evaluate to true in order for statements following the compound condition to be processed.

Nested Conditional Statement Structures

You may nest If-EndIf statement structures. But take care that each begins and ends with the If-EndIf statements in order that the compiler does not return an error or that processing yields unpredictable results. For readability, each nested If-EndIf statement structure should be indented the appropriate level.

Remarks

When making compound conditional statements and nested statements, make sure to indent the statements between each set of conditions. This greatly improves ease of readability as well as making sure you are keeping track of what statements you intend to process when a certain condition evaluates to true.

Use Return statements judiciously to ensure that you test all conditions you need to evaluate. Guard against returning prematurely, thus short-circuiting any code that runs after the If-ElIf-Else-EndIf block. This may or may not be desirable, depending on what you want to accomplish. The order in which you test conditions is critical.

Code Samples

Single Condition

Since "Then" is optional, the following two code blocks are equivalent:

If MyCondition then ; true
            Statement
EndIf
If MyCondition ; true
            statement
EndIf

If you need statements to be processed when all prior conditions evaluate to false, your code should look like this:

If MyCondition ; true
            Statement
Else ; false
            Statement
EndIf

Multiple Conditions

The below code block shows additional conditions testing.

If MyCondition 1 ; true
            Statements)
ElIf MyCondition 2 ; true
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Compound Conditions

The below code blocks show both "and" condition testing as well as "or" testing.

If MyCondition 1 ; true
&& MyCondition 2 ; also true
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, #n being however many && condition statements exist in the ElIf code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf
If MyCondition 1 ; true
|| MyCondition 2 ; or true, one or the other must be true.
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, both must be true.
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Adding parentheses around conditions ensures testing is even clearer:

If (MyCondition 1
&& MyCondition 2) ; both must be true.
            Statements)
ElIf (MyCondition 3
&& MyCondition 4) ; both must be true,
|| MyCondition 5 ; or this condition by itself must be true.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Nested Conditions

The below code block shows nesting.

If MyCondition 1 ; true
            If My NestedCondition A ; true
                        Statements)
            EndIf ;end of level 1 nesting
            Return ; no further processing.
ElIf MyCondition 2 ; true
            Statements)
            If MyNestedCondition B
            && MyNestedCondition C ; both must be true.
                        Return ; no further processing.
            ElIf MyNestedCondition D
                        Statements
                        Return ; no further processing.
            Else ; my nested conditions evaluate to false.
                        Statements
            EndIf ; end of nesting conditions level 1.
Else ; false, none of the above conditions evaluated to true, and so testing continued.
            Statement
EndIf

Negative Conditions

The below code block evaluates to true if a condition is not met. Sometimes it is easier to test for a condition not to be true.

If Not MyCondition 1 ; true
            Statements)
EndIf

Looping Functions

The Freedom Scientific Scripting language supports three major types of looping functions:

While-EndWhile

For-EndFor

ForEach-EndForEach

CAUTION: If you get into an infinite loop, you can dump JAWS. Assuming that your code does not start running again when JAWS restarts, you can modify your code and fix the problem with the infinite loop before running the code again.

Keywords: While-EndWhile

Description

The While and EndWhile keywords begin and terminate a While loop. Follow the While keyword by a conditional statement, optionally enclosed in parentheses. As long as the condition(s) in that statement evaluate to true, the loop allows a given set of actions to be performed repeatedly.

While loops may be nested, but each nesting level must begin and terminate with the While-EndWhile keywords.

Syntax

 

While (Condition)
            Statement(s) ; Call functions.
EndWhile

 

Condition is the code that causes the loop to execute as long as it evaluates to true.

Statement(s) are the actions to be performed as long as the loop continues.

 

Remarks

You can use While loops to save space and programming time. However loops can be dangerous. If the tested condition is not met at least once, the code inside the loop never runs.

Most critical of all: You must take care to avoid creating an infinite loop at run-time. Ensure that the tested condition eventually evaluates to false. And ensure that any compound conditions for a While loop also eventually evaluate to false.

Unlike For loops, While loops do not increment or decrement automatically. So if you use an iterator in the test condition of the While loop, you must initialize the iterator and take care to increment or decrement the iterator inside the loop.

Never use a Pause statement from inside a While loop as it will cause very unpredictable results or an infinite loop.

Code Samples

The first code sample simply counts from 1 to 10 when the script is run no matter where it is run from within the application. The second sample adds a conditional test inside the loop. If that condition is met, the function exits, thus terminating the loop in the function.

Of course, an even more efficient way to handle this scenario is never to run the loop in the first place. So the third sample tests for the condition first and returns if the conditions are true. This way, the looping function is never called.

Script MyLoopTest () ; no conditions inside the loop to bail out early.
Var
            Int iCounter,
            String smsgDone
smsgDone = "I'm done!"
iCounter = 1 ; Initialize iterator.
While iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayMessage (ot_JAWS_message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed while a menu or dialog is active.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
            ;Test to bail out early if a menu or dialog is active:
            If MenusActive ()
            || DialogActive ()
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript
Script MyLoopTest () ; with a test to stop processing before ever calling the looping function if the key assigned to the script is pressed from an active menu or dialog.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
;Test to bail out early if a menu or dialog is active:
If MenusActive ()
|| DialogActive ()
            SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
            Return
EndIf
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: For, To, Descending, EndFor

 

Description

The For and EndFor keywords begin and terminate a For loop. Follow the For keyword by an iterator assigned to an integer range statement, specifying the initial value through the final value of the iterator.

For loops may be nested, but every For loop must begin and terminate with the For and EndFor keywords.

For loops allow a given set of actions to be performed repeatedly as long as the iterator specified in the For loop ranges from the initial value of the iterator through the final value. By default, the iterator starts at the initial value and increments by 1 until it reaches the final value. Using the optional Descending keyword specifies that the iterator starts at the initial value and decrements by 1 until it reaches the final value.

Syntax

 

For x = Start to End Descending
            Statements(s) ; Call functions.
EndFor

 

·         X is an integer variable to be iterated in the loop.

·         Start is the initial value, either an integer variable or integer constant, of X in the loop.

·         End is the final value, either an integer variable or integer constant, of X in the loop.

·         Descending is an optional keyword, specifying that X should be decremented instead of incremented in the loop.

 

Remarks

Like While loops, For loops may be used to save space and programming time. However they can also be dangerous. If the iterator is set to an initial value that is greater than the final value, and the iterator is set to increment through the loop, the code inside the For loop is never run. Likewise, if the iterator is set to an initial value that is less than the final value, and the iterator is set to decrement through the loop, the code inside the For loop is never run.

Most critical of all: Avoid creating an infinite loop at run-time. In a typical For loop, you should not modify the iterator inside the loop; instead, allow the For loop to increment or decrement the iterator automatically. Do not modify the iterator inside the For loop so that it never reaches the final value. If you want the iterator to decrement instead of increment, you must initialize the iterator in order that the starting value is greater than the ending value.

Code Sample

The first code sample is a very simple For-EndFor loop that counts from 1 to 10. The second code sample reverses the count. the third code sample has a condition inside the loop that halts counting early if it is met.

Script MyLoopTest () ; Count from 1 to 10.
Var
            Int iStart,
            Int iEnd,
            String sMsgDone
smsgDone = "I'm done!"
iEnd = 10 ; final value of iterator
For iStart = 1 to iEnd
            Sayinteger(iStart) ; iterates automatically.
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; Reverse the count.
Var
            Int iStart,
            Int iEnd,
            String smsgDone
smsgDone = "I'm done!"
iEnd = 1
For iStart = 10 to iEnd Descending
            Sayinteger(iStart)
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed twice quickly.
Var
            Int iStart,
            Int iEnd,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iEnd = 10
For iStart = 1 to iEnd
            Sayinteger(iStart)
            If isSameScript () ; Key assigned to script is pressed twice quickly.
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndFor
SayFormattedMessage (ot_JAWS_Message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: ForEach, In, EndForEach 

 

Description

The ForEach and EndForEach keywords begin and terminate a ForEach loop. Follow a ForEach keyword by a string variable to access the keys for each member of the collection, and the collection to be accessed.

ForEach loops allow enumerating each member of a collection through its key. ForEach loops may be nested, but every ForEach loop must begin and end with the ForEach and EndForEach keywords.

Syntax

 

ForEach k in col
            ... ;k is the key for each member.
            ... ;col[k] is the member in the collection matching the key.
            Statements()
EndForEach

 

·         K is a string variable that is the key for a member in the collection.

·         Col is the collection to be accessed.

·         Statement(s) are the actions (function calls) to be performed within the ForEach loop.

 

Remarks

The ForEach loop accesses the members of the collection by alphabetical order of the member keys.

The string variable contains the key for each member in the collection. To access the collection member, use the name of the collection followed by the key variable in square brackets.

Code Sample

The below code sample names flowers by color and types each message on a separate line into Notepad using ForEach looping. You save code statements in the calling function by placing the initialization of each flower's name and color into its own function. You save code statements in the script by making the function that gathers the collection and performs the loop. Also in this way, you may add other statements to the script to call CollectionOfFlowers under one set of conditions and call, for example, CollectionOfFruit, for a different condition.

Additionally, the extent of the collection in the function is determined only by how many statements it has. If you make the collection bigger, the ForEach loop does not need to change because it is already set to handle however many items exist in the collection.

Void Function FlowersInit(collection Flowers, String Name, String Color)
;Initialize each flower's name and color, ppassed by the calling function, CollectionOfFlowers.
Let Flowers.Name = Name
Let Flowers.Color = Color
EndFunction
Void Function CollectionofFlowers()
Var
            Collection Plants,
            Collection Flowers,
            String Key,
            String smsgPlantInfo
Let sMsgPlantInfo = "I am a %1 %2." ;%1 is the color, %2 is the name of each flower in the collection.
Let Plants = new collection
Let Flowers = new collection
FlowersInit(Flowers,"lily","white")
Let Plants.lily = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"daffodil","yellow")
Let Plants.daffodil = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"orchid","purple")
Let Plants.orchid = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"iris","blue")
Let Plants.iris = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"rose","red")
Let Plants.rose = Flowers
Let Flowers = new collection
ForEach Key in Plants
            SayFormattedMessage (ot_JAWS_message,FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name))
            TypeString(FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name)
                        +CscBufferNewLine)
EndForEach
;Remove the collections using built-in functions.
CollectionRemoveAll (Flowers)
CollectionRemoveAll (Plants)
EndFunction
Script MyLoopTest ()
;This script calls the function that names each flower in the collection by color.
CollectionOfFlowers ()
EndScript

Object Model and MSAA Events

An Object Model and MSAA event function provides information about any object activity in the Object Model and MSAA architecture (object hierarchy) that the Freedom Scientific Scripting language supports. Object events are not limited to dialogs and menus. These events may include such activities as whether a dialog item change in a list or a state change in a checkbox has occurred, whether a main document window has gained focus, etc. JAWS uses the information from such an event function to determine whether to speak and display it. In this case, to display information refers to showing it in Braille.

Some examples of Object Model and MSAA event functions include:

ActiveItemChangedEvent

DescriptionChangedEvent

NameChangedEvent

ObjStateChangedEvent

For a complete listing of Object Model and MSAA event Functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ActiveItemChangedEvent function is overwritten for Notepad to announce some information it does not indicate normally when an item change occurs from user interaction in a dialog control that causes this event to fire. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function ActiveItemChangedEvent (handle curHwnd, int curObjectId, int curChildId,
            handle prevHwnd, int prevObjectId, int prevChildId)
Var
            String smsgCurrent
smsgCurrent = "This confirms that the current item is %1."
Say (FormatString(smsgCurrent,GetObjectName (curObjectId)),ot_line)
ActiveItemChangedEvent (curHwnd, curObjectId, curChildId, prevHwnd, prevObjectId, prevChildId)
EndFunction

Additional Resources

For more information on the types of Objects the Freedom Scientific Scripting language supports, see the General Scripting Concepts topic called Objects.

For more details on working with Object Model and MSAA in general, refer to the Microsoft Developer Network in the section called Microsoft Active Accessibility and UI Automation Compared (Windows).

Object Model and MSAA Event Helpers

An Object Model and MSAA Event helper function assists an Object Model and MSAA Event. such an event may occur in any application or a feature of the Windows operating system. Based on the information the Object Model and MSAA Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

An example of an Object Model and MSAA event helper function is HJDialogObjStateChangeSpoken. For a complete listing of Object Model and MSAA event functions, see the category book in the Reference Guide.

Additional Resources

For more information on the types of Objects the Freedom Scientific Scripting language supports, see the General Scripting Concepts topic called Objects.

For more details on working with Object Model and MSAA in general, refer to the Microsoft Developer Network in the section called Microsoft Active Accessibility and UI Automation Compared (Windows)

Application Info Events

An Application Info event function provides information about the application, such as when it starts or closes. JAWS uses this information to determine whether to speak and display application information, initialize or nullify object pointers and variables, for comparison purposes, etc. In this case, to display information refers to showing it in Braille.

Some examples of Application Info event functions include:

AutoStartEvent

AutoFinishEvent

For a complete listing of application info event functions, see the category book in the Reference Guide.

Unlike other functions, AutoStartEvent and AutoFinishEvent should not call down the stack. AutoStartEvent and AutoFinishEvent functions run when script binary files are loaded and unloaded, which means that each binary file will run its own version of these functions, if they exist, and it is unnecessary for these events to call down the stack. In fact, AutoStartEvent and AutoFinishEvent should not call down the stack because doing so will cause the events to run when they should not, and therefore introduce buggy behavior. Since normally, you should call down the stack when overwriting events, avoid doing so in the case of these two functions.

Clipboard Events

A Clipboard event function provides information about the clipboard, such as whether it has been changed or updated. JAWS uses this information to determine whether to speak and display it, for comparison purposes, etc. In this case, to display information refers to showing it in Braille.

An example of a Clipboard Event function is ClipboardChangedEvent. For a complete listing of functions related to the clipboard, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ClipboardChangedEvent function is overwritten in order to determine whether the Clipboard contains new text. Every time you copy, cut, overwrite, or append to the Clipboard, the ClipboardChangedEvent function fires and lets you know that there is new text in the clipboard. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function ClipboardChangedEvent ()
;Speak whether I have text.
If GetClipboardText () != cscNull
            SayMessage (ot_JAWS_message, "You have text in the clipboard.")
EndIf
ClipboardChangedEvent ()
EndFunction

Connection Events

A Connection event function provides information about a Tandem Connection, such as whether it is connected or disconnected. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, etc.

Some examples of Connection event functions include:

TandemConnectionEvent

ControllerModeChangedEvent

For a complete listing of connection event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, if a Tandem event occurs,a debug statement saying "99" is spoken. Of course, the function that ships with JAWS does not have this debug statement in it but we have used the function from the default.jss script source file as a sample and have added the debug statement here.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function TandemConnectionEvent(int nTandemApp, int nConnectionEvent)
Var
            Int bShouldPlaySound
SayInteger (99) ; This is the debug statement added to the original function from default.jss.
Let bShouldPlaySound = GetDefaultJCFOption (OPT_USE_SOUNDS_TO_INDICATE_TANDEM)
If nConnectionEvent == Tandem_Status_Connected then
            Let GlobalTandemMode = Tandem_Mode_Connected
            ;Note that the controller will hear the message spoken on the target side when the connection is made,
            ;so it is not necessary to speak the message for the controller as well.
            If bShouldPlaySound
            && GlobalTandemConnectSound then
                        PlaySound(GlobalTandemConnectSound)
            EndIf
            If nTandemApp == Tandem_Target then
                        SayMessage(ot_status,cmsg_TandemConnected)
                        BrailleMessage (cmsg_TandemConnected)
            EndIf
Elif nConnectionEvent == Tandem_Status_Disconnected then
            Let GlobalTandemMode = Tandem_Mode_NotConnected
            If bShouldPlaySound
            && GlobalTandemDisconnectSound then
                        PlaySound(GlobalTandemDisconnectSound)
            EndIf
            If nTandemApp == Tandem_Controller then
                        SayMessage(ot_status,cmsg_TandemDisconnectedFromTarget)
                        BrailleMessage (cmsg_TandemDisconnectedFromTarget)
            Elif nTandemApp == Tandem_Target then
                        SayMessage(ot_status,cmsg_TandemDisconnectedFromController)
                        BrailleMessage (cmsg_TandemDisconnectedFromController)
                        If gbLockedKeyboard then
                                    SetKeyboardLock(false)
                        EndIf
            EndIf
EndIf
EndFunction

Cursor Events

A Cursor event function provides information about system cursors and about the JAWS cursors. These differ in some cases since JAWS has some special cursors of its own. And since JAWS 2020, this includes UIA Scan cursors for modern Windows 10 applications and areas of Microsoft Office 365. A cursor event may provide information about whether a cursor is changing shape, appearing or disappearing, etc. JAWS uses this information to determine whether to track information with speech and in Braille, for comparison purposes, etc.

Some examples of Cursor event functions include:

·         TopEdgeEvent

·         BottomEdgeEvent

·         CursorShapeChangedEvent

For a complete listing of cursor event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, if a cursor changes shape, JAWS informs you. By default, this feature is disabled but you can toggle it on/off through Settings Center.

To set up the example and have the event function fire in Notepad, from within the Notepad.jss script source file, enable "Notify When Mouse Cursor Changes Shape" through the Settings Center user interface. The code sample simply overwrites the function in Notepad so that the active cursor and position are spoken ahead of processing the default function for announcing cursor shape changes.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it. It just requires that the setting to detect the event is enabled in JAWS.

Void Function CursorShapeChangedEvent (string CursorType)
PerformScript SayActiveCursor ()
Delay (10)
CursorShapeChangedEvent (CursorType)
EndFunction

Cursor Event Helpers

A Cursors event helper function is used to assist a cursor event. JAWS uses this information to determine whether to speak and display something, or to play a sound when a particular type of cursor event occurs. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

An example of a Cursors event helper function is the ProcessBoundaryStrike function. For a complete listing of Cursors event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, if you navigate to the top or bottom edge of an edit window, JAWS informs you by playing a sound. By default, this feature is disabled and is application-specific. So it appears in the JAWS Quick Settings user interface.

To set up the example and have the TopEdgeEvent and BottomEdgeEvent functions fire in Notepad, from within the Notepad.jss script source file, enable the setting called "Top and Bottom Edge Alert" in Quick Settings. The code sample simply overwrites the ProcessBoundaryStrike function in Notepad so that the PC cursor position is spoken after processing the default function.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize. It just requires that the setting to detect the event is enabled in JAWS.

Void Function ProcessBoundaryStrike(handle hWnd, int edge)
ProcessBoundaryStrike(hWnd, edge)
SayMessage (ot_JAWS_message,GetCursorPosString (Cursor_PC,smmInches))
EndFunction

Dialog Events

A Dialog event function provides information about a dialog, such as whether it has changed or IS updated. JAWS uses this information to determine whether to speak and display it, for comparison purposes, etc. In this case, to display information refers to showing it in Braille.

An example of a Dialog Event function is DialogPageChangedEvent. If you can find an application that contains a multi page dialog (e.g., Internet Explorer, Microsoft Word, etc.), you may try overwriting the function in the application's script source file and adding, say, a debug statement in it so that you can see how this function works. to avoid unpredictable results, make sure that there is not an overwritten version of DialogPageChangedEvent already in the application's script source file.

For a complete listing of functions related to dialogs, see the category books in the Reference Guide.

Help Events

A Help event function provides extra help messages about user interface activity. This may be especially helpful for newer users of JAWS unfamiliar with keyboard commands. So Help messages may be about what keys you may press when a control is activated, the name of the access key of the control, and so on. JAWS uses this information to determine whether to speak and display Help messages. In this case, to display information refers to showing it in Braille.

An example of a Help event function is TutorMessageEvent. For a complete listing of related Help functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the TutorMessageEvent function is overwritten for Notepad to indicate some information it does not indicate normally when a dialog gains focus into an edit combo control like the FileName edit control in the Open or Save-As dialog. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file. The GetCustomTutorMessage helper function (which is not an event function) is used to populate the message desired for this code sample.

To set up the example, ensure that you have tutor help enabled in JAWS. The feature is on by default and is found in the Basics dialog of the JAWS Options user interface. The feature has three modes:

Announce Menu and Control Help

Announce Custom Messages Only

Turn off Menu and Control Help

In the sample code, both of the enabled options work. If you have the feature set to Announce Custom Messages Only, when you encounter an edit combo control in a dialog in Notepad, the custom message shown here speaks. However, if you have the feature set to Announce Menus and Control Tutor Help, the custom message shown here speaks, and then is followed by the default tutor help message JAWS provides for an edit combo control.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgHello
I am a test message for TutorMessageEvent to demonstrate how it works.
@@
EndMessages
String Function GetCustomTutorMessage ()
If DialogActive ()
&& GetObjectSubtypeCode () == wt_editCombo
            Return msgHello
Else
            Return default::GetCustomTutorMessage ()
EndIf
EndFunction
Void Function TutorMessageEvent (Handle hWnd, Int nMenuMode)
If DialogActive ()
&& !nMenuMode ; a menu is not active.
            If GetObjectSubtypeCode () == wt_editCombo
                        SayMessage (ot_tutor,self::GetCustomTutorMessage ())
            EndIf
EndIf
TutorMessageEvent (hWnd, nMenuMode)
EndFunction

HTML Events

An HTML event function provides information about user interactions or events that occur in HTML applications. Based on the information the event function provides or returns, JAWS determines what to speak and display. In this case, to display information refers to showing it in Braille.

Some examples of HTML event functions include:

·         DocumentLoadedEvent

·         DocumentUpdated

·         FormsModeEvent

For a complete listing of HTML event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the DocumentLoadedEvent function that is already overwritten in Chrome.jss from the function in the default.jss script source file is changed slightly. After all the calls in the function occur, a nonsense message saying, "hello", is added to illustrate how DocumentLoadedEvent works when a new Web page is loaded. It is assumed that the function is being compiled in the Chrome.jsb script binary file in your root folder of the JAWS user Settings\(language) folder.

Note: To avoid unpredictable results, never change the files located in any folder of the JAWS shared folders structure.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgHello
Hello.
@@
EndMessages
Void Function DocumentLoadedEvent ()
SetUpStuffForNewPage ();Personalized Settings
SpeakPersonalizeSettingsChange ()
Let giReturnPositionFromFrameUpdate = 0
Let gICheckByActiveItem = FALSE
DocumentLoadedEvent ()
SayMessage (ot_JAWS_message,msgHello)
EndFunction

HTML Event Helpers

An HTML event helper function assists an HTML event that occurs in an HTML application. Based on the information the HTML event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of HTML Event helper functions include:

·         DocumentLoadedAtFormField

·         DoDefaultDocumentLoadActions

·         ProcessDocumentLoadAppAlerts

For a complete listing of HTML Event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the DocumentLoadedAtFormField function is overwritten in the Chrome.jss script source file from the function in default.jss. Before the default function is called, a nonsense message is added to speak and display in Braille under certain conditions to illustrate how DocumentLoadedEvent uses this helper function when a new Web page is loaded. It is assumed that the function is being compiled in the Chrome.jsb script binary file in your root folder of the JAWS user Settings\(language) folder.

Note: To avoid unpredictable results, never change the files located in any folder of the JAWS shared folder structure.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function DocumentLoadedAtFormField ()
Var
            Int iSubtype,
            String msgTestFormfield
msgTestFormfield = "I am a formfield."
Let iSubtype = GetObjectTypeCode()
If iSubtype == WT_EDIT
|| iSubtype == wt_Multiline_Edit
|| iSubtype == wt_PassWordEdit
|| iSubtype == wt_EditCombo
|| iSubtype == wt_ComboBox
|| iSubtype == wt_ListBox
|| iSubtype == wt_MultiSelect_ListBox
|| iSubtype == wt_ExtendedSelect_ListBox then
            SayMessage (ot_JAWS_Message,msgTestFormfield)
EndIf
Return Default::DocumentLoadedAtFormfield()
EndFunction

Keyboard Events

A Keyboard Event function provides information about PC keyboard or Braille display keyboard user interaction. The information may include key names, whether the key press is coming from a PC keyboard or from a Braille display, the key scan code, etc. JAWS uses this information for comparison purposes, and so on.

A key scan code is a number (or sequence of numbers) sent by a computer keyboard to the operating system on your computer. The scan code reports what key is being pressed. Each and every key on your keyboard, whether it is a standard PC keyboard, a fancy wireless keyboard, or a keyboard that is part of your Braille display is assigned a unique scan code.

Some examples of Keyboard Event functions include:

·         KeyPressedEvent

·         KeymapChangedEvent

·         QuickKeyNavigationModeChanged

For a complete listing of Keyboard Event functions, see the category book in the JAWS Reference Guide.

Code Sample

In the below code sample, the KeyPressedEvent function is overwritten for Notepad to announce the number of the key scan code of any key you press from the Notepad main edit window. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

This test can serve as a method to obtain the key scan code for a particular key so that you may utilize that scan code for comparison purposes in KeyPressedEvent or elsewhere. For example, you may place the key scan code information into a global variable and use that variable in some other function or in a script where you want JAWS to speak or display something in Braille.

Key scan codes can vary according to localization. So do not assume that any key code will be the same for all localizations. For example, for US English, the key scan code for ENTER is 28. But this may not be the case for other localizations.

Suppose you want JAWS to speak a special message when the ENTER key is pressed. First run the code sample to determine what the key scan code is for ENTER. For purposes of the example, we assume the standard US English key scan code set. so ENTER is 28. Assuming this, you can change the condition in the function (or in some other function or script) so that when the key is pressed, JAWS indicates your special message. This can be very useful when an application uses common keys in nonstandard ways, such as for a Call Center or other customized application.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Globals
            Int gbEnterKeyWasPressed
Void Function KeyPressedEvent (int nKey, string strKeyName, int nIsBrailleKey, int nIsScriptKey)
Var
            String msgEnter
msgEnter = "Hello, I am the Enter key."
KeyPressedEvent (nKey, strKeyName, nIsBrailleKey, nIsScriptKey)
If ! (DialogActive ()
|| MenusActive ()) ; Neither a dialog or a menu is active.
            If GetObjectSubtypeCode () == wt_Multiline_edit
                        SayInteger (nKey)
                        If nKey == Key_Enter ; 28
                                    SayMessage (ot_smart_Help, msgEnter)
                                    Let gbEnterKeyWasPressed = TRUE
                                    Return
                        EndIf
            EndIf
            Let gbEnterKeyWasPressed = FALSE
EndIf
Let gbEnterKeyWasPressed = FALSE
EndFunction

Additional Resources

For a complete discussion of the Freedom Scientific Scripting language support for keyboard management - including key maps, hook, and key layering functions, see Key Management.

For more details on working with key scan codes, refer to the Microsoft Developer Network in the section called Key Scan Codes.

Keyboard Event Helpers

A Keyboard Event helper function assists a Keyboard Event. Based on the information the Keyboard Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Keyboard Event helper functions include:

·         PreProcessKeyPressedEvent

·         ProcessHJDialogKeyPressed

·         ProcessKeyPressed

 

For a complete listing of Keyboard event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ProcessSpaceBarKeyPressed function is overwritten in the Notepad.jss script source file from the function in default.jss. Before the default function is called, a nonsense message is added to speak and display in Braille under certain conditions to illustrate how KeyPressedEvent uses this helper function.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function ProcessSpaceBarKeyPressed (Int nKey, String strKeyName, Int nIsBrailleKey, Int nIsScriptKey)
Var
            String msgSpaceBarKeyPressTest
msgSpaceBarKeyPressTest = "I am a checkbox and the %1 key was just pressed."
If DialogActive ()
&& GetObjectSubtypeCode () == wt_checkbox
            SayFormattedMessage (ot_help,FormatString(msgSpaceBarKeyPressTest,strKeyName))
EndIf
Return ProcessSpaceBarKeyPressed (nKey, strKeyName, nIsBrailleKey, nIsScriptKey)
EndFunction

Menu Events

A Menu event function provides information about any type of menu activity. The information may be for a menu in an application such as Notepad or Microsoft Word, but also for context menus in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a menu event function to determine what to speak and display. This includes whether a menu is being activated, which option is selected, or whether the menu is being deactivated. In this case, to display information refers to showing it in Braille.

An example of a Menu event function is MenuModeEvent. For a complete listing of Menu event functions, see the category book in the JAWS Reference Guide.

Code Sample

In the below code sample, the MenuModeEvent function is overwritten for Notepad to announce some information it does not indicate normally when a menu is activated or deactivated. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgInactive
I was a menu.
@@
@msgActive
I am an active menu.
@@
@msgMenuBar
I am a menu bar.
@@
EndMessages
Void Function MenuModeEvent (handle WinHandle, int mode)
MenuModeEvent (WinHandle, mode)
If Mode == Menu_Inactive
            SayMessage (ot_status, msgInactive)
ElIf Mode == Menu_Active
            SayMessage (ot_status,msgActive)
ElIf Mode == Menubar_Active
            SayMessage (ot_status,msgMenubar)
EndIf
EndFunction

Menu Event Helpers

A Menu event helper assists a Menu Event that may occur in any application or a feature of the Windows operating system. Based on the information the Menu Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Menu Event helper functions include:

·         ContextMenuProcessed

·         MenuActiveProcessed

·         MenuBarActiveProcessed

For a complete listing of Menu event helper functions, see the category book in the JAWS Reference Guide.

Code Sample

In the below code sample, the MenuActiveProcessed function is overwritten in the Notepad.jss script source file from the function in default.jss to announce extra information the function does not speak normally when MenuModeEvent fires. It is assumed that the function is being compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function MenuActiveProcessed (Int mode, Handle hWnd)
Var
            String sFirstOption
sFirstOption = "New"
If StringContains (GetObjectName (),sFirstOption)
            ;Speak the names of all the options in the menu.
            Say (GetWindowText (hWnd, FALSE), ot_line)
EndIf
Return MenuActiveProcessed (mode, hWnd)
EndFunction

Mouse Events

A Mouse event function provides information about any type of Mouse activity. The information may be for a Mouse in an application such as Notepad or Microsoft Word, Google Chrome, etc. But it might also be for more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Mouse event function to determine whether to speak and display whether a Mouse movement or activity is occurring. In this case, to display information refers to showing it in Braille.

Some examples of Mouse Event functions include:

·         MouseButtonEvent

·         MouseMovedEvent

For a complete listing of Mouse event functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the MouseButtonEvent function is copied from the one in default.jss into a Notepad.jss script source file for JAWS to indicate some information it does not provide normally when you use a Mouse wheel.

Unlike most event functions overwritten from default.jss, there is no need to call MouseButtonEvent because the one in default.jss simply provides you with instructions about how to utilize the function. Basically, if you place any statements within the function in default.jss and recompile, whatever you have added to this event function is processed across the board in any application. By contrast, if you copy the function from default.jss into an application's script source file (e.g., Notepad.jss), whatever statements you include in the function are only processed when Notepad is running and has the focus.

 The "event Id" identifiers for each of the mouse activities that cause MouseButtonEvent to fire are listed in the file called HJConst.jsh that ships with JAWS.

 

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgMouseWheel
I am using the wheel on the mouse.
@@
@msgNoMouseWheel
I am using my mouse but not its wheel.
@@
EndMessages
Void Function MouseButtonEvent (Int eventID, Int x, Int y)
If EventId == WM_MOUSEWHEEL
            SayMessage (ot_smart_help, msgMouseWheel)
Else
            Pause () ; Avoid double-speaking the error message.
            SayMessage (ot_error, msgNoMouseWheel)
EndIf
EndFunction

Mouse Speech Events

A Mouse Speech event function provides information about any type of mouse activity that is spoken. The information may be for a mouse in an application such as Notepad or Microsoft Word, Google Chrome, etc. But it might also be for more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Mouse Speech event function to determine whether to speak and display whether a mouse movement or activity is occurring. In this case, to display information refers to showing it in Braille.

An example of a Mouse Speech event function is MouseSpeechTimerEvent. For a complete listing of functions related to Mouse Speech events, see the category book in the Reference Guide.

Optical Character Recognition Events

An Optical Character Recognition (OCR) event function provides information about OCR activities, such as whether recognition is valid or has completed. JAWS uses this information to determine whether to speak and display OCR information in Braille, for comparison purposes, etc.

Some examples of OCR event functions include:

OCRCompletedEvent

OCRDataInvalidatedEvent

For a complete listing of functions related to OCR events, see the category book in the Reference Guide.

Code Sample

In the below code sample, the OCRCompletedEvent function is overwritten in Notepad.jss from the function in default.jss. The overwritten function simply adds an extra message when an OCR activity is completed with a successful result. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply run an OCR script using the standard key layer assignments for OCR for the current window in Notepad. The key assignment is JAWSKey+SPACE followed by the letter "o", then by the letter "w".

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function OCRCompletedEvent (Int iJobID, Int iResult)
Var
            String smsgOCRTest
smsgOCRTest = "OCR completed successfully."
OCRCompletedEvent (iJobID, iResult)
If iResult
            SayMessage (ot_status, smsgOCRTest)
EndIf
EndFunction

SayAll Events

A SayAll event function provides information about SayAll activities that JAWS may have performed automatically or from user interaction. For example, a SayAll event may have started, stopped, or have been interrupted. JAWS uses this information to determine what to speak and display, whether to sstop speaking and move the Braille cursor to the point where the SayAll has stopped, etc. In this case, to display information refers to showing it in Braille.

SayAll event functions include:

·         SayAllStarted

·         SayAllStoppedEvent

For a complete listing of functions related to SayAll events, see these category books in the reference guide:

Screen Text

Voices.

Code Sample

In the below code sample, the SayAllStoppedEvent function is overwritten in the Notepad.jss script source file from the function in default.jss. Whenever a SayAll is stopped in Notepad, JAWS indicates in speech and in Braille a nonsense message that the SayAllStoppedEvent function fired. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

 

To set up the test, write several lines of text in a Notepad file. Then initiate a SayAll with the JAWSKey+DOWNARROW key combination. Allow SayAll to complete, or interrupt it by pressing CONTROL or some other key. Either way, SayAllStoppedEvent should fire and indicate the test message from the code in this sample, along with a beep.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function SayAllStoppedEvent ()
Var
            String smsgSayAllStatus
smsgSayAllStatus = "SayAll stopped."
SayAllStoppedEvent ()
Beep () ; Produce a system sound.
SayMessage (ot_status, smsgSayAllStatus)
EndFunction

Screen Text Events

A Screen Text event function provides information about any type of screen text activity. The information may be for a screen text event within an application such as Notepad or Microsoft Word, but also for a screen text event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Screen Text event function to determine what to speak and display. This includes whether new text is occurring, for example, and whether that new text should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

Some examples of Screen Text event functions include:

CaretMovedEvent - only triggers under certain types of edit windows

CellChangedEvent

NewTextEvent

For a complete listing of Screen Text event functions, see the category book in the Reference Guide.

Note that the function called SelectionContextChangedEvent is a Screen Text event, not a Selection event. This is because Selection events involve the process of selecting text or graphics, files, or folders, etc.; whereas, examining the context in which a selection has occurred is a screen text activity. For example, in Microsoft Word, you may select text in the main document window, of course. But you may also select text in a comment, a footnote, and endnote, revised text, and so on. Therefore, in that application, it is critical for JAWS to recognize the context in which the selection event is occurring in order to determine what exactly to speak and display in Braille relative to the selection. So Selection events and ScreenText events are closely tied together but are not the same events.

Labelled Graphics Passed to NewTextEvent

For many years, the scripting language had no functionality to detect whether a graphic changed in a window. Thus you could not script JAWS to detect automatically a graphic change, or to make a frame speak a graphic change indicating a change in the app.

Starting with the May 2017 release of JAWS 18, a JCF option became available to JAWS for controlling if graphics are also included in the NewTextEvent function. It is:
 

IncludeGraphicsInNewTextEvent=0

 Previously only text was included. This meant that a script could not detect changes in graphics in the OSM. By enabling this JCF option, you can now monitor changes in graphics via NewTextEvent. You can label graphics and then use NewTextEvent to monitor changes in the graphic.

 

Before this enhancement, for example, a graphic was used to indicate if the EchoLink Ham software was in transmit or receive mode. There was no other way of knowing other than via this graphic. Since graphics were not passed to NewTextEvent, JAWS could not provide any feedback when the application changed from tx to rx, etc.

Normally, graphics are not passed to NewTextEvent. Setting the IncludeGraphicsInNewTextEvent option to 1 allows changes in graphics to be passed to NewTextEvent, thus enableing scripts to detect changes in visible graphics automatically. Examples include:

·         Labelled graphics which indicate a change in status.

·         Frames used to speak changes in graphics automatically.

 

Code Sample

In the below code sample, the NewTextEvent function is overwritten for Notepad to announce how many characters are in the buffer when focus is in the document window. If the user types any text in the document window, NewTextEvent fires and announces the nonsense message. If the user performs some other activity that causes new text to appear (e.g., activating a menu or dialog), the nonsense message is not triggered. It is only triggered conditionally when focus is in the document window and text is typed or otherwise edited.

Take time to examine the function in default.jss. The NewTextEvent function is often responsible for suppressing extraneous information as well as for speaking it, depending on the type of information that causes NewTextEvent to fire in the first place.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function NewTextEvent (Handle hwnd, String buffer, Int nAttributes,
            Int nTextColor, Int nBackgroundColor, Int nEcho, String sFrameName)
Var
            String smsgBufferMessage
smsgBufferMessage = "The buffer now has %1 characters."
NewTextEvent (hwnd, buffer, nAttributes, nTextColor, nBackgroundColor, nEcho, sFrameName)
;Say the number of characters in the buffer but only if in the document window.
If GetObjectSubtypeCode () == wt_multiline_Edit
            SayFormattedMessage (ot_screen_message, FormatString (smsgBufferMessage,IntToString(StringLength(buffer))))
EndIf
EndFunction

Additional Resources

For more details on Selection events, see the topics under the Events topic area of the General Scripting Concepts book called Selection Events and Selection Event Helpers

Screen Text Event Helpers

A Screen Text event helper function assists a Screen Text event that may occur in any application or a feature of the Windows operating system. Based on the information the ScreenText Event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Screen Text event helper functions include:

·         MonitorNewTextEventAlerts

·         NewTextEventShouldBeSilent

For a complete listing of Screen Text event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the NewTextEventShouldBeSilent function is overwritten in the Notepad.jss script source file from the function in default.jss to announce some debug statements the function does not indicate normally when the related NewTextEvent function fires. Notice that the function fires multiple times even though the debug statements are conditional. This is one reason this function is critical to ensuring that speaking text multiple times does not occur.

It is assumed that the function is being compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Int Function NewTextEventShouldBeSilent (Handle hFocus, Handle hwnd, String buffer, Int nAttributes,
            Int nTextColor, Int nBackgroundColor, Int nEcho, String sFrameName)
Var
            Int iSubtype,
            String smsgFocus,
            String smsgHighlight
iSubtype = GetObjectSubtypeCode ()
smsgFocus = "The window with the focus is "
smsgHighlight = "the window with the highlight is "
If iSubtype == wt_editcombo
            ;The window with focus and the window with the highlighted text may not be the same.
            ; Use the debug statements here to check whether the window with focus and the window
            ;with the highlighted text are the same.
            say (smsgFocus + IntToString (hFocus), ot_line)
            say (smsgHighlight + IntToString (hwnd), ot_line)
            Return
EndIf
NewTextEventShouldBeSilent(hFocus, hwnd, buffer, nAttributes, nTextColor, nBackgroundColor, nEcho, sFrameName)
EndFunction

Scripts Events

A Scripts event function provides information about certain types of scripts activity. The information may be for a script event within an application such as Notepad or Microsoft Word, but also for a script event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Scripts event function to determine what to speak and display. In this case, to display information refers to showing it in Braille with respect to JAWS.

Some examples of Scripts event functions include:

·         Unknown

·         UserBufferActivatedEvent

·         UserBufferDeactivatedEvent

For a complete listing of functions related to Scripts events, see the category book in the Reference Guide.

Special Note:

The script process does not support recursion. A script or function may call a version of itself lower down in the script binary file stack, but not at the same level or at a higher level.

Code Sample

In the below code sample, the Unknown function is overwritten from the function in default.jss for Notepad to announce an Unknown function call made by a nonsense script. It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that a nonsense script calls the function that is not written anywhere. theUnknown function Scripts event fires from the overwritten Unknown function to provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Messages
@msgUnknownFunction
This function is unknown. Check to see if you have misspelled its name or failed to write the function in your script source file where you are calling the function.
@@
EndMessages
Void Function Unknown (String TheName, Int IsScript, Optional Int IsDueToRecursion)
If StringContains (TheName, "CallMyFunction") != 0
            SayUsingVoice (VCTX_MESSAGE, TheName, OT_SPELL)
            SayMessage (ot_error, msgUnknownFunction)
            Return
EndIf
Unknown (TheName, IsScript, IsDueToRecursion)
EndFunction
Script MyScriptsEventTest ()
; Call a dummy function that is not declared or written anywhere in the screen reader's scripting code.
CallMyFunction ()
EndScript

Selection Events

A Selection event function provides information about any type of selection activity. The information may be for a selection event within an application such as Notepad or Microsoft Word, but also for a selection event in more general operating system features like Windows Explorer or the Start menu. A Selection event may even occur in a Web browser where a portion of the content of a Web page is selected for copying to the Clipboard. JAWS uses the information from a Selection event function to determine what to speak and display. This includes whether text is being selected or unselected, for example, and whether that activity should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

Some examples of Selection event functions include:

·         SelectionChangedEvent

·         TextSelectedEvent

For a complete listing of Selection event functions, see the category book in the Reference Guide.

Note that the function called SelectionContextChangedEvent is a Screen Text event, not a Selection event. This is because Selection events involve the process of selecting text or graphics, files, or folders, etc.; whereas, examining the context in which a selection has occurred is a screen text activity. For example, in Microsoft Word, you may select text in the main document window, of course. But you may also select text in a comment, a footnote, and endnote, revised text, and so on. Therefore, in that application, it is critical for JAWS to recognize the context in which the selection event is occurring in order to determine what exactly to speak and display in Braille relative to the selection. So Selection events and ScreenText events are closely tied together but are not the same events.

Code Sample

In the below code sample, the TextSelectedEvent function is overwritten for Notepad to say and spell the text that is currently selected when focus is in the document window. If the user selects any text that is more than a single character, TextSelectedEvent fires and announces the selected text as well as spells it. Otherwise, the default TextSelectedEvent function behaves normally.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply type some text in the Notepad document window and then begin selecting and unselecting it by different selection units - by character, word, etc.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function TextSelectedEvent (String strText, Int bUnSelecting, Optional Int bContainsSpeechMarkup)
TextSelectedEvent (strText, bUnSelecting, bContainsSpeechMarkup)
If GetObjectSubtypeCode () == wt_multiline_edit ; Focus is in the document window.
            If ! bUnselecting
            && StringLength (strText) > 1 ; Selected text is more than one character.
                        SayUsingVoice (vctx_message, strText, ot_spell)
            EndIf
EndIf
EndFunction

Additional Resources

For more details on ScreenText events, see the topics under the Events topic area of the General Scripting Concepts book called Screen Text Events and Screen Text Event Helpers.

Selection Event Helpers

A Selection event helper function assists a Selection event that may occur in any application or a feature of the Windows operating system. Based on the information the Selection Event helper function provides or returns, JAWS determines what to speak and display from the related event In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Selection event helper functions include:

·         ProcessSelectText

·         SayHighLightedText

 

For a complete listing of Selection event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the SayHighlightedText function is overwritten in the Notepad.jss script source file from the function in default.jss. The overwritten function spells the highlighted text in edit combo controls when the related NewTextEvent function fires.

It is assumed that the function is being compiled in the Notepad.jsb script binary file.

To set up the example, simply activate the Open or Save-As dialog in the Notepad application and start typing text in the Filename edit combo control.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Void Function SayHighLightedText (Handle hwnd, String buffer)
SayHighLightedText (hwnd, buffer)
If GetObjectSubtypeCode () == wt_editcombo
            SpellString (buffer)
EndIf
EndFunction

Settings Events

A Settings event function provides information about settings changes that occur automatically as applications are loaded and unloaded, or settings changes that occur by user interaction with the screen reader's user interface. JAWS uses this information to determine whether to speak and display something, depending on a setting change or a script configuration change. In this case, to display information refers to showing it in Braille.

Numerous scripts are assigned for handling settings changes through the Settings Center and Quick Settings user interface in JAWS.

Starting with JAWS 15, an example of a Settings event function is ConfigurationChangedEvent. For a complete listing of functions related to Settings events, see the category books in the Reference Guide called Settings Events and also Settings.

Windows Events

A Windows event function provides information about any type of changes that occur with respect to the windows hierarchy. The information may be for a windows event within an application such as Notepad or Microsoft Word, but also for a windows text event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Windows event function to determine what to speak and display. For example, this includes whether focus has changed and whether that focus change should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

 

The Freedom Scientific Scripting language supports many functions and events related to the windows structure and hierarchy. But a discussion of the windows architecture of the Windows operating system is outside the scope of the Freedom Scientific Developer Network.

Some examples of WindowsEvent functions include:

·         FocusChangedEventEx

·         ForegroundWindowChangedEvent

·         HelpBalloonEvent

For a complete listing of Windows event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the FocusChangedEventEx function is overwritten for Notepad to announce a debug statement JAWS does not indicate normally when focus changes.

Take time to examine this powerful function in default.jss. The FocusChangedEventEx function is responsible for suppressing extraneous information as well as for speaking it, depending on the type of activity that causes a focus change to occur.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply perform any activity in Notepad that changes the focus, such as activating a menu or a dialog, tabbing through the controls in a dialog, etc.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function FocusChangedEventEx (Handle hwndFocus, Int nObject, Int nChild,
            Handle hwndPrevFocus, Int nPrevObject, Int nPrevChild,
            Int nChangeDepth)
Var
            String smsgDepth
FocusChangedEventEx (hwndFocus, nObject, nChild, hwndPrevFocus, nPrevObject, nPrevChild, nChangeDepth)
sMsgDepth = "changed level is "
If nChangeDepth != 0
            SayMessage (ot_help, sMsgDepth + IntToString (nChangeDepth))
EndIf
EndFunction

Additional Resources

For a full discussion of the windows structure and how it is implemented by Microsoft, refer to the Microsoft Developer Network topic called ChildWindow Class (System.Windows.Controls).

Windows Event Helpers

A Windows event helper function assists a Windows event that may occur in any application or a feature of the Windows operating system. Based on the information the Windows event helper function provides or returns, JAWS determines what to speak and display from the related event. In this case, to display information refers to showing it in Braille.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

Some examples of Windows event helper functions include:

FocusChangedEvent

ProcessSayAppWindowOnFocusChange

HandleNoCurrentWindow

For a complete listing of Windows event helper functions, see the category book in the Reference Guide.

Code Sample

In the below code sample, the ProcessSayFocusWindowOnFocusChange function is overwritten in the Notepad.jss script source file from the function in default.jss to announce a debug statement the function does not indicate normally when the related FocusChangedEventEx function fires. In this case, the object subtype code is announced whenever focus changes in the Open or Save-As dialog.

It is assumed that the function is being compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event helper function. So it does not require that a script and key assignment be bound to it in order to provide information for the related event function to utilize the helper function.

Void Function ProcessSayFocusWindowOnFocusChange (String RealWindowName, Handle FocusWindow)
ProcessSayFocusWindowOnFocusChange (RealWindowName, FocusWindow)
If RealWindowName == "Open"
|| RealWindowName == "Save As"
            SayInteger (GetObjectSubtypeCode ())
EndIf
EndFunction

Key management

The Freedom Scientific Scripting language offers numerous methods for controlling JAWS behavior through your scripts. For more information on working with the various methods, see the following:

·         Key Map Files

·         Hooks

·         Key Layers

Reference Guide of JAWS Scripts and Functions

The Freedom Scientific Scripting Reference Guide for JAWS consists of many major category books. Each book contains a summary of the category it represents, along with code samples where appropriate. And the tree structure for each book lists all the scripts and functions for that category. Check the category books that have been added since the last published version of the FSDN, including: Annotations and Aggregate Data Types. In fact, even familiar category books are likely to have new functions for you to explorer - e.g., Cursors.

For example, the Cursors category book now includes information about the Scan cursors introduced in JAWS 2020. So this summary page provides a brief overview of what the cursor scripts and functions do. The tree structure for the Cursors category book includes the entire list of scripts and functions related to cursors at the next level down from the Cursors book summary.

To examine the details about any script or function in the tree structure list, arrow to a script or function name, and press ENTER. This causes the function's details to appear in the right pane. Press F6 to move to the right pane. Then use standard virtual key navigation to read the contents. Press F6 again to return to the tree structure.

As you navigate within a particular category book, you may find duplicate entries. This occurs where a script and function have the same name. An example is the SayAll script and the SayAll function, both of which appear under the category book called "Screen Text". So be sure to check out the summaries of both instances of any entries in the tree structure that appear twice.

When viewing a topic page for a particular script or function, be sure to read the version information for when it became available. This is important to avoid unexpected results in the version of JAWS for which you are coding. At times, a topic page for a script or function may present the entry twice, each entry with slightly different information. The information may vary especially with respect to the ranges of the versions of JAWS where the entry became available. For example, if a function is available through a particular version of JAWS and then gains an additional parameter for newer versions of JAWS, then the topic page for the function displays the function twice. Each entry has its specific parameters and the versions of JAWS in which it is available. An example is the FindString function. So it is critical to know in what version of JAWS the function you are working with is supported, and its expected behaviors.

Finally, take care when working with a source file that already ships with JAWS, such as the Notepad.jss or the Wordpad.jss script source file. Such files already contain scripts and functions by default. Place your sample code at the very bottom of the file. And make sure to remove this overwritten .jss and its associated overwritten .jsb and .jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the .jss script source file and compiled in the .jsb script binary file.

Objects

The Freedom Scientific Scripting language supports working with objects, and with attaching and detaching COM events to application pointers in order to provide access to application user interfaces that may not be user-friendly out of the box to assistive technology such as screen readers. For the purpose of this topic, when referring to screen readers, you may assume that other assistive technology products apply to the discussion.

Microsoft Windows provides numerous tools you may utilize in order to make COM objects accessible to screen readers. A brief overview appears within this summary. Since this highly technical subject is far beyond the scope of the Freedom Scientific Developer Network, a few reference sources are listed at the end of this summary for your convenience. But we assume that you have general knowledge of the terminology and concepts of working with objects.

 

MSAA

 Microsoft Active Accessibility (MSAA) became part of the Microsoft Developer's Kit in 1997. It has been included as a part of Windows operating systems since that time, with numerous updates. but as of Windows Vista, Microsoft introduced a more robust accessibility component to serve a similar purpose. This is called User Interface Automation (UIA). Newer applications tend to favor UIA over MSAA.

 

MSAA was developed to provide a programmatic communication mechanism for products like screen readers, and Microsoft Windows and applications that run on Windows operating systems. Basically, MSAA gives screen readers the ability to provide information for Windows controls, and thus gives you, the end user, the ability to interact with those controls. The properties of controls are exposed to inform you about a control's name, prompt, location on screen, type, value, state, etc. A control's state reflects whether the control is selected, checked or unchecked, enabled or disabled, expanded or collapsed, and so on.

An accessible object is represented by an IAccessible COM interface and an integer ChildId, allowing applications to expose a tree hierarchy. Each element of this tree structure exposes a set of properties and methods for the object. Those properties and methods allow you to manipulate the corresponding user interface element. MSAA clients can access the programmatic user interface information through a standard API.

The Freedom Scientific Scripting language supports MSAA and UIA with over 70 functions. For a complete listing of objects, see the summary in the screen reader'sFunctions book of the Reference Guide.

For more details on working with object-related event functions, see the topics under Events in this General Scripting Concepts book called Object Model and MSAA Events
 and
 Object Model and MSAA Event Helpers.

UIA

For the most part, since Windows Vista, Microsoft UI Automation has replaced MSAA to support screen readers. Like MSAA, UI Automation is a component of all operating systems, and it supports Windows Presentation Foundation (WPF). Its purpose is to provide a programmatic means for screen readers to expose information about the user interface, thus allowing you, the end user, to interact with applications through keyboard commands or other non-standard input devices.

The Freedom Scientific Scripting language provides a primary FSUIA object which is accessible to the scripts via the CreateObject built-in script function with the object ID “FreedomSci.UIA”. The primary object provides for creating of all other script API objects.

In touch.jss, you can see how UIA is used to implement gesture support and the touch cursor. The scripts in default.jss use touch.jss functions to implement the touch cursor support. The touch cursor is completely implemented via scripts.

Office.jss and Outlook.jss have some functions where UIA is used to do things which could not be accomplished via MSAA or Window structure. TWinUITouch.jss (used by TwinUI) gives some support from UIA to the scripts for the Windows 8 start screen. But do be careful not to confuse it with the iAccessible object methods used in TwinUI. In JAWS 14, iAccessible object methods were utilized in areas where they were needed for Windows 8 support, and IAccessible objects are still in use in several areas. Windows.ui.search.jss also has UIA to support the Windows 8 search for the Start screen. All of this is greatly enhanced and updated for Windows 10 support and going forward.

Note: As of JAWS 16, some code may still be in use where the screen reader detaches events from the UIA object before removing it. This is no longer necessary. Simply nulling a UIA object (or the object going out of scope because it is local) disposes of all events attached to it. That is why all UIA objects used for attaching events are global.

Scripts for Microsoft Office use UIA to perform specific tasks rather than as a large part of the scripting support. You can find functions in the source (.JSS) files for MS Office where UIA is used by searching for "FreedomSci.UIA". Also, the function, CreateUIAFocusElement, in touch.jss illustrates how application scripts get a temporary UIA object.

 

As of JAWS 18.0.xxx and JAWS 2018 and later, UIA.jss has a set of functions which use a global FSUIA object and treewalker, available for convenience and reduced overhead when all you need to do is a routine UIA task such as get focus, parent, etc. As of JAWS 2018, two functions have been added: FSUIAGetNextSiblingOfElement and FSUIAGetPriorSiblingOfElement.

 

Script API Object Interfaces

When describing the return values of UIA object methods, the term “true” indicates an integer value of -1, and the term “false” indicates an integer value of 0. The terms “Object”, “Handle”, and "Int” refer to the built-in Freedom Scientific script function types.

Definitions

·         Control - a component of the user interface with specific properties and potential interactions; for example: buttons, links, text, and so on.

·         Object - an object as implemented by the Freedom Scientific script language.

·         Method - a member function call, taking a set of parameters, which performs an operation on an object or returns requested data from it.

·         Property - a data member of an object which can be used in assignment operations and dereferenced using the "." (dot) operator if the data member is itself an object.

·         UIA condition - a UIA mechanism for determining which UIA elements match a given set of criteria. These are used to find elements in the UIA tree and can be used to customize the behavior of a UIA tree walker.

·         UIA element - the UIA interface which provides properties and actions for a single control.

·         UIA property - a piece of information about a UIA element such as its name or type.

·         UIA tree - a hierarchical collection of UIA elements.

·         UIA tree walker - a UIA provided mechanism for traversing a UIA tree. These can be customized using UIA conditions to include or exclude UIA elements with certain properties.

Examining Objects on the Fly

1.    Turn on Script Utility Mode - Ins+Windows+NumpadMinus.

2.    Route to current window - F5.

3.    Press Alt+Ctrl+Windows+O to activate the object tree UIA browser.

4.    Now use the script utility mode keys normally used to navigate windows hierarchy. Instead, you will be navigating by objects.

5.    Press Alt+Ctrl+Windows+O again to turn off the object tree UIA browser, and press Ins+Windows+NumpadMinus to turn off Script Utility Mode.

 

You may also wish to write test scripts using the function GetUIAObjectTree (hwnd) to get the top level object associated with the window. Then use o.FindByKeyboardFocus(1) to get the item at the deepest focus, not just the list box but the list item inside it.

All other methods and properties are detailed in the file, HomeRowUIAObject.jss. Also, see SkypeWatch.jss for real-time usage of accessing objects.

Additional Resources

For a complete discussion of Objects, MSAA, UIA, and IAccessible objects, see the topics in Freedom Scientific's own page and the Microsoft Developer Network as follows:

·         JAWS UIA Script API Documentation

·         COM Objects and COM Interfaces

·         Microsoft Active Accessibility

·         UIA Automation

·         UI Automation API

·         IAccessible Interface

Screen Text Events

A Screen Text event function provides information about any type of screen text activity. The information may be for a screen text event within an application such as Notepad or Microsoft Word, but also for a screen text event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Screen Text event function to determine what to speak and display. This includes whether new text is occurring, for example, and whether that new text should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

Some examples of Screen Text event functions include:

·         CaretMovedEvent - only triggers under certain types of edit windows

·         CellChangedEvent

·         NewTextEvent

For a complete listing of Screen Text event functions, see the category book in the Reference Guide.

Note that the function called SelectionContextChangedEvent is a Screen Text event, not a Selection event. This is because Selection events involve the process of selecting text or graphics, files, or folders, etc.; whereas, examining the context in which a selection has occurred is a screen text activity. For example, in Microsoft Word, you may select text in the main document window, of course. But you may also select text in a comment, a footnote, and endnote, revised text, and so on. Therefore, in that application, it is critical for JAWS to recognize the context in which the selection event is occurring in order to determine what exactly to speak and display in Braille relative to the selection. So Selection events and ScreenText events are closely tied together but are not the same events.

Labelled Graphics Passed to NewTextEvent

For many years, the scripting language had no functionality to detect whether a graphic changed in a window. Thus you could not script JAWS to detect automatically a graphic change, or to make a frame speak a graphic change indicating a change in the app.

Starting with the May 2017 release of JAWS 18, a JCF option became available to JAWS for controlling if graphics are also included in the NewTextEvent function. It is:
 

IncludeGraphicsInNewTextEvent=0

 Previously only text was included. This meant that a script could not detect changes in graphics in the OSM. By enabling this JCF option, you can now monitor changes in graphics via NewTextEvent. You can label graphics and then use NewTextEvent to monitor changes in the graphic.

 

Before this enhancement, for example, a graphic was used to indicate if the EchoLink Ham software was in transmit or receive mode. There was no other way of knowing other than via this graphic. Since graphics were not passed to NewTextEvent, JAWS could not provide any feedback when the application changed from tx to rx, etc.

Normally, graphics are not passed to NewTextEvent. Setting the IncludeGraphicsInNewTextEvent option to 1 allows changes in graphics to be passed to NewTextEvent, thus enableing scripts to detect changes in visible graphics automatically. Examples include:

·         Labelled graphics which indicate a change in status.

·         Frames used to speak changes in graphics automatically.

 

Code Sample

In the below code sample, the NewTextEvent function is overwritten for Notepad to announce how many characters are in the buffer when focus is in the document window. If the user types any text in the document window, NewTextEvent fires and announces the nonsense message. If the user performs some other activity that causes new text to appear (e.g., activating a menu or dialog), the nonsense message is not triggered. It is only triggered conditionally when focus is in the document window and text is typed or otherwise edited.

Take time to examine the function in default.jss. The NewTextEvent function is often responsible for suppressing extraneous information as well as for speaking it, depending on the type of information that causes NewTextEvent to fire in the first place.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function NewTextEvent (Handle hwnd, String buffer, Int nAttributes,
            Int nTextColor, Int nBackgroundColor, Int nEcho, String sFrameName)
Var
            String smsgBufferMessage
smsgBufferMessage = "The buffer now has %1 characters."
NewTextEvent (hwnd, buffer, nAttributes, nTextColor, nBackgroundColor, nEcho, sFrameName)
;Say the number of characters in the buffer but only if in the document window.
If GetObjectSubtypeCode () == wt_multiline_Edit
            SayFormattedMessage (ot_screen_message, FormatString (smsgBufferMessage,IntToString(StringLength(buffer))))
EndIf
EndFunction

Additional Resources

For more details on Selection events, see the topics under the Events topic area of the General Scripting Concepts book called Selection Events and Selection Event Helpers

Conditional Statement Structures

Unlike other programming languages, the Freedom Scientific Scripting language does not allow for case or switch statement structures. However, the If-ElIf-Else-EndIf statement structure is a very powerful tool, described below in its various forms and syntax, along with some code samples.

Description

The If keyword marks the beginning of an If-EndIf statement. A fully formulated conditional If statement structure includes: If...ElIf...Else...EndIf. Any expressions appearing after the If are used to evaluate whether condition(s) is(are) true. Expressions after any ElIf statements do the same. For example, can a certain graphics character be found in the active window?

Every If statement structure must begin and end with the keywords, If and EndIf. But the keywords, Then and Else, are optional.

If-ElIf-Else-EndIf statement structures always ask whether a condition or set of conditions is true or false . When a condition is not met (false), then the actions that follow the Else are processed.

The statements processed when conditions are met typically are calls to other functions. But also, a common statement to place within an If-EndIf statement structure is a Return statement. That is, if a condition is true and processing is performed as a result, you may not wish to perform any further evaluation of conditions within the current statement structure. In that situation, place a Return statement after the function calls you do wish to perform when a condition is true.

 For more details on working with Return statements, see Return Function.

 

Syntax

 
 

If Condition 1
            Statements
ElIf Condition 2
            Statements
ElIf Condition #N
            Statements
Else
            Statements
EndIf

 

If Condition 1 is the statement that marks the beginning of the conditional statement structure. When this condition evaluates to true, all statements following the If Condition 1 statement are processed and any ElIf or Else conditions are skipped.

ElIf Condition #n statements are optional for evaluating further conditions beyond the first condition evaluated by the If Condition 1 statement. #N refers to any number because it is possible to have many conditional ElIf statements after the first If statement.

Else statement is optional and is processed only if all prior conditional If and/or ElIf statements have evaluated to false.

EndIf is the statement that marks the end of the conditional statement structure.

Compound Conditions

You may have compound conditions in an If-EndIf statement structure. For ease of readability, you should place each statement of a compound condition statement on its own line. Compound conditions may be "and" as well as "or" conditions. use the "&&" and "||" operators for this purpose.

When you make an "and" compound condition, all the conditions in the compound statement must evaluate to true in order for statements following the compound condition to be processed. Conversely, when you use an "or" compound condition, any one of the conditions within the compound condition may evaluate to true in order for statements following the compound condition to be processed.

Nested Conditional Statement Structures

You may nest If-EndIf statement structures. But take care that each begins and ends with the If-EndIf statements in order that the compiler does not return an error or that processing yields unpredictable results. For readability, each nested If-EndIf statement structure should be indented the appropriate level.

Remarks

When making compound conditional statements and nested statements, make sure to indent the statements between each set of conditions. This greatly improves ease of readability as well as making sure you are keeping track of what statements you intend to process when a certain condition evaluates to true.

Use Return statements judiciously to ensure that you test all conditions you need to evaluate. Guard against returning prematurely, thus short-circuiting any code that runs after the If-ElIf-Else-EndIf block. This may or may not be desirable, depending on what you want to accomplish. The order in which you test conditions is critical.

Code Samples

Single Condition

Since "Then" is optional, the following two code blocks are equivalent:

If MyCondition then ; true
            Statement
EndIf
If MyCondition ; true
            statement
EndIf

If you need statements to be processed when all prior conditions evaluate to false, your code should look like this:

If MyCondition ; true
            Statement
Else ; false
            Statement
EndIf

Multiple Conditions

The below code block shows additional conditions testing.

If MyCondition 1 ; true
            Statements)
ElIf MyCondition 2 ; true
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Compound Conditions

The below code blocks show both "and" condition testing as well as "or" testing.

If MyCondition 1 ; true
&& MyCondition 2 ; also true
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, #n being however many && condition statements exist in the ElIf code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf
If MyCondition 1 ; true
|| MyCondition 2 ; or true, one or the other must be true.
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, both must be true.
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Adding parentheses around conditions ensures testing is even clearer:

If (MyCondition 1
&& MyCondition 2) ; both must be true.
            Statements)
ElIf (MyCondition 3
&& MyCondition 4) ; both must be true,
|| MyCondition 5 ; or this condition by itself must be true.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Nested Conditions

The below code block shows nesting.

If MyCondition 1 ; true
            If My NestedCondition A ; true
                        Statements)
            EndIf ;end of level 1 nesting
            Return ; no further processing.
ElIf MyCondition 2 ; true
            Statements)
            If MyNestedCondition B
            && MyNestedCondition C ; both must be true.
                        Return ; no further processing.
            ElIf MyNestedCondition D
                        Statements
                        Return ; no further processing.
            Else ; my nested conditions evaluate to false.
                        Statements
            EndIf ; end of nesting conditions level 1.
Else ; false, none of the above conditions evaluated to true, and so testing continued.
            Statement
EndIf

Negative Conditions

The below code block evaluates to true if a condition is not met. Sometimes it is easier to test for a condition not to be true.

If Not MyCondition 1 ; true
            Statements)
EndIf

Looping Functions

The Freedom Scientific Scripting language supports three major types of looping functions:

·         While-EndWhile

·         For-EndFor

·         ForEach-EndForEach

CAUTION: If you get into an infinite loop, you can dump JAWS. Assuming that your code does not start running again when JAWS restarts, you can modify your code and fix the problem with the infinite loop before running the code again.

Keywords: While-EndWhile

Description

The While and EndWhile keywords begin and terminate a While loop. Follow the While keyword by a conditional statement, optionally enclosed in parentheses. As long as the condition(s) in that statement evaluate to true, the loop allows a given set of actions to be performed repeatedly.

While loops may be nested, but each nesting level must begin and terminate with the While-EndWhile keywords.

Syntax

 

While (Condition)
            Statement(s) ; Call functions.
EndWhile

 

·         Condition is the code that causes the loop to execute as long as it evaluates to true.

·         Statement(s) are the actions to be performed as long as the loop continues.

 

Remarks

You can use While loops to save space and programming time. However loops can be dangerous. If the tested condition is not met at least once, the code inside the loop never runs.

Most critical of all: You must take care to avoid creating an infinite loop at run-time. Ensure that the tested condition eventually evaluates to false. And ensure that any compound conditions for a While loop also eventually evaluate to false.

Unlike For loops, While loops do not increment or decrement automatically. So if you use an iterator in the test condition of the While loop, you must initialize the iterator and take care to increment or decrement the iterator inside the loop.

Never use a Pause statement from inside a While loop as it will cause very unpredictable results or an infinite loop.

Code Samples

The first code sample simply counts from 1 to 10 when the script is run no matter where it is run from within the application. The second sample adds a conditional test inside the loop. If that condition is met, the function exits, thus terminating the loop in the function.

Of course, an even more efficient way to handle this scenario is never to run the loop in the first place. So the third sample tests for the condition first and returns if the conditions are true. This way, the looping function is never called.

Script MyLoopTest () ; no conditions inside the loop to bail out early.
Var
            Int iCounter,
            String smsgDone
smsgDone = "I'm done!"
iCounter = 1 ; Initialize iterator.
While iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayMessage (ot_JAWS_message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed while a menu or dialog is active.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
            ;Test to bail out early if a menu or dialog is active:
            If MenusActive ()
            || DialogActive ()
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript
Script MyLoopTest () ; with a test to stop processing before ever calling the looping function if the key assigned to the script is pressed from an active menu or dialog.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
;Test to bail out early if a menu or dialog is active:
If MenusActive ()
|| DialogActive ()
            SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
            Return
EndIf
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: For, To, Descending, EndFor

 

Description

The For and EndFor keywords begin and terminate a For loop. Follow the For keyword by an iterator assigned to an integer range statement, specifying the initial value through the final value of the iterator.

For loops may be nested, but every For loop must begin and terminate with the For and EndFor keywords.

For loops allow a given set of actions to be performed repeatedly as long as the iterator specified in the For loop ranges from the initial value of the iterator through the final value. By default, the iterator starts at the initial value and increments by 1 until it reaches the final value. Using the optional Descending keyword specifies that the iterator starts at the initial value and decrements by 1 until it reaches the final value.

Syntax

 

For x = Start to End Descending
            Statements(s) ; Call functions.
EndFor

 

·         X is an integer variable to be iterated in the loop.

·         Start is the initial value, either an integer variable or integer constant, of X in the loop.

·         End is the final value, either an integer variable or integer constant, of X in the loop.

·         Descending is an optional keyword, specifying that X should be decremented instead of incremented in the loop.

 

Remarks

Like While loops, For loops may be used to save space and programming time. However they can also be dangerous. If the iterator is set to an initial value that is greater than the final value, and the iterator is set to increment through the loop, the code inside the For loop is never run. Likewise, if the iterator is set to an initial value that is less than the final value, and the iterator is set to decrement through the loop, the code inside the For loop is never run.

Most critical of all: Avoid creating an infinite loop at run-time. In a typical For loop, you should not modify the iterator inside the loop; instead, allow the For loop to increment or decrement the iterator automatically. Do not modify the iterator inside the For loop so that it never reaches the final value. If you want the iterator to decrement instead of increment, you must initialize the iterator in order that the starting value is greater than the ending value.

Code Sample

The first code sample is a very simple For-EndFor loop that counts from 1 to 10. The second code sample reverses the count. the third code sample has a condition inside the loop that halts counting early if it is met.

Script MyLoopTest () ; Count from 1 to 10.
Var
            Int iStart,
            Int iEnd,
            String sMsgDone
smsgDone = "I'm done!"
iEnd = 10 ; final value of iterator
For iStart = 1 to iEnd
            Sayinteger(iStart) ; iterates automatically.
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; Reverse the count.
Var
            Int iStart,
            Int iEnd,
            String smsgDone
smsgDone = "I'm done!"
iEnd = 1
For iStart = 10 to iEnd Descending
            Sayinteger(iStart)
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed twice quickly.
Var
            Int iStart,
            Int iEnd,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iEnd = 10
For iStart = 1 to iEnd
            Sayinteger(iStart)
            If isSameScript () ; Key assigned to script is pressed twice quickly.
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndFor
SayFormattedMessage (ot_JAWS_Message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: ForEach, In, EndForEach 

 

Description

The ForEach and EndForEach keywords begin and terminate a ForEach loop. Follow a ForEach keyword by a string variable to access the keys for each member of the collection, and the collection to be accessed.

ForEach loops allow enumerating each member of a collection through its key. ForEach loops may be nested, but every ForEach loop must begin and end with the ForEach and EndForEach keywords.

Syntax

 

ForEach k in col
            ... ;k is the key for each member.
            ... ;col[k] is the member in the collection matching the key.
            Statements()
EndForEach

 

·         K is a string variable that is the key for a member in the collection.

·         Col is the collection to be accessed.

·         Statement(s) are the actions (function calls) to be performed within the ForEach loop.

 

Remarks

The ForEach loop accesses the members of the collection by alphabetical order of the member keys.

The string variable contains the key for each member in the collection. To access the collection member, use the name of the collection followed by the key variable in square brackets.

Code Sample

The below code sample names flowers by color and types each message on a separate line into Notepad using ForEach looping. You save code statements in the calling function by placing the initialization of each flower's name and color into its own function. You save code statements in the script by making the function that gathers the collection and performs the loop. Also in this way, you may add other statements to the script to call CollectionOfFlowers under one set of conditions and call, for example, CollectionOfFruit, for a different condition.

Additionally, the extent of the collection in the function is determined only by how many statements it has. If you make the collection bigger, the ForEach loop does not need to change because it is already set to handle however many items exist in the collection.

Void Function FlowersInit(collection Flowers, String Name, String Color)
;Initialize each flower's name and color, ppassed by the calling function, CollectionOfFlowers.
Let Flowers.Name = Name
Let Flowers.Color = Color
EndFunction
Void Function CollectionofFlowers()
Var
            Collection Plants,
            Collection Flowers,
            String Key,
            String smsgPlantInfo
Let sMsgPlantInfo = "I am a %1 %2." ;%1 is the color, %2 is the name of each flower in the collection.
Let Plants = new collection
Let Flowers = new collection
FlowersInit(Flowers,"lily","white")
Let Plants.lily = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"daffodil","yellow")
Let Plants.daffodil = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"orchid","purple")
Let Plants.orchid = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"iris","blue")
Let Plants.iris = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"rose","red")
Let Plants.rose = Flowers
Let Flowers = new collection
ForEach Key in Plants
            SayFormattedMessage (ot_JAWS_message,FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name))
            TypeString(FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name)
                        +CscBufferNewLine)
EndForEach
;Remove the collections using built-in functions.
CollectionRemoveAll (Flowers)
CollectionRemoveAll (Plants)
EndFunction
Script MyLoopTest ()
;This script calls the function that names each flower in the collection by color.
CollectionOfFlowers ()
EndScript

Non-Aggregate Variables

The Freedom Scientific Scripting language offers several types of variables you can define for your scripts and functions. The type of a variable determines the set of values a variable may hold.

For example, non-aggregate variable types are for variables that may hold only one value at a time; whereas, aggregate variable types are for variables that may hold a set of values simultaneously. Aggregate variable types include collections and arrays. Collections may hold items of different types, but arrays are defined to hold items of a specific type and only that type, (e.g., the StringArray or IntArray type.)

For more information about aggregate variable types, see Collection Type/> and Array Type.

Remarks

Declare all variables with a name and a type before using them within a script or function.

Give each variable a unique name to distinguish it from other functions and names used in a particular script or in the script source file itself.

Do not try to use duplicate variable names within the same scope because doing so will cause errors at compile time. Also keep in mind that local variables with the same names as global variables take precedence over those global variables.

Non-aggregate Variable Types

Non-aggregate variable types allow variables to store only one type of information. They include:

·         Integer - stores numeric values

·         String – stores a string of characters

·         Handle - stores a window handle value

·         Object - stores an object

·         Variant – Stores data that is not assigned to a specific type

 

Integer - stores numeric values

The numeric value stored in an integer must be a positive or negative integer or 0. Floating point numbers are not allowed as values for integer variables. JAWS initializes all integer variables to zero each time a script or function is called where integer variables are declared.

 
 Syntax: Int VariableName
 Example:

            Int iCheckNumber
            Let iCheckNumber = 1000

 

Back to list of Non-aggregate Variables
 

String - Stores a string of characters

 A string may contain letters, numbers, punctuation marks, and spaces. If the string must contain Unicode characters, see Formatting Script Files for UTF-8 to understand how to format your script files so that they honor that character set as well as the standard ASCII character set. To assign a value to a string variable, enclose the characters in quotation marks.

JAWS initializes all string variables to null (no value) when a script or function is called where string variables are declared. Null values may be represented as a pair of quotation marks with no spaces between them, or by the cscNull constant found in the common.jsm default message file.

 
 Syntax: String VariableName
 Example:

            String sMyName ; declares the string
            Let sMyName = “John Smith”

 Back to list of Non-aggregate Variables
  

Handle - stores a window handle value

The operating system dynamically and automatically assigns a window handle to each window within any running application. A window handle is a unique integer that changes each time an application is closed and reopened. For example, when you launch Microsoft Word, the document edit window may have a window handle value of 1000. But when you close Word and then reopen it, the window handle will be another integer.

Since a handle is an integer, it can be used like any other integer variable. But you can use handle integer variables only for identifying window handles. In other words, you cannot store a handle value in an integer variable.

JAWS initializes all handle integer variables to zero each time a script or function is called where handle variables are declared.

 
 Syntax: Handle VariableName
 Example:

            Handle hwnd
            Let hwnd=GetFocus()

 

Back to list of Non-aggregate Variables
  

Object - stores an object

An object variable refers to the types of objects used within software such as Microsoft Office applications.

JAWS initializes all object variables to null (no value) each time a script is called where object variables are declared.

 
 Syntax: Object VariableName
 Example:

            Object oMyAppPointer
            Let oMyApptPointer = getObjectFromEvent(hwnd, ObjID_Window, 0, childID)

 

Back to list of Non-aggregate Variables
  

Variant – Stores data that is not assigned to a specific type

A variant variable is used to store data whose type may vary when assigned.

 
 Syntax: Variant VariableName
 Example:

            Variant vCalendar ; may contain string for day, integer for day of month, etc.
            Let vCalendar = "Today"
            Let vCalendar = 31

 

Back to list of Non-aggregate Variables

Declaring Variables

The Freedom Scientific Scripting language allows you to declare both local and global variables. You may use local variables only in the script or function where you declare them, and you must declare them to precede the code that utilizes them. Typically, you place local variables at the top of a script or function where you plan to use them. but this is a convention, not a requirement.

You may use global variables in two ways from within the current script source (.jss) file: 1) from any script or function where you declare them; or, 2) by referring to a header (.jsh) file that contains the declared global variables you want to use. In this case, you must add an "Include" statement with the name of the relevant header file. Typically, you add the "Include" statement at the top of the script source file. but this is a convention, not a requirement.

Unlike languages with block scoping, though, a variable declared anywhere in a script or function is scoped to the script or function. Therefore, duplicate definitions within the local scope are not allowed in the Freedom Scientific Scripting language.

Since global variables may be accessed by any script set, if you want to keep your global variables private to your script set, be sure to declare them in the script source file instead of the header file, and use names for the global variables that are not likely to be chosen by someone else in their scripts.

Declaring Local Variables

By convention, you may declare local variables within a script or function immediately following the beginning line of the script or function. But you may also place them elsewhere in a script or function as long as your declarations precede the code that utilizes them. Begin local variable declarations with the keyworkd "Var".

For better readability, consider declaring each variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Example:

Var
            String sFirstName,
            String sLastName,
            Int iCheckNumber ; from my checkbook

Declaring Global Variables

It is good practice to declare global variables within a script file immediately following any include and Use statements. This makes them easier to find later. but you may place them anywhere outside of a script or function as long as your declarations precede the code that utilizes them. Begin global variable declarations with the keyword “Globals”.

For better readability, consider declaring each global variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Once you create global variables and assigned values to them, they retain those values even after you close the application that uses them. In other words, unless you reboot the system or unload and reload the screen reader itself, if you reopen that same application, the screen reader remembers the values for any global variables from that application's script file. If you want to clear global variables, you must unload the screen reader from memory and reload it, or you must create some function that re-initializes them each time the application is reopened.

Example:

Globals
            String gsFirstName,
            String gsLastName,
            Handle ghDocWnd ; handle of document wwindow

Using a Header File to Store Variables

As mentioned above, it may be more practical to declare global variables in a script header file. Typically, a header file has an extension of .jsh. When you want to access a header file to declare global variables, you must refer to it with an “Include” statement in the script source file where you want to use the global variables. For examples, see the script source file included in your shared user\settings\(Language) folder. One of the “include” statements for this file is “hjglobal.jsh”. Since the global variables declared in that header file are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions. If you add an “Include” statement for the HJGlobal.jsh file within an application-specific script source file, those global variables become available to that script source file.

Array Type Variables

Keywords:

·         IntArray

·         StringArray

·         HandleArray

·         ObjectArray

·         VariantArray

·         New

Description

An array is a data type that contains a fixed number of elements, and whose elements are accessed by means of an integer index. Arrays are created to hold the data type for which they are intended. For example, IntArrays hold integers, StringArrays hold strings, etc. A VariantArray holds data of type variant, which means that it may hold any data type.

After declaring an array, create it and specify the size of the array using the keyword, New. The array is fixed to be the size specified at the time it is created. Multiple dimensions may be created, and can be separated with a comma.

You may access elements in an array by means of indices enclosed in square brackets.

Syntax

 
 

Var
            TypeArray xArray
            Let xArray = new TypeArray(size)
            Let xArray[i] = value
Var
            TypeArray xyArray
            Let xyArray = new TypeArray(sizeX,sizeY)
            Let xyArray[i,j] = value

 

TypeArray is any of the types of arrays that may be created-- IntArray, StringArray, HandleArray, ObjectArray, or VariantArray.

XArray is an array variable being declared and created. It is a one-dimensional array.

Size is the number of elements in the one-dimensional array xArray.

XyArray is an array variable being declared and created. It is a one-dimensional array.

SizeX is the number of elements in the first dimension of the one-dimentional array xyArray.

SizeY is the number of elements in the second dimension of the one-dimensional array xyArray.

I is an index into the array.

J is an index into the second dimension of the one-dimensional array.

Value is a value assigned to an element of the array.

 
 

Remarks

Declaring the array does not create it. Creation of the array must be done by means of the New statement.

A VariantArray can contain items of any type. Collections can be elements of an array if that array is of type VariantArray. The script code should take care to manage the types of data in variant arrays appropriately.

Arrays are always passed to functions by reference.

Assigning one array to another will result in two variables referring to the same array.

There is no compile-time error if the wrong number of index expressions is specified for an array, or if an index attempts to access outside the bounds of the array.

There is also no runtime error notification, but the error may cause JAWS to lock. Therefore, take care to avoid illegal index references.

Code Sample

The below nonsense example shows the power of arrays and in fact of the VariantArray type.

Messages
;For sMsgGemInfo, %1 is the gem type, %2 the jewelry, %3 the occasion, %4 the number, and %5 the shape
@sMsgGemInfo
%5 %1 %2s for the %4 %3s
@@
EndMessages
Script TestArrays ()
ArrayOfGemsCollections()
EndScript
Void Function GmsInit(Collection Gms, String Name, string Type, String Occasion, Int Number, String Shape)
Let Gms.Name = Name
Let Gms.Type = Type
Let Gms.Occasion = Occasion
Let Gms.Number = Number
Let Gms.Shape = Shape
EndFunction
Void Function ArrayOfGemsCollections()
Var
            VariantArray Gems,
            Collection gms,
            Int i,
            String sMessage
Let Gems = new variantArray[5]
Let gms = new collection
gmsInit(gms,"emerald","pendant","birthday",6,"oval")
Let Gems[1] = gms
Let gms = new collection
GMSInit(gms,"diamond","ring","engagement",7,"square-cut")
Let Gems[2] = gms
Let gms = new collection
GMSInit(gms,"sapphire","bracelet","anniversary",9,"round")
Let Gems[3] = gms
Let gms = new collection
GMSInit(gms,"ruby","pairs of earring","graduation",8,"tear-drop")
Let Gems[4] = gms
Let gms = new collection
GMSInit(gms,"pearl","necklace","wedding",20,"cultured")
Let Gems[5] = gms
Let gms = new collection
For i = 1 to 5
            SayFormattedMessage(ot_line,
                        FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            )
EndFor
For i = 1 to 5
                        Let sMessage = FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            TypeString (sMessage+cscBufferNewLine)
EndFor
EndFunction

Keyword: Include

Description

The Include keyword directs the compiler to include the content of another file into a script source file during compilation. Mostly, Include statements ensure that .jsh header or .jsm message files are compiled along with the code of the script source file where you add the statements. But you can add other types of code files as Include statements as well.

An Include statement must be followed by a filename and its extension enclosed in quotes.

 

Syntax

 Include "filename"
 

Remarks

Constants and global variables you declare specifically in a script source file are accessible only to that file when it is compiled. But if you declare them in header files, constants and global variables can be accessible to multiple script source files by adding Include statements to those files.

As with header files, employing Include statements to add message files in multiple script source files offers a distinct advantage. Message files usually contain localizable string constants. Such message constants may be in the form of simple string constants, or they may be formatted messages with optional replaceable parameters that take on values when the scripts run.

Consequently, you can use message files to declare and store localizable messages JAWS processes for speech or for string comparison. then a localizer only needs to modify a .jsm message file. When you add an Include statement in your script source file for that message file, any localized messages simply work as expected at run-time because they have been processed when the script binary file was compiled.

All constants and messages in a script source file must have unique names. If the compiler finds a constant or message with a name that has already been used, the compiler generates a compiler error message that it has found a duplicate constant, and then exits without compiling. So take care not to add duplicate constant definitions in header or message files whose filenames you plan to add as Include statements in your script source files.

Keyword: Use

Description

The Use keyword directs the compiler to link code from one script binary (.jsb) file to another during compilation of the script source file where the statement is added. In other words, when the scripts run, all the code in the binary file processed by the compiler is from both the script source file and from the script binary file linked to that script source file by the Use statement.

A Use keyword must be followed by a binary script file name and its extension enclosed in quotes.

Syntax

 Use "filename"

Filename is the name of the script binary file loaded at run-time along with the script binary file being generated during compilation of the script source file where the Use statement is added.

Remarks

The binary file specified in the Use statement need not exist at the time the scripts are compiled, but it must exist at the time that the scripts run. If the binary file does not exist at runtime, JAWS displays an error message that the file could not be loaded.

The compiler loads the script and function definitions in the script documentation file associated with the script binary file specified in the Use statement, and refers to these definitions during compilation when performing type and parameter checking.

Linking a script binary file more than once may cause problems at run-time. If your script set requires a script binary file at runtime, and if the compiler needs access to the function definitions in its associated script documentation file when compiling multiple source files, employ the Import statement to direct the compiler to access the script documentation file instead of linking the script binary file more than once with the use statement.

Since JAWS 14, the Use statement grants the ability to overwrite selective scripts and/or functions in script files distributed with the product's release. If the Use statement specifies a script binary file by the same name as the binary file name of the current file, JAWS links the script binary file from the shared settings folder. Doing so means that a script binary file in the user settings folder may contain selected scripts and functions that are actually overwritten versions of the ones in the script binary file in the shared settings folder.

Since JAWS 18, JAWS offers the ability to migrate script sets from JAWS 17 and later with caution. If a script binary in the JAWS 17 User\Settings\(Language) folder links to the one in shared via the Use statement, then it is considered to be a valid script set; it is available for migrating forward. This is because, apart from the functionality you may add/ or override in the script set, the rest of the shared functionality is still active. Consequently, if a JAWS 18 or later shared script binary has new functionality, it is active and valid with the old user script binary because it links to it. If any new functionality in JAWS 18 or later were not to link, that new functionality would be lost by migrating the older script set, leading to unpredictable behavior.

Keyword: Import

Description

The Import keyword directs the compiler to refer to the script and/or function definitions in a script documentation (.jsd) file during compilation.

An Import keyword must be followed by a script definition filename and extension enclosed in quotes.

Syntax

 Import "filename"

Filename is the name of a script documentation file containing script and/or function definitions to be accessed by the compiler as the script source file is being compiled.

Remarks

The compiler loads the script and function definitions in the script documentation file specified in the Import statement, and refers to these definitions during compilation when performing type and parameter checking.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to the function definitions in the script documentation file when compiling more than one script source file, employ the Import statement to direct the compiler to access the script documentation definitions instead of linking the script binary file more than once with the Use statement.

Keyword: Prototype

Description

The Prototype keyword directs the compiler to refer to a specific function definition from a script documentation (.jsd) file during compilation.

A Prototype keyword must be followed by a function definition, including its return type, and the parameters the function expects.

Syntax

 Prototype "function type" "the keyword, Function" "function name" ("parameter type" "parameter name", ...)
 

Function type is the return type of the function being defined (e.g., Int for an Integer function, String for a String function, etc.)

The keyword, "Function", must follow the function return type.

Function name is the name of the function being defined.

The parameters for the function being defined must be enclosed in parentheses.

Each parameter type and its name must be defined, with each one separated by commas except for the last one.)

Code Sample

 Prototype String Function SpeakNames (String sMyName, Int iMyAccountNumber)
 

Remarks

Each Prototype statement must precede any call to that function in the current script source file. The compiler loads the function definition in the script source file specified by the Prototype statement, and refers to that function definition during compilation when performing type and parameter checking.

Unlike some programming languages, the Freedom Scientific Scripting language requires that variable parameter types be defined as well as their names when a function definition is defined with the Prototype statement.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to one or just to a few function definitions in a script documentation file, employ the Prototype statement to direct the compiler to access just the needed function definition(s) instead of directing it to access the entire script documentation definitions file through the Import statement.

Keyword: ;#Pragma UsePoFile

Description

You may have customized scripts prior to JAWS 17 that you wish to add to the current version of JAWS and/or that you need to customize further in JAWS 17 or later. To do this, you need to use a special ";#Pragma" comment in your script source file.

Note: The comment should not be inside a specific script or function.

A scripting language pragma is a specially formatted comment that begins with ";#pragma." The pragma comment introduced in JAWS 17 is usePoFile. This comment may be used to specialize whether or not insPushLocalizedString instructions are inserted by the compiler. The supported values are as follows:

·         0, false, no, off: Do not insert the localization instructions.<

·         1, true, yes, on: Insert the localization instructions. This is the default if the usePOFile pragma is not used.

 

Thus, when the following line is found in the script source .jss file, the script compiler will not insert the localization instructions, and therefore the compiled script binary .jsb file will be backwards-compatible.

;#pragma usePoFile 0 ; Do not use localization instructions.

 

On the other hand, when you use the following comment, you ensure that JAWS 17 localization instructions are honored.

;#pragma usePoFile 1 ; Use localization instructions.

 

To be clear, the only time you need to use this special comment is when you need scripts to be backwards-compatible and also you need another set to honor JAWS 17 localization instructions. If all you need are scripts for JAWS 17 and later, you can just compile in the usual way without the need for the ;#Pragma comment at all.

Keywords: ScriptFileVersion and ScriptFile

Description

The ScriptFileVersion and ScriptFile statements direct the compiler to lock the version of the script source file to a specific version of the product.

Syntax

ScriptFileVersion Number
 Number is the only version of JAWS where the scripts should run.

ScriptFile "filename"
 Filename is the script source and associated binary files that should run exclusively in the specific version of JAWS referred to by the number in the ScriptFileVersion statement.

The following example statements ensure that the only default.jss and its associated default.jsb that run in JAWS 2020 are only those files that contain these statements. If you replaced these files with another default.jss and default.jsb - say from a prior version of JAWS, those files wil not work in JAWS 2020.

ScriptFileVersion 2020
ScriptFile "Freedom Scientific Default Script"

Remarks

Do not employ either of the directivs referred to above unless you are very certain that the script set should be run only in that version of JAWS.

Key Map Files

Key Map (.jkm) files contain a list of keystrokes assigned to JAWS scripts. Below are a listing of the major sections that you may include in a key map file with a brief explanation of the types of entries each section may contain. Not every key map file need contain all the sections discussed below. But all key map sections must refer to a particular section in order that key map entries be honored.

New sections may be added to a key map file such as the default.jkm file that ship with JAWS when new types of functionality and features are included. So the below discussion may not include all the sections that are currently in the JAWS version you are using. The list of sections described here is a comprehensive, not all-inclusive, list.

If you need to disable a key manually from a key map file, you must delete everything after the equals sign (=) on the line where the key is defined. This is true regardless of what section contains the entry where the key is defined. Always save such a modified file in your User\Settings\(language) folder.

Keyboard Layouts

A keyboard layout is a set of keystroke assignments designed to provide the best fit for the design of a hardware keyboard. They include:

·         Desktop (default)

·         Laptop

·         Classic Laptop

·         Kinesis

·         MAGic keyboard

You may switch to a keyboard layout other than the default Desktop layout through the JAWS user interface. Find the "Use Keyboard Layout" combo box in the "Basics" dialog under the "Options" menu of the JAWS main window.

Each keyboard layout has a corresponding section in the key map file. In addition, the "common keys" section contains entries used by all the keyboard layouts. You should add most new keystroke entries to this section.

Braille Keys

Many common Braille displays have sections in the Default.JKM file. Section names refer to Braille display short names, which are noted for each installed Braille display in JFW.INI.

Braille displays often have keys that must be assigned to JAWS scripts. Entries for Braille displays must be in the form of the word, "Braille" followed typically by the word "Dots", followed by a dot pattern for that display's unique keystroke assignments. However, where a dot pattern is not needed or is only part of the key assignment, you may use other keywords. These include words like, "Wheel", "Shift1"/"Shift2", "Advance1"/"Advance2", and so on. It depends on the keys that exist for that particular display.

Some examples of entries for the Freedom Scientific line of Focus® Braille displays include:

·         Braille Dot45 Chord=Tab

·         Braille Dots 1 2 5 6 Chord=TouchCursor

·         Braille Dots 1 2 4 5 6 Chord=SayAll

·         Braille Advance2=BraillePanRight

As mentioned above, each entry for a Braille keystroke assignment must begin with the word "Braille". The exact names of the Braille function keys vary from manufacturer to manufacturer. For reference, when a key is pressed on a Braille display while Keyboard Help is enabled, the JAWS keyboard help announces the key name and what the key does on the Braille display just as it announces the key names on a standard keyboard.

Virtual Keys

Use the virtual keys section of a key map file to specify those keyboard commands available only when the JAWS Virtual cursor is active. For more information on working with virtual cursors and virtual environments in general, see Implementing a Virtual Viewer Window.

Quick Navigation Keys

Typically, the keystrokes for JAWS commands assigned to scripts consist of a modifier key like the INSERT key plus an alphanumeric key or a navigation key like UpArrow. However, when assigning keystrokes to scripts for navigating a virtual window where alphanumeric characters have no native functionality, you may simply assign single keystrokes (referred to as "Quick keys") to JAWS commands mnemonically. An HTML window is an example of a window that JAWS usually virtualizes.

Place quick key assignments in the "Quick Navigation Keys" section of a key map file. Note that Quick keys are disabled when JAWS enters forms mode.

Quick Navigation Keys Manager Data

Use this section to populate the list view in the JAWS user interface for the Quick Navigation Keys Manager. The format of each item must be as follows without the quotation marks used here for readability:
 "Name of forward movement script"|"Name of backwards movement script"="Text to be displayed in the column 0 of the list view"

Note: The "Text to be displayed in column 0 of the list view" is localizable.

SayAll Keys

Keyboard commands placed in the "SayAll Keys" section of a key map file function while JAWS is speaking as a result of a SayAll command. Keystrokes specified in this section override standard keystrokes while JAWS is reading. Examples include the right and left arrow keys to fast forward and rewind through text as well as the PageUp and PageDown keys to decrease and increase speech rate.

The JAWS Key

The JAWS key serves as a movable modifier key for the JAWS commands. Like other modifier keys, you must use this key in combination with other keys. To include a JAWS modifier key, add the word "JAWSKey" to any key map entry. Set the JAWSKey to the Insert, CapsLock, or ScrollLock key in the JAWS user interface. Use the Settings Center option called "Keyboard" for this purpose.

Touch and Object Navigation

Since JAWS 15, the default.jkm file contains sections specifically for the Windows 8 and above Touch and Object Navigation features. Unlike other sections whose entries are typically a keystroke combination or sequence, or a Braille dot pattern, entries in the Touch section of a key map file are written as a number of fingers plus a gesture that JAWS supports. For example,
 TwoFingers+FlickDown=TouchSayAll.
 For more information on working with Touch and Object Navigation scripts and functions, see the summary and category book in the Functions book of the Reference Guide called Touch Navigation.

Key Names

This section has entries that show the names used to designate keys. The JAWS default.jkm file has an extensive list of entries in this section. Key names are not case-sensitive. They include the Insert, CapsLock, ScrollLock, and NumPad keys, for example. For a complete current listing, see the JAWS default.jkm file.

Modifiers

This section in the default.jkm file contains the entries that define the modifier keys JAWS may use in conjunction with other keys. Modifier keys include the Control and Alt keys, for example.

Creating custom key map overlays

Since JAWS 15, you can define your own key map section and load or unload it using script calls to the functions, LoadKeymapSection and UnloadKeymapSection. If a key map is loaded by calling LoadKeyMapSection, the key map remains loaded until it is unloaded by calling UnloadKeymapSection, or until the configuration changes - whichever happens first. The name of a key map to load must match a section in the .jkm file, excluding the trailing portion of the section name that specifies the section as a key map. For example, LoadKeyMapSection ("Custom") loads the key map section called "[Custom Keys]" in the .jkm file.

Hooks

You may utilize hooks in your scripts. An example of a hook you may use often without realizing that it is a hook occurs whenever you instruct JAWS to spell each word or pronounce each character phonetically as you navigate by word or character until you press a different key.

Whenever you add a hook, you must also remove it. Otherwise, JAWS cannot determine when to remove the hook.

For a complete list of hook types, see the HJConst.JSH header file that ships with JAWS.

Using Default Hooks

Although you may certainly create your own, you may use any of the default hook functions in your scripts. Some of the hook functions include:

·         KeyboardHelpHook

·         PhoneticSpellHook

·         SpellWordHook

·         CharacterValueHook

A Hook function returns an integer value of TRUE for the hook function if the script is allowed to execute, or it returns an integer value of FALSE for the hook function if the script is not allowed to execute.

AddHook

Description

This function installs a hook function. When a hook of type script is in place, it is called right before every script is run, and it is passed the name of the script that activates the hook. If the script is attached to a frame, the frame name is also passed to the hook function.

Syntax

AddHook (HookType, FunctionName)

·         HookType is an integer value representing The type of hook to be installed. For example, use HK_SCRIPT for a script type hook, or HK_EVENT_TRACE for an event trace hook.

·         FunctionName is a string of characters enclosed in quotation marks or a variable containing the name of a function to be installed as a hook.

RemoveHook

 

Description

This function removes a hook function put in place by AddHook.

Syntax

RemoveHook (HookType, FunctionName)

·         HookType is an integer value representing the type of hook to be removed. You must use the same hook type that you used in the AddHook for this parameter.

·         FunctionName is a string enclosed in quotation marks or a variable containing the name of the function to be removed as a hook.

Code Sample

The below code sample assigns the two nonsense scripts to the left and right arrow keys. If the left or right arrow keys are pressed two or more times quickly, the character under the cursor is announced, followed by the word, "hello". Pressing any other key removes the nonsense hook. the nonsense hook is performed by the user-defined nonsense function called "MyHook".

Int Function MyHook (String ScriptName)
If ScriptName == "MyHookTestForward" then
            SayMessage (ot_message,"hello")
            NextCharacter()
            SayCharacter()
            Return False
EndIf
If ScriptName == "MyHookTestBackward" then
            SayMessage (ot_message,"hello")
            PriorCharacter()
            SayCharacter()
            Return False
EndIf
RemoveHook (HK_SCRIPT, "MyHook")
Return TRUE
EndFunction
Script MyHookTestForward ()
If IsSameScript () >= 2
            AddHook (hk_Script,"MyHook")
            Return
EndIf
PerformScript SayNextCharacter()
EndScript
Script MyHookTestBackward ()
If IsSameScript () >= 2
            AddHook (hk_Script,"MyHook")
            Return
EndIf
PerformScript SayPriorCharacter ()
EndScript

Key Layers

A key layer makes it possible to expand the number of keys you may assign to run scripts. It is a mechanism that lets you assign an initial key to activate a group of mapped key assignments. The keys in the layer do not take on the behavior for the layer until the user activates the layer by pressing the initial key in the sequence.

In JAWS, you may choose whether to set assigned keys in the layer to keep the layer active. So if you set keys in a layer not to keep the layer active, it means that the entire key sequence must be used for each key in the layer to perform the script assigned to the keys in the layer. On the other hand, if you set keys in the layer to keep the layer active, it means that the layer remains active after the first key in the layer is used until one of two things occur:

·         a key specifically set to deactivate the layer is pressed.

·         a key not assigned to anything in the layer is pressed.

As long as a key layer is active, only the final key in the sequence need be pressed in order to run the script assigned to it.

A key layer may consist of keys set to keep the layer active, keys not set to keep the layer active, or a combination of both. And, a key layer may contain keys set to activate an additional nested layer. If you set a key in a nested layer not to keep the key layer active, all layers are deactivated after the key is pressed. All layers are also deactivated if a key is pressed that is not assigned in the nested layer.

You create key layers by using a special syntax in the JKM file when assigning a key to a script, and you must use a text editor like Script Manager to edit the JKM file manually.

Syntax

 

InitialKey&SecondaryKey=ScriptToRun
InitialKey&SecondaryKey*=ScriptToRun
InitialKey&SecondaryKey&TertiaryKey=ScriptToRun
InitialKey&SecondaryKey&TertiaryKey*=ScriptToRun

 

InitialKey is the key or key combination assignment to activate the key layer. It is the first key in the sequence to be pressed.

SecondaryKey is the key or key combination assignment inside the layer. It is the second key in the sequence to be pressed.

TertiaryKey is the key or key combination assignment inside a nested layer. It is the third key in the sequence to be pressed. The second key activated the nested layer inside the first layer.

ScriptToRun is the name of the script assigned to the entire key sequence.

Remarks

Use the ampersand to separate key assignments and create the layer. The key mapping preceding the first ampersand is the initial key that activates the layer. The key mapping following the ampersand is the key inside the layer. Use a third or fourth ampersand to create a nested layer. The nesting limit is four.

Use the asterisk to set the initial key to keep the layer active. If you use the asterisk, it must be the final character in the key mapping.

The KeyMapChangedEvent function fires for each key pressed. You can use this event to code key layer behavior, including playing a sound when a layer is deactivated. For more details on working with events, see Events.

Code Sample

In the below code sample, we first show two key assignments for a nonsense set of scripts that simply announce that they are layered key sequences. In other words, you cannot activate either script other than by the layered sequence. It is assumed that Notepad is the application in use.

The Notepad file shows the following two key assignments:

[Desktop Keys]
Control+j&N&1*=MyLayerTest1
Control+j&N&2*=MyLayerTest2

The below code shows an overwritten KeyMapChangedEvent function that speaks the statement when the first key that starts the layer is followed by the correct test layer key. Then the two nonsense scripts show simply the code that speaks what keys have been pressed in the sequences.

So to run this test code, you first have to press Ctrl+j. When you follow this key by the letter n, KeyMapChangedEvent speaks the text that it is waiting for a layer key to be pressed. As long as you press the letter "n", you may then press either 1 or 2 to cause the scripts in the layer to run. You may continue to press the numbers 1 and 2 repeatedly because the key assignments for this layer test have the asterisk at the end of each assignment. If however you press any key other than a 1 or a 2, the layer exits and you return to normal functionality.

Const
            ks_MyTestLayerKey = "Control",
            KeyLayer_myTest = "N"
Messages
@msgWaitingForLayerKey
Please press a layer key.
@@
@msgLayerTestKey
My layer key name is %1 followed by %2, and my current key name is %3.
@@
EndMessages
Void Function KeymapChangedEvent (int iKeyCode, string sKeyName, int iKeyStatus)
If iKeyStatus == KeySequencePending then
            If StringCompare (sKeyName,KeyLayer_myTest) == 0
                        SayMessage(ot_help,msgWaitingForLayerKey)
            EndIf
EndIf
KeymapChangedEvent(iKeyCode, sKeyName, iKeyStatus)
EndFunction
Script MyLayerTest1 ()
SayFormattedMessage (ot_JAWS_message,
            FormatString (msgLayerTestKey, ks_MyTestLayerKey,KeyLayer_MyTest,GetCurrentScriptKeyName()))
EndScript
Script MyLayerTest2 ()
SayFormattedMessage (ot_JAWS_message,
            FormatString (msgLayerTestKey, ks_MyTestLayerKey,KeyLayer_MyTest,GetCurrentScriptKeyName()))
EndScript

Events

Microsoft Windows is constantly processing events. There are many types, not all of which are necessary for screen readers to utilize. But without the ability to identify which events are running and what their output is, screen readers could not function at all.

The Freedom Scientific Scripting language supports many event functions. In other words, JAWS must be able to tap into what events are doing in order to decide whether to pass or suppress information to synthesizers and Braille displays.

Often, there are timing issues to consider when working with event functions. For example, there may be timing issues when windows are created and destroyed as applications gain and lose focus or open and close (focus change events). there may be timing issues when popup information interrupts while JAWS is speaking and displaying something (new text event).

In addition, JAWS may suppress an event from firing at all unless a setting is enabled. By default, there are many events whose settings appear as disabled in the JAWS Settings Center user interface. Notifying you about mouse cursor shape changes is one example of such an event. If you enable any setting associated with an event, JAWS detects the firing of the event by processing the default and/or application-specific script configuration (.jcf) file. When the event is detected, the related event functions in the associated script binary files fire and determine what to speak and display in Braille.

The technical discussion of how the Windows operating system processes events is beyond the scope of the Freedom Scientific Developer Network. But you may find complete information on working with Windows events at the Microsoft Developer Network for Microsoft Windows Events.

For diagnostic purposes only, you may use an event trace hook type when adding and removing a hook. When a hook of type event trace is in place, it is called before every script event is run. An event trace hook receives as parameters The path and name of the script binary (.jsb) file that runs the event, the name of the event that runs, and any parameters received by that event. But an event trace hook does not prevent script events from running.

When overriding default behavior, it is best to overwrite the most specific function to the task. If a function has helper functions, and if the task you want to handle is best handled by a helper function, then overwrite the helper function. Doing so is the best way to ensure robust script behavior, and make it less likely that any future changes to default scripts will have a negative impact on your scripts.

The Scripting language utilizes many event functions in the default script source file (.jss) as well as in many other script source files. The categories of event functions and their helper event functions include:

Application Info Events

Clipboard Events

Connection Events

Cursors Events

Cursors Event Helpers

Dialogs Events

Help Events

HTML Events

HTML Event Helpers

Keyboard Events

Keyboard Event Helpers

Menus Events

Menus Event Helpers

Mouse Events

Mouse Speech Events

Object Model And MSAA Events

Object Model and MSAA Event Helpers

Optical Character Recognition Events

SayAll Events

Screen Text Events

Screen Text Event Helpers

Scripts Events

Selection Events

Selection Event Helpers

Settings Events

Window Events

Window Event Helpers

Implementing a Virtual Viewer Window

JAWS offers a unique method for viewing certain types of documents and for displaying certain types of information on the screen. A "virtual document" is a simplified and logically displayed, navigable representation of a complex document which itself may not be directly navigable. JAWS automatically virtualizes the user's experience in the supported browsers: Google Chrome, Edge Chromium, Firefox, and Internet Explorer, and applications such as Adobe Acrobat Reader, and Microsoft Outlook read-only messages. Braille tracks what JAWS announces as you navigate through a virtualized message or document, Web page or HTML help window. Since UIA support is ever more robust, there are situations where you can have one browser window automatically virtualized and another not. An example where not virtualizing a browser window works best is the Google web-based EMail application. and, in some cases, JAWS provides a mixture of virtualized and un-virtualized options within the same browser application - for example, Google Docs.

The Virtual Viewer Window

The Freedom Scientific Scripting language lets you create virtual viewer windows using scripts and built-in functions. The virtual viewer is also referred to as the user buffer. And numerous functions and constant definitions refer to the "user buffer".

The virtual viewer window (user buffer) displays text and other elements reformatted so you may peruse the content without affecting the current application. For example, JAWS utilizes the virtual viewer to display on demand hotkey help, general Windows help, screen-sensitive help, and more. Once the virtual viewer window has the focus, you may examine its content by using any standard reading commands and with SayAll.

Typically, you may dismiss a virtual viewer window by pressing ESCAPE or ALT+F4. And if it contains links to non-virtualized environments, you may dismiss a virtual viewer window by pressing ENTER on those links.

 When JAWS displays information in the virtual viewer, the virtual cursor is active. As mentioned above, you can use normal navigation keystrokes to read all the text in the virtual viewer window. But you may also select any part of that text and copy it to the clipboard.

 

By default, when a script or function generates text to be displayed in the user buffer, that text is displayed in the virtual viewer as black on a white background, has a font size of 12 and a font type of Arial. The text displayed in the virtual viewer is identical to text found in any word processor or text editor. But you may control how the text is displayed, and even whether it is visually displayed at all, depending on what functions you use to place text into the virtual viewer, and whether certain JAWS options are enabled.

At Times, you may prefer virtualized text to be invisible in order not to distract from what is visually on screen. If the option to show virtual viewer on screen is turned off, the virtual viewer does not appear visually on screen; however, the virtual viewer does appear to the speech and Braille user as if it were actually on the screen. Examples of this occur in Microsoft Excel and in Microsoft PowerPoint slide shows.

The Results Viewer

Since JAWS 11.0, JAWS offers an application called the Results viewer, which is an extension of the virtual viewer concept. But a Results viewer window is actually a separate application that runs as part of the extensive JAWS features. A virtual viewer window typically exists as a direct user request for information specifically from the current application. Screen-sensitive help is an example.

Some differences between the virtual viewer and the Results Viewer application are that the virtual viewer window closes when it looses focus. The Results Viewer application remains open until you close it, which means that it may remain open when focus is switched away from it to another application. You may use the mouse to click links in the Results Viewer but not in the virtual viewer. And you can have only one instance of a Results Viewer window at a time.

The Results Viewer is an application that you invoke to gather information from the Internet or from specific applications. JAWS populates a Results Viewer window with the content gathered for you to navigate, copy and paste, etc. Information shown when you invoke the Research-It feature is an example of a Results Viewer window, and it typically displays HTML elements - e.g., links. Speech History is another, but it has no HTML, just text.

So again, the Results Viewer can display HTML; whereas, the Virtual Viewer cannot. Thus, the Results Viewer can display headings, links, tables, etc. You must enter it as HTML, programmatically or statically. JAWS does not include HTML functions. If you include HTML tags when sending text to the Results Viewer, the Results Viewer application interprets the whole string as HTML. In summary: you must be familiar with HTML coding practices if you wish to generate complex content with HTML elements to display in a Results Viewer window.

Displaying Text in a Virtual Viewer or Results Viewer Window

For all virtual viewer code to work properly, your script source file must contain at least the following three Include statements:
 

Include "hjconst.jsh"
Include "hjglobal.jsh"
Include "common.jsm"

 

Checking the Virtual Viewer Status

Before you display text in the virtual viewer, ensure that the virtual viewer is not already running through another script or function. If the virtual viewer is already active, you should deactivate it. Deactivating the virtual viewer before you display new information in it prevents the text from running together. To do this, you should either:

Place the function, EnsureNoUserBufferActive(), before any other function calls that activate and display text in the virtual viewer.

Use built-in or default functions to test for whether the user buffer is already active and clear it if it is not.

Use the built-in function, UserBufferIsActive, to check the status of the virtual viewer. The function returns an integer value of 1 when the virtual viewer is active, and returns an integer value of 0 when the viewer is not active. When the virtual viewer is active, you use the built-in function, UserBufferDeactivate, to close the virtual viewer. This function closes the virtual viewer just as if you had pressed ESCAPE from the keyboard.

As with the call to EnsureNoUserBufferActive, always place both the UserBufferIsActive and the UserBufferDeactivate functions within a conditional statement before calling any function that activates the virtual viewer. And again, unless you really want to append to already existing text in the user buffer, make sure to clear the user buffer so that the virtual viewer displays only the text you direct it to display.

Code Samples

In below code samples, the first two are equivalent but the third one is not. the first two clear the user buffer so that you may populate the virtual viewer with new content. The third code sample lets you append to existing content in the user buffer.

;Checks for whether the user buffer is active and if so, deactivates and clears its content.
If UserBufferIsActive () Then
            UserBufferDeactivate () ; close the virtual viewer
            UserBufferClear ()
EndIf
;By default, checks for and clears the user buffer if it is active. If the optional parameter passed to this function is set to TRUE, the buffer content is retained.
EnsureNoUserBufferActive () ; Closes the virtual viewer and clears its buffer content if the viewer is already active.
; Allows for appending to the user buffer that already exists in the virtual viewer
EnsureNoUserBufferActive (TRUE) ; Closes the virtual viewer but does not clear its buffer content.

Checking the Active Cursor

Checking if the virtual cursor is active is different from determining whether the user buffer is active. The Returns are the same in that:

·         Returns an integer value of TRUE if the Virtual PC cursor is enabled, or if the user virtual buffer is active.

·         Returns an integer value of FALSE if the virtual PC cursor is disabled, or if the virtual user buffer is not active.

 

IsVirtualPCCursor () ; Checks to see if the Virtual PC cursor is being used to navigate within the window with focus.
UserBufferIsActive () ; Determines if the User Virtual Buffer is currently active.

Creating and Displaying the Messages

To display messages in the virtual viewer, you should store them as constants in a message (.jsm) file. Use JAWS message formatting conventions. You may format the text of messages to be displayed in the virtual viewer with spaces, hard returns, tab stops, etc. JAWS retains the format of your messages when processing them for displaying in the virtual viewer.

For messages you plan to use to speak or flash in Braille, you may create a long and a short version of the same message. But for messages you plan to display in the virtual viewer, you must test for whether to display a long or a short message because the virtual viewer functions do not take both long and short message parameters in the same function call. So although you can still create a long and a short version of the same message, you must test for whether to display one or the other before calling the function that places the text into the virtual viewer.

You can also use placeholders in messages to be displayed in the virtual viewer. Using placeholders allows for text to be added to the message at the time JAWS processes the script.

After you have created your messages and determined that the virtual viewer is not active, you are ready to display text in the virtual viewer. You can use numerous functions for this purpose. But some of the more common methods include calls to:

·         SayMessage

·         SayFormattedMessage

·         UserBufferAddText

·         UserBufferAddFormattedMessage

For the SayMessage and SayFormattedMessage functions, The first parameter is the output type that directs JAWS how to speak or display the message. Use the output type constant, OT_USER_BUFFER, in either function to direct JAWS to display your message in the virtual viewer.

The second parameter for SayMessage and SayFormattedMessage is the text of the message you wish JAWS to speak or display. Since the output type parameter passed in the current scenarios is for displaying text in the virtual viewer,this parameter can be a quoted string of text, a string variable containing the text or a message constant contained within a JAWS message (.jsm) file.

The functions that allow more parameters and thus give you more control over the text and how it is displayed in the virtual viewer allow for things like the type of font, its color, and so on. All these functions are listed in the Reference guide in the section on Virtual Viewer Functions.

Code Sample 1: Simple Virtual Viewer Functions

The below code sample checks for whether the user verbosity level is higher than beginner level. If it is, the short message is passed to the user buffer. If not, the long message is passed. This is a very simple example of how to test and control the length of the message passed to the user buffer.

If you want very specific control over the length of the message passed to the user buffer, you may need to overwrite built-in message functions or functions that pass messages to the user buffer with your own particular tests in order to determine whether a long or short message should be passed to the user buffer for displaying in the virtual viewer.

If GetJcFOption (Opt_User_Mode) >= intermediate ; user verbosity is set to intermediate or advanced for the current application.
            SayMessage (ot_user_buffer, msgHello_s)
Else
            SayMessage (ot_user_buffer, msgHello_l)
EndIf

Code Sample 2: Using SayMessage and SayFormattedMessage

The below code sample uses calls to both SayMessage and SayFormattedMessage functions to display text in the user buffer, passing it a message that is formatted with a string that may change depending on conditions you determine.

If the key assigned to the script is pressed twice quickly, then several messages are passed to the user buffer to be displayed in the virtual viewr, including the very commonly displayed message, "Press Esc to close this message". That message is found in the common.jsm message file that ships with JAWS and so you need an include statement for "common.jsm" in your script source file, as shown here.

Also, notice that the test message to be displayed in the virtual viewr has an extra blank line in the message definition. Any information you place into a message constant using the Messages ... EndMessages format allows you to include formatting: spaces, tabs, hard returns, etc., as mentioned above. Alternatively, you may add the constant, cscBufferNewLine, to force a blank line in the virtual viewer.

Finally, the script is written in such a way that if you press the key assigned to the script just once after the virtual viewer is already displaying the test message, nothing happens.

Messages
@msgTestMessage
Hi. I am a test message.
@@
@msgMyUserBufferTestMessage
I am %1.
@@
@msgNotVirtual
not %1
@@
EndMessages
Script MyUserBufferTest ()
If IsSameScript ()
            EnsureNoUserBufferActive ()
            SayMessage (ot_user_buffer, msgTestMessage)
            SayFormattedMessage (ot_user_buffer,
                        FormatString (msgMyUserBufferTestMessage, cmsgVirtualViewer))
            SayMessage (ot_user_buffer, cmsgBuffexit)
            Return
EndIf
If Not UserBufferIsActive ()
            SayFormattedMessage (ot_JAWS_message,
                        FormatString (msgNotVirtual, cmsgVirtualViewer))
EndIf
EndScript

Code Sample 3: Using Functions that Control How Text is Displayed

The below code sample shows how you might take advantage of the UserBufferAddText function to populate the virtual viewer window with very specific control of the way the text is displayed. In the code sample where the optional parameters are used, note that the parameters passed to the function are from constants found in the common.jsm file that ships with JAWS. Also, note that when optional parameters are passed, all of them must be passed up to the point where you no longer need to make a change from the default parameters.

You may mix calls to SayMessage, SayFormattedMessage, and UserBufferAddText. But for purposes of clarity, the two sample scripts below call the function, UserBufferAddText.

The first example shows very simple calls to the function but passes the required string parameter in different ways.

Messages
@msgMyTest
Hello, I am a test.
@@
@msgMyVirtualViewer
I am a message in the virtual viewer.
@@
EndMessages
String Function MyUserBufferText ()
Return msgMyVirtualViewer
EndFunction
Script MyUserBufferTest ()
; Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
;The below three function calls populate the text to be displayed in the virtual viewer when the script is run.
; You may call SayMessage and SayFormattedMessage instead of UserBufferAddText; but notice the extra control you have by utilizing this function call.
; Pass a simple message constant as the first parameter, which is required. But pass nothing else as aalll other parameters are optional.
UserBufferAddText (msgMyTest)
; Pass a function that returns a string as the first parameter, which is required. but pass nothing else as all other parameters are optional.
UserBufferAddText (MyUserBufferText ())
; Pass some text as the first parameter, which is required.
; Then for the optional parameters, pass nothing for the next two parameters, the font name as Aerial, size as 12, no attributes, and foreground color of black and background color of white.
; This level of specificity dictates that JAWS should display the text of the first parameter in the virtual viewer with these conditions applied.
UserBufferAddText (MyUserBufferText, cScNull, cScNull, cFont_Aerial, 12, 0, rgbStringToColor(cColor_BLACK), rgbStringToColor (cColor_White))
; Pass the message constant from common.jsm for closing the virtual viewer.
; Pass a blank line.
UserBufferAddText (cscBufferNewLine)
UserBufferAddText (cmsgBuffExit)
; Now activate the user buffer to receive the user buffer text just populated.
If ! UserBufferIsActive ()
            UserBufferActivate ()
EndIf
; Ensure that the virtual cursor begins at the top of the virtual viewer window.
JAWSTopOfFile ()
; Say the first line of text.
SayLine ()
EndScript

In the next example, we call UserBufferAddText again but passing it many of the optional parameters with different information from the defaults that the function expects. This shows how to control the way text is displayed in the virtual viewer. We also call RedirectToUserBuffer as the last function call so that a SayAll from the top of the virtual viewer window begins when the script is run.

Const
            iAccount1 = 12345,
            iAccount2 = 54321,
            sMary = "Mary",
            sJohn = "John"
Messages
@msgMyAccountTitle
Account Numbers by First Name
@@
@msgMyAccount
I am %1 and my account is %2.
@@
@msgUnknownAccount
I don't have a name for %1 account.
@@
EndMessages
String Function MyFunctionTest (Int iNum)
If iNum == iAccount1
            Return FormatString (msgMyAccount, sMary, IntToString (iNum))
ElIf iNum == iAccount2
            Return FormatString (msgMyAccount, sJohn, IntToString (iNum))
Else
            Return FormatString (msgUnknownAccount, IntToString (iNum))
EndIf
EndFunction
Script MyAccountUserBufferTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
; The below function calls populate the text to be displayed in the virtual viewer when the script is run.
; Pass the title to be displayed as the first line in the virtual viewer..
UserBufferAddText (msgMyAccountTitle)
; Pass a function name for a function that returns a string, then nothing for the next two parameters, then the font type, size, and foreground and backgbround colors to be displayed in the virtual viewer.
; The function itself passes a hard return by default. but for readability in the virtual viewer, add an extra blank line to the first parameter of each call.
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount1), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount2), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (0), cScNull, cScNull, cFont_Times, 12, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
; Pass a blank line along with the message constant from common.jsm for closing the virtual viewer, and cause a SayAll to begin from the top when the script is run.
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
EndScript

Displaying Keystrokes as Links

In addition to text, you can create keystroke links in the virtual viewer. To do this, you add the KeyFor function within the body of any individual message stored in a JAWS message file. The KeyFor function requires the name of a script as its only parameter.

When JAWS displays the message containing the KeyFor function in the virtual viewer, JAWS retrieves the keystroke for the script named passed as a parameter to the function. The keystroke is displayed as a link that you can activate by pressing ENTER on the line containing the keystroke. The keystroke is displayed in underlined, blue text on the same white background as other text contained within the virtual viewer.

The syntax for using the KeyFor function in a message is:
 %KeyFor (ScriptName)
 
 The percent sign preceding the function name acts as a placeholder for the keystroke within the message. The script name does not include the parentheses and can be located in either the default or an application-specific script source file.

Code Sample: Creating a Link to be Displayed in the Virtual Viewr

The below code sample shows a very simple message and a link to JAWS hotkey help as you would display it in the virtual viewer.

Messages
@msgHelpMessage
Below is a link to common helpful JAWS commands.
@@
@msgKeyForFunctionTest
To see a list of general JAWS hot keys, press %KeyFor (HotKeyHelp).
@@
EndMessages
Script MyKeyForFunctionTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
EnsureNoUserBufferActive ()
;The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
;The below function calls populate the text to be displayed in the virtual viewer when the script is run.
UserBufferAddText (msgHelpMessage + CscBufferNewLine)
; The below call passes the name of the message containing the link. It must be called by the FormatString function to be processed properly.
;The next parameter is a string representing the function name, including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
; The third parameter is a string representing the name to be used in the list links dialog when it is invoked with the Virtual viewer active.
; The rest of the optional parameters are not necessary because the defaults already handle them.
UserBufferAddText (FormatString(msgKeyForFunctionTest), cFuncHotKey, cMsgHotKeysFunc)
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Checking Whether the Virtual Viewer window is Displayed Visually

By default in most applications, text displayed in the virtual viewer is visible on the screen. But there may be times when you wish to suppress the text from showing visually because it interferes with the actual visible data. An example of this is when you display a chart in Excel in the virtual viewer. You would not want the virtual viewer version of the chart to obscure the visual version of the chart.

You may turn off displaying of virtual viewer text in general through the JAWS user interface in the Settings Center dialog. But you may also handle this through your scripts and functions for special cases.

Code Sample

The below code sample checks for whether the virtual viewer is set to be displayed visually. if it is, we turn it off temporarily, show virtual viewer text, and then turn it on again. If it is not set, perhaps the user had disabled the feature. so we leave it as is.

Script ShowVirtualViewerTest ()
Var
            Int iVirtViewer,
            String sText
iVirtViewer = GetJCFOption(OPT_VIRT_VIEWER)
sText = "This text is not displayed on screen because the option to display text in the virtual viewer visually is off."
If iVirtViewer == TRUE ; Virtual viewer is visible.
            SetJCFOption (OPT_VIRT_VIEWER, 0) ; Turn it off.
EndIf
UserBufferClear ()
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
If iVirtViewer == TRUE ; Virtual viewer was on before displaying text in the virtual viewer.
            SetJCFOption (OPT_VIRT_VIEWER, iVirtViewer) ; Turn it back on.
EndIf
EndScript

Giving a Title to the Virtual Viewer Window

By default, when JAWS displays text in a virtual viewer window for something like screen-sensitive text, if the user requests the title of the window, JAWS provides a generic message, "Virtual Viewer". That message is spoken and flashed in Braille. But there may be times when you want your virtual viewer text to be displayed with a special name for the virtual viewer window in which it appears. For example, in Microsoft Excel charts, if the user requests the title of the chart being displayed in the virtual viewer, JAWS provides this information specifically instead of indicating the generic message.

In order to make your scripts and functions behave properly for this special case, you must do two things:

1.    Overwrite the default script called SayWindowTitle so that it knows under what special circumstance to indicate the window name of your special virtual viewer window.

2.    Use the special function, UserBufferActivateEx instead of the more general function, UserBufferActivate, to activate the user buffer in your script that displays the special virtual viewer window.

The UserBufferActivateEx function takes four required parameters. The first parameter is a string containing the window name for your special virtual viewer window. This parameter passes a window name to be used internally by your overwritten SayWindowTitle script. It is not a window name that appears at all in the text of your special virtual viewer window. The second parameter is also a string, indicating the type of window you are generating. You may leave this string blank by using the constant, cscNull, which in effect is an empty string. The third and fourth parameters are integer values representing the window type code and control ID for your special virtual viewer window. You may use 0 for each of these parameters.

Code Sample

The below code sample overwrites the default script called SayWindowTitle for the special case of your special virtual viewer window. You may restrict the conditions even further than what is shown here to ensure that only the window name for your special virtual viewer window is processed. but this code sample simply test for whether the window name of the virtual viewer is not empty.

Script SayWindowTitle ()
Var
            String sVirtWindowName
sVirtWindowName = UserBufferWindowName ()
If UserBufferIsActive ()
            If sVirtWindowName != cscNull
                        SayMessage (ot_user_requested_information, sVirtWindowName)
                        Return
            EndIf
EndIf
PerformScript SayWindowTitle ()
EndScript
Script WindowTitleVirtualViewerTest ()
Var
            String sTitle,
            String sText
sTitle = "My Virtual Viewer Window"
sText = "I am a message in this special virtual viewer window that has a name."
EnsureNoUserBufferActive ()
UserBufferActivateEx (sTitle,cscNull,0,0)
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Results Viewer Functions

Starting with JAWS 11.0, the Results Viewer application has been available for customization through your own scripts and functions. Its functions behave in a very similar manner to the functions for displaying text in the virtual viewer.

Additional Resources

For more details on working with all types of functions for the Virtual Viewer and Results Viewer, see the category books and summaries in the JAWS Functions book of the Reference Guide.

The Rule File

The rule (.rul) file contains information that populates the JAWS Research It user interface so that the Lookup Resource shows up in the list of available Lookup resources. The rule file usually contains three or four entries:

·         Friendly Name - a string of characters representing the title of the query the user sees in the JAWS Research It user interface. This required entry has a maximum length of 100 characters.

·         Description - an optional string containing a detailed description of the query. This entry has a maximum length of 500 characters. You may use it to provide any information that may help the user of the query to understand its purpose. For example, in an application that is non-standard, you might explain what the query does and what the format is for inputting data.

·         Timeout - an optional integer value for the timeout in milliseconds that the query should wait to receive a response from the target Web site. Any query using the rule set you are defining is aborted if the time exceeds the timeout you specify. The default timeout is 15000 milliseconds (15 seconds). This timeout value is assumed if no timeout value is specified. You may need to define a longer timeout value if the Web site being queried is slow, if a large amount of data is returned from the query, or if the query is complicated.

·         Version - an optional entry containing the version information for the rule set.

Code Sample

The below code sample is for a fictitious application that finds valid Freedom Scientific serial numbers.

[Details]
FriendlyName=Freedom Scientific Serial Number Lookup
Description=Enter your full name to find your Freedom Scientific Serial number. Example: Type in "Mary Smith" without the quotation marks. If your account is current, the query reports your serial number as XXXX in the virtual Results viewer. This query is only available for valid Freedom Scientific serial numbers.
Timeout=15000
Version=1.0.0

The Query File

When you use the Internet to search for a term on a Website that accepts searches, the Website generates a page containing search results. Depending on the search engine the site utilizes, this mayh or may not be data embedded in the site's HTML or XML code. You can usually tell if the site was created dynamically and is searchable by an external tool such as Research It if the Search Results page contains the search term sought in the URL displayed on the address bar. If you want to utilize a tool like Research It to search a page of this type, the tool must supply the search term and locate and return the search results to the tool's user interface.

In some cases, a Website may change dynamically and automatically based on ongoing events without any input from you. such a site can also contain data subject to an external query. The CNN Headlines, Fox News, and BBC top news stories are some examples. For this type of site, the external query only needs to return to the Research It user interface the relevant search results without you having to provide any search terms. For this type of site, the Rule file must submit any search data necessary for the Website search to take place, parse the search results returned by the site, retrieve them, and report them to the JAWS virtual Results Viewer.

The Research It JAWS feature utilizes three programming tools to locate the specific set of relevant search results generated by your query within all the HTML or XML code that comprises the Website in order to return them to the JAWS virtual Results Viewer. They are:

·         XQuery - a programming language specifically designed to query an XML data set and to locate specific data of interest. It contains the required functions and other tools necessary to parse and navigate an XML website to locate the desired data. It requires that the website format be XML rather than HTML.

·         XQilla - an open-source implementation of XQuery that allows you to parse an HTML file as an XML file, thus making HTML websites searchable by an external tool like Research It. XQilla also contains a number of additional functions you may use in a query. Developers creating rule sets for Research It may use XQilla functions in their rule sets.

·         XPath - an XML path language that allows you to locate specific nodes on an XML page. XPath is analogous to a DOS path statement that allows you to find a particular file or file set by specifying the series of nodes (i.e., subdirectories or folders) you must traverse to get to the target. XML and HTML files are, in effect, a series of tags embedded within tags embedded within other tags, etc. Embedded somewhere within this tag structure is the data containing the search results for the query from Research It. If you view an XML file as a tree view of parent and child tags branching out from one parent tag, then your goal is to locate the branch of interest, the one containing the desired search results, and traverse that branch of parent and child tags until you reach the tag containing the exact search results desired. Thus, an XPath statement contains a path of tags as opposed to a DOS path statement that contains a path of folders.

A comprehensive book on XQuery by Priscilla Walmsley (XQuery, Sebastopol, CA: O'Reilly Media, 2007) is available at bookshare.org for Bookshare subscribers. For basic tutorials about XQuery, XPath, XML, and HTML, refer to W3Schools.com. These tutorials provide overviews, while the book covers XQuery comprehensively.

 

XQilla functions are documented at XQilla Extension Functions.

The Research It Debugger

Once you create your own Research It rule set, you can run the debugger to find out what errors it may contain and how you may correct them. Bring up the debugger by pointing to your rule set files and activating the HomeRow Utility with Insert+WindowsKey+NumpadMinus, and then pressing Insert+WindowsKey+d. The output results show pressing the Home in a virtual viewer window, not the regular Research It Results viewer, so that you can examine closely what you may need to fix. Make sure to deactivate the HomeRow Utility by toggling it off with Insert+WindowsKey+NumpadMinus.

For a complete discussion on working with Query files, find the link for "Research It: Creating Rule Sets for JAWS (Word file)" and download the file from this link located at: Creating Research It Rules for JAWS.

Keyword: Import

Description

The Import keyword directs the compiler to refer to the script and/or function definitions in a script documentation (.jsd) file during compilation.

An Import keyword must be followed by a script definition filename and extension enclosed in quotes.

Syntax

 Import "filename"

Filename is the name of a script documentation file containing script and/or function definitions to be accessed by the compiler as the script source file is being compiled.

Remarks

The compiler loads the script and function definitions in the script documentation file specified in the Import statement, and refers to these definitions during compilation when performing type and parameter checking.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to the function definitions in the script documentation file when compiling more than one script source file, employ the Import statement to direct the compiler to access the script documentation definitions instead of linking the script binary file more than once with the Use statement.

Script File Types

JAWS stores settings files in the product's root folder mostly under the settings\(language) folder. Most of the files are written in the familiar INI file format. With the exception of binary files (those with extension jsb), and with caution, you may edit all scripting settings files as follows:

·         with a text editor such as TextPad, NotePad++, or Notepad,

·         with the JAWS Script Manager,

·         or through the various "managers" provided directly by JAWS.

Whenever you plan to edit a script file that exists in the shipping version of JAWS directly through a text editor, you should back up the original files in a safe place. This ensures that you can restore files to their original state if you happen to edit a file's content in a way that causes unpredictable results.

If your script files require entries with Unicode characters, you must save them with UTF-8 formatting enabled. For more information on UTF-8 formatting, see Formatting Script Files for UTF-8.

Definitions of Extensions for Script File Types 

Following is a list of definitions for script file types by extension supported by the JAWS Scripting language. Each file type extension is followed by a brief description of how it is used.

For more information on the use of header files and on variables and constants, see
 Variables and Constants, and Non-Aggregate Variables,
 and Constants.

JBD - JAWS Braille Display

Used by the Papenmeier Braille displays. Their names generally begin with the prefix BrailleX. JAWS itself does not use these files, but they are needed by the BrailleX manager that comes with the Papenmeire displays.

JBS - JAWS Braille Structure

Structured mode settings for JAWS output to Braille displays. To make changes to these settings, choose the "Define Structured Mode..." button from the "Braille Settings" dialog in the JAWS Settings Center .

For more information on Structured Braille, see the topic called Structured Braille Functionality.

JCF - JAWS Configuration File

JAWS configuration settings for verbosity, text processing, keyboard processing, HTML options, window class reassignments, custom highlight options, etc. To make changes to .jcf files, use the Run JAWS Managers dialog, or Settings Center and Quick Settings dialogs.

You may edit .jcf files from within your script source files with functions like GetJCFOption_function and SetJCFOption respectively.

JSI - JAWS Script Initialization

Generated under certain circumstances when a change is made to Quick Settings for a specific application. the file is located in the PersonalizedSettings folder under the root folder of the JAWS user\Settings\(language) folder. the file's name is based on the application where it was generated. In other words, there is no default.jsi. But there are files like Word_MyDocument.docx.jsi. Such files are located in folders like C:\Users\MyName\Freedom Scientific\JAWS\(Vversion number)\Settings\(language)\PersonalizedSettings.

To prevent unpredictable results, it is not recommended that you edit .jsi files manually. However, it is possible and often practical to read from and write to .jsi files through script or function calls in your script source code. If you do, take care to consider the impact on the QuickSettings.his and SettingsCenter.ini files and even any .jcf files that may be associated with that .jsi file.

JDF - JAWS Dictionary File

Alternative pronunciations for words or characters that are not already pronounced correctly by the synthesizer. To edit dictionary entries in an existing .jdf file or to create a new .jdf file, use the JAWS Dictionary Manager.

You may edit .jdf files directly. Make entries one per line with the match text on the left and the replace text on the right. The match text should be the exact mispronounced word or characters, and the replace text should be a phonetically spelled representation of how the match text should be pronounced. Use the "." delimiter to begin and end each entry as well as for the left and right parts of each entry .

Note: JAWS processes Dictionary rules for all the text it reads. Therefore, be judicious in adding entries to the JAWS dictionary files in order to avoid slower responsiveness while navigating. Adding dictionary rules only for the applications where they are needed also helps to shorten processing time.

JGF - JAWS Graphics File

A list of numeric graphic specifiers paired with textual descriptions for each. When JAWS encounters a labelled graphic, it speaks the assigned text description. If a Braille textual description is also assigned for a numeric graphic specifier, JAWS displays that graphic label on any attached Braille display. To add to or edit graphics, use the Graphics Labeler (JAWSKey+g), or use the Auto-graphics labler, JAWSKey+Ctrl+g.

You can edit a graphics file manually. See how the file should be structured by examining the default.jgf file that ships with JAWS to understand how entries should be delimited and how the file sections should be managed. A .jgf file contains sections for various graphic resolutions as well as a section for symbols.

JFD - JAWS Frame Definition

Contains the definition for customized frames. the file is located in the root folder of the JAWS user\Settings(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jfd file is called Textpad.jfd.

You may utilize the JAWS user interface to create a frame with the key combinations JAWSKey+LeftBracket to set the upper left corner and JAWSKey+RightBracket to set the bottom right corner of an arbitrary rectangle on the screen. With the JAWS dialog that results from these actions, you may then enter a frame name, synopsis, and description much like you do in the Script Manager when generating new scripts and functions. You may even add a keystroke assignment so that the frame is acted upon by JAWS - for example, in response to an event or to a user pressing that keystroke combination. If you add a key assignment to a frame definition, that assignment is added to the application's .jkm file. The Synopsis and Description fields for the frame definition ensure that keyboard help for that key assignment is available to the user upon request.

You may also edit a .jfd manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JFF - JAWS Frame File

Contains all the information associated with customized frames with respect to how JAWS should act upon them. The file is located in the root folder of the JAWS user\Settings\(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jff file is called Textpad.jff.

The information contained in the file is sectioned in brackets with the name given to each frame that has been created. Following the name of the frame in brackets on separate lines are the specifics about the frame: whether it should be silent, spoken, Brailled, and upon what conditions or events, etc.

You may also edit a .jff manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JKM - JAWS Key Map

A list of keystrokes assigned to JAWS scripts. To add, remove, or change key assignments, use the Keyboard Manager, JAWSKey+8.

You may edit key map files directly. For more detailed information on working with key map files, see JAWS Key Map Files.

JSB - JAWS Script Binary

Binary files created by the JAWS compiler from JAWS Script Source (.jss or .hss) files. Such binary files are loaded each time an application receives focus by moving to the Windows foreground. JAWS uses compiled binary files because they execute more quickly than interpreted script text. Binary files may not be edited manually in any way. They are not available to a text editor.

JSD - JAWS Script Documentation

Generated by the JAWS Script Manager whenever scripts or functions are created in a script source (.jss or .hss) file. using the Script Manager. These files include very specific information about the name, synopsis, and description of each script or function in the associated source file. Optionally, they may even contain category information related to the type of script or function being documented. The synopsis and description entries for a script are used to provide JAWS Keyboard help. So be careful to create meaningful documentation for these entries.

You may create/edit a .jsd file manually. In fact, you must do so if you are creating script source files through a text editor other than the JAWS Script Manager to ensure complete and accurate documentation of your scripts and functions, and to ensure that any scripts tied to key assignments have meaningful keyboard help.

JSS - JAWS Script Source<

JAWS script source code. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format.

You may use the JAWS Script Manager to create/edit script source files. Compile source files by pressing Ctrl+s from the script Manager. Assuming that your source code compiles without errors, the .jss, a .jsd, and .jsb files of the same root name as your source file are all added to the root folder of the JAWS user\settings\(language) folder.

Alternatively, you may use a text editor like TextPad to create and edit script source code. This means that you will need to utilize command line commands or compile statements available through your text editor's user interface pointing to the JAWS compiler in order to compile that source code.

HSS - Hidden Script Source<

Hidden JAWS script source code has not been used in shipping JAWS for some time. But you may wish to keep your personal customized code private for professional reasons. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format. Again, hidden source files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But all the information that applies to exposed script source (.jss) files applies to hidden source ffiles with respect to "Include" statements, formatting for UTF-8, etc.

Another way to handle the use of hidden source files for a script set is to utilize "Use" or "Import" statements in the exposed script source (.jss) file. These statements assume that the hidden source files have compiled correctly and are available as binary (.jsb) files to be compiled along with the exposed .jss file. For more information on "Include", "Use", and "Import" statements, see Compiler Directives.

JSH - JAWS Script Header

Definitions for variables and constants to be used throughout your script source files. "Include" statements in your script source files are necessary for header files to be available at run-time and properly compiled.

HSH - Hidden Script Header

Hidden definitions for variables and constants to be used throughout your script source files. Typically, hidden header files are not exposed in the script set of your files. Hidden header files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But "Include" statements in your script source files (both .jss and .hss) are necessary for hidden header files to be available at run-time and properly compiled.

JSM - JAWS Script Message

Definitions for message constants to be used throughout your script source files. "Include" statements in your script source files are necessary for message files to be available at run-time and properly compiled.

INI Files

Numerous types of .ini files ship with JAWS. The files are located in different folders on your system, depending on their purpose. The SettingsCenter.ini file, for example, is one that should never be edited manually.

To prevent unpredictable results, it is not recommended that you edit .ini files manually. However, it is possible and often practical to read from and write to .ini files through script or function calls in your script source code.

HIS History

Used to hold history information for settings changes made through the JAWS user interface. To prevent unpredictable results, you should never edit These files manually.

QS Quick Settings

 Used to hold Quick Settings definitions. These files work in conjunction with their associated .qsm files. A .qsm file is written in XML and so has a different structure from the .jsm files that are added to script source files by "Include" statements.

 

QSM quick Settings Message

Message file specifically for Quick Settings options. These files work in conjunction with their associated .qs files. A .qsm file is written in XML and so has a different structure for message constants from the .jsm files that are added to script source files by "Include" statements. For more details on how to utilize .qsm files, see Customized Quick Settings.

SBL - Speech Symbols File

Used to look up language information for a specified synthesizer, or to load the JAWS default speech symbols file when no synthesizer symbols file exists for the synthesizer in effect. The .sbl files contain entries for symbols (mainly punctuation). JAWS processes how and even whether symbols are pronounced depending on the punctuation level in effect.

JAWS ships with many speech symbols files for supported speech synthesizers. Just as the folders containing scripts and configuration files are named with language abbreviations, the .sbl files support languages like: enu (English), deu (German), esn (Spanish). The list of synthesizers and languages JAWS supports is robust and growing, including most Western european languages with their Latin alphabets but also those with Cyrilic alphabets like Russian. Also supported are numerous Asian languagess such as: Japanese, Chinese (Cantonese and Mandarin), and right-to-left languages like Arabic and Hebrew.

You may edit an .sbl manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. An .sbl file is broken into sections, each of which lists the symbols for a particular language that synthesizer supports. For example, if you want to add an entry to the eloq.sbl (Eloquence synthesizer symbols file), you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other symbols already exist for that language section of the .sbl file.

Note: you cannot create a new language section in an .sbl file for a language that is not supported by that file's synthesizer.

Finally, if the symbol you are adding is a Unicode character, you must save the .sbl file with UTF-8 formatting enabled.

In JAWS 17, .sbl files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .sbl files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

CHR - Character Substitution

Used since JAWS 15 to process character substitutions (spelling and/or pronunciation corrections) for certain spoken behaviors in the languages supported by the speech synthesizer in effect. Each .chr file bears the name of its associated speech synthesizer (e.g., VocalizerExpressive.chr). But not all synthesizers require associated .chr files.

Unlike an .sbl file, a .chr file may contain entries that are not symbols. Entries may be alphanumeric characters as well. JAWS processes how characters are pronounced under certain circumstances regardless of the punctuation level in effect.

The .chr files that ship with JAWS since JAWS 15 are located in the JAWS root folder in the Settings\(language) folder.

In JAWS 17, .chr files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .chr files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

You may edit a .chr manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. A .chr file is broken into sections, each of which lists characters to be substituted for a particular language that synthesizer supports. For example, if you want to add an entry to the VocalizerExpressive.chr file, you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other entries already exist for that language section of the .chr file.

Within each language section, entries correspond to characters to be processed with substitutions. The key part of each entry is represented in one of two ways: the desired character entered directly, or a Unicode sequence representing the desired character (e.g., U+201C for Left Double Quotation Mark). For each entry, the value is the string to be substituted for the character. For example, the string to be substituted for a Left Double Quotation Mark could be "Left Double Quote" instead in English and whatever is appropriate in say, Spanish. But you must make each entry in the relevant language section of the file.

Note: You cannot create a new language section in a .chr file for a language that is not supported by that file's synthesizer.

The behaviors JAWS may process using .chr files occur when the user:

invokes any spelling command : word, line, to or from cursor, etc.

invokes a command to speak the current character.

navigates by character with left/right arrow keys.

types characters, and typing ecdho is set either to Characters or to Characters and Words.

Finally, you must format a .chr file as an INI-style file with UTF-8 formatting enabled.

VPF - Voice Profile

Since JAWS 16.0 and later, .vpf files have been used to support the enhanced language switching capabilities for speech synthesizers. JAWS stores the Voice Profiles .vpf files in the JAWS root folder under the settings\(VoiceProfiles) folder. The moment you make any adjustment to a voice profile, a file is created in your own User\Settings\VoiceProfiles folder with all the correct section names and entries for your customized voice profiles. Each speech synthesizer has its own voice profile file.

The sections of a Voice Profile .vpf file include:

Options - used to define profile defaults.

Context sections - formatted as three-letter language abbreviation followed by a dash, followed by a context name (e.g., [ENU-PCCursor] is for English United States PCCursor voice).

Sections for Voice Aliases - formatted as three-letter language abbreviations followed by the term, voice alias (e.g., [enu-Voice Aliases]).

Language Aliases - used In order to support language detection on the internet ISO 639/3066 language codes as well as Microsoft and other variants of these.

Voice Alias Translations - used to localize Voice Alias names (e.g., [enu-UI Voice Alias translation]).

Default Voice Aliases - used to define the default for each voice alias.

JBT - JAWS Braille Table

Used to look up Braillle symbols for the Braille format in use for the current JAWS session. This file governs how Braille symbols and what sets of symbols are displayed in Braille. For example, if the US_Unicode.jbt is in effect, all Unicode characters available in that file become possible to display in Braille as applications are run that may present such symbols. The .jbt files are located in the Freedom Scientific folder for the specific version of JAWS running in the Program Files folder of your system.

A .jbt Braille table may specify up to 7 dot pattern cells per unicode character. Make each entry for any symbol or Unicode character you are adding as a special cell dot pattern on a separate line.

You may edit a .jbt file manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. The file is broken into sections (sets of symbols), each of which lists the entries for that set (i.e., ANSI, Unicode Greek, etc. in the US-Unicode.jbt file). Make sure to add any entries at the end of the existing set of symbols for the correct set.

Finally, if the entry you are adding is a Unicode character, you must save the .jbt file with UTF-8 formatting enabled.

RUL and QRY - Rule and Query

Specifically used for the JAWS Research-It feature. For detailed information on how to customize these types of files, see Creating Research It Rules.

SBAK - Settings Backup

Since JAWS 18 and later, you have been able to create settings backup files for restoring user settings from another version of the product, or merging user settings to another system with the same version. This process is similar to the older process called Merge that allowed you to merge user settings from a prior version of JAWS to a current version. The Merge feature was removed in JAWS 17 due to a major relocation refactor. This was necessary to speed up the localization process for the growing number of languages JAWS supports. Starting with JAWS 18 and later, .sbak files provide an even more robust process for backing up and restoring user settings for whatever language you have installed.

Additional Resources

Settings Files

Reserved Files.

Calling Scripts and Functions

Braille Output Functions

A Braille Output function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Braille Output, such as the script for BrailleGrade2ExpandCurrentWord, for example. However, the focus of the present discussion is on functions related to Braille output that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Braille Output functions include:

·         BrailleAddObjectName

·         BrailleAddFocusLine

·         BrailleAddString

·         BrailleBuildStatus

·         BrailleMessage

Take time to examine some of the functions in the Braille.jss script source file that ships with JAWS to see how these functions work to maximize the real estate of a Braille display while displaying as much meaningful component information as possible.

For a complete listing of Braille Output functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the BrailleAddObjectType function is overwritten to display extra information not normally displayed for a button in a Notepad dialog. The function, along with many other similar functions, is used by the BrailleCallbackObjectIdentify function to output the structured Braille components that appear whenever JAWS should display such information in Braille.

It is assumed that the function is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply activate a dialog in the Notepad application and TAB through the various controls. Notice what happens on theBraille display when a button control gains focus.

Int Function BrailleAddObjectType ( Int nSubtype)
If ! DialogActive () ; A dialog is not active.
|| GetMenuMode () < 0 ; A menu is not active.
            Return BrailleAddObjectType (nSubtype)
EndIf
If nSubtype == wt_button
            ; Add the nonsense "hello" highlighted text to the Braille display output
            ; of the control type.
            BrailleAddString ("hello", 0, 0, attrib_highlight)
EndIf
; Ensure that the normal control type information is also displayed.
Return BrailleAddObjectType (nSubtype)
EndFunction

Additional Resources

For more details on working with Structured Braille components, see the summary in the General Scripting Concepts book called Structured Braille Functionality.

Implementing a Virtual Viewer Window

JAWS offers a unique method for viewing certain types of documents and for displaying certain types of information on the screen. A "virtual document" is a simplified and logically displayed, navigable representation of a complex document which itself may not be directly navigable. JAWS automatically virtualizes the user's experience in the supported browsers: Google Chrome, Edge Chromium, Firefox, and Internet Explorer, and applications such as Adobe Acrobat Reader, and Microsoft Outlook read-only messages. Braille tracks what JAWS announces as you navigate through a virtualized message or document, Web page or HTML help window. Since UIA support is ever more robust, there are situations where you can have one browser window automatically virtualized and another not. An example where not virtualizing a browser window works best is the Google web-based EMail application. and, in some cases, JAWS provides a mixture of virtualized and un-virtualized options within the same browser application - for example, Google Docs.

The Virtual Viewer Window

The Freedom Scientific Scripting language lets you create virtual viewer windows using scripts and built-in functions. The virtual viewer is also referred to as the user buffer. And numerous functions and constant definitions refer to the "user buffer".

The virtual viewer window (user buffer) displays text and other elements reformatted so you may peruse the content without affecting the current application. For example, JAWS utilizes the virtual viewer to display on demand hotkey help, general Windows help, screen-sensitive help, and more. Once the virtual viewer window has the focus, you may examine its content by using any standard reading commands and with SayAll.

Typically, you may dismiss a virtual viewer window by pressing ESCAPE or ALT+F4. And if it contains links to non-virtualized environments, you may dismiss a virtual viewer window by pressing ENTER on those links.

 When JAWS displays information in the virtual viewer, the virtual cursor is active. As mentioned above, you can use normal navigation keystrokes to read all the text in the virtual viewer window. But you may also select any part of that text and copy it to the clipboard.

 

By default, when a script or function generates text to be displayed in the user buffer, that text is displayed in the virtual viewer as black on a white background, has a font size of 12 and a font type of Arial. The text displayed in the virtual viewer is identical to text found in any word processor or text editor. But you may control how the text is displayed, and even whether it is visually displayed at all, depending on what functions you use to place text into the virtual viewer, and whether certain JAWS options are enabled.

At Times, you may prefer virtualized text to be invisible in order not to distract from what is visually on screen. If the option to show virtual viewer on screen is turned off, the virtual viewer does not appear visually on screen; however, the virtual viewer does appear to the speech and Braille user as if it were actually on the screen. Examples of this occur in Microsoft Excel and in Microsoft PowerPoint slide shows.

The Results Viewer

Since JAWS 11.0, JAWS offers an application called the Results viewer, which is an extension of the virtual viewer concept. But a Results viewer window is actually a separate application that runs as part of the extensive JAWS features. A virtual viewer window typically exists as a direct user request for information specifically from the current application. Screen-sensitive help is an example.

Some differences between the virtual viewer and the Results Viewer application are that the virtual viewer window closes when it looses focus. The Results Viewer application remains open until you close it, which means that it may remain open when focus is switched away from it to another application. You may use the mouse to click links in the Results Viewer but not in the virtual viewer. And you can have only one instance of a Results Viewer window at a time.

The Results Viewer is an application that you invoke to gather information from the Internet or from specific applications. JAWS populates a Results Viewer window with the content gathered for you to navigate, copy and paste, etc. Information shown when you invoke the Research-It feature is an example of a Results Viewer window, and it typically displays HTML elements - e.g., links. Speech History is another, but it has no HTML, just text.

So again, the Results Viewer can display HTML; whereas, the Virtual Viewer cannot. Thus, the Results Viewer can display headings, links, tables, etc. You must enter it as HTML, programmatically or statically. JAWS does not include HTML functions. If you include HTML tags when sending text to the Results Viewer, the Results Viewer application interprets the whole string as HTML. In summary: you must be familiar with HTML coding practices if you wish to generate complex content with HTML elements to display in a Results Viewer window.

Displaying Text in a Virtual Viewer or Results Viewer Window

For all virtual viewer code to work properly, your script source file must contain at least the following three Include statements:
 

Include "hjconst.jsh"
Include "hjglobal.jsh"
Include "common.jsm"

 

Checking the Virtual Viewer Status

Before you display text in the virtual viewer, ensure that the virtual viewer is not already running through another script or function. If the virtual viewer is already active, you should deactivate it. Deactivating the virtual viewer before you display new information in it prevents the text from running together. To do this, you should either:

·         Place the function, EnsureNoUserBufferActive(), before any other function calls that activate and display text in the virtual viewer.

·         Use built-in or default functions to test for whether the user buffer is already active and clear it if it is not.

Use the built-in function, UserBufferIsActive, to check the status of the virtual viewer. The function returns an integer value of 1 when the virtual viewer is active, and returns an integer value of 0 when the viewer is not active. When the virtual viewer is active, you use the built-in function, UserBufferDeactivate, to close the virtual viewer. This function closes the virtual viewer just as if you had pressed ESCAPE from the keyboard.

As with the call to EnsureNoUserBufferActive, always place both the UserBufferIsActive and the UserBufferDeactivate functions within a conditional statement before calling any function that activates the virtual viewer. And again, unless you really want to append to already existing text in the user buffer, make sure to clear the user buffer so that the virtual viewer displays only the text you direct it to display.

Code Samples

In below code samples, the first two are equivalent but the third one is not. the first two clear the user buffer so that you may populate the virtual viewer with new content. The third code sample lets you append to existing content in the user buffer.

;Checks for whether the user buffer is active and if so, deactivates and clears its content.
If UserBufferIsActive () Then
            UserBufferDeactivate () ; close the virtual viewer
            UserBufferClear ()
EndIf
;By default, checks for and clears the user buffer if it is active. If the optional parameter passed to this function is set to TRUE, the buffer content is retained.
EnsureNoUserBufferActive () ; Closes the virtual viewer and clears its buffer content if the viewer is already active.
; Allows for appending to the user buffer that already exists in the virtual viewer
EnsureNoUserBufferActive (TRUE) ; Closes the virtual viewer but does not clear its buffer content.

Checking the Active Cursor

Checking if the virtual cursor is active is different from determining whether the user buffer is active. The Returns are the same in that:

·         Returns an integer value of TRUE if the Virtual PC cursor is enabled, or if the user virtual buffer is active.

·         Returns an integer value of FALSE if the virtual PC cursor is disabled, or if the virtual user buffer is not active.

 

IsVirtualPCCursor () ; Checks to see if the Virtual PC cursor is being used to navigate within the window with focus.
UserBufferIsActive () ; Determines if the User Virtual Buffer is currently active.

Creating and Displaying the Messages

To display messages in the virtual viewer, you should store them as constants in a message (.jsm) file. Use JAWS message formatting conventions. You may format the text of messages to be displayed in the virtual viewer with spaces, hard returns, tab stops, etc. JAWS retains the format of your messages when processing them for displaying in the virtual viewer.

For messages you plan to use to speak or flash in Braille, you may create a long and a short version of the same message. But for messages you plan to display in the virtual viewer, you must test for whether to display a long or a short message because the virtual viewer functions do not take both long and short message parameters in the same function call. So although you can still create a long and a short version of the same message, you must test for whether to display one or the other before calling the function that places the text into the virtual viewer.

You can also use placeholders in messages to be displayed in the virtual viewer. Using placeholders allows for text to be added to the message at the time JAWS processes the script.

After you have created your messages and determined that the virtual viewer is not active, you are ready to display text in the virtual viewer. You can use numerous functions for this purpose. But some of the more common methods include calls to:

·         SayMessage

·         SayFormattedMessage

·         UserBufferAddText

·         UserBufferAddFormattedMessage

For the SayMessage and SayFormattedMessage functions, The first parameter is the output type that directs JAWS how to speak or display the message. Use the output type constant, OT_USER_BUFFER, in either function to direct JAWS to display your message in the virtual viewer.

The second parameter for SayMessage and SayFormattedMessage is the text of the message you wish JAWS to speak or display. Since the output type parameter passed in the current scenarios is for displaying text in the virtual viewer,this parameter can be a quoted string of text, a string variable containing the text or a message constant contained within a JAWS message (.jsm) file.

The functions that allow more parameters and thus give you more control over the text and how it is displayed in the virtual viewer allow for things like the type of font, its color, and so on. All these functions are listed in the Reference guide in the section on Virtual Viewer Functions.

Code Sample 1: Simple Virtual Viewer Functions

The below code sample checks for whether the user verbosity level is higher than beginner level. If it is, the short message is passed to the user buffer. If not, the long message is passed. This is a very simple example of how to test and control the length of the message passed to the user buffer.

If you want very specific control over the length of the message passed to the user buffer, you may need to overwrite built-in message functions or functions that pass messages to the user buffer with your own particular tests in order to determine whether a long or short message should be passed to the user buffer for displaying in the virtual viewer.

If GetJcFOption (Opt_User_Mode) >= intermediate ; user verbosity is set to intermediate or advanced for the current application.
            SayMessage (ot_user_buffer, msgHello_s)
Else
            SayMessage (ot_user_buffer, msgHello_l)
EndIf

Code Sample 2: Using SayMessage and SayFormattedMessage

The below code sample uses calls to both SayMessage and SayFormattedMessage functions to display text in the user buffer, passing it a message that is formatted with a string that may change depending on conditions you determine.

If the key assigned to the script is pressed twice quickly, then several messages are passed to the user buffer to be displayed in the virtual viewr, including the very commonly displayed message, "Press Esc to close this message". That message is found in the common.jsm message file that ships with JAWS and so you need an include statement for "common.jsm" in your script source file, as shown here.

Also, notice that the test message to be displayed in the virtual viewr has an extra blank line in the message definition. Any information you place into a message constant using the Messages ... EndMessages format allows you to include formatting: spaces, tabs, hard returns, etc., as mentioned above. Alternatively, you may add the constant, cscBufferNewLine, to force a blank line in the virtual viewer.

Finally, the script is written in such a way that if you press the key assigned to the script just once after the virtual viewer is already displaying the test message, nothing happens.

Messages
@msgTestMessage
Hi. I am a test message.
@@
@msgMyUserBufferTestMessage
I am %1.
@@
@msgNotVirtual
not %1
@@
EndMessages
Script MyUserBufferTest ()
If IsSameScript ()
            EnsureNoUserBufferActive ()
            SayMessage (ot_user_buffer, msgTestMessage)
            SayFormattedMessage (ot_user_buffer,
                        FormatString (msgMyUserBufferTestMessage, cmsgVirtualViewer))
            SayMessage (ot_user_buffer, cmsgBuffexit)
            Return
EndIf
If Not UserBufferIsActive ()
            SayFormattedMessage (ot_JAWS_message,
                        FormatString (msgNotVirtual, cmsgVirtualViewer))
EndIf
EndScript

Code Sample 3: Using Functions that Control How Text is Displayed

The below code sample shows how you might take advantage of the UserBufferAddText function to populate the virtual viewer window with very specific control of the way the text is displayed. In the code sample where the optional parameters are used, note that the parameters passed to the function are from constants found in the common.jsm file that ships with JAWS. Also, note that when optional parameters are passed, all of them must be passed up to the point where you no longer need to make a change from the default parameters.

You may mix calls to SayMessage, SayFormattedMessage, and UserBufferAddText. But for purposes of clarity, the two sample scripts below call the function, UserBufferAddText.

The first example shows very simple calls to the function but passes the required string parameter in different ways.

Messages
@msgMyTest
Hello, I am a test.
@@
@msgMyVirtualViewer
I am a message in the virtual viewer.
@@
EndMessages
String Function MyUserBufferText ()
Return msgMyVirtualViewer
EndFunction
Script MyUserBufferTest ()
; Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
;The below three function calls populate the text to be displayed in the virtual viewer when the script is run.
; You may call SayMessage and SayFormattedMessage instead of UserBufferAddText; but notice the extra control you have by utilizing this function call.
; Pass a simple message constant as the first parameter, which is required. But pass nothing else as aalll other parameters are optional.
UserBufferAddText (msgMyTest)
; Pass a function that returns a string as the first parameter, which is required. but pass nothing else as all other parameters are optional.
UserBufferAddText (MyUserBufferText ())
; Pass some text as the first parameter, which is required.
; Then for the optional parameters, pass nothing for the next two parameters, the font name as Aerial, size as 12, no attributes, and foreground color of black and background color of white.
; This level of specificity dictates that JAWS should display the text of the first parameter in the virtual viewer with these conditions applied.
UserBufferAddText (MyUserBufferText, cScNull, cScNull, cFont_Aerial, 12, 0, rgbStringToColor(cColor_BLACK), rgbStringToColor (cColor_White))
; Pass the message constant from common.jsm for closing the virtual viewer.
; Pass a blank line.
UserBufferAddText (cscBufferNewLine)
UserBufferAddText (cmsgBuffExit)
; Now activate the user buffer to receive the user buffer text just populated.
If ! UserBufferIsActive ()
            UserBufferActivate ()
EndIf
; Ensure that the virtual cursor begins at the top of the virtual viewer window.
JAWSTopOfFile ()
; Say the first line of text.
SayLine ()
EndScript

In the next example, we call UserBufferAddText again but passing it many of the optional parameters with different information from the defaults that the function expects. This shows how to control the way text is displayed in the virtual viewer. We also call RedirectToUserBuffer as the last function call so that a SayAll from the top of the virtual viewer window begins when the script is run.

Const
            iAccount1 = 12345,
            iAccount2 = 54321,
            sMary = "Mary",
            sJohn = "John"
Messages
@msgMyAccountTitle
Account Numbers by First Name
@@
@msgMyAccount
I am %1 and my account is %2.
@@
@msgUnknownAccount
I don't have a name for %1 account.
@@
EndMessages
String Function MyFunctionTest (Int iNum)
If iNum == iAccount1
            Return FormatString (msgMyAccount, sMary, IntToString (iNum))
ElIf iNum == iAccount2
            Return FormatString (msgMyAccount, sJohn, IntToString (iNum))
Else
            Return FormatString (msgUnknownAccount, IntToString (iNum))
EndIf
EndFunction
Script MyAccountUserBufferTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
; The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
EnsureNoUserBufferActive ()
; The below function calls populate the text to be displayed in the virtual viewer when the script is run.
; Pass the title to be displayed as the first line in the virtual viewer..
UserBufferAddText (msgMyAccountTitle)
; Pass a function name for a function that returns a string, then nothing for the next two parameters, then the font type, size, and foreground and backgbround colors to be displayed in the virtual viewer.
; The function itself passes a hard return by default. but for readability in the virtual viewer, add an extra blank line to the first parameter of each call.
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount1), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (iAccount2), cScNull, cScNull, cFont_Times, 14, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
UserBufferAddText (cscBufferNewLine + MyFunctionTest (0), cScNull, cScNull, cFont_Times, 12, attrib_bold, rgbStringToColor (cColor_BLUE), rgbStringToColor(cColor_White))
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
; Pass a blank line along with the message constant from common.jsm for closing the virtual viewer, and cause a SayAll to begin from the top when the script is run.
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
EndScript

Displaying Keystrokes as Links

In addition to text, you can create keystroke links in the virtual viewer. To do this, you add the KeyFor function within the body of any individual message stored in a JAWS message file. The KeyFor function requires the name of a script as its only parameter.

When JAWS displays the message containing the KeyFor function in the virtual viewer, JAWS retrieves the keystroke for the script named passed as a parameter to the function. The keystroke is displayed as a link that you can activate by pressing ENTER on the line containing the keystroke. The keystroke is displayed in underlined, blue text on the same white background as other text contained within the virtual viewer.

The syntax for using the KeyFor function in a message is:
 %KeyFor (ScriptName)
 
 The percent sign preceding the function name acts as a placeholder for the keystroke within the message. The script name does not include the parentheses and can be located in either the default or an application-specific script source file.

Code Sample: Creating a Link to be Displayed in the Virtual Viewr

The below code sample shows a very simple message and a link to JAWS hotkey help as you would display it in the virtual viewer.

Messages
@msgHelpMessage
Below is a link to common helpful JAWS commands.
@@
@msgKeyForFunctionTest
To see a list of general JAWS hot keys, press %KeyFor (HotKeyHelp).
@@
EndMessages
Script MyKeyForFunctionTest ()
;Deactivate and clear the user buffer if the virtual viewer is already active.
EnsureNoUserBufferActive ()
;The user buffer is not active. So clear the buffer because there may be other virtual viewer buffer text from other processing not related to your current script that must be cleared.
;The below function calls populate the text to be displayed in the virtual viewer when the script is run.
UserBufferAddText (msgHelpMessage + CscBufferNewLine)
; The below call passes the name of the message containing the link. It must be called by the FormatString function to be processed properly.
;The next parameter is a string representing the function name, including any parentheses and parameters to be called when the Enter key or mouse click occurs in the associated text.
; The third parameter is a string representing the name to be used in the list links dialog when it is invoked with the Virtual viewer active.
; The rest of the optional parameters are not necessary because the defaults already handle them.
UserBufferAddText (FormatString(msgKeyForFunctionTest), cFuncHotKey, cMsgHotKeysFunc)
;Now activate the user buffer to receive the user buffer text just populated.
UserBufferActivate ()
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Checking Whether the Virtual Viewer window is Displayed Visually

By default in most applications, text displayed in the virtual viewer is visible on the screen. But there may be times when you wish to suppress the text from showing visually because it interferes with the actual visible data. An example of this is when you display a chart in Excel in the virtual viewer. You would not want the virtual viewer version of the chart to obscure the visual version of the chart.

You may turn off displaying of virtual viewer text in general through the JAWS user interface in the Settings Center dialog. But you may also handle this through your scripts and functions for special cases.

Code Sample

The below code sample checks for whether the virtual viewer is set to be displayed visually. if it is, we turn it off temporarily, show virtual viewer text, and then turn it on again. If it is not set, perhaps the user had disabled the feature. so we leave it as is.

Script ShowVirtualViewerTest ()
Var
            Int iVirtViewer,
            String sText
iVirtViewer = GetJCFOption(OPT_VIRT_VIEWER)
sText = "This text is not displayed on screen because the option to display text in the virtual viewer visually is off."
If iVirtViewer == TRUE ; Virtual viewer is visible.
            SetJCFOption (OPT_VIRT_VIEWER, 0) ; Turn it off.
EndIf
UserBufferClear ()
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine + cmsgBuffExit)
If iVirtViewer == TRUE ; Virtual viewer was on before displaying text in the virtual viewer.
            SetJCFOption (OPT_VIRT_VIEWER, iVirtViewer) ; Turn it back on.
EndIf
EndScript

Giving a Title to the Virtual Viewer Window

By default, when JAWS displays text in a virtual viewer window for something like screen-sensitive text, if the user requests the title of the window, JAWS provides a generic message, "Virtual Viewer". That message is spoken and flashed in Braille. But there may be times when you want your virtual viewer text to be displayed with a special name for the virtual viewer window in which it appears. For example, in Microsoft Excel charts, if the user requests the title of the chart being displayed in the virtual viewer, JAWS provides this information specifically instead of indicating the generic message.

In order to make your scripts and functions behave properly for this special case, you must do two things:

1.    Overwrite the default script called SayWindowTitle so that it knows under what special circumstance to indicate the window name of your special virtual viewer window.

2.    Use the special function, UserBufferActivateEx instead of the more general function, UserBufferActivate, to activate the user buffer in your script that displays the special virtual viewer window.

The UserBufferActivateEx function takes four required parameters. The first parameter is a string containing the window name for your special virtual viewer window. This parameter passes a window name to be used internally by your overwritten SayWindowTitle script. It is not a window name that appears at all in the text of your special virtual viewer window. The second parameter is also a string, indicating the type of window you are generating. You may leave this string blank by using the constant, cscNull, which in effect is an empty string. The third and fourth parameters are integer values representing the window type code and control ID for your special virtual viewer window. You may use 0 for each of these parameters.

Code Sample

The below code sample overwrites the default script called SayWindowTitle for the special case of your special virtual viewer window. You may restrict the conditions even further than what is shown here to ensure that only the window name for your special virtual viewer window is processed. but this code sample simply test for whether the window name of the virtual viewer is not empty.

Script SayWindowTitle ()
Var
            String sVirtWindowName
sVirtWindowName = UserBufferWindowName ()
If UserBufferIsActive ()
            If sVirtWindowName != cscNull
                        SayMessage (ot_user_requested_information, sVirtWindowName)
                        Return
            EndIf
EndIf
PerformScript SayWindowTitle ()
EndScript
Script WindowTitleVirtualViewerTest ()
Var
            String sTitle,
            String sText
sTitle = "My Virtual Viewer Window"
sText = "I am a message in this special virtual viewer window that has a name."
EnsureNoUserBufferActive ()
UserBufferActivateEx (sTitle,cscNull,0,0)
SayMessage (ot_user_buffer, sText)
RedirectToUserBuffer (cscBufferNewLine+cmsgBuffExit)
EndScript

Results Viewer Functions

Starting with JAWS 11.0, the Results Viewer application has been available for customization through your own scripts and functions. Its functions behave in a very similar manner to the functions for displaying text in the virtual viewer.

Additional Resources

For more details on working with all types of functions for the Virtual Viewer and Results Viewer, see the category books and summaries in the JAWS Functions book of the Reference Guide.

Optical Character Recognition Events

An Optical Character Recognition (OCR) event function provides information about OCR activities, such as whether recognition is valid or has completed. JAWS uses this information to determine whether to speak and display OCR information in Braille, for comparison purposes, etc.

Some examples of OCR event functions include:

·         OCRCompletedEvent

·         OCRDataInvalidatedEvent

For a complete listing of functions related to OCR events, see the category book in the Reference Guide.

Code Sample

In the below code sample, the OCRCompletedEvent function is overwritten in Notepad.jss from the function in default.jss. The overwritten function simply adds an extra message when an OCR activity is completed with a successful result. It is assumed that the function is being processed in a Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, simply run an OCR script using the standard key layer assignments for OCR for the current window in Notepad. The key assignment is JAWSKey+SPACE followed by the letter "o", then by the letter "w".

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function OCRCompletedEvent (Int iJobID, Int iResult)
Var
            String smsgOCRTest
smsgOCRTest = "OCR completed successfully."
OCRCompletedEvent (iJobID, iResult)
If iResult
            SayMessage (ot_status, smsgOCRTest)
EndIf
EndFunction

Settings and Configurations

 

Script File Types

The Freedom Scientific Scripting language stores script files in the product's root folder mostly under the settings\(language) folder. Most of the files are written in the familiar INI file format. With the exception of binary files (those with extension jsb), and with caution, you may edit most script files with a text editor such as TextPad or NotePad, with the JAWS's own Script Manager, or through the various "managers" (utilities) provided directly by JAWS.

When you plan to edit a script file that exists in the shipping version of JAWS through a text editor, you should back up the original files in a safe place. This ensures that you can restore files to their original state if you happen to edit a file's content in a way that causes unpredictable results.

For more details on the definitions of Script File Types, see Script File Types.

Settings Files

JAWS stores application-specific information such as the JAWS configuration settings, graphic labels, and frame definitions in settings files. All JAWS settings files are located in the root folder of the JAWS settings\(language) folder. For more details on how settings files are utilized by JAWS and for brief descriptions of what each one contains, see Settings Files.

Reserved Files

JAWS reserves some settings files to govern its default behavior, or for inclusion by other script files. For more details on which files are reserved and how they are utilized by JAWS, see Reserved Files.

Folders for Settings And Configuration Files

JAWS ships with several sub folders you may customize. The default subfolders are located in the JAWS root folder under the shared Settings\(language) folder. Depending on how your folders are set to display in windows Explorer, the subfolders may appear in a different order from the order presented here.

When you customize settings, none of them are placed in the shared JAWS folders. Instead, depending on the type of customization, JAWS may place your changes from default settings in the user Settings\(language) folder, and/or in one of the subfolders whose names also appear in the shared Settings\(language) folder. In other words, sometimes, both The user Settings\(language) folder and one of the subfolders contain your changes. The only exceptions are the Transient-Focus and Transient-session subfolders. Those never appear at all in the shared Settings\(language) folder because of how they are used. The subfolders in the Settings\(language) folder include:

·         PersonalizedSettings - Contains any .jsi files that ship with the JAWS. when you customize your location for use with Research It, a MyLocation.ini file is created in this folder. When you use the JAWS Find command on a virtualized document or Website, a FindData.ini file is created in this folder.

·         As of JAWS 17, merging from prior versions of JAWS was disabled due to the JAWS folder restructure. Instead, JAWS began providing a much more flexible user interface for backing up and restoring, and even migrating settings from a prior version of the product. But this all assumes the product is not older than JAWS 17. The Import/Export and Migrate utility accounts for the file restructure in JAWS 17 and later.

·         PlaceMarkers - contains any temporary or permanent placemarkers you create for a given Website.

·         Sounds - contains all the .wav sounds that ship with JAWS. If you customize a .wav sound, or generate a Speech and Sounds scheme or Dictionary Manager sound customization that includes a sound .wav file, JAWS places them in this folder.

·         RuleSets - contains any customized rule sets you create for Research It. the .rul and .qry files that ship with JAWS always remain in the shared Settings\(language)\RuleSets subfolder.

·         Transient-Focus - used for Quick Settings changes to store the settings that have the Restore Setting when Focus Changes persistence level.

·         Transient-Session - used for Quick Settings changes to store the settings that have the Restore Setting when JAWS exits persistence level.

Note: Persistence levels is a concept introduced in JAWS 13.0. It allows you more flexibility in whether a setting change should be transient or permanent. By default, changes made through the JAWS Quick Settings user interface are permanent. but you may change the persistence level of any setting through the context menu for any option in the Quick Settings user interface. The subfolders, Transient-Focus and Transient-session in your user settings\(language) folder store files related to persistency levels.

Additional Resources

For more information on Research It, see Creating Research It Rules.

For more information on Quick Settings, see Customized Quick Settings.

For more information on the JAWS 17 and later folder restructure, see Localization: JAWS Folder Restructure.

Script File Types

JAWS stores settings files in the product's root folder mostly under the settings\(language) folder. Most of the files are written in the familiar INI file format. With the exception of binary files (those with extension jsb), and with caution, you may edit all scripting settings files as follows:

·         with a text editor such as TextPad, NotePad++, or Notepad,

·         with the JAWS Script Manager,

·         or through the various "managers" provided directly by JAWS.

Whenever you plan to edit a script file that exists in the shipping version of JAWS directly through a text editor, you should back up the original files in a safe place. This ensures that you can restore files to their original state if you happen to edit a file's content in a way that causes unpredictable results.

If your script files require entries with Unicode characters, you must save them with UTF-8 formatting enabled. For more information on UTF-8 formatting, see Formatting Script Files for UTF-8.

Definitions of Extensions for Script File Types 

Following is a list of definitions for script file types by extension supported by the JAWS Scripting language. Each file type extension is followed by a brief description of how it is used.

For more information on the use of header files and on variables and constants, see
 Variables and Constants, and Non-Aggregate Variables,
 and Constants.

JBD - JAWS Braille Display

Used by the Papenmeier Braille displays. Their names generally begin with the prefix BrailleX. JAWS itself does not use these files, but they are needed by the BrailleX manager that comes with the Papenmeire displays.

JBS - JAWS Braille Structure

Structured mode settings for JAWS output to Braille displays. To make changes to these settings, choose the "Define Structured Mode..." button from the "Braille Settings" dialog in the JAWS Settings Center .

For more information on Structured Braille, see the topic called Structured Braille Functionality.

JCF - JAWS Configuration File

JAWS configuration settings for verbosity, text processing, keyboard processing, HTML options, window class reassignments, custom highlight options, etc. To make changes to .jcf files, use the Run JAWS Managers dialog, or Settings Center and Quick Settings dialogs.

You may edit .jcf files from within your script source files with functions like GetJCFOption_function and SetJCFOption respectively.

JSI - JAWS Script Initialization

Generated under certain circumstances when a change is made to Quick Settings for a specific application. the file is located in the PersonalizedSettings folder under the root folder of the JAWS user\Settings\(language) folder. the file's name is based on the application where it was generated. In other words, there is no default.jsi. But there are files like Word_MyDocument.docx.jsi. Such files are located in folders like C:\Users\MyName\Freedom Scientific\JAWS\(Vversion number)\Settings\(language)\PersonalizedSettings.

To prevent unpredictable results, it is not recommended that you edit .jsi files manually. However, it is possible and often practical to read from and write to .jsi files through script or function calls in your script source code. If you do, take care to consider the impact on the QuickSettings.his and SettingsCenter.ini files and even any .jcf files that may be associated with that .jsi file.

JDF - JAWS Dictionary File

Alternative pronunciations for words or characters that are not already pronounced correctly by the synthesizer. To edit dictionary entries in an existing .jdf file or to create a new .jdf file, use the JAWS Dictionary Manager.

You may edit .jdf files directly. Make entries one per line with the match text on the left and the replace text on the right. The match text should be the exact mispronounced word or characters, and the replace text should be a phonetically spelled representation of how the match text should be pronounced. Use the "." delimiter to begin and end each entry as well as for the left and right parts of each entry .

Note: JAWS processes Dictionary rules for all the text it reads. Therefore, be judicious in adding entries to the JAWS dictionary files in order to avoid slower responsiveness while navigating. Adding dictionary rules only for the applications where they are needed also helps to shorten processing time.

JGF - JAWS Graphics File

A list of numeric graphic specifiers paired with textual descriptions for each. When JAWS encounters a labelled graphic, it speaks the assigned text description. If a Braille textual description is also assigned for a numeric graphic specifier, JAWS displays that graphic label on any attached Braille display. To add to or edit graphics, use the Graphics Labeler (JAWSKey+g), or use the Auto-graphics labler, JAWSKey+Ctrl+g.

You can edit a graphics file manually. See how the file should be structured by examining the default.jgf file that ships with JAWS to understand how entries should be delimited and how the file sections should be managed. A .jgf file contains sections for various graphic resolutions as well as a section for symbols.

JFD - JAWS Frame Definition

Contains the definition for customized frames. the file is located in the root folder of the JAWS user\Settings(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jfd file is called Textpad.jfd.

You may utilize the JAWS user interface to create a frame with the key combinations JAWSKey+LeftBracket to set the upper left corner and JAWSKey+RightBracket to set the bottom right corner of an arbitrary rectangle on the screen. With the JAWS dialog that results from these actions, you may then enter a frame name, synopsis, and description much like you do in the Script Manager when generating new scripts and functions. You may even add a keystroke assignment so that the frame is acted upon by JAWS - for example, in response to an event or to a user pressing that keystroke combination. If you add a key assignment to a frame definition, that assignment is added to the application's .jkm file. The Synopsis and Description fields for the frame definition ensure that keyboard help for that key assignment is available to the user upon request.

You may also edit a .jfd manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JFF - JAWS Frame File

Contains all the information associated with customized frames with respect to how JAWS should act upon them. The file is located in the root folder of the JAWS user\Settings\(language) folder. The name of the file is based on the application where the frame was created. For example, if the file is created in the Textpat application, its .jff file is called Textpad.jff.

The information contained in the file is sectioned in brackets with the name given to each frame that has been created. Following the name of the frame in brackets on separate lines are the specifics about the frame: whether it should be silent, spoken, Brailled, and upon what conditions or events, etc.

You may also edit a .jff manually. But take care to follow the exact syntax of the file to avoid unpredictable results.

JKM - JAWS Key Map

A list of keystrokes assigned to JAWS scripts. To add, remove, or change key assignments, use the Keyboard Manager, JAWSKey+8.

You may edit key map files directly. For more detailed information on working with key map files, see JAWS Key Map Files.

JSB - JAWS Script Binary

Binary files created by the JAWS compiler from JAWS Script Source (.jss or .hss) files. Such binary files are loaded each time an application receives focus by moving to the Windows foreground. JAWS uses compiled binary files because they execute more quickly than interpreted script text. Binary files may not be edited manually in any way. They are not available to a text editor.

JSD - JAWS Script Documentation

Generated by the JAWS Script Manager whenever scripts or functions are created in a script source (.jss or .hss) file. using the Script Manager. These files include very specific information about the name, synopsis, and description of each script or function in the associated source file. Optionally, they may even contain category information related to the type of script or function being documented. The synopsis and description entries for a script are used to provide JAWS Keyboard help. So be careful to create meaningful documentation for these entries.

You may create/edit a .jsd file manually. In fact, you must do so if you are creating script source files through a text editor other than the JAWS Script Manager to ensure complete and accurate documentation of your scripts and functions, and to ensure that any scripts tied to key assignments have meaningful keyboard help.

JSS - JAWS Script Source<

JAWS script source code. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format.

You may use the JAWS Script Manager to create/edit script source files. Compile source files by pressing Ctrl+s from the script Manager. Assuming that your source code compiles without errors, the .jss, a .jsd, and .jsb files of the same root name as your source file are all added to the root folder of the JAWS user\settings\(language) folder.

Alternatively, you may use a text editor like TextPad to create and edit script source code. This means that you will need to utilize command line commands or compile statements available through your text editor's user interface pointing to the JAWS compiler in order to compile that source code.

HSS - Hidden Script Source<

Hidden JAWS script source code has not been used in shipping JAWS for some time. But you may wish to keep your personal customized code private for professional reasons. Once scripts and functions have been added to a file of this type, use the JAWS compiler to compile the script set into binary (.jsb) format. Again, hidden source files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But all the information that applies to exposed script source (.jss) files applies to hidden source ffiles with respect to "Include" statements, formatting for UTF-8, etc.

Another way to handle the use of hidden source files for a script set is to utilize "Use" or "Import" statements in the exposed script source (.jss) file. These statements assume that the hidden source files have compiled correctly and are available as binary (.jsb) files to be compiled along with the exposed .jss file. For more information on "Include", "Use", and "Import" statements, see Compiler Directives.

JSH - JAWS Script Header

Definitions for variables and constants to be used throughout your script source files. "Include" statements in your script source files are necessary for header files to be available at run-time and properly compiled.

HSH - Hidden Script Header

Hidden definitions for variables and constants to be used throughout your script source files. Typically, hidden header files are not exposed in the script set of your files. Hidden header files are typically not included in the script set exposed to the user, only the resulting binary (.jsb) file. But "Include" statements in your script source files (both .jss and .hss) are necessary for hidden header files to be available at run-time and properly compiled.

JSM - JAWS Script Message

Definitions for message constants to be used throughout your script source files. "Include" statements in your script source files are necessary for message files to be available at run-time and properly compiled.

INI Files

Numerous types of .ini files ship with JAWS. The files are located in different folders on your system, depending on their purpose. The SettingsCenter.ini file, for example, is one that should never be edited manually.

To prevent unpredictable results, it is not recommended that you edit .ini files manually. However, it is possible and often practical to read from and write to .ini files through script or function calls in your script source code.

HIS History

Used to hold history information for settings changes made through the JAWS user interface. To prevent unpredictable results, you should never edit These files manually.

QS Quick Settings

 Used to hold Quick Settings definitions. These files work in conjunction with their associated .qsm files. A .qsm file is written in XML and so has a different structure from the .jsm files that are added to script source files by "Include" statements.

 

QSM quick Settings Message

Message file specifically for Quick Settings options. These files work in conjunction with their associated .qs files. A .qsm file is written in XML and so has a different structure for message constants from the .jsm files that are added to script source files by "Include" statements. For more details on how to utilize .qsm files, see Customized Quick Settings.

SBL - Speech Symbols File

Used to look up language information for a specified synthesizer, or to load the JAWS default speech symbols file when no synthesizer symbols file exists for the synthesizer in effect. The .sbl files contain entries for symbols (mainly punctuation). JAWS processes how and even whether symbols are pronounced depending on the punctuation level in effect.

JAWS ships with many speech symbols files for supported speech synthesizers. Just as the folders containing scripts and configuration files are named with language abbreviations, the .sbl files support languages like: enu (English), deu (German), esn (Spanish). The list of synthesizers and languages JAWS supports is robust and growing, including most Western european languages with their Latin alphabets but also those with Cyrilic alphabets like Russian. Also supported are numerous Asian languagess such as: Japanese, Chinese (Cantonese and Mandarin), and right-to-left languages like Arabic and Hebrew.

You may edit an .sbl manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. An .sbl file is broken into sections, each of which lists the symbols for a particular language that synthesizer supports. For example, if you want to add an entry to the eloq.sbl (Eloquence synthesizer symbols file), you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other symbols already exist for that language section of the .sbl file.

Note: you cannot create a new language section in an .sbl file for a language that is not supported by that file's synthesizer.

Finally, if the symbol you are adding is a Unicode character, you must save the .sbl file with UTF-8 formatting enabled.

In JAWS 17, .sbl files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .sbl files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

CHR - Character Substitution

Used since JAWS 15 to process character substitutions (spelling and/or pronunciation corrections) for certain spoken behaviors in the languages supported by the speech synthesizer in effect. Each .chr file bears the name of its associated speech synthesizer (e.g., VocalizerExpressive.chr). But not all synthesizers require associated .chr files.

Unlike an .sbl file, a .chr file may contain entries that are not symbols. Entries may be alphanumeric characters as well. JAWS processes how characters are pronounced under certain circumstances regardless of the punctuation level in effect.

The .chr files that ship with JAWS since JAWS 15 are located in the JAWS root folder in the Settings\(language) folder.

In JAWS 17, .chr files were relocated to language-specific folders within the Shared root folder for JAWS: C:\ProgramData\Freedom Scientific\JAWS\17.0\Scripts(language) folder. This actually caused duplication of these files for non-English builds of the product. So since JAWS 18 and later, .chr files were relocated to the Shared root folder: C:\ProgramData\Freedom Scientific\JAWS\Version\Settings. This removes the duplication of the files in language-specific folders.

You may edit a .chr manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. A .chr file is broken into sections, each of which lists characters to be substituted for a particular language that synthesizer supports. For example, if you want to add an entry to the VocalizerExpressive.chr file, you first must find the section for the language (American English, Castilian Spanish, etc.) where you want to add your entry. Then move to the end of that language section and add your entry consecutively to whatever other entries already exist for that language section of the .chr file.

Within each language section, entries correspond to characters to be processed with substitutions. The key part of each entry is represented in one of two ways: the desired character entered directly, or a Unicode sequence representing the desired character (e.g., U+201C for Left Double Quotation Mark). For each entry, the value is the string to be substituted for the character. For example, the string to be substituted for a Left Double Quotation Mark could be "Left Double Quote" instead in English and whatever is appropriate in say, Spanish. But you must make each entry in the relevant language section of the file.

Note: You cannot create a new language section in a .chr file for a language that is not supported by that file's synthesizer.

The behaviors JAWS may process using .chr files occur when the user:

·         invokes any spelling command : word, line, to or from cursor, etc.

·         invokes a command to speak the current character.

·         navigates by character with left/right arrow keys.

·         types characters, and typing ecdho is set either to Characters or to Characters and Words.

Finally, you must format a .chr file as an INI-style file with UTF-8 formatting enabled.

VPF - Voice Profile

Since JAWS 16.0 and later, .vpf files have been used to support the enhanced language switching capabilities for speech synthesizers. JAWS stores the Voice Profiles .vpf files in the JAWS root folder under the settings\(VoiceProfiles) folder. The moment you make any adjustment to a voice profile, a file is created in your own User\Settings\VoiceProfiles folder with all the correct section names and entries for your customized voice profiles. Each speech synthesizer has its own voice profile file.

The sections of a Voice Profile .vpf file include:

·         Options - used to define profile defaults.

·         Context sections - formatted as three-letter language abbreviation followed by a dash, followed by a context name (e.g., [ENU-PCCursor] is for English United States PCCursor voice).

·         Sections for Voice Aliases - formatted as three-letter language abbreviations followed by the term, voice alias (e.g., [enu-Voice Aliases]).

·         Language Aliases - used In order to support language detection on the internet ISO 639/3066 language codes as well as Microsoft and other variants of these.

·         Voice Alias Translations - used to localize Voice Alias names (e.g., [enu-UI Voice Alias translation]).

·         Default Voice Aliases - used to define the default for each voice alias.

JBT - JAWS Braille Table

Used to look up Braillle symbols for the Braille format in use for the current JAWS session. This file governs how Braille symbols and what sets of symbols are displayed in Braille. For example, if the US_Unicode.jbt is in effect, all Unicode characters available in that file become possible to display in Braille as applications are run that may present such symbols. The .jbt files are located in the Freedom Scientific folder for the specific version of JAWS running in the Program Files folder of your system.

A .jbt Braille table may specify up to 7 dot pattern cells per unicode character. Make each entry for any symbol or Unicode character you are adding as a special cell dot pattern on a separate line.

You may edit a .jbt file manually, but be careful to follow the syntax shown in the file exactly to prevent unpredictable results. The file is broken into sections (sets of symbols), each of which lists the entries for that set (i.e., ANSI, Unicode Greek, etc. in the US-Unicode.jbt file). Make sure to add any entries at the end of the existing set of symbols for the correct set.

Finally, if the entry you are adding is a Unicode character, you must save the .jbt file with UTF-8 formatting enabled.

RUL and QRY - Rule and Query

Specifically used for the JAWS Research-It feature. For detailed information on how to customize these types of files, see Creating Research It Rules.

SBAK - Settings Backup

Since JAWS 18 and later, you have been able to create settings backup files for restoring user settings from another version of the product, or merging user settings to another system with the same version. This process is similar to the older process called Merge that allowed you to merge user settings from a prior version of JAWS to a current version. The Merge feature was removed in JAWS 17 due to a major relocation refactor. This was necessary to speed up the localization process for the growing number of languages JAWS supports. Starting with JAWS 18 and later, .sbak files provide an even more robust process for backing up and restoring user settings for whatever language you have installed.

Additional Resources

Settings Files

Reserved Files.

Calling Scripts and Functions

Keyword: Include

Description

The Include keyword directs the compiler to include the content of another file into a script source file during compilation. Mostly, Include statements ensure that .jsh header or .jsm message files are compiled along with the code of the script source file where you add the statements. But you can add other types of code files as Include statements as well.

An Include statement must be followed by a filename and its extension enclosed in quotes.

 

Syntax

 Include "filename"
 

Remarks

Constants and global variables you declare specifically in a script source file are accessible only to that file when it is compiled. But if you declare them in header files, constants and global variables can be accessible to multiple script source files by adding Include statements to those files.

As with header files, employing Include statements to add message files in multiple script source files offers a distinct advantage. Message files usually contain localizable string constants. Such message constants may be in the form of simple string constants, or they may be formatted messages with optional replaceable parameters that take on values when the scripts run.

Consequently, you can use message files to declare and store localizable messages JAWS processes for speech or for string comparison. then a localizer only needs to modify a .jsm message file. When you add an Include statement in your script source file for that message file, any localized messages simply work as expected at run-time because they have been processed when the script binary file was compiled.

All constants and messages in a script source file must have unique names. If the compiler finds a constant or message with a name that has already been used, the compiler generates a compiler error message that it has found a duplicate constant, and then exits without compiling. So take care not to add duplicate constant definitions in header or message files whose filenames you plan to add as Include statements in your script source files.

Research It Functions

A Research It function provides or returns information about script activities caused by user interaction. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Some scripts that ship with JAWS fall into the category of Research It, such as the script for ResearchIt, for example. However, the focus of the present discussion is on functions related to Research It that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Research It functions include:

·         IterateLookupModules

·         LRL_Dialog

·         LRL_GetFirstLookupModule

For a complete listing of Research It functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the number of Research It Lookup module and rule sets currently in use, and displays the list, along with the primary Lookup module rule set in the Virtual Viewer for you to read as you prefer.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

To set up the example, first run the script from Notepad without making any changes to the default Research It rules. Then use the JAWS user interface to change the number of modules and rule sets you want displayed in your list whenever you invoke the Research It dialog. Also, change the primary Lookup module to something other than the default. (You can always return everything to their default values later.)

Finally, run the script again from Notepad to see your changes reflected in the Virtual Viewer.

Messages
; For msgModulesInfo, %1 is the number of module rule sets, %2 their names, and %3 the name of the primary module rule set, if it exists.
@msgModuleInfo
I am using %1 rule sets. They are:
%2
My primary Lookup module rule set is %3.
@@
EndMessages
Script MyResearchItModules ()
Var
            Int iNum, ; number of modules found.
            String sNum, ; the number converted to a string.
            String szModuleNames, ; provided by reference.
            String szRuleSets, ; Provided by reference.
            String sDefaultModule, ; provided by reference.
            String sDefaultRule, ; rule set of primary if exists, provided by reference.
            String sText
iNum = IterateLookupModules (szModuleNames, szRuleSets)
If ! iNum
            Return ; none found.
EndIf
sNum = IntToString (iNum)
szRuleSets = StringReplaceChars (szRuleSets, "\007", cscBufferNewLine)
If LRL_GetPrimaryLookupModule (sDefaultModule, sDefaultRule) ; a primary module and rule set was found.
            SText = FormatString (msgModuleInfo, sNum, szRuleSets, sDefaultRule)
Else
            sDefaultRule = "not found"
            SText = FormatString (msgModuleInfo, sNum, szRuleSets, sDefaultRule)
EndIf
EnsureNoUserBufferActive ()
UserBufferAddFormattedMessage (sText + cscBufferNewLine + cscBufferNewLine + cmsgBuffExit)
UserBufferActivate ()
JAWSTopOfFile ()
SayAll ()
EndScript

Additional Resources

For more details about working with Research It rules, see the summary in the General Scripting Concepts book called Creating research It Rules.

For more details on working with the Virtual Viewer, see the summary in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

Collection Type Variables

Description

Collection New

A collection is a data type that may contain members of any type, and whose members are accessed by means of a key. Members of a collection need not be of the same data type as each other. After declaring a collection, create it using the keyword, New.

Items of a collection spring into existence the first time they are assigned. Assigning a collection member to a value makes that member's type the type of the value being assigned. Each member in a collection has a key of type string, and each member can contain a value of any data type.

You may access members of a collection by using the dot operator followed by the key name, or by the key as a string enclosed in square brackets.

Syntax

 

Var collection col
            Let col = new collection
            Let col.item = value

 

Col is a collection variable being declared and created.

Item is the name (or key) of a member in the collection being created.

Value is the value being assigned to a member of the collection.

Remarks

Declaring a collection does not create it. You must create the collection by means of the New statement.

Collection members are stored in alphabetical order of the member keys. If you know the name (or key) of a member in a collection, you can assign or retrieve that name (or key) using the dot operator. If the name (or key) of a collection member is enclosed in quotes or is contained in a variable, you must access that member using the variable name or quoted string enclosed inside square brackets instead of using the dot operator.

Collections are always passed to functions by reference.

Assigning one collection to another results in two variables referring to the same collection.

When retrieving a collection member into another variable, the script code must ensure that the value retrieved is stored in the appropriate type of variable. Retrieving a nonexistent item does not generate an error.

Code Sample

Script TestCollections ()
CollectionOfFruitCollections()
EndScript
Void Function FRTINIT(Collection Frt, String Type, string Prep, String Cut)
Let Frt.Type = Type
Let Frt.Prep = Prep
Let Frt.Cut = Cut
EndFunction
Void Function CollectionOfFruitCollections()
Var
            Collection Fruit,
            Collection frt,
            String key,
            String sMsgFruitInfo
sMsgFruitInfo = "%2 and %3 the %1."
Let Fruit = new collection
Let frt = new collection
FRTINIT(frt,"Bananas","peel","slice")
Let Fruit.Bananas = frt
Let frt = new collection
FRTINIT(frt,"Apples","core","slice")
Let Fruit.Apples = frt
Let frt = new collection
FRTINIT(frt,"Strawberries","sugar","halve")
Let Fruit.Strawberries = frt
Let frt = new collection
FRTINIT(frt,"Oranges","peel","section")
Let Fruit.Oranges = frt
Let frt = new collection
FRTINIT(frt,"Pears","peel","slice")
Let Fruit.Pears = frt
Let frt = new collection
FRTINIT(frt,"Cherries","hull","chop")
Let Fruit.Cherries = frt
Let frt = new collection
ForEach key in Fruit
            SayFormattedMessage(ot_line,
                        FormatString(sMsgFruitInfo,
                                    Fruit[key].Type,
                                    Fruit[key].Prep,
                                    Fruit[key].Cut))
EndForEach
EndFunction

Keyword: Include

Description

The Include keyword directs the compiler to include the content of another file into a script source file during compilation. Mostly, Include statements ensure that .jsh header or .jsm message files are compiled along with the code of the script source file where you add the statements. But you can add other types of code files as Include statements as well.

An Include statement must be followed by a filename and its extension enclosed in quotes.

 

Syntax

 Include "filename"
 

Remarks

Constants and global variables you declare specifically in a script source file are accessible only to that file when it is compiled. But if you declare them in header files, constants and global variables can be accessible to multiple script source files by adding Include statements to those files.

As with header files, employing Include statements to add message files in multiple script source files offers a distinct advantage. Message files usually contain localizable string constants. Such message constants may be in the form of simple string constants, or they may be formatted messages with optional replaceable parameters that take on values when the scripts run.

Consequently, you can use message files to declare and store localizable messages JAWS processes for speech or for string comparison. then a localizer only needs to modify a .jsm message file. When you add an Include statement in your script source file for that message file, any localized messages simply work as expected at run-time because they have been processed when the script binary file was compiled.

All constants and messages in a script source file must have unique names. If the compiler finds a constant or message with a name that has already been used, the compiler generates a compiler error message that it has found a duplicate constant, and then exits without compiling. So take care not to add duplicate constant definitions in header or message files whose filenames you plan to add as Include statements in your script source files.

Keyword: Prototype

Description

The Prototype keyword directs the compiler to refer to a specific function definition from a script documentation (.jsd) file during compilation.

A Prototype keyword must be followed by a function definition, including its return type, and the parameters the function expects.

Syntax

 Prototype "function type" "the keyword, Function" "function name" ("parameter type" "parameter name", ...)
 

·         Function type is the return type of the function being defined (e.g., Int for an Integer function, String for a String function, etc.)

·         The keyword, "Function", must follow the function return type.

·         Function name is the name of the function being defined.

·         The parameters for the function being defined must be enclosed in parentheses.

·         Each parameter type and its name must be defined, with each one separated by commas except for the last one.)

Code Sample

 Prototype String Function SpeakNames (String sMyName, Int iMyAccountNumber)
 

Remarks

Each Prototype statement must precede any call to that function in the current script source file. The compiler loads the function definition in the script source file specified by the Prototype statement, and refers to that function definition during compilation when performing type and parameter checking.

Unlike some programming languages, the Freedom Scientific Scripting language requires that variable parameter types be defined as well as their names when a function definition is defined with the Prototype statement.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to one or just to a few function definitions in a script documentation file, employ the Prototype statement to direct the compiler to access just the needed function definition(s) instead of directing it to access the entire script documentation definitions file through the Import statement.

Keyword: Import

Description

The Import keyword directs the compiler to refer to the script and/or function definitions in a script documentation (.jsd) file during compilation.

An Import keyword must be followed by a script definition filename and extension enclosed in quotes.

Syntax

 Import "filename"

Filename is the name of a script documentation file containing script and/or function definitions to be accessed by the compiler as the script source file is being compiled.

Remarks

The compiler loads the script and function definitions in the script documentation file specified in the Import statement, and refers to these definitions during compilation when performing type and parameter checking.

Linking a script binary file more than once may cause problems at run-time. If you have a script set that requires a script binary file at run-time, and if the compiler needs access to the function definitions in the script documentation file when compiling more than one script source file, employ the Import statement to direct the compiler to access the script documentation definitions instead of linking the script binary file more than once with the Use statement.

Research It DLL API

Lookup Module API

A lookup module is a dynamic link library (dll) encapsulating a particular lookup technology. A lookup module may support single or multiple lookup sources. The lookup module that ships with JAWS is able to support multiple lookup sources. For each lookup source, a “rule set” defines the important details of the lookup such as the rule set name, information source, query definition, and parsing details. When the lookup module is called, the data passed into the lookup module contains the name of the rule set to be used to perform the lookup. If you want to extend the lookup module, you need only define a rule set.

All lookup modules must support the following API methods:

Initialize

Initialize performs any initialization necessary for the lookup module. Any initialization that must not be performed in DllMain (thread creation, synchronization, etc.) should be performed here. Call Initialize prior to calling any other lookup module functions.
 

Syntax
HRESULT Initialize(void);
Return Value
Returns S_OK (0x00000000L) if initialization was successful, otherwise E_FAIL (0x80004005L). If initialization fails, the DLL should not be used.

 

DeInitialize

DeInitialize performs any cleanup necessary for the lookup module. Any destruction that must not be performed in DllMain (thread destruction, synchronization, etc.) should be performed here. Call DeInitialize after all use of the lookup module is complete, immediately prior to calling FreeLibrary.
 

Syntax
HRESULT DeInitialize(void);
Return Value
Returns S_OK (0x00000000L) if deinitialization was successful, otherwise E_FAIL (0x80004005L).

 

GetInterfaceSchema

GetInterfaceSchema returns the numeric version of the supported interface. The interface version specified in this documentation is 1. Should additional functions later be supported, the interface version will increment.
 

Syntax
HRESULT GetInterfaceSchema(
DWORD& dwSchema);
Parameters
dwSchema [out]
dwSchema will receive the API schema supported by the Lookup Module.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, a non-zero value is returned.

 

GetFriendlyName

GetFriendlyName returns the friendly name(s) for a lookup module or the rule sets belonging to the module. If a lookup module has no rule sets associated with it, it returns the localized name for the lookup module. If a lookup module has rule sets, it returns a bar-delimited list of colon-delimited file name:friendly name pairs for the lookup module. For most lookup modules, there will only be a single localized name. However, for the Freedom Scientific Lookup Module, the bar delimited group of localized file names and friendly names consist of the localized rule set names supported by the lookup module.
 

Syntax
HRESULT GetFriendlyName (
LPWSTR lpszName,
DWORD& dwSize
);
Parameters
lpszName [out]
            A pointer to a buffer that receives a localized name for the module or file name-friendly name pairs for supported rule sets.
dwSize [in, out]
The size of the lpszName buffer in wide chars. If the output data is larger than the supplied buffer, upon return, this variable will hold the required size.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, one of the following errors may be returned:
E_INVALID_ARG (0x80070057L)
            lpszName is NULL or dwSize is 0.
E_INSUFFICIENT_BUFFER (0x802A0001L)
lpszName is not large enough to hold the return data.

 

Describe

Describe returns a localized description of the lookup module or specified rule set.
 

Syntax
HRESULT Describe (
LPCWSTR lpszRuleSet,
LPWSTR lpszOut,
DWORD& dwSize
);
Parameters
lpszRuleSet [in, optional]
A null terminated string containing the name of the RuleSet for which the description should be returned. If this value is null, then the general description for the lookup module is returned.
lpszOut [out]
A pointer to a buffer that receives the output data.
dwSize [in, out]
The size of the lpszOut buffer in wide chars. If the output data is larger than the supplied buffer, upon return, this variable will hold the required size.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, one of the following errors may be returned:
E_INVALIDARG (0x80070057L)
            In the case of the generic Freedom Scientific Lookup Module, this error is returned if lpszRuleSet is NULL (it is optional in general, but not in this specific case). Also returned if lpszOut is NULL or dwSize is 0.
E_RULESET_NOT_FOUND (0x802A0002L)
The rule set specified by lpszRuleSet is not supported by the lookup module.
E_INSUFFICIENT_BUFFER (0x802A0001L)
lpszName is not large enough to hold the return data.

 

Invoke

Invoke requests a query from a lookup module. This function performs a synchronous lookup. Aasynchronous lookups are not supported in JAWS. Different combination of the input arguments may be used depending on the lookup module.
 

Syntax
HRESULT Invoke (
LPCWSTR lpszRuleSet,
LPCWSTR lpszIn,
LPCWSTR lpszContext,
DWORD dwOffset,
LCID lcidAppLocale,
LPWSTR lpszOut,
DWORD& dwSize,
LPVOID lpExtra = NULL
);
Parameters
lpszRuleSet [in, optional]
An optional null-terminated string that contains the name of the rule set that the lookup module must use to perform the query.
lpszIn [in]
A null terminated string containing the input data for the query. This may be the word or phrase at the current cursor. This value may be NULL if the lookup module utilizes the Context and Offset arguments.
lpszContext [in]
A null terminated string containing context data for the query. For example, some lookup modules may utilize the sentence or paragraph containing the target word. This argument can be NULL.
dwOffset [in]
The 0-based offset of the targeted word in lpszContext. 0xffffffff indicates no offset.
lcidAppLocale [in]
The locale ID of the calling application. This will allow us to select the appropriate localized lookup source, display a localized UI, or return error messages in the application’s language.
lpszOut [out]
A pointer to a buffer that receives the output data. Depending on the lookup module, this could be an error, command, replacement string, etc.
dwSize [in, out]
The size of the lpszOut buffer in wide chars.
lpExtra [in]
This argument may be optionally used to pass additional information to the lookup module. The content and format of the data depends on the requirements of the lookup module. The value can be NULL.
Return Value
If the function succeeds, the return value is S_OK (0x00000000L). Otherwise, one of the following errors may be returned:
E_INVALIDARG (0x80070057L)
The rule set specified by lpszRuleSet is not supported by the lookup module.
E_INSUFFICIENT_BUFFER (0x802A0001L)
lpszName is not large enough to hold the return data. In this case, dwSize is set to the buffer size (in characters including the null terminator) required to hold the data.
E_RULESET_NOT_FOUND (0x802A0002L)
            The requested rule set was not found.
E_REQUEST_FAILED (0x802A0003L)
            The lookup attempt failed. Indicates a malformed query.
E_REQUEST_NO_RESULTS (0x802A0004L)
            The lookup succeeded, but there were no results for the search term.
E_REQUEST_TIMEOUT (0x802A0005L)
            The lookup took longer than the allowed amount of time.

 

Rule Set and Query Format

The generic Freedom Scientific lookup module supports the ability to do lookups with user-defined rule sets. A rule set consists of a query and a variety of settings that specify how the rule set is exposed to the end-user and how the query is executed. To create a custom rule set, you must provide two files, a rule set file (.RUL) and a query file (.QRY) with the following conditions:

The files must have the same name (except for extension).

The rule set file is an INI-formatted file. The file contains one section, [Details].

In the details section of the rule set file, you may provide the following keys:

+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Key Name                          | Value                                                                                                                                                                                                      |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| FriendlyName                      | A string specifying a “friendly” name for the rule set. Mandatory. Maximum 100 characters.                                                                                                                 |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Description                       | A string containing a brief description for the rule set. Optional. Maximum 500 characters.                                                                                                                |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Timeout                           | An unsigned integer containing the timeout in milliseconds to be used for queries. Any query using this rule set will be aborted if it exceeds the timeout specified.                                      |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Version                           | Internal use only. A string of the format “x.x.x” that specifies the version of the rule set. This will be used for Freedom Scientific-distributed rule sets in order to provide automatic update service. |
|                                   |                                                                                                                                                                                                            |
|                                   |                                                                                                                                                                                                            |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

 

Example of a Valid Rule Set

The following is an example of a valid rule set:
 

[Details]
FriendlyName=Wikipedia
Description=Look up an encyclopedia entry for a word or phrase.
Timeout=15000

 

The query file contains an XQuery function that queries the desired resource, parses results, and returns as its output a single string. In addition to XQuery functions, the XQilla extension and XSLT functions are also available for use from the query. For more information, see: XQilla XQuery Extension Functions.

Within the query file, you can use the token |ARG_1...ARG_n| to mark a location where input should be substituted into the query string. The token need not be placed directly into a search URL; the query author can place it into a variable that can be further parsed or modified prior to using it. This allows you to pass multiple arguments into |ARG_1...ARG_n| and parse them into separate variables within the query code.

Example of a Valid Query

The following is an example of a valid query:
 

declare namespace wiki = "http://opensearch.org/searchsuggest2";
declare variable $new_line := '
';
declare variable $doc := doc("http://en.wikipedia.org/w/api.php?action=opensearch&search=|ARG_1...ARG_n|&format=xml");
for $item in $doc/wiki:SearchSuggestion//wiki:Item[1]
return (fn:normalize-space(data($item//wiki:Description)), $new_line)

 

In this query, the |ARG_1...ARG_n| token will be replaced by the search term that is passed down from the script.

 

Additional Resources

For more details on Research It, see Creating Research It Rules

For the functions used to customize Research It Rules using the JAWS Scripting Language, see the category book in the reference guide, Research It.

Keyword: Return

Description

A Return statement is used to terminate execution of the function or script in which it appears.

Use a Return statement within a function to shift control (and the value of an expression if you provide one) to the calling function or script. To define return values, precede the name of the function by the return type.

Since a script cannot return a value, never follow a return statement in a script by a value.

Syntax

Returning a Function Value

"function type" Function "function name" ("parameter list")

 

·         "function type" - returns one of the following types of values to the calling script or function:

o   Int - an integer value.

o   String - a string value.

o   Handle - a window handle.

o   Object - an object.

o   Variant - a variant value.

o   Void - no value.

 

·         Function - the keyword, Function, must follow the function type.

·         "function name" - the name of the function.

·         "Parameter list" - Parameters for the function must be enclosed in parentheses, each one declared and separated by commas, except for the last one. Each parameter declaration must include its type, the keyword, ByRef, if it is obtained by reference when the function is called, and its parameter name. Required parameters must always precede optional ones. All parameters declared after the keyword, Optional, are assumed to be optional. Parameters may be declared as being passed by reference whether they are required or optional.

 

Returning a Value/Expression

Return "value/expression"

When the Return keyword is used to shift control to a calling script or function with a value or expression (as from a conditional statement structure, the value and/or expression must match the function type. The only exception to this is where the function type is Void or Variant. An example of such a code fragment would be something like the following:

Return (GetWindowClass (hwnd) == cwc_RichEdit20
            && GetWindowName(hwnd) == wn_MyWindowName)
Or
Return ( ! StringIsBlank (gsMyDlgName)
            || ! StringIsBlank (gsMyDlgText) )

Remarks

If a Return statement is not followed by a value, its value is assumed to be Null.

A Return statement may return the result of evaluating the expression following it. The expression may be a simple value, or it may include a complex series of conditional tests or function calls. No matter how simple or complex the expression, the expression is evaluated and its result is returned to the calling function. The expression must evaluate to the type expected by the return statement.

Code Samples

The following examples illustrate how the Return statement may be used to shift control from a calling script or function, and how a Return statement may be used to shift control from within a conditional statement structure. although these examples are rather simplistic in nature, they show how the syntax is applied to a real block of code.

Assigning the Output of a Function to a Variable

When a function returns a value to the calling script or user-defined function, you may store that value in either a local or global variable. You can then use that variable to make decisions on what the calling script or user-defined function should do next.

String Function GetMyWorkPlace ()
Return "Freedom Scientific"
EndFunction
Script SayMyWorkplace ()
Var
            String sText
Let sText = GetMyWorkplace () ; store the return value of the called function in sText.
If sText != cscNullThen ; the function returned a value other than null or nothing.
            SayMessage (ot_Message, sText)
EndIf
EndScript

Using a Function as a Parameter For Another Function

You can use the return value of one function as the parameter for another. Using the previous example, the return value from the user-defined function, GetMyWorkplace, may be passed directly to the SayMessage function without storing it in a local variable first. The only disadvantage to this approach is that the function may not retrieve any text, causing JAWS to say nothing when the SayMessage function is called from the script.

String Function GetMyWorkPlace (Int iAnswer)
If iAnswer == TRUE then
            Return "Freedom Scientific"
Else
            Return cscNull
EndIf
EndFunction
Script SayMyWorkplace ()
Var
            Int iYes
; JAWS will never speak when the below function call to GetMyWorkplace is used in the SayMessage function
; because no value is assigned to the parameter passed to the function.
; Use the return value from GetMyWorkplace as the message text for SayMessage.
SayMessage (ot_message, GetMyWorkplace (iYes))
EndScript
Script SayMyWorkplace ()
; JAWS will always speak when the below function call to GetMyWorkplace is used in the SayMessage function ;
; because a value is assigned to the parameter passed to the function.
; Use the return value from the function, GetMyWorkplace, as the message text for SayMessage.
SayMessage (ot_message, GetMyWorkplace (TRUE))
EndScript

Returning Conditionally

The below sample is a very basic example of returning conditionally. The function is a string function because the values it returns are strings. Although you could hard-code the strings within the function as quoted strings, it is best practice to avoid hard-coding anywhere because you may need to use the constants elsewhere.

Const
            sUnchecked = "unchecked",
            sChecked = "checked",
            sPartially = "partially checked"
String Function GetStatusString (Int iState)
If iState == 0
            Return sUnchecked
ElIf iState == 1
            Return sChecked
ElIf iState == 2
            Return sPpartially
EndIf
Return cscNull ; "", that is, nothing.
EndFunction

Returning from a Script

The Return statement in the below nonsense script ensures that processing stops when the script is performed from within an active dialog. Otherwise, the confirming message that you are not in a dialog is processed and spoken if the script is performed outside of an active dialog.

Script MyDialogTest ()
Var
            String smsgNoDialog
Let smsgNoDialog = "not in a dialog"
If DialogActive () then ; built-in function that test for whether a dialog is active.
            Return ; do not continue processing at all; a dialog is active.
EndIf
; Only process this if not in a dialog.
SayMessage (ot_message,smsgNoDialog)
EndScript

Keywords: Pause, Delay

Description

Sometimes Pause and/or Delay statements are needed for slower PCs to process your scripts and functions efficiently. When you pass keystrokes from within your scripts or functions, or when you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait to continue processing. However, Pause and Delay statements should only be used where events are not available, or where scheduling a function is undesirable. So the code samples below are for illustration only.

The Pause and Delay functions differ in how much time and how much control they allow for the system to catch up with your script or function. The Pause function forces your script or function to stop processing so that other applications can complete tasks, but you cannot control the amount of time of that forced stop. Alternatively, the delay function lets you specify the amount of time in tenths of a second your script or function should wait before continuing to process instructions.

Pause

A pause statement causes JAWS to yield to the time requirements of other applications. Once other applications complete their tasks, JAWS resumes processing the script or function.

Syntax

 Pause ()
 

Remarks

Never place a Pause statement inside a While loop as it will cause very unpredictable results and may even result in a JAWS crash.

Code Sample

The below code sample passes a keystroke through to the application, and waits for a menu to be activated. Before JAWS performs the TypeKey function, the MenusActive function must determine if the menu bar is open. Once the menu is activated, it passes another specific keystroke. But if the menu is not activated, the code causes an error message to be processed.

TypeKey (skMyMenuKeystroke) ; Open the File menu.
Pause () ; Allow system to open the menu.
If MenusActive () then ; Make sure the menu bar opened.
            TypeKey (skMyOptionKeystroke) ; Activate the option desired .
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; menu bar did not open error message.
EndIf

 

Delay

A Delay statement gives you much more control than the Pause statement to wait to continue processing your script. Since the Pause function relies on other system processes, the amount of time your script is stopped can vary from system to system. If this amount of time is not enough for your script to process correctly and consistently, use Delay statements.

Syntax

 Delay (nTimeValue, nNoEvents)
 
 

·         nTimeValue is required. It is a positive integer value, indicating the length of time in tenths of a second that the script or function should wait before continuing to process its instructions.

·         nNoEvents is an optional second parameter. It is a numeric value, indicating to JAWS whether to suppress checking for, and processing, FocusChangedEvent and NewTextEvent functions before returning from the delay. When you pass this second optional parameter as TRUE, JAWS suppresses any processing of the FocusChanged or NewText events. But when you pass the parameter as FALSE, JAWS does not suppress the processing of these two events.

Code Samples

In the first code sample, the first TypeKey function activates the menu. JAWS then performs the Delay function to allow three tenths of a second for the menu to open. The MenusActive function then determines if the menu is open. If it is open, then JAWS performs the second TypeKey function and the menu option is activated. Otherwise, JAWS processes an appropriate error message.

TypeKey (skMyKeystroke) ; Open the File menu.
Delay (3) ; Allow system to open the menu.
If MenusActive () then
            TypeKey (skMyMenuOptionKeystroke) ; Activate the menu option.
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; The menu bar did not open.
EndIf

The second code sample is similar, except that the second optional parameter is used in the Delay statement. This forces JAWS to wait at least the three seconds for the menu to open because the nNoEvents parameter is set to TRUE. If it were set to FALSE, JAWS would not force the time limit to expire before continuing to process the function. In that case, JAWS simply would wait for focus changes to occur, and if the menu became active prior to the three seconds' time limit set by the first parameter, processing of function instructions would just continue. But setting the second parameter to TRUE ensures that JAWS will wait at least those three seconds before continuing to process function instructions.

TypeKey (skMyKeystroke) ; Open the File menu.
Delay (3, TRUE) ; Allow system to open the menu but do not suppress event changes.
If MenusActive () then
            TypeKey (skMyMenuOptionKeystroke) ; Activate the menu option.
Else
            SayFormattedMessage (OT_ERROR, smsgError_MenuBar) ; The menu bar did not open.
EndIf

Scheduling Functions

There are several types of scheduling functions. Each type is described briefly below with its keyword, descriptions, syntax, returns, remarks (if any), and a code sample. Functions include:

·         ScheduleFunction and UnscheduleFunction

·         QueueFunction

·         ScheduleFunctionAfterWindowGainsFocus

·         SetFocusToWindowAndScheduleFunction

Note: You may schedule a script rather than a function by preceding the name of the script to be called with a dollar sign ($). (See the QueueFunction code sample below.)

In the code samples for each of the functions shown, Notepad is assumed to be the application, and the Script Manager is assumed to be the text editor. But of course, you may test these samples with your own applications.

Keywords: ScheduleFunction, UnscheduleFunction

Description

Unlike Pause and Delay, ScheduleFunction and UnScheduleFunction statements give you much more control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these statements let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions.

Schedule a function to run a user defined function in a set period of time. this is very useful when you want to perform a task and then check on the results at a specified later time. Use UnscheduleFunction if you want to cancel a scheduled function before it has run. Very often, the return value from a ScheduleFunction call is placed into a global variable so that a different script or function can make the related UnscheduleFunction call conditionally.

Syntax

 ScheduleFunction (FunctionName, Time)
 And
 UnscheduleFunction (ID)
 
 

·         For ScheduleFunction, FunctionName is a string representing the name of the function to be executed on a schedule.

·         For ScheduleFunction, Time is an integer representing the amount of time in tenths of a second to elapse before the function is executed.

·         For UnscheduleFunction, ID is the integer value returned by the ScheduleFunction call.

Returns

ScheduleFunction returns an integer ID that you can use to call UnScheduleFunction. If ScheduleFunction returns 0, it means that the timer was not set successfully.

UnscheduleFunction returns an integer value of TRUE if the call was found and canceled. Otherwise UnscheduleFunction returns FALSE.

Remarks

Once ScheduleFunction is called, call UnScheduleFunction to cause the user-defined event not to run.

UnscheduleFunction is used to cancel a ScheduleFunction call. UnscheduleFunction cannot be used without a call to ScheduleFunction.

Code Sample

Open Notepad and type a one-line sentence. then place the cursor at the beginning of the line. Use Script Manager to create the following example. This sample code gets the word at the cursor and speaks it. Then the code schedules a function to get the word at the cursor and spell it 5 seconds later as long as the script has not been reactivated. If the script has been reactivated, the code cancels the function to spell the word at the cursor and starts over again.

Globals
            Int ScheduleID
Void Function SpellIt ()
; Set the id to 0 so that we can test elsewhere if the function has already run.
ScheduleID = 0
; Now spell the word.
SpellString (GetWord ())
EndFunction
Script MyScheduleTest ()
; First, test if your user-defined function, SpellIt, is waiting to run; if so, cancel it.
If ScheduleID != 0
            UnscheduleFunction (ScheduleID)
EndIf
SayString (GetWord ())
; Now schedule your user-defined function, SpellIt, to run 5 seconds later,
; and save the schedule ID so it can be tested to see if the function has run.
ScheduleID = ScheduleFunction ("SpellIt",50)
EndScript

 

Keyword: QueueFunction

 

Description

Use this function to run the function being queued the next time JAWS stops speaking. You may call QueueFunction multiple times in a row, but you may queue only one function at a time. Functions are run in the order you add them to the queue. Stopping speech by pressing control or performing another such action clears the queue.

You can also queue scripts using QueueFunction. To queue a script instead of a function, precede the name of the script to be queued with the dollar sign ($).

Syntax

 QueueFunction ("FunctionName (parameter list)")
 
 

FunctionName is a string containing a function name. It must be enclosed in quotation marks.

Follow the function name by parentheses, and include the function's parameter list (but not as variable names) inside those parentheses. This is similar to how you call a function normally.

Returns

Returns the integer 1 if the function was queued.

Returns the integer 0 if the function was not queued.

Code Sample 1

In the below code sample, each time the user presses INSERT+UpArrow to have the current line in Notepad spoken, JAWS is queued to speak the word at the cursor of the current line after speaking the line itself.

Script SayLine ()
SayLine ()
QueueFunction ("SayWord ()")
EndScript

Code Sample 2

In the below code sample, each time the user presses INSERT+UpArrow to have the current line in Notepad spoken, JAWS is queued to speak the word, "Hello", after speaking the line itself. Notice that the parameter for the SayString function has a backslash (\) before the quotation marks. This is because JAWS needs the backslash prior to the quotation marks in order to interpret the quotation marks properly when they are being used in the manner shown by this sample.

Script SayLine ()
SayLine ()
QueueFunction ("SayString (\"Hello!\")")
EndScript

Code Sample 3

In the below example, the code queues the SayToCursor script. If the dollar sign were omitted, QueueFunction would look for a function to queue instead of a script. For testing in Notepad, place the cursor at different locations on the text you have written. Then press INSERT+UpArrow. You will hear the line spoken, and then spoken again but only up to the current cursor location (not including it) as if you had pressed INSERT+Home.

Script SayLine ()
SayLine ()
QueueFunction ("$SayToCursor ()")
EndScript

Keyword: ScheduleFunctionAfterWindowGainsFocus

 

Description

This function is probably most useful when you know the handle of an application that will soon gain focus and you want something specific to happen when it does. For instance, you might use it in a situation where a configuration setting is modified for an application that will soon gain focus and where the changed configuration should result in some specific behavior. So use this function to schedule a function to run the next time a given window gains focus.

The function is scheduled using the same mechanism that is used by a call to ScheduleFunction . In effect, ScheduleFunction is called to schedule the function specified by the FunctionName parameter the next time a Focus Changed Event occurs and the window handle of the window that just gained focus is the same as the window handle specified by the hwnd parameter.

Also, keep in mind that while the ScheduleFunction time parameter is in tenths of a second, the ScheduleFunctionAfterWindowGainsFocus time parameter is in milliseconds.

Syntax

 ScheduleFunctionAfterWindowGainsFocus (hwnd, "FunctionName", Timeout)
 
 

·         hwnd is the window handle of the window to wait to gain focus before scheduling the function.

·         FunctionName is the name of the function to be executed. It must be enclosed in quotation marks.

·         TimeOut is an integer value representing the maximum amount of time in milliseconds that the function should wait before canceling the scheduled function.

Returns

Returns an integer TRUE when the specified function was scheduled successfully .

Returns an integer FALSE when the function was not scheduled successfully.

Remarks

Unlike the value returned by a ScheduleFunction call, the value returned by a ScheduleFunctionAfterWindowGainsFocus call is not an ID. So you cannot use the return value from ScheduleFunctionAfterWindowGainsFocus for a latter call to UnScheduleFunction. The value returned by ScheduleFunctionAfterWindowGainsFocus indicates whether the function was scheduled successfully. Currently there is no mechanism for unscheduling a function that is scheduled using ScheduleFunctionAfterWindowGainsFocus.

Another key difference between using ScheduleFunctionAfterWindowGainsFocus and using ScheduleFunction is that only one function can be scheduled at a time using ScheduleFunctionAfterWindowGainsFocus. If you call ScheduleFunctionAfterWindowGainsFocus when a function that was previously scheduled using this function has not yet been called, the function will not be scheduled, and ScheduleFunctionAfterWindowGainsFocus will return FALSE. The function specified by the FunctionName parameter is scheduled at the end of focus change event processing after any necessary scripts have been loaded and the FocusChangedEvent function has been called.

ScheduleFunctionAfterWindowGainsFocus returns immediately without waiting for the specified amount of time. Instead, whenever a FocusChanged event is processed, JAWS checks to determine whether there is an unprocessed request to schedule a function after a given window gains focus. If there is such a scheduled function call, and if the function has timed out, the scheduled function is canceled.

Code Sample

In the below example, since the function is scheduled when the window gains focus, it will only run if the window looses and regains focus within the time limit set by the third parameter. We overwrite FocusChangedEvent in the Notepad script. but of course, this may be tested elsewhere. The function first calls the default FocusChangedEvent function using the "Scope" capabilities of the Scripting language. We use ScheduleFunctionAfterWindowGainsFocus so that when Notepad gains focus into its document window, SayAll automatically starts, but only if not in an active dialog. The scheduled call is canceled after five seconds.

Const
            fn_GoToTopAndSayAll = "GoToTopAndSayAll",
            FiveSec = 5000
Void Function GoToTopAndSayAll ()
JAWSTopOfFile ()
SayAll ()
EndFunction
Void Function FocusChangedEvent (Handle hwndFocus, Handle hwndPrevFocus)
default::FocusChangedEvent (hwndFocus, hwndPrevFocus)
If Not DialogActive () then
            ScheduleFunctionAfterWindowGainsFocus (hwndFocus, fn_GoToTopAndSayAll, FiveSec)
EndIf
EndFunction

Keyword: SetFocusToWindowAndScheduleFunction

 

Description

Use this function to set focus to a window and schedule a function to run after that window gains focus. This function first uses ScheduleFunctionAfterWindowGainsFocus to schedule the function, and then uses the SetFocus function to set focus to the window. All the comments in the description of the ScheduleFunctionAfterWindowGainsFocus function apply to SetFocusToWindowAndScheduleFunction.

Syntax

 SetFocusToWindowAndScheduleFunction (hwnd, "functionName", Timeout)
 
 

·         hwnd is the window handle of the window to wait to gain focus before scheduling the function.

·         FunctionName is a string representing the name of the function to be executed. the function name must be enclosed in quotation marks.

·         TimeOut is an integer value representing the maximum amount of time in milliseconds that the function should wait before canceling the scheduled function.

Returns

Returns an integer TRUE when the function was successfully scheduled and focus was set to the window.

Returns an integer value of FALSE if the function was not scheduled successfully.

Remarks

SetFocusToWindowAndScheduleFunction returns immediately without waiting for the specified amount of time. Instead, whenever a Focus Changed event is processed, JAWS checks to determine whether there is an unprocessed request to schedule a function after a given window gains focus. If there is, and the function has timed out, the scheduled function is canceled.

Code Sample

The below code sample overwrites FocusChangedEvent in the Notepad script. but of course, this may be tested elsewhere. The function first calls the default FocusChangedEvent function using the "Scope" capabilities of the Scripting language. Then we test for a dialog to be active. If so, we use SetFocusToWindowAndScheduleFunction so that when a dialog gains focus, the current control is repeated. The scheduled call is canceled after five seconds.

Function FocusChangedEvent(Handle hwndFocus, Handle hwndPrevFocus)
default::FocusChangedEvent(hwndFocus, hwndPrevFocus)
If DialogActive () then
            SetFocusToWindowAndScheduleFunction (hwndFocus,"SayObjectTypeAndText",50000)
EndIf
EndFunction

Additional Resources

Calling Scripts and Functions

Reference Guide

Enumerator Functions

The purpose of an enumerator function is to call a callback function, which may process the window optionally, and either stop or continue the enumeration, depending on what the callback function tests and returns. There are several built-in enumerator functions that ship with JAWS. Only a couple are shown below with brief descriptions. But we also include a code sample to show how an enumeration function may be implemented.

For a complete list of enumerator functions, see Reference Guide.

Example 1: EnumerateChildWindows

Description

This function calls a specified function for each child of the starting window. You must define it as an integer function with a handle parameter.

Syntax

EnumerateChildWindows (hWnd, FunctionCallback)

·         hWnd is the handle of the window from which to start enumeration.

·         FunctionCallback is a string containing the name of the function to call for each child window.

 

Returns

Returns an integer value of true if the enumeration completes.

Returns an integer value of false if the enumeration terminates when the callback function returns false for a window.

Example 2: EnumerateTypeAndTextStringsForWindow

 

Description

This function obtains information about each control using MSAA. The order in which items are enumerated is dictated by how they appear in the MSAA hierarchy. The callback function takes the following parameters: Int typeCode, Int stateCode, String name, String value, String Description. If the callback function returns 0, the enumeration stops. If it returns 1, the enumeration continues.

Syntax

EnumerateTypeAndTextStringsForWindow (hWnd, CallbackName)

·         hWnd is the handle of the window containing the controls to be enumerated.

·         CallbackName is a string containing the name of the function to call for each control.

 

Returns

Returns an integer value for the number of controls enumerated.

Code Sample

The below nonsense code sample checks any dialog in Notepad for the Open button. if the Open button is not found in the active dialog, the JAWS indicates an error message. if the Open button is found, the JAWS indicates that it found it.

Notice that the constants declared for the messages include a replaceable parameter %1 symbol. This is for use with the FormatString function in order to control part of the message depending on the item you wish to place into the message.

Finally, notice the use of the gbNotFound flag. If the error message for not finding the Open button were part of the callback function, then the JAWS would indicate the error message repeatedly as the callback function continues to search for the Open button. By using the flag, it is the script that determines whether to indicate the error message.

Const
            sOpenBtn= "Open", ;Open button in Open dialog
            sOpenDlg = "Open", ; real window name of Open dialog
            fn_LookForOpenButton = "LookForOpenButton", ; callback function name
            smsgFound = "I found the %1 button.",
            smsgNotFound = "I can't find the %1 button."
Globals
            Int gbNotFound ; for the script to determine whether to speak the error message.
Int Function LookForOpenButton (Int iType, Int nState, String sName, String sValue, String sDescription)
;This is the callback function for the EnumerateTypeAndTextForWindow test in the below script.
If iType == wt_button
&& sName == sOpenBtn
            SayFormattedMessage (ot_JAWS_message, FormatString(smsgFound,sName))
            gbNotFound = FALSE
            Return FALSE ; Stop looking.
Else
            gbNotFound = TRUE
            Return TRUE ; Keep looking.
EndIf
EndFunction
Script MyTest ()
Var
            Handle hReal
hReal = GetRealWindow (GetFocus())
If DialogActive ()
            EnumerateTypeAndTextStringsForWindow (hReal, fn_LookForOpenButton)
EndIf
If gbNotFound then
            gbNotFound = !gbNotFound ; Reverse the flag.
            SayFormattedMessage (ot_error, FormatString(smsgNotFound,sOpenBtn))
EndIf
EndScript

Redirecting Function Calls Using Scope

The scope qualifier is used to specify the location where JAWS should search for a function or script. Unqualified function calls behave exactly as in the standard calling hierarchy for calling scripts and functions.

The syntax for using scope qualifiers is this: To call a specific instance of a script or function, precede its name by the basename of the file in which it resides, followed by two colons (::). If the base name contains spaces, replace the spaces in the call with the underline character (_).

Be careful when specifying scope. If you restrict a function to a specific scope, all of the calls made from that function are also restricted to that scope. For instance, if you make the following restriction:

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 then any function calls in the default FocusChangedEvent are also restricted to default.

 

Also be careful when specifying scope that you do not bypass any functions that may be layered in script binary (jsb) files between your script file and default. For instance, in a Microsoft Word script, specifying

Default::GetCustomTutorMessage ()

 would skip over the version of that function in the Office script binary (jsb) file. that binary file is part of the Microsoft Word script set. Generally, when restricting scope, it is safer to restrict it to Self rather than to Default unless you are sure that default is really the intended scope.

 

The search for a qualified name only occurs within the scope of the file to which the qualification refers. So if you call Default::SayString from within an application script source file, only default.jsb is searched for SayString. If that function also exists within the application script source file, it is ignored.

In addition to specifying a qualification by script file name, you may also specify that a built-in function be called. For example,

Builtin::SayLine ()

 specifies that the built-in SayLine function be called, not an overwritten SayLine function.

 

You may use as a qualifier, meaning that the name of the current script file should be searched. So, if you are writing script code in "MyApplication.jss", the following are identical qualifiers specifying that the search for SayCell should begin in the "MyApplication.jsb script binary file:

MyApplication::SayCell ()
Self::SayCell ()

Control Flow

The Freedom Scientific Scripting language allows for sequential and decision-making control flow processing. when a script or function performs statements step by step regardless of any situations that may arise during the execution of the script or function, it is called sequential flow control. If you create statements that perform an evaluation, it is called branching, conditional, or decision-making.

For details on working with evaluation and looping statement structures, see:

·         Conditional Statement Structures,

·         Looping Functions,

·         Return Statements.

 

Conditional Statement Structures

Unlike other programming languages, the Freedom Scientific Scripting language does not allow for case or switch statement structures. However, the If-ElIf-Else-EndIf statement structure is a very powerful tool, described below in its various forms and syntax, along with some code samples.

Description

The If keyword marks the beginning of an If-EndIf statement. A fully formulated conditional If statement structure includes: If...ElIf...Else...EndIf. Any expressions appearing after the If are used to evaluate whether condition(s) is(are) true. Expressions after any ElIf statements do the same. For example, can a certain graphics character be found in the active window?

Every If statement structure must begin and end with the keywords, If and EndIf. But the keywords, Then and Else, are optional.

If-ElIf-Else-EndIf statement structures always ask whether a condition or set of conditions is true or false . When a condition is not met (false), then the actions that follow the Else are processed.

The statements processed when conditions are met typically are calls to other functions. But also, a common statement to place within an If-EndIf statement structure is a Return statement. That is, if a condition is true and processing is performed as a result, you may not wish to perform any further evaluation of conditions within the current statement structure. In that situation, place a Return statement after the function calls you do wish to perform when a condition is true.

 For more details on working with Return statements, see Return Function.

 

Syntax

 
 

If Condition 1
            Statements
ElIf Condition 2
            Statements
ElIf Condition #N
            Statements
Else
            Statements
EndIf

 

·         If Condition 1 is the statement that marks the beginning of the conditional statement structure. When this condition evaluates to true, all statements following the If Condition 1 statement are processed and any ElIf or Else conditions are skipped.

·         ElIf Condition #n statements are optional for evaluating further conditions beyond the first condition evaluated by the If Condition 1 statement. #N refers to any number because it is possible to have many conditional ElIf statements after the first If statement.

·         Else statement is optional and is processed only if all prior conditional If and/or ElIf statements have evaluated to false.

·         EndIf is the statement that marks the end of the conditional statement structure.

Compound Conditions

You may have compound conditions in an If-EndIf statement structure. For ease of readability, you should place each statement of a compound condition statement on its own line. Compound conditions may be "and" as well as "or" conditions. use the "&&" and "||" operators for this purpose.

When you make an "and" compound condition, all the conditions in the compound statement must evaluate to true in order for statements following the compound condition to be processed. Conversely, when you use an "or" compound condition, any one of the conditions within the compound condition may evaluate to true in order for statements following the compound condition to be processed.

Nested Conditional Statement Structures

You may nest If-EndIf statement structures. But take care that each begins and ends with the If-EndIf statements in order that the compiler does not return an error or that processing yields unpredictable results. For readability, each nested If-EndIf statement structure should be indented the appropriate level.

Remarks

When making compound conditional statements and nested statements, make sure to indent the statements between each set of conditions. This greatly improves ease of readability as well as making sure you are keeping track of what statements you intend to process when a certain condition evaluates to true.

Use Return statements judiciously to ensure that you test all conditions you need to evaluate. Guard against returning prematurely, thus short-circuiting any code that runs after the If-ElIf-Else-EndIf block. This may or may not be desirable, depending on what you want to accomplish. The order in which you test conditions is critical.

Code Samples

Single Condition

Since "Then" is optional, the following two code blocks are equivalent:

If MyCondition then ; true
            Statement
EndIf
If MyCondition ; true
            statement
EndIf

If you need statements to be processed when all prior conditions evaluate to false, your code should look like this:

If MyCondition ; true
            Statement
Else ; false
            Statement
EndIf

Multiple Conditions

The below code block shows additional conditions testing.

If MyCondition 1 ; true
            Statements)
ElIf MyCondition 2 ; true
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Compound Conditions

The below code blocks show both "and" condition testing as well as "or" testing.

If MyCondition 1 ; true
&& MyCondition 2 ; also true
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, #n being however many && condition statements exist in the ElIf code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf
If MyCondition 1 ; true
|| MyCondition 2 ; or true, one or the other must be true.
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, both must be true.
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Adding parentheses around conditions ensures testing is even clearer:

If (MyCondition 1
&& MyCondition 2) ; both must be true.
            Statements)
ElIf (MyCondition 3
&& MyCondition 4) ; both must be true,
|| MyCondition 5 ; or this condition by itself must be true.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Nested Conditions

The below code block shows nesting.

If MyCondition 1 ; true
            If My NestedCondition A ; true
                        Statements)
            EndIf ;end of level 1 nesting
            Return ; no further processing.
ElIf MyCondition 2 ; true
            Statements)
            If MyNestedCondition B
            && MyNestedCondition C ; both must be true.
                        Return ; no further processing.
            ElIf MyNestedCondition D
                        Statements
                        Return ; no further processing.
            Else ; my nested conditions evaluate to false.
                        Statements
            EndIf ; end of nesting conditions level 1.
Else ; false, none of the above conditions evaluated to true, and so testing continued.
            Statement
EndIf

Negative Conditions

The below code block evaluates to true if a condition is not met. Sometimes it is easier to test for a condition not to be true.

If Not MyCondition 1 ; true
            Statements)
EndIf

Looping Functions

The Freedom Scientific Scripting language supports three major types of looping functions:

While-EndWhile

For-EndFor

ForEach-EndForEach

CAUTION: If you get into an infinite loop, you can dump JAWS. Assuming that your code does not start running again when JAWS restarts, you can modify your code and fix the problem with the infinite loop before running the code again.

Keywords: While-EndWhile

Description

The While and EndWhile keywords begin and terminate a While loop. Follow the While keyword by a conditional statement, optionally enclosed in parentheses. As long as the condition(s) in that statement evaluate to true, the loop allows a given set of actions to be performed repeatedly.

While loops may be nested, but each nesting level must begin and terminate with the While-EndWhile keywords.

Syntax

 

While (Condition)
            Statement(s) ; Call functions.
EndWhile

 

·         Condition is the code that causes the loop to execute as long as it evaluates to true.

·         Statement(s) are the actions to be performed as long as the loop continues.

 

Remarks

You can use While loops to save space and programming time. However loops can be dangerous. If the tested condition is not met at least once, the code inside the loop never runs.

Most critical of all: You must take care to avoid creating an infinite loop at run-time. Ensure that the tested condition eventually evaluates to false. And ensure that any compound conditions for a While loop also eventually evaluate to false.

Unlike For loops, While loops do not increment or decrement automatically. So if you use an iterator in the test condition of the While loop, you must initialize the iterator and take care to increment or decrement the iterator inside the loop.

Never use a Pause statement from inside a While loop as it will cause very unpredictable results or an infinite loop.

Code Samples

The first code sample simply counts from 1 to 10 when the script is run no matter where it is run from within the application. The second sample adds a conditional test inside the loop. If that condition is met, the function exits, thus terminating the loop in the function.

Of course, an even more efficient way to handle this scenario is never to run the loop in the first place. So the third sample tests for the condition first and returns if the conditions are true. This way, the looping function is never called.

Script MyLoopTest () ; no conditions inside the loop to bail out early.
Var
            Int iCounter,
            String smsgDone
smsgDone = "I'm done!"
iCounter = 1 ; Initialize iterator.
While iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayMessage (ot_JAWS_message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed while a menu or dialog is active.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
            ;Test to bail out early if a menu or dialog is active:
            If MenusActive ()
            || DialogActive ()
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript
Script MyLoopTest () ; with a test to stop processing before ever calling the looping function if the key assigned to the script is pressed from an active menu or dialog.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
;Test to bail out early if a menu or dialog is active:
If MenusActive ()
|| DialogActive ()
            SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
            Return
EndIf
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: For, To, Descending, EndFor

 

Description

The For and EndFor keywords begin and terminate a For loop. Follow the For keyword by an iterator assigned to an integer range statement, specifying the initial value through the final value of the iterator.

For loops may be nested, but every For loop must begin and terminate with the For and EndFor keywords.

For loops allow a given set of actions to be performed repeatedly as long as the iterator specified in the For loop ranges from the initial value of the iterator through the final value. By default, the iterator starts at the initial value and increments by 1 until it reaches the final value. Using the optional Descending keyword specifies that the iterator starts at the initial value and decrements by 1 until it reaches the final value.

Syntax

 

For x = Start to End Descending
            Statements(s) ; Call functions.
EndFor

 

·         X is an integer variable to be iterated in the loop.

·         Start is the initial value, either an integer variable or integer constant, of X in the loop.

·         End is the final value, either an integer variable or integer constant, of X in the loop.

·         Descending is an optional keyword, specifying that X should be decremented instead of incremented in the loop.

 

Remarks

Like While loops, For loops may be used to save space and programming time. However they can also be dangerous. If the iterator is set to an initial value that is greater than the final value, and the iterator is set to increment through the loop, the code inside the For loop is never run. Likewise, if the iterator is set to an initial value that is less than the final value, and the iterator is set to decrement through the loop, the code inside the For loop is never run.

Most critical of all: Avoid creating an infinite loop at run-time. In a typical For loop, you should not modify the iterator inside the loop; instead, allow the For loop to increment or decrement the iterator automatically. Do not modify the iterator inside the For loop so that it never reaches the final value. If you want the iterator to decrement instead of increment, you must initialize the iterator in order that the starting value is greater than the ending value.

Code Sample

The first code sample is a very simple For-EndFor loop that counts from 1 to 10. The second code sample reverses the count. the third code sample has a condition inside the loop that halts counting early if it is met.

Script MyLoopTest () ; Count from 1 to 10.
Var
            Int iStart,
            Int iEnd,
            String sMsgDone
smsgDone = "I'm done!"
iEnd = 10 ; final value of iterator
For iStart = 1 to iEnd
            Sayinteger(iStart) ; iterates automatically.
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; Reverse the count.
Var
            Int iStart,
            Int iEnd,
            String smsgDone
smsgDone = "I'm done!"
iEnd = 1
For iStart = 10 to iEnd Descending
            Sayinteger(iStart)
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed twice quickly.
Var
            Int iStart,
            Int iEnd,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iEnd = 10
For iStart = 1 to iEnd
            Sayinteger(iStart)
            If isSameScript () ; Key assigned to script is pressed twice quickly.
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndFor
SayFormattedMessage (ot_JAWS_Message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: ForEach, In, EndForEach 

 

Description

The ForEach and EndForEach keywords begin and terminate a ForEach loop. Follow a ForEach keyword by a string variable to access the keys for each member of the collection, and the collection to be accessed.

ForEach loops allow enumerating each member of a collection through its key. ForEach loops may be nested, but every ForEach loop must begin and end with the ForEach and EndForEach keywords.

Syntax

 

ForEach k in col
            ... ;k is the key for each member.
            ... ;col[k] is the member in the collection matching the key.
            Statements()
EndForEach

 

·         K is a string variable that is the key for a member in the collection.

·         Col is the collection to be accessed.

·         Statement(s) are the actions (function calls) to be performed within the ForEach loop.

 

Remarks

The ForEach loop accesses the members of the collection by alphabetical order of the member keys.

The string variable contains the key for each member in the collection. To access the collection member, use the name of the collection followed by the key variable in square brackets.

Code Sample

The below code sample names flowers by color and types each message on a separate line into Notepad using ForEach looping. You save code statements in the calling function by placing the initialization of each flower's name and color into its own function. You save code statements in the script by making the function that gathers the collection and performs the loop. Also in this way, you may add other statements to the script to call CollectionOfFlowers under one set of conditions and call, for example, CollectionOfFruit, for a different condition.

Additionally, the extent of the collection in the function is determined only by how many statements it has. If you make the collection bigger, the ForEach loop does not need to change because it is already set to handle however many items exist in the collection.

Void Function FlowersInit(collection Flowers, String Name, String Color)
;Initialize each flower's name and color, ppassed by the calling function, CollectionOfFlowers.
Let Flowers.Name = Name
Let Flowers.Color = Color
EndFunction
Void Function CollectionofFlowers()
Var
            Collection Plants,
            Collection Flowers,
            String Key,
            String smsgPlantInfo
Let sMsgPlantInfo = "I am a %1 %2." ;%1 is the color, %2 is the name of each flower in the collection.
Let Plants = new collection
Let Flowers = new collection
FlowersInit(Flowers,"lily","white")
Let Plants.lily = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"daffodil","yellow")
Let Plants.daffodil = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"orchid","purple")
Let Plants.orchid = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"iris","blue")
Let Plants.iris = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"rose","red")
Let Plants.rose = Flowers
Let Flowers = new collection
ForEach Key in Plants
            SayFormattedMessage (ot_JAWS_message,FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name))
            TypeString(FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name)
                        +CscBufferNewLine)
EndForEach
;Remove the collections using built-in functions.
CollectionRemoveAll (Flowers)
CollectionRemoveAll (Plants)
EndFunction
Script MyLoopTest ()
;This script calls the function that names each flower in the collection by color.
CollectionOfFlowers ()
EndScript

Non-Aggregate Variables

The Freedom Scientific Scripting language offers several types of variables you can define for your scripts and functions. The type of a variable determines the set of values a variable may hold.

For example, non-aggregate variable types are for variables that may hold only one value at a time; whereas, aggregate variable types are for variables that may hold a set of values simultaneously. Aggregate variable types include collections and arrays. Collections may hold items of different types, but arrays are defined to hold items of a specific type and only that type, (e.g., the StringArray or IntArray type.)

For more information about aggregate variable types, see Collection Type/> and Array Type.

Remarks

Declare all variables with a name and a type before using them within a script or function.

Give each variable a unique name to distinguish it from other functions and names used in a particular script or in the script source file itself.

Do not try to use duplicate variable names within the same scope because doing so will cause errors at compile time. Also keep in mind that local variables with the same names as global variables take precedence over those global variables.

Non-aggregate Variable Types

Non-aggregate variable types allow variables to store only one type of information. They include:

·         Integer - stores numeric values

·         String – stores a string of characters

·         Handle - stores a window handle value

·         Object - stores an object

·         Variant – Stores data that is not assigned to a specific type

 

Integer - stores numeric values

The numeric value stored in an integer must be a positive or negative integer or 0. Floating point numbers are not allowed as values for integer variables. JAWS initializes all integer variables to zero each time a script or function is called where integer variables are declared.

 
 Syntax: Int VariableName
 Example:

            Int iCheckNumber
            Let iCheckNumber = 1000

 

Back to list of Non-aggregate Variables
 

String - Stores a string of characters

 A string may contain letters, numbers, punctuation marks, and spaces. If the string must contain Unicode characters, see Formatting Script Files for UTF-8 to understand how to format your script files so that they honor that character set as well as the standard ASCII character set. To assign a value to a string variable, enclose the characters in quotation marks.

JAWS initializes all string variables to null (no value) when a script or function is called where string variables are declared. Null values may be represented as a pair of quotation marks with no spaces between them, or by the cscNull constant found in the common.jsm default message file.

 
 Syntax: String VariableName
 Example:

            String sMyName ; declares the string
            Let sMyName = “John Smith”

 Back to list of Non-aggregate Variables
  

Handle - stores a window handle value

The operating system dynamically and automatically assigns a window handle to each window within any running application. A window handle is a unique integer that changes each time an application is closed and reopened. For example, when you launch Microsoft Word, the document edit window may have a window handle value of 1000. But when you close Word and then reopen it, the window handle will be another integer.

Since a handle is an integer, it can be used like any other integer variable. But you can use handle integer variables only for identifying window handles. In other words, you cannot store a handle value in an integer variable.

JAWS initializes all handle integer variables to zero each time a script or function is called where handle variables are declared.

 
 Syntax: Handle VariableName
 Example:

            Handle hwnd
            Let hwnd=GetFocus()

 

Back to list of Non-aggregate Variables
  

Object - stores an object

An object variable refers to the types of objects used within software such as Microsoft Office applications.

JAWS initializes all object variables to null (no value) each time a script is called where object variables are declared.

 
 Syntax: Object VariableName
 Example:

            Object oMyAppPointer
            Let oMyApptPointer = getObjectFromEvent(hwnd, ObjID_Window, 0, childID)

 

Back to list of Non-aggregate Variables
  

Variant – Stores data that is not assigned to a specific type

A variant variable is used to store data whose type may vary when assigned.

 
 Syntax: Variant VariableName
 Example:

            Variant vCalendar ; may contain string for day, integer for day of month, etc.
            Let vCalendar = "Today"
            Let vCalendar = 31

 

Back to list of Non-aggregate Variables

Declaring Variables

The Freedom Scientific Scripting language allows you to declare both local and global variables. You may use local variables only in the script or function where you declare them, and you must declare them to precede the code that utilizes them. Typically, you place local variables at the top of a script or function where you plan to use them. but this is a convention, not a requirement.

You may use global variables in two ways from within the current script source (.jss) file: 1) from any script or function where you declare them; or, 2) by referring to a header (.jsh) file that contains the declared global variables you want to use. In this case, you must add an "Include" statement with the name of the relevant header file. Typically, you add the "Include" statement at the top of the script source file. but this is a convention, not a requirement.

Unlike languages with block scoping, though, a variable declared anywhere in a script or function is scoped to the script or function. Therefore, duplicate definitions within the local scope are not allowed in the Freedom Scientific Scripting language.

Since global variables may be accessed by any script set, if you want to keep your global variables private to your script set, be sure to declare them in the script source file instead of the header file, and use names for the global variables that are not likely to be chosen by someone else in their scripts.

Declaring Local Variables

By convention, you may declare local variables within a script or function immediately following the beginning line of the script or function. But you may also place them elsewhere in a script or function as long as your declarations precede the code that utilizes them. Begin local variable declarations with the keyworkd "Var".

For better readability, consider declaring each variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Example:

Var
            String sFirstName,
            String sLastName,
            Int iCheckNumber ; from my checkbook

Declaring Global Variables

It is good practice to declare global variables within a script file immediately following any include and Use statements. This makes them easier to find later. but you may place them anywhere outside of a script or function as long as your declarations precede the code that utilizes them. Begin global variable declarations with the keyword “Globals”.

For better readability, consider declaring each global variable on a separate line followed by a comma, except for the last one. If necessary, add a comment after declaring the variable explaining its intent.

Once you create global variables and assigned values to them, they retain those values even after you close the application that uses them. In other words, unless you reboot the system or unload and reload the screen reader itself, if you reopen that same application, the screen reader remembers the values for any global variables from that application's script file. If you want to clear global variables, you must unload the screen reader from memory and reload it, or you must create some function that re-initializes them each time the application is reopened.

Example:

Globals
            String gsFirstName,
            String gsLastName,
            Handle ghDocWnd ; handle of document wwindow

Using a Header File to Store Variables

As mentioned above, it may be more practical to declare global variables in a script header file. Typically, a header file has an extension of .jsh. When you want to access a header file to declare global variables, you must refer to it with an “Include” statement in the script source file where you want to use the global variables. For examples, see the script source file included in your shared user\settings\(Language) folder. One of the “include” statements for this file is “hjglobal.jsh”. Since the global variables declared in that header file are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions. If you add an “Include” statement for the HJGlobal.jsh file within an application-specific script source file, those global variables become available to that script source file.

Array Type Variables

Keywords:

·         IntArray

·         StringArray

·         HandleArray

·         ObjectArray

·         VariantArray

·         New

Description

An array is a data type that contains a fixed number of elements, and whose elements are accessed by means of an integer index. Arrays are created to hold the data type for which they are intended. For example, IntArrays hold integers, StringArrays hold strings, etc. A VariantArray holds data of type variant, which means that it may hold any data type.

After declaring an array, create it and specify the size of the array using the keyword, New. The array is fixed to be the size specified at the time it is created. Multiple dimensions may be created, and can be separated with a comma.

You may access elements in an array by means of indices enclosed in square brackets.

Syntax

 
 

Var
            TypeArray xArray
            Let xArray = new TypeArray(size)
            Let xArray[i] = value
Var
            TypeArray xyArray
            Let xyArray = new TypeArray(sizeX,sizeY)
            Let xyArray[i,j] = value

 

·         TypeArray is any of the types of arrays that may be created-- IntArray, StringArray, HandleArray, ObjectArray, or VariantArray.

·         XArray is an array variable being declared and created. It is a one-dimensional array.

·         Size is the number of elements in the one-dimensional array xArray.

·         XyArray is an array variable being declared and created. It is a one-dimensional array.

·         SizeX is the number of elements in the first dimension of the one-dimentional array xyArray.

·         SizeY is the number of elements in the second dimension of the one-dimensional array xyArray.

·         I is an index into the array.

·         J is an index into the second dimension of the one-dimensional array.

·         Value is a value assigned to an element of the array.

 
 

Remarks

Declaring the array does not create it. Creation of the array must be done by means of the New statement.

A VariantArray can contain items of any type. Collections can be elements of an array if that array is of type VariantArray. The script code should take care to manage the types of data in variant arrays appropriately.

Arrays are always passed to functions by reference.

Assigning one array to another will result in two variables referring to the same array.

There is no compile-time error if the wrong number of index expressions is specified for an array, or if an index attempts to access outside the bounds of the array.

There is also no runtime error notification, but the error may cause JAWS to lock. Therefore, take care to avoid illegal index references.

Code Sample

The below nonsense example shows the power of arrays and in fact of the VariantArray type.

Messages
;For sMsgGemInfo, %1 is the gem type, %2 the jewelry, %3 the occasion, %4 the number, and %5 the shape
@sMsgGemInfo
%5 %1 %2s for the %4 %3s
@@
EndMessages
Script TestArrays ()
ArrayOfGemsCollections()
EndScript
Void Function GmsInit(Collection Gms, String Name, string Type, String Occasion, Int Number, String Shape)
Let Gms.Name = Name
Let Gms.Type = Type
Let Gms.Occasion = Occasion
Let Gms.Number = Number
Let Gms.Shape = Shape
EndFunction
Void Function ArrayOfGemsCollections()
Var
            VariantArray Gems,
            Collection gms,
            Int i,
            String sMessage
Let Gems = new variantArray[5]
Let gms = new collection
gmsInit(gms,"emerald","pendant","birthday",6,"oval")
Let Gems[1] = gms
Let gms = new collection
GMSInit(gms,"diamond","ring","engagement",7,"square-cut")
Let Gems[2] = gms
Let gms = new collection
GMSInit(gms,"sapphire","bracelet","anniversary",9,"round")
Let Gems[3] = gms
Let gms = new collection
GMSInit(gms,"ruby","pairs of earring","graduation",8,"tear-drop")
Let Gems[4] = gms
Let gms = new collection
GMSInit(gms,"pearl","necklace","wedding",20,"cultured")
Let Gems[5] = gms
Let gms = new collection
For i = 1 to 5
            SayFormattedMessage(ot_line,
                        FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            )
EndFor
For i = 1 to 5
                        Let sMessage = FormatString(sMsgGemInfo,
                                    Gems[i].name,
                                    Gems[i].type,
                                    Gems[i].occasion,
                                    Gems[i].Number,
                                    Gems[i].Shape)
            TypeString (sMessage+cscBufferNewLine)
EndFor
EndFunction

Calling Scripts and Functions

The Freedom Scientific Scripting language supports many ways to call scripts and functions. This summary includes general descriptions and definitions of the more commonly used methods for calling scripts and functions, as well as a few code samples illustrating how to call them.

Script versus Function

Scripts and functions are standard blocks of code that govern JAWS behavior. A script is a block of code that may be tied to a keystroke or key combination the user must press in order for the script to execute. A script includes numerous steps that JAWS should perform on demand if the user presses the keystroke or key combination bound to the script.

On the other hand, a function is not performed based on the user pressing a particular keystroke or key combination. Rather, it is called by various means: by a script, by another function, or as a result of a system event. A function can return information after completing the steps within it. A script cannot return information, although both a script and a function can shift control to a different block of code. Additionally, a function may accept data from a calling script or function via parameters, and it may return a value to a calling script or function.

There are three types of functions:

·         Event - performed by JAWS automatically when Windows events occur. Without event functions, JAWS cannot speak and/or display in Braille any system changes automatically. JAWS recognizes many system events that have corresponding functions in the Freedom Scientific scripts where behavior is defined for these events. You cannot create new event functions of these types yourself. But if an application exposes events through a COM object, you can write new script functions that attach to the object for events, and that run when the application events occur. Use the function, ComAttachEvents, to attach functions to exposed COM events, and use the function, ComDetachEvents, to detach them.

 

Additionally, with caution, you may overwrite existing default event functions, and you may create application-specific versions of default event functions. For more details on working with event functions, see Events.

·         Built-in and Default Functions - an ever-growing list of built-in and default functions exposed to the Freedom Scientific Scripting language. These functions ship with JAWS and are used in the shipping code both in default and application-specific script files. With caution, you may use these functions to create and/or modify your own custom script sets. The built-in and default functions are the building blocks of your scripts and functions. For a complete listing of built-in and default functions, see all the category books and their summaries in the JAWS Reference Guide.

·         User-Defined Functions - developed either by Freedom Scientific script developers or by an independent script developer. Typically, they are created for an application the shipping version of JAWS does not support, and/or to enhance an application that JAWS does support. As with built-in and default functions, you may modify and overwrite user-defined functions, and call them from a script or from another function.

Hierarchy of Rules for Calling Scripts and Functions

JAWS performs functions based on their names and locations within the hierarchy of the script files that ship with the product, as well as script files located in your user settings\(language) folder. The rules for processing scripts and functions are as follows:

1.    Each time a function is called from within a script or another function, JAWS searches the application-specific script file first, assuming the application has focus. The application may have layered script files, and so the search starts at the top-most application script file and searches down through any script files linked through the Use statement. If the function is contained within the application-specific script file, then JAWS performs the function and stops processing.

2.    When JAWS does not find the function in the application-specific script file or files linked to it through the Use statement, then JAWS searches the default script file. If JAWS finds the function in the default script file, then JAWS performs the function and stops processing.

3.    When JAWS does not find the function in the default script file, then JAWS searches the list of built-in and default functions. If JAWS finds the function, then JAWS performs the function and stops processing.

4.    When JAWS does not find the function in the built-in and default functions, then JAWS announces, "unknown function call to", followed by the name of the function. JAWS then spells out the name of the unknown function. This error message warns you that the function JAWS tried to call may have a name that is misspelled, the function may have been deleted, or the function may not have been written.

For example, supposed you overwrite the SayLine script in your application-specific script file because processing for how the current line is spoken should be handled differently in your application from the way that the default JAWS functionality processes this script. Of course, the default version of the SayLine script still exists in the default script file. As long as your application has the focus, JAWS performs your overwritten SayLine script found in your application-specific script file rather than the default SayLine script found in the default script file.

Types of Parameters

Although scripts may receive parameters, they are almost never coded to do so. If you code a script to receive parameters, you may pass specific values to its parameters by use of key map files.

Functions may take parameters, and in fact, typically do so. parameters may be required or optional, and they may be passed by reference or not.

Parameters may be required or optional. If a parameter is optional, you must precede its declaration in the parameter list by the keyword, Optional. All subsequent parameters in the parameter list are also optional. So you only need to utilize the keyword, Optional, once in the parameter list. All parameters are required unless you use the keyword, Optional, and all parameters preceding the keyword, Optional, are required.

Whether a parameter is required or optional, it may be passed by reference or not. If you specify a non-aggregate parameter in a parameter list with the keyword, ByRef, the variable is passed by reference. This means that the variable is updated by any changes it receives when the function is called, and those changes are retained when the function is exited.

By contrast to non-aggregate variables, collections and arrays are automatically passed by reference. therefore, the keyword, ByRef, is not required when you declare collections and arrays as parameters.

If a function receives a non-aggregate variable that you have not specified as being ByRef, the variable receives a copy of the variable rather than a pointer reference to it. Therefore, any changes to the variable made in the function are discarded when the function exits.

Examples of Parameter Lists for Functions

·         Required - passed to the function when it is called. the syntax is parameter type followed by parameter name.
 
 

            String sMyName

 

·         Optional - passed to the function when it is called. The syntax is the keyword, Optional followed by parameter type followed by parameter name or names
 

            Optional String sMyName
            or
            Optional String sFirstName, String sMyLastName, Int iAge

 

·         ByRef - passed by the function when it is called rather than to it. The syntax is parameter type followed by the keyword, ByRef followed by parameter name
 
 

            String ByRef sMyName

 
 Note: When a function is declared with by reference parameters, those parameters must be included in any calls to that function.
 
 

Return Statements

A Return statement gives you great flexibility over how to call scripts and functions. A Return statement is used to terminate execution of the script or function in which it appears, and to shift control (and the value of an expression if you provide one) to the calling script or function. But since a script cannot return a value, never follow a return statement in a script by a value.

For more details on working with Return statements, see the topic in the Control Flow book at Return Statements.

Postponing Processing within a Script or Function

When you need to give time for a system event to catch up to your script or function, you may need to direct your script or function to wait before it continues processing. It all depends on what event you need to complete processing, how much control you need over the wait time, and how you wish JAWS to behave after that event completes. Available methods in the Scripting language include:

·         Pause - waits for other tasks to complete.

·         Delay - waits for focus and new text events to complete with a timed delay you control and optionally by suppression of checking on whether those events have completed.

·         ScheduleFunction and UnscheduleFunction - ScheduleFunction Tells the script to schedule a function to run in a set amount of time, then continue processing the currently running function while waiting on the scheduled function to run. You may use UnscheduleFunction to cancel a scheduled function.

·         QueueFunction - waits to perform a function passed to it after JAWS has stopped speaking. You may queue more than one function to be performed in order.

·         ScheduleFunctionAfterWindowGainsFocus - allows you to call a function after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

·         SetFocusToWindowAndScheduleFunction - allows you to set focus to a particular window after a specified window gains focus. The last parameter lets you set a timeout period for how long to wait before unscheduling the call.

Pause and Delay

Pause and Delay statements allow you to postpone execution of succeeding statements in your scripts and functions. Pause gives you the least control but may be all you need in order to accomplish your goal. Delay gives you more control, and allows you to specify how long to postpone processing, depending on whether focus and new text changes have completed.

For more details on working with Pause and Delay statements, see Pause and Delay.

Scheduling Functions

Scheduling functions give you the most control over postponing processing of succeeding statements in your scripts and functions. As with delay statements, these types of function calls let you control the time to wait. But they also let you specify the process that must complete in order for succeeding statements to continue processing in your own scripts and functions. As mentioned above, there are several types of scheduling functions.

For more details on working with scheduling functions, see Scheduling Functions.

Enumerator Function Calls

Enumerator functions call a callback function, which in turn may process the window optionally, and either stop or continue the enumeration depending on what the callback function tests and returns. For more details on working with enumerator functions, see Enumerator Functions.

Customizing Scripts and Functions from Default and Built-in Code

When you want to customize your own script files, or when you want to personalize the script sets that ship with JAWS, there are numerous methods you can use. You may create your own user-defined scripts and functions in your own script sets that do not ship with JAWS. but you may also customize existing code by modifying scripts and functions.

Choose your method for customizing your scripts and functions depending on what you need to accomplish: Are you customizing for your own needs in an application already supported by JAWS, or are you creating your own script set for an application JAWS does not support? Are you customizing an existing script or function for a specific application, or do you mean to affect JAWS behavior across all applications? How you code your customized scripts and functions may have very unpredictable results, or it may be a very powerful enhancement. It all depends on careful planning and cautious coding. We always recommend that you back up any code that ships with JAWS before customizing any code directly. Below are some methods for customizing scripts and functions.

MyExtensions

Script binary file stacking does not allow for events in the JAWS script source file (default.jss) to be overwritten in script binary files that are used by the default script binary file (default.jsb). Therefore, MyExtensions.jss and its resulting binary file, MyExtensions.jsb, are intended for you to add custom scripts and functions to the Freedom Scientific default scripts and functions, rather than for you to overwrite default scripts and functions.

You may generate a user default.jsb in the JAWS root folder settings\(language) folder. This default.jsb, compiled from its own default.jss script source file, utilizes the shared default.jsb that ships with the Freedom Scientific JAWS. In other words, it is in the user default.jss file that you should overwrite default scripts and functions.

CAUTION: Make sure that default.jss in the user area calls the one in the shared area by including a use statement for default.jsb. If this Use statement is missing, you will experience catastrophic failure when JAWS attempts to run any scripts that are in the shared default script file but not in the user default script file. Be sure that your script or function in the User default file calls the version in the shared default file where you want to defer to the default behavior of the script or function.

MyExtensions.jss and MyExtensions.jsb ship with JAWS. These files are located in the JAWS root folder of the shared settings\(language) folder. Once you compile the MyExtensions.jss file, thus creating a MyExtensions.jsb file, JAWS places these custom script source and binary files in the user settings\(language) folder.

Note: This assumes that you are using Script Manager to compile. If you elect to use your own text editor, you must ensure that you compile to the correct folder, or copy the files there manually.

MyExtensions.jss contains the following commented-out sections to help you understand the types of code blocks such a file expects:

·         The script source file begins with the typical Include statements that any script source file should have to ensure code integrity during compilation with the default JAWS scripts and functions. These are as follows:

o   Include "hjConst.jsh"

o   Include "hjGlobal.jsh"

o   Include "common.jsm"

o   Any other Include statements of header files specific to your own script set.

·         In order not to have to re-install your own script sets after JAWS automatic updates, place any additional use statements for your custom script binary files below any other "Include" statements of header files specific to your script set.

·         By default, JAWS 13 processed a literal full string match when the == operator was used on strings. The ;#Pragma line can allow the == operator to work as it did prior to JAWS 13, which was a partial comparison. If you need the == and != operators to work with partial comparisons only, add the appropriate statement below your use and Include statements. For more details on working with ;#Pragma StringComparison statements, see ;#Pragma StringComparison Directive.

·         Next are two functions that are necessary and run every time your script set loads and unloads. Use AutoStartEvent to obtain or construct object pointers or other flags or globals you need to initialize when your script set loads. Use AutoFinishEvent to destruct or unload your objects, or nullify any other flags or globals.

·         Add your own user-defined scripts and functions, and compile to create your own MyExtensions.jsb in your user settings\(language) folder.

Overwriting Default Scripts and Functions

The fundamental reason for overwriting a script or function JAWS already provides is that you want that script or function to behave differently from JAWS behavior for some special circumstance of your own. It may be for something specific to a script set you are writing for an application JAWS does not support. Or it may be for an application JAWS does support but for which you want a different behavior from JAWS default behavior.

A safe method for overwriting scripts and functions includes the use of several key function calls that ensure the default scripts and functions still work as expected. Some common function calls that you may use include:

PerformScript

CallScriptByName

CallFunctionByName

Using Scope to Redirect Function Calls

A very safe method for ensuring that a function call to an overwritten function is made only when you want it to be made employs the scope capabilities of the Scripting language to redirect from where the function should be processed. the syntax of scope is to use the name of the script source file where the function code is located, followed by two colons (::) and then by the name of the function as you would normally call it. for example, to call FocusChangedEvent and make sure that it is the one from the default script source file that is actually called, you write:
 

Default::FocusChangedEvent (hwndFocus, hwndPrevFocus)

 from within your own code in your script source file.

 

For more details on working with how to redirect function calls, see Redirecting Function Calls Using Scope.

Code Samples

Below are some code samples for the various types of script and function calls described in this summary.

Function with Optional Parameters Code Sample

The below code sample declares the String parameter as a required parameter but the Integer parameter as optional.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Optional Int iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If iAccountNumber then
            SayInteger (iAccountNumber)
EndIf
EndFunction
Script MyNameTest ()
SpeakNames (sName1) ;omits the optional parameter, just says "My name is Mary".
SpeakNames (sName2, iAccount2) ; speak both required and optional parameters.
EndScript

Function with By Reference Parameters Code Sample

The below code sample provides the integer parameter by reference.

Const
            sName1 = "Mary",
            sName2 = "John",
            iAccount1 = 12345,
            iAccount2 = 54321
Void Function SpeakNames (String sMyName, Int ByRef iAccountNumber)
Var
            String smsgMyNameIs
smsgMyNameIs = "My name is "
SayMessage (Ot_JAWS_message,smsgMyNameIs+sMyName)
If sMyName == sName1 then
            iAccountNumber = iAccount1
ElIf sMyName == sName2 then
            iAccountNumber = iAccount2
Else
            iAccountNumber = 0
EndIf
EndFunction
Script MyNameTest ()
Var
            Int iNum
; Any non-aggrigate variable declared in the function parameter list as ByRef is received by the function as being by reference.
; This means that the function knows where the variable is stored in memory and can change it.
; The function has the ability to change the variable, whether or not it actually does so.
; Any non-aggrigate variable received by a function receives only a copy of the variable, and any changes made to the variable do not persist when the function is exited.
SpeakNames (sName1, iNum)
SayInteger (iNum)
SpeakNames (sName2, iNum)
SayInteger (iNum)
SpeakNames (cscNull, iNum) .
SayInteger (iNum)
EndScript

PerformScript Code Sample

The PerformScript keyword must be followed by a defined script name. For example, if you write:
 SayLine (),
 you are calling the function. But if you write:
 PerformScript SayLine(),
 you are calling the script SayLine (), as if you had pressed the keystroke bound to that script.

Script SayLine ()
If MyConditions then ;whatever your special conditions are in your user-defined MyConditions function...
            DoMyFunction ; do whatever it is you want, like spell the line instead of speaking it in your DoMyFunction call.
            Return
EndIf
PerformScript SayLine () ; Call the default SayLine script bound to the keystroke, Insert+UpArrow.
EndScript

CallScriptByName Code Sample

A function call to PerformScriptByName lets you call dynamically a script whose name is passed as the first parameter. In other words, the script name does not need to be known during compilation, and the script name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the script to be run. then optionally, it takes up to nine variant script parameters.

The below nonsense sample for a supported browser for a Web site that has multiple headings checks to see if the current line is blank. If it is, then the script calls the MoveToNextHeading script to jump to the next heading level 2 on the page.

Script MySayLine ()
If StringIsBlank (GetLine () ) then
            PerformScriptByName ("MoveToNextHeadingLevelN",2)
            Return
EndIf
PerformScript SayLine () ; current line is not blank.
EndScript

CallFunctionByName Code Sample

A function call to CallFunctionByName lets you call dynamically a function whose name is passed as the first parameter. In other words, the function name does not need to be known during compilation, and the function name can be passed to the function as a variable. The function returns Void (no value). It takes as its first parameter a string representing the name of the function to be run. then optionally, it takes up to nine variant parameters.

Note: Using CallFunctionByName bypasses checking parameter types that is processed when a function is invoked normally. The Return type is the same as that of the function being called.

The below code sample spells out the word at the cursor from within Notepad. although simply calling SpellString will do the same thing, this is simply to illustrate the syntax of how to use CallFunctionByName.

Script MyTest ()
If ! StringIsBlank (GetLine ()) then
            CallFunctionByName ("SpellString",getWord())
            Return
EndIf
SayLine() ; The line is blank.
EndScript

Reference Guide of JAWS Scripts and Functions

The Freedom Scientific Scripting Reference Guide for JAWS consists of many major category books. Each book contains a summary of the category it represents, along with code samples where appropriate. And the tree structure for each book lists all the scripts and functions for that category. Check the category books that have been added since the last published version of the FSDN, including: Annotations and Aggregate Data Types. In fact, even familiar category books are likely to have new functions for you to explorer - e.g., Cursors.

For example, the Cursors category book now includes information about the Scan cursors introduced in JAWS 2020. So this summary page provides a brief overview of what the cursor scripts and functions do. The tree structure for the Cursors category book includes the entire list of scripts and functions related to cursors at the next level down from the Cursors book summary.

To examine the details about any script or function in the tree structure list, arrow to a script or function name, and press ENTER. This causes the function's details to appear in the right pane. Press F6 to move to the right pane. Then use standard virtual key navigation to read the contents. Press F6 again to return to the tree structure.

As you navigate within a particular category book, you may find duplicate entries. This occurs where a script and function have the same name. An example is the SayAll script and the SayAll function, both of which appear under the category book called "Screen Text". So be sure to check out the summaries of both instances of any entries in the tree structure that appear twice.

When viewing a topic page for a particular script or function, be sure to read the version information for when it became available. This is important to avoid unexpected results in the version of JAWS for which you are coding. At times, a topic page for a script or function may present the entry twice, each entry with slightly different information. The information may vary especially with respect to the ranges of the versions of JAWS where the entry became available. For example, if a function is available through a particular version of JAWS and then gains an additional parameter for newer versions of JAWS, then the topic page for the function displays the function twice. Each entry has its specific parameters and the versions of JAWS in which it is available. An example is the FindString function. So it is critical to know in what version of JAWS the function you are working with is supported, and its expected behaviors.

Finally, take care when working with a source file that already ships with JAWS, such as the Notepad.jss or the Wordpad.jss script source file. Such files already contain scripts and functions by default. Place your sample code at the very bottom of the file. And make sure to remove this overwritten .jss and its associated overwritten .jsb and .jkm files from your user Settings\(language) folder when done testing. It is assumed that the script is being processed in the .jss script source file and compiled in the .jsb script binary file.

Screen Text Functions

A Screen Text script or function provides or returns information about screen text activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display screen text in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of screen text user interaction, such as:

 

·         SayCharacter

·         SayWord

·         SayLine

·         SpellWord

·         SpellLine

However, the focus of the present discussion is on functions related to screen text that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Screen Text functions include:

·         GetCharacter

·         GetWord

·         GetLine

·         PhoneticSpellHook

·         SpellWordHook

For a complete listing of Screen Text functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script checks to see whether there is a character on the current line. If no character is found, the screen reader indicates an error message and the script ends. If a character is found, JAWS displays in the virtual viewer what the current character, current word, and current line are so that you may read the information however you prefer.

To set up the example, simply type some text into the Notepad document window. Then run the script repeatedly after moving the cursor to different positions on the current line, or on a line with no text.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MyScreenTextTest ()
Var
            String sChar, ;current character
            String sWord, ; current word
            String sLine, ; current line
            String sTextUnit, ; current unit - character, word, or line
            String sMsgText_l, ; long message saying the current type of unit and what it is.
            String sMsgText_s,  ; short message saying the current type of unit and what it is.
            String sMsgNoText ; error message if no text is found.
;Ensure that the document window has the focus and not a menu or dialog.
If DialogActive ()
|| GetObjectSubtypeCode () != wt_multiline_edit
            Return
EndIf
Let smsgNoText = "There is no text on this line."
Let sChar = GetCharacter ()
; Test for whether there is no character.
; If no character is found on the current line, there is no point in trying to find the current word or line.
If sChar == cscNull
            SayMessage (ot_error,sMsgNoText)
            Return
EndIf
Let sWord = GetWord ()
Let sLine = GetLine ()
; for sMsgText_l and sMsgText_s, %1 is the type of text unit, %2 is the text of that text unit.
Let sMsgText_l = "The current %1 is %2"
Let sMsgText_s = "current %1 - %2"
;Ensure there is no virtualized message already in the user buffer.
; If so, clear the user buffer.
If UserBufferIsActive ()
            UserBufferDeactivate ()
EndIf
UserBufferClear ()
; Since a character is found:
sTextUnit = "character"
UserBufferAddFormattedMessage (sMsgText_l, sMsgText_s, sTextUnit, sChar + cscBufferNewLine)
If sWord != cscNull ; A word is found.
            sTextUnit = "word"
            UserBufferAddFormattedMessage (sMsgText_l, sMsgText_s, sTextUnit, sWord + cscBufferNewLine)
EndIf
If sLine != cscNull ; A line is found.
            sTextUnit = "line"
            UserBufferAddFormattedMessage (sMsgText_l, sMsgText_s, sTextUnit, sLine + cscBufferNewLine)
EndIf
UserBufferAddText (cscBufferNewLine + cMsgBuffExit)
UserBufferActivate ()
JAWSTopOfFile ()
PerformScript SayAll ()
EndScript

XML Funtions

An example of a function that works with XML is GetScreenXML. The “XML” refers to how the information that JAWS can retrieve from the screen is marked up. You can use this function if there is no other way to get information about the text on the screen.

Code Sample

You might use this function to get the screen XML as follows:

Var
            Int left,
            Int right,
            Int top,
            Int bottom
GetWindowRect (GetFocus(), left, right, top, bottom)
Var
            String sScreenXML = GetScreenXML (left, top, right, bottom)

Now check to see if the string sScreenXML contains information from the screen that you can use enclosed in an XML tag structure. If it does, change this into an object collection, using code such as:

Var
            Object oMSXML = CreateObject("msxml2.DOMDocument.6.0")
If !oMSXML
            SayString("Did not get oXML")
   Return
EndIf
oMSXML.async = false
oMSXML.resolveExternals = false
oMSXML.loadXML(sScreenXML)

Now that you have an object structure, you can use XML extraction methods to get nodes of interest.

Some areas of the JAWS code that illustrate how to extract nodes and node information are:

·         HomeRowUIAObject.jss

·         LiveResourceLookup.jss

·         Skype.jss

Note: You must have an understanding of xPath and xQuery to work with the nodes and extract information from the object tree. But you can try to see if the application has UIA support because that might be a better method to implement.

Additional Resources

For more details on working with hooking functions such as the hook functions listed above, see the Key Management summary in the General Scripting Concepts book called Hook Functions.

For more details on working with the virtual viewer, see the summary in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

For more information on Microsoft MSXML COM objects, see the Microsoft Developer Network for Building MSXML Applications

Voices Functions

A Voices script or function provides or returns information about Voices activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether or how to speak with the currently loaded synthesizer, or perhaps whether to change to a different available synthesizer. JAWS may also utilize information returned by a Voices function for comparison purposes, etc.

Voices information may be about the context voice - the PC cursor voice, the JAWS message voice, and so on. It may be about the speech rate, pitch, synthesizer person, spell decrement or increment pitch, even the language of the synthesizer in use.

Some scripts that ship with JAWS fall into the category of Voices, such as the scripts for changing the voice rate permanently to a slower or faster rate or the script for SelectAVoiceProfile, for example. However, the focus of the present discussion is on functions related to Voices that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Some examples of Voices functions include:

·         ChangeVoiceSetting

·         GetActiveSynthLanguage

·         ResetVoiceSettings

·         GetActiveProfileName

·         GetActiveSynthInfo

For a complete listing of Voices functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script provides information on demand about the currently loaded voice profile. The information is displayed in a Virtual Viewer window for you to read as you prefer. Try running the script after selecting different voice profiles with different installed voice synthesizers such as the default Eloquence synthesizer or some of the Vocalizer synthesizers available for installation from the Freedom Scientific website.

It is assumed that the script and its related function are being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Messages
; For sMsgVoiceInfo, the various replaceable parameters are obvious from their context in the message.
@sMsgVoiceInfo
For Synthesizer %1, the global voice is set to the person called %2.
%2's voluume is %3%, rate is %4, pitch is %5, and punctuation level is %6.
%2's language is %7 and the default voice profile for %2 is %8.
But the %1 synthesizer can also read in the following installed languages:
%9.
@@
EndMessages
String Function GetPunctuationName (Int iPuncLevel)
If iPuncLevel == 0
            Return cmsgPunctuationNone
ElIf iPuncLevel == 1
            Return cmsg278_l ; Some
ElIf iPuncLevel == 2
            Return cmsg279_l ; Most
ElIf iPuncLevel == 3
            Return cmsg280_l ; All
EndIf
EndFunction
Script MySynthInfoTest ()
Var
            String sShortName,
            String sLongName,
            String sDriver,
            String sLanguage,
            Int iVolume,
            Int iRate,
            Int iPitch,
            Int iPuncLevel,
            String sPunctuation,
            String sPerson,
            String sLanguages,
            String sDefaultProfileName,
            String sText ; needed to format the string from all the replaceable parameters in sMsgVoiceInfo
If ! GetActiveSynthInfo (sShortName, sLongName, sDriver)
            Return
EndIf
sLanguage = GetActiveSynthLanguage ()
sDefaultProfileName = GetDefaultProfileName ()
; The following call obtains information by reference
; for the context voice passed to the function in the first parameter.
GetVoiceParameters (vctx_global,iVolume, iRate, iPitch, iPuncLevel, sPerson)
; Convert punctuation integer into user-friendly name.
sPunctuation = GetPunctuationName (iPuncLevel)
; Get list of installed languages.
sLanguages = GetSynthLanguages (cscBufferNewLine) ; Parse the language list so each one is on a separate line.
sText = FormatString (sMsgVoiceInfo,
            sLongName,
            sPerson,
            IntToString (iVolume),
            IntToString (iRate),
            IntToString (iPitch),
            sPunctuation,
            sLanguage,
            sDefaultProfileName,
            sLanguages)
EnsureNoUserBufferActive ()
UserBufferAddFormattedMessage (sText, sText)
UserBufferAddText (cscBufferNewLine + cmsgBuffExit)
UserBufferActivate ()
JAWSTopOfFile ()
SayAll ()
EndScript

Additional Resources

For more details on working with the virtual viewer, see the summary in the General Scripting Concepts book called Implementing a Virtual Viewer Window.

Screen Text Events

A Screen Text event function provides information about any type of screen text activity. The information may be for a screen text event within an application such as Notepad or Microsoft Word, but also for a screen text event in more general operating system features like Windows Explorer or the Start menu. JAWS uses the information from a Screen Text event function to determine what to speak and display. This includes whether new text is occurring, for example, and whether that new text should be indicated or suppressed. In this case, to display information refers to showing it in Braille.

Some examples of Screen Text event functions include:

·         CaretMovedEvent - only triggers under certain types of edit windows

·         CellChangedEvent

·         NewTextEvent

For a complete listing of Screen Text event functions, see the category book in the Reference Guide.

Note that the function called SelectionContextChangedEvent is a Screen Text event, not a Selection event. This is because Selection events involve the process of selecting text or graphics, files, or folders, etc.; whereas, examining the context in which a selection has occurred is a screen text activity. For example, in Microsoft Word, you may select text in the main document window, of course. But you may also select text in a comment, a footnote, and endnote, revised text, and so on. Therefore, in that application, it is critical for JAWS to recognize the context in which the selection event is occurring in order to determine what exactly to speak and display in Braille relative to the selection. So Selection events and ScreenText events are closely tied together but are not the same events.

Labelled Graphics Passed to NewTextEvent

For many years, the scripting language had no functionality to detect whether a graphic changed in a window. Thus you could not script JAWS to detect automatically a graphic change, or to make a frame speak a graphic change indicating a change in the app.

Starting with the May 2017 release of JAWS 18, a JCF option became available to JAWS for controlling if graphics are also included in the NewTextEvent function. It is:
 

IncludeGraphicsInNewTextEvent=0

 Previously only text was included. This meant that a script could not detect changes in graphics in the OSM. By enabling this JCF option, you can now monitor changes in graphics via NewTextEvent. You can label graphics and then use NewTextEvent to monitor changes in the graphic.

 

Before this enhancement, for example, a graphic was used to indicate if the EchoLink Ham software was in transmit or receive mode. There was no other way of knowing other than via this graphic. Since graphics were not passed to NewTextEvent, JAWS could not provide any feedback when the application changed from tx to rx, etc.

Normally, graphics are not passed to NewTextEvent. Setting the IncludeGraphicsInNewTextEvent option to 1 allows changes in graphics to be passed to NewTextEvent, thus enableing scripts to detect changes in visible graphics automatically. Examples include:

Labelled graphics which indicate a change in status.

Frames used to speak changes in graphics automatically.

 

Code Sample

In the below code sample, the NewTextEvent function is overwritten for Notepad to announce how many characters are in the buffer when focus is in the document window. If the user types any text in the document window, NewTextEvent fires and announces the nonsense message. If the user performs some other activity that causes new text to appear (e.g., activating a menu or dialog), the nonsense message is not triggered. It is only triggered conditionally when focus is in the document window and text is typed or otherwise edited.

Take time to examine the function in default.jss. The NewTextEvent function is often responsible for suppressing extraneous information as well as for speaking it, depending on the type of information that causes NewTextEvent to fire in the first place.

It is assumed that the function is processed from the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Note that there is no script associated with this sample in order for it to work and provide information. This is because the function is an event function. So it does not require that a script and key assignment be bound to it in order to provide information or suppress it.

Void Function NewTextEvent (Handle hwnd, String buffer, Int nAttributes,
            Int nTextColor, Int nBackgroundColor, Int nEcho, String sFrameName)
Var
            String smsgBufferMessage
smsgBufferMessage = "The buffer now has %1 characters."
NewTextEvent (hwnd, buffer, nAttributes, nTextColor, nBackgroundColor, nEcho, sFrameName)
;Say the number of characters in the buffer but only if in the document window.
If GetObjectSubtypeCode () == wt_multiline_Edit
            SayFormattedMessage (ot_screen_message, FormatString (smsgBufferMessage,IntToString(StringLength(buffer))))
EndIf
EndFunction

Additional Resources

For more details on Selection events, see the topics under the Events topic area of the General Scripting Concepts book called Selection Events and Selection Event Helpers

Settings Functions

A Settings function provides or returns information about script activities caused by user interaction or automatically updated by an event. JAWS uses this information to determine whether to speak and display information in Braille, for comparison purposes, and so on.

Many scripts that ship with JAWS fall into the category of Settings, such as the script for Dictionary Manager, for example. However, the focus of the present discussion is on functions related to Settings that you may call from your own scripts or that you may overwrite from those in default.jss or from the built-in functions.

Incidentally, functions for Braille Settings merit their own summary in the Reference Guide. So functions in the Settings summary of the Reference Guide refer to all settings other than those specific to Braille displays or the Braille Viewer.

Some examples of Settings functions include:

·         GetActiveSynthGlobalSectionName

·         GetSettingInformation

For a complete listing of Settings functions, see the topics in this category book of the Reference Guide.

Code Sample

In the below code sample, the script determines the pitch range for the JAWS cursor context voice of the currently loaded synthesizer. JAWS speaks the information in a message and flashes it in Braille. This script could be extended to set or change the pitch of the voice with other functions, for example, if you want to change voice settings on the fly without utilizing the JAWS user interface.

It is assumed that the script is being processed in the Notepad.jss script source file and compiled in the Notepad.jsb script binary file.

Script MySettingsInfoTest ()
Var
            Int MinSetting,
            Int MaxSetting,
            String sRange
;For sRange,
;%1 is the context voice, %2 is the minimum setting returned by reference from the function call,
;and %3 is the maximum setting returned by reference from the function call.
sRange = "The minimum pitch of the %1 is %2, and the maximum pitch is %3."
GetSettingInformation (V_PITCH, VCTX_JAWSCURSOR, MinSetting, MaxSetting)
SayFormattedMessage (ot_user_requested_information,
            FormatString (sRange, vctx_JAWSCURSOR, MinSetting, MaxSetting))
EndScript

Touch Navigation

Microsoft offers Touch Navigation as an alternative input method for you to interact with the operating system and applications. Smart phones, tablets, and many laptops and desktop monitors support touchable surfaces that allow you to use gestures to control the operating system and applications. So, Touch navigation is intended to give you the same type of interaction capabilities on a desktop or laptop that you have on your smart phone and tablet.

A Touch Navigation script processes information about the application BEING ACCESSED through Touch Navigation if the feature is enabled on the device and also enabled in JAWS.

As of JAWS 15, you may elect to enable Touch navigation for certain applications where it is preferable to keyboard interaction, or where Touch Navigation is the only input method available.

JAWS provides numerous scripts assigned to various types of gestures instead of keystroke combinations to mimic Touch Navigation interaction with the operating system or with a particular application. Gestures are defined as a certain number of fingers plus the gesture. For example, FourFingers+TripleTap is for KeyboardHelp, and TwoFingers+FlickDown is for TouchSayAll. The types of gestures that JAWS supports include:

·         Tap

·         DoubleTap

·         TripleTap

·         FlickUp

·         FlickDown

·         FlickRight

·         FlickLeft

·         FlickSwipeRight

·         FlickSwipeLeft

·         FlickSwipeUp

·         FlickSwipeDown

·         Tap+Explore

·         Tap+ExploreEnd

Some examples of Touch Navigation scripts include:

·         AdvancedObjectNavigationModeToggle

·         TouchCloseApp

·         TouchNextElement

·         TouchPriorElement

·         TouchStopCurrentSpeechOutput

For a complete listing of Touch Navigation scripts and functions, see the topics in this category book of the Reference Guide.

Settings Files

JAWS stores application-specific information such as the JAWS configuration settings, graphic labels, frame definitions, etc. in settings files. All JAWS settings files are located in the root folder of the JAWS settings\(language) folder. See Script File Types which provides a list of settings file types and brief descriptions of the information each contains.

JAWS loads settings files that have the same root name as an application executable. For example, if the executable name for the TextPad application is "textpad.exe", JAWS loads the script settings files named "textpad.*" whenever the TextPad application receives focus by moving into the Windows foreground.

Additionally, JAWS reserves some settings files to govern its default behavior, or for inclusion by other script files. See Reserved Files to read more about reserved files.

Since JAWS 17 and later, you can create domain-specific settings .jcf files as well as domain-specific dictionary .jdf and scripts in jss, .jsd, and compiled .jsb files, which may include domain-specific key map .jkm files. For more information, see
 Domain-specific Utilities.

Reserved Files

The screen reader reserves some settings files to govern its default behavior, or for inclusion by other script files. These files include the following:

Default Settings Files

Default.*

When JAWS recognizes an application that has no specific settings or customized scripts, it loads a default group of settings. The default scripts and settings govern the vast majority of familiar JAWS behavior. In fact, the default settings remain loaded even when JAWS finds application-specific settings files. If any setting or script is not overwritten by application-specific files, JAWS defers to the default settings when deciding how to behave. Although the methodology JAWS utilizes to decide how to behave appears to be straightforward, a good understanding of how JAWS routes function calls is very useful. See the function, GetScriptCallStack, in the JAWS Functions book of the Reference Guide under the category book called Scripts to learn about the stack flow of a function call in the JAWS Scripting language.

Colors.INI

This file contains a list of RGB values paired with textual names. Any time JAWS announces a text color, it refers to Colors.INI for the name. Note: JAWS must be reloaded for changes to this file to take effect.

JFW.INI (formerly symbols.ini)

This file contains textual names for ANSI symbols such as punctuation, monitary symbols, special characters, etc. Any time JAWS speaks an ANSI symbol, it refers to Symbols.INI for a name.

JFW.INI is divided into sections for several different hardware and software synthesizers. The values for each entry within the sections consist of the character symbol, the binary value for that symbol, and a textual description. The "SynthPunctuation" key in each synthesizer section tells JAWS whether it is JAWS or the assigned synthesizer that should control speaking of punctuation. Set a value of 1 for JAWS or a value of 0 for the synthesizer.

The "Synonyms" section allows JAWS to maintain a single set of symbol names for an entire family of synthesizers. Keys refer to synthesizer short names (noted for each installed synthesizer in JFW.INI). Values refer to the synthesizer section names further down in Symbols.INI.

Note: The JFW.ini file is located in the Program Data\Freedom Scientific\JAWS\Version\Settings\INIT folder.

Note: JAWS must be reloaded for changes to this file to take effect.

FlexibleWeb.db

This file is a database containing any rules you have created for Flexible Web, a JAWS feature introduced in the initial release of JAWS 14. If you have not created any rules, the file is still created as a placeholder for your rules. The file is located in the JAWS root folder of the user's Settings\(language) folder. It cannot be edited manually and is intended to be updated only through the Flexible Web user interface using the key layer command, JAWSKey+Space, x.

SettingsCenter.ini and QuickSettings.his

These files are used specifically to maintain an accurate history of changes made to Settings Center and Quick Settings through the JAWS user interface. The files also update .jcf files when a JCF option is changed that impacts a .jcf file. Updated SettingsCenter.ini and QuickSettings.his files, as well as any updated .jcf files they impact are placed in the JAWS root folder of the user's Settings\(language) folder. Never attempt to update a SettingsCenter.ini or QuickSettings.his file manually.

Useful Include Files

Certain JAWS Header files contain constants or global variable definitions needed to add as "Include" statements to your own script source files when customizing JAWS for any application. Any script source file may include the following header files:

·         HJConst.jsh

·         HJGlobal.jsh

·         common.jsm

For more information about how to include header files in your script source files, see Variables and Constants.

HJConst.JSH

This file contains definitions of the JAWS constants such as TRUE and FALSE, standard window types, cursor types, JAWS settings, speech output modes, etc. Add an "Include" statement for this file in any new JAWS script source file to avoid compilation errors when copying code.

 To learn more about the JAWS Script constants, see Constants

 

HJGlobal.JSH

This file contains declarations of the JAWS global variables. Add an "Include" statement for this file in any new JAWS script source file to avoid compilation errors when copying code.

To learn more about the JAWS Script variable types, see the following:

·         Non-Aggregate Variables,

·         Collection Type,

·         Array Type.

Additional Resources

Keywords and Non-Required Keywords

Localization: JAWS Folder Restructure

Special Note: Please read the below explanations thoroughly. More restructuring has occurred in versions of JAWS since JAWS 17 to reduce duplication of files for multi-language builds of the product.

Since JAWS 17, the Freedom Scientific Scripting language file structure has been updated in the Shared root and ProgramData folders to facilitate localizing message strings and constants to a desired language. This file structure has no effect on your ability to customize scripts though. For example, when you add an Include statement for a known file such as HJConst.jsh, JAWS can still determine how to find that file so that your script source .jss file compiles properly into a binary .jsb file.

The Script Manager is able to find files in the structure for you. But if you are using a different text editor and you need to examine an existing source file, message file, or header file, the file structure in the JAWS 17 and later Shared folder is explained below. Each of the folders in the file structure contains a folder whose name corresponds to the three-letter abbreviation of the currently installed build of JAWS. If the build you have installed is a non-English build that includes both English and say, Spanish, for the JAWS UI, or you have installed several languages, each of the below described folders will contain as many folders whose names correspond to the three-letter abbreviations of the languages your build of JAWS supports (e.g., Enu and Esn for an English/Spanish build of JAWS). For the explanations below, it is assumed you have an English U.S. build of JAWS installed. Therefore, you will have Enu folders and other folders in the AllUsers\Freedom Scientific\JAWS\Version root folder and the ProgramData\Freedom Scientific\JAWS\Version folders as follows:

·         Locale - This folder contains an Enu folder which in turn contains a folder for JAWS Help .chm files, another for Manuals, and another called Resources. All the files in these folders are in English. It is unlikely that you will need to access the Locale for any reason. but if you do, please see the section below that specifically discusses the contents of the Locale folder.

·         Scripts - This is the folder you may access the most if you need to find a particular file. Like the Locale folder, it contains an Enu folder. In it are all the documentation .jsd, key map .jkm, and Braille structure .jbs files with which you may already be familiar. At the same level as the Enu folder, you will find all the source .jss, message .jsm, and header .jsh files along with the binary .jsb compiled files that ship with JAWS.

·         Settings - Like the other two major folders, Settings also contains an Enu folder in which are all the configuration .jcf files and the folders for PersonalizedSettings, Rules, Sounds, etc., as well as the symbol .sbl files for the myriad speech synthesizers. These are all files that ship with JAWS. At the same level as the Enu folder are other folders:

o   Init is used to help JAWS keep track of what file to access and when to do so for various tasks.

o   SymbolDescriptions contains files for the various languages supported by JAWS. These files contain descriptions for characters and symbols defined by the Unicode standard that are not already spoken by speech synthesizers. Take great care if you elect to edit these files since they require UTF-8 formatting when they are saved. For more information about UTF-8 formatting, see
 Formatting Script Files for UTF-8.

o   In JAWS 18, the .sbl and .chr files were moved out of the language-specific folder to avoid duplication of the same files in each language-specific folder.

o   VoiceProfiles is the folder that may be of most interest to script developers in this particular set of folders. It contains all the voice profile .vpf files that ship with JAWS.

Custom Localization

PO and MO files are part of the JAWS install process for non-English languages. These files are used to ensure that JAWS messages appearing in the JAWS UI or elsewhere are properly localized to the languages you have installed. But if you have your own custom scripts or a need to customize these files, tools are available online for modifying PO files. Find the POEdit Gettext Translations Editor at: PoEdit.net.

DialogLayouts and LC_MESSAGES Subfolders

When you have a non-English build of JAWS installed or several languages installed, the Locale folder mentioned above that is in ProgramData\Freedom Scientific\JAWS\(version)\Locale contains a folder for each installed language: One is the Enu (english folder), the others are the folders whose three-letter abbreviation correspond to the languages installed. The language-specific folders in turns contain subfolders including DialogLayouts and LC_MESSAGES. Assuming you have and are familiar with the tools used to customize PO files, you can use those tools to modify the existing messages or to add your own, then build the corresponding MO files to be used by JAWS.

Caveat: Whenever a repair or update to JAWS is performed, you will lose these customized versions of the .po and .mo files unless you have the appropriate compiled scripts that use your localization instructions. See

Finding Files with the Script Manager

To find the builtin.jsd file, for example, which resides in the Shared folder, you need to find it within the folder structure. When you choose the "Open Shared" option from the Files menu of the Script Manager, use the File types combo box to select All Files. Then use the folder view control in the dialog to navigate to the correct folder where .jsd files now reside. For an English build of JAWS, this is within the Enu folder. The process is just like the manner in which you find files in the Open dialog of Notepad or any other standard application.

Compiling Older Script Sets or Localizing Script Sets with JAWS 17 and Later

You may have customized scripts prior to JAWS 17 that you wish to add to the current version of JAWS and/or that you need to customize further in the current version of JAWS. Or you may have your own localized instructions you wish JAWS to detect. To do this, you need to use a special ";#Pragma" comment in your script source file. The comment should not be inside a specific script or function.

A scripting language pragma is a specially formatted comment that begins with ";#pragma." The new pragma is usePoFile pragma. This pragma may be used to specialize whether or not insPushLocalizedString instructions are inserted by the compiler. The supported values are as follows:

·         0, false, no, off: Do not insert the localization instructions.

·         1, true, yes, on: Insert the localization instructions. This is the default if the usePOFile pragma is not used.

 

Thus, when the following line is found in the script source .jss file, the script compiler will not insert the localization instructions, and therefore the compiled script binary .jsb file will be backwards-compatible.
 

 ;#pragma usePoFile 0 ; Do not use localization instructions.

 On the other hand, when you use the comment:
 

 ;#pragma usePoFile 1 ; Use localization instructions.

 you ensure that JAWS 17 or later localization instructions are honored.

 

Again, only use this special comment when:

·         You need scripts to be backwards-compatible and also you need another set to honor localization instructions later than JAWS 17.

·         You have custom scripts that make use of your own additions to the .po and .mo files mentioned in the section above called Custom Localization.

 

If all you need are scripts for JAWS 17 and later, or you do not have custom localizations to consider, you can just compile in the usual way without the need for the ;#Pragma comment at all.

Conditional Statement Structures

Unlike other programming languages, the Freedom Scientific Scripting language does not allow for case or switch statement structures. However, the If-ElIf-Else-EndIf statement structure is a very powerful tool, described below in its various forms and syntax, along with some code samples.

Description

The If keyword marks the beginning of an If-EndIf statement. A fully formulated conditional If statement structure includes: If...ElIf...Else...EndIf. Any expressions appearing after the If are used to evaluate whether condition(s) is(are) true. Expressions after any ElIf statements do the same. For example, can a certain graphics character be found in the active window?

Every If statement structure must begin and end with the keywords, If and EndIf. But the keywords, Then and Else, are optional.

If-ElIf-Else-EndIf statement structures always ask whether a condition or set of conditions is true or false . When a condition is not met (false), then the actions that follow the Else are processed.

The statements processed when conditions are met typically are calls to other functions. But also, a common statement to place within an If-EndIf statement structure is a Return statement. That is, if a condition is true and processing is performed as a result, you may not wish to perform any further evaluation of conditions within the current statement structure. In that situation, place a Return statement after the function calls you do wish to perform when a condition is true.

 For more details on working with Return statements, see Return Function.

 

Syntax

 
 

If Condition 1
            Statements
ElIf Condition 2
            Statements
ElIf Condition #N
            Statements
Else
            Statements
EndIf

 

·         If Condition 1 is the statement that marks the beginning of the conditional statement structure. When this condition evaluates to true, all statements following the If Condition 1 statement are processed and any ElIf or Else conditions are skipped.

·         ElIf Condition #n statements are optional for evaluating further conditions beyond the first condition evaluated by the If Condition 1 statement. #N refers to any number because it is possible to have many conditional ElIf statements after the first If statement.

·         Else statement is optional and is processed only if all prior conditional If and/or ElIf statements have evaluated to false.

·         EndIf is the statement that marks the end of the conditional statement structure.

Compound Conditions

You may have compound conditions in an If-EndIf statement structure. For ease of readability, you should place each statement of a compound condition statement on its own line. Compound conditions may be "and" as well as "or" conditions. use the "&&" and "||" operators for this purpose.

When you make an "and" compound condition, all the conditions in the compound statement must evaluate to true in order for statements following the compound condition to be processed. Conversely, when you use an "or" compound condition, any one of the conditions within the compound condition may evaluate to true in order for statements following the compound condition to be processed.

Nested Conditional Statement Structures

You may nest If-EndIf statement structures. But take care that each begins and ends with the If-EndIf statements in order that the compiler does not return an error or that processing yields unpredictable results. For readability, each nested If-EndIf statement structure should be indented the appropriate level.

Remarks

When making compound conditional statements and nested statements, make sure to indent the statements between each set of conditions. This greatly improves ease of readability as well as making sure you are keeping track of what statements you intend to process when a certain condition evaluates to true.

Use Return statements judiciously to ensure that you test all conditions you need to evaluate. Guard against returning prematurely, thus short-circuiting any code that runs after the If-ElIf-Else-EndIf block. This may or may not be desirable, depending on what you want to accomplish. The order in which you test conditions is critical.

Code Samples

Single Condition

Since "Then" is optional, the following two code blocks are equivalent:

If MyCondition then ; true
            Statement
EndIf
If MyCondition ; true
            statement
EndIf

If you need statements to be processed when all prior conditions evaluate to false, your code should look like this:

If MyCondition ; true
            Statement
Else ; false
            Statement
EndIf

Multiple Conditions

The below code block shows additional conditions testing.

If MyCondition 1 ; true
            Statements)
ElIf MyCondition 2 ; true
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Compound Conditions

The below code blocks show both "and" condition testing as well as "or" testing.

If MyCondition 1 ; true
&& MyCondition 2 ; also true
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, #n being however many && condition statements exist in the ElIf code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf
If MyCondition 1 ; true
|| MyCondition 2 ; or true, one or the other must be true.
            Statements)
ElIf MyCondition 3 ; true
&& MyCondition #n ; also true, both must be true.
            Statements)
ElIf MyCondition #n ; true, #n being however many ElIf condition statements exist in the code block.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Adding parentheses around conditions ensures testing is even clearer:

If (MyCondition 1
&& MyCondition 2) ; both must be true.
            Statements)
ElIf (MyCondition 3
&& MyCondition 4) ; both must be true,
|| MyCondition 5 ; or this condition by itself must be true.
            Statements)
Else ; false, none of the above conditions evaluated to true.
            Statement
EndIf

Nested Conditions

The below code block shows nesting.

If MyCondition 1 ; true
            If My NestedCondition A ; true
                        Statements)
            EndIf ;end of level 1 nesting
            Return ; no further processing.
ElIf MyCondition 2 ; true
            Statements)
            If MyNestedCondition B
            && MyNestedCondition C ; both must be true.
                        Return ; no further processing.
            ElIf MyNestedCondition D
                        Statements
                        Return ; no further processing.
            Else ; my nested conditions evaluate to false.
                        Statements
            EndIf ; end of nesting conditions level 1.
Else ; false, none of the above conditions evaluated to true, and so testing continued.
            Statement
EndIf

Negative Conditions

The below code block evaluates to true if a condition is not met. Sometimes it is easier to test for a condition not to be true.

If Not MyCondition 1 ; true
            Statements)
EndIf

Looping Functions

The Freedom Scientific Scripting language supports three major types of looping functions:

·         While-EndWhile

·         For-EndFor

·         ForEach-EndForEach

CAUTION: If you get into an infinite loop, you can dump JAWS. Assuming that your code does not start running again when JAWS restarts, you can modify your code and fix the problem with the infinite loop before running the code again.

Keywords: While-EndWhile

Description

The While and EndWhile keywords begin and terminate a While loop. Follow the While keyword by a conditional statement, optionally enclosed in parentheses. As long as the condition(s) in that statement evaluate to true, the loop allows a given set of actions to be performed repeatedly.

While loops may be nested, but each nesting level must begin and terminate with the While-EndWhile keywords.

Syntax

 

While (Condition)
            Statement(s) ; Call functions.
EndWhile

 

·         Condition is the code that causes the loop to execute as long as it evaluates to true.

·         Statement(s) are the actions to be performed as long as the loop continues.

 

Remarks

You can use While loops to save space and programming time. However loops can be dangerous. If the tested condition is not met at least once, the code inside the loop never runs.

Most critical of all: You must take care to avoid creating an infinite loop at run-time. Ensure that the tested condition eventually evaluates to false. And ensure that any compound conditions for a While loop also eventually evaluate to false.

Unlike For loops, While loops do not increment or decrement automatically. So if you use an iterator in the test condition of the While loop, you must initialize the iterator and take care to increment or decrement the iterator inside the loop.

Never use a Pause statement from inside a While loop as it will cause very unpredictable results or an infinite loop.

Code Samples

The first code sample simply counts from 1 to 10 when the script is run no matter where it is run from within the application. The second sample adds a conditional test inside the loop. If that condition is met, the function exits, thus terminating the loop in the function.

Of course, an even more efficient way to handle this scenario is never to run the loop in the first place. So the third sample tests for the condition first and returns if the conditions are true. This way, the looping function is never called.

Script MyLoopTest () ; no conditions inside the loop to bail out early.
Var
            Int iCounter,
            String smsgDone
smsgDone = "I'm done!"
iCounter = 1 ; Initialize iterator.
While iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayMessage (ot_JAWS_message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed while a menu or dialog is active.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
            ;Test to bail out early if a menu or dialog is active:
            If MenusActive ()
            || DialogActive ()
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript
Script MyLoopTest () ; with a test to stop processing before ever calling the looping function if the key assigned to the script is pressed from an active menu or dialog.
Var
            Int iCounter,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
;Test to bail out early if a menu or dialog is active:
If MenusActive ()
|| DialogActive ()
            SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
            Return
EndIf
iCounter = 1 ; Initialize iterator.
While iCounter >= 1
&& iCounter <= 10
            SayInteger (iCounter)
            iCounter = iCounter+1
EndWhile
SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: For, To, Descending, EndFor

 

Description

The For and EndFor keywords begin and terminate a For loop. Follow the For keyword by an iterator assigned to an integer range statement, specifying the initial value through the final value of the iterator.

For loops may be nested, but every For loop must begin and terminate with the For and EndFor keywords.

For loops allow a given set of actions to be performed repeatedly as long as the iterator specified in the For loop ranges from the initial value of the iterator through the final value. By default, the iterator starts at the initial value and increments by 1 until it reaches the final value. Using the optional Descending keyword specifies that the iterator starts at the initial value and decrements by 1 until it reaches the final value.

Syntax

 

For x = Start to End Descending
            Statements(s) ; Call functions.
EndFor

 

·         X is an integer variable to be iterated in the loop.

·         Start is the initial value, either an integer variable or integer constant, of X in the loop.

·         End is the final value, either an integer variable or integer constant, of X in the loop.

·         Descending is an optional keyword, specifying that X should be decremented instead of incremented in the loop.

 

Remarks

Like While loops, For loops may be used to save space and programming time. However they can also be dangerous. If the iterator is set to an initial value that is greater than the final value, and the iterator is set to increment through the loop, the code inside the For loop is never run. Likewise, if the iterator is set to an initial value that is less than the final value, and the iterator is set to decrement through the loop, the code inside the For loop is never run.

Most critical of all: Avoid creating an infinite loop at run-time. In a typical For loop, you should not modify the iterator inside the loop; instead, allow the For loop to increment or decrement the iterator automatically. Do not modify the iterator inside the For loop so that it never reaches the final value. If you want the iterator to decrement instead of increment, you must initialize the iterator in order that the starting value is greater than the ending value.

Code Sample

The first code sample is a very simple For-EndFor loop that counts from 1 to 10. The second code sample reverses the count. the third code sample has a condition inside the loop that halts counting early if it is met.

Script MyLoopTest () ; Count from 1 to 10.
Var
            Int iStart,
            Int iEnd,
            String sMsgDone
smsgDone = "I'm done!"
iEnd = 10 ; final value of iterator
For iStart = 1 to iEnd
            Sayinteger(iStart) ; iterates automatically.
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; Reverse the count.
Var
            Int iStart,
            Int iEnd,
            String smsgDone
smsgDone = "I'm done!"
iEnd = 1
For iStart = 10 to iEnd Descending
            Sayinteger(iStart)
EndFor
SayMessage (ot_JAWS_Message,smsgDone)
EndScript
Script MyLoopTest () ; with a condition to bail out early if the key assigned to the script is pressed twice quickly.
Var
            Int iStart,
            Int iEnd,
            String smsgDone,
            String sDoneCounting,
            String sDoneEarly
sDoneCounting = "done"
sDoneEarly = "done early"
smsgDone = "I'm %1!"
iEnd = 10
For iStart = 1 to iEnd
            Sayinteger(iStart)
            If isSameScript () ; Key assigned to script is pressed twice quickly.
                        SayFormattedMessage (ot_JAWS_message,FormatString(smsgDone,sDoneEarly))
                        Return
            EndIf
EndFor
SayFormattedMessage (ot_JAWS_Message,FormatString(smsgDone,sDoneCounting))
EndScript

 

Keywords: ForEach, In, EndForEach 

 

Description

The ForEach and EndForEach keywords begin and terminate a ForEach loop. Follow a ForEach keyword by a string variable to access the keys for each member of the collection, and the collection to be accessed.

ForEach loops allow enumerating each member of a collection through its key. ForEach loops may be nested, but every ForEach loop must begin and end with the ForEach and EndForEach keywords.

Syntax

 

ForEach k in col
            ... ;k is the key for each member.
            ... ;col[k] is the member in the collection matching the key.
            Statements()
EndForEach

 

·         K is a string variable that is the key for a member in the collection.

·         Col is the collection to be accessed.

·         Statement(s) are the actions (function calls) to be performed within the ForEach loop.

 

Remarks

The ForEach loop accesses the members of the collection by alphabetical order of the member keys.

The string variable contains the key for each member in the collection. To access the collection member, use the name of the collection followed by the key variable in square brackets.

Code Sample

The below code sample names flowers by color and types each message on a separate line into Notepad using ForEach looping. You save code statements in the calling function by placing the initialization of each flower's name and color into its own function. You save code statements in the script by making the function that gathers the collection and performs the loop. Also in this way, you may add other statements to the script to call CollectionOfFlowers under one set of conditions and call, for example, CollectionOfFruit, for a different condition.

Additionally, the extent of the collection in the function is determined only by how many statements it has. If you make the collection bigger, the ForEach loop does not need to change because it is already set to handle however many items exist in the collection.

Void Function FlowersInit(collection Flowers, String Name, String Color)
;Initialize each flower's name and color, ppassed by the calling function, CollectionOfFlowers.
Let Flowers.Name = Name
Let Flowers.Color = Color
EndFunction
Void Function CollectionofFlowers()
Var
            Collection Plants,
            Collection Flowers,
            String Key,
            String smsgPlantInfo
Let sMsgPlantInfo = "I am a %1 %2." ;%1 is the color, %2 is the name of each flower in the collection.
Let Plants = new collection
Let Flowers = new collection
FlowersInit(Flowers,"lily","white")
Let Plants.lily = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"daffodil","yellow")
Let Plants.daffodil = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"orchid","purple")
Let Plants.orchid = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"iris","blue")
Let Plants.iris = Flowers
Let Flowers = new collection
FlowersInit(Flowers,"rose","red")
Let Plants.rose = Flowers
Let Flowers = new collection
ForEach Key in Plants
            SayFormattedMessage (ot_JAWS_message,FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name))
            TypeString(FormatString(sMsgPlantInfo,
                        Plants[key].Color,
                        Plants[key].Name)
                        +CscBufferNewLine)
EndForEach
;Remove the collections using built-in functions.
CollectionRemoveAll (Flowers)
CollectionRemoveAll (Plants)
EndFunction
Script MyLoopTest ()
;This script calls the function that names each flower in the collection by color.
CollectionOfFlowers ()
EndScript

Constants

Unlike variables, constants do not change value. They are most useful for hard-to-remember strings of characters or long numbers. Constants should have mnemonic names since it is easier to remember a name than a number or long string of characters.

The Freedom Scientific Scripting language has no restrictions as to how many constant names you assign to a particular value. For example, in the default JAWS constants file, HJConst.jsh, there are constants named True and On - both of which hold the value 1. It is more intuitive to understand a code statement that checks a condition for values of True or On than a code statement that checks for the integer 1. Once you declare the constants, JAWS recognizes all of the constant names with the same value.

If the string of characters being stored in a constant includes Unicode characters, ensure that the script files where the constants are declared and utilized are formatted properly for UTF-8. For more information on UTF-8, see Formatting Script Files for UTF-8./

Advantages of Using Constants

There are several advantages to using constants in scripts:

·         It is easier to remember a constant name than its value. And it is more intuitive when the constant name is a readable word like “True” or “on”.

·         It is much easier to maintain code when constant names are used rather than hard-coded strings of characters or hard-coded integer values.

·         Changing the value of a string of characters or an integer that is used throughout code is much easier to maintain if that value is stored in a constant. The change is made just in one place. In other words, simply changing the constant declaration affects the code wherever that constant is applied.

·         The Freedom Scientific Scripting language does not support direct declaration of a negative integer constant, as in "VBTrue = -1". However, it does support using hexadecimal representation of any integer, including negative integers, as in "VBTrue = 0xffffffff". Note: This is because the Scripting language uses four bytes to store numbers, and if the highest bit is a 1, the numbers are signed so that they are negative.

Declaring Constants

You may declare constants anywhere outside of a script or function, but conventionally, they are declared at the beginning of a script source (jss) file or in a header (jsh or jsm) file. Begin declaration of constants either with the keyword, Const for simple constants, or with the keyword pattern that generates a block of message constants. A message block of constants begins with the keyword, Messages, and ends with the keyword, EndMessages.

Simple Constants

For simple constants, place each constant declaration on a separate line followed by a comma, except for the last one. For example:

Const
            True = 1,
            False = 0,
            On = 1,
            Off = 0,
            FS = "Freedom Scientific",
            FSZipCode = "33764" ; since this is used as a string, not for computing

Formatted Message Constants

Although you may declare string constants such as for window names, window classes, and so on, it is much more practical to declare message constants as formatted strings. This ensures that when JAWS processes message constants, they are indicated properly in speech, Braille, and in the virtual viewer, if applicable. Furthermore, formatted message constant declarations may include replaceable parameters so that varied information may populate messages when JAWS processes them, depending on conditions you determine through scripts and functions or through events.

When declaring and using message constants, especially those you wish to format with replaceable parameters in them, be sure to:

Populate the message constant with text (it can be long and have multiple paragraphs), including spaces, tabs, and hard returns.

If desired, create the text of the message constant with the "%" character followed by a number to indicate a replaceable parameter within the message. You may use multiple replaceable parameters in the same message.

Use the FormatString function in order to populate the message with appropriate replacement strings for the replaceable parameters in the message constant. The FormatString function returns a string that is already formatted properly for you to pass to a function that outputs formatted strings .

Utilize only functions that process formatted strings correctly, or enclose the string parameters in a call to the FormatString function. For example, if you pass the SayMessage function a formatted string, it cannot process any replaceable parameters; so the output may yield unexpected results. Instead, use one of the functions that processes formatted strings. These include:

SayFormattedMessage

SayFormattedMessageWithVoice

UserBufferAddFormattedMessage

For a complete list of formatting functions, see the String Functions category page of the Reference Guide called Strings Functions
 and
 Text Format Functions.

Syntax of Formatted Messages

Use the following format for message constants:
 The keyword, “Messages”
 On a new line, the name of the constant beginning with the at (@) symbol.
 As many lines as necessary for the content of the message, including hard returns, to generate multiple paragraphs, even replaceable parameters.
 On a new line, a double at (@@) symbol to end the constant declaration.
 On a new line, the keyword, “endMessages” to end the block of message constants.

You may repeat the pattern for as many message constants as you wish of "@" followed by message constant name, constant message itself, and a double "@" symbol to complete each message constant within the block beginning and ending with the keywords, Messages and EndMessages. It is good practice to begin the names message constants with the letters "msg" to distinguish them from other types of string constants. Also, if the constant takes replaceable parameters, place a comment above each message constant declaration explaining the purpose of the replaceable parameter.

Code Sample

 

Messages
@msgFSHeadquarters
11800 31
st
 CT North
St. Petersburg, FL
@@
@msgFSPhoneNumbers
800-444-4443
or
727-803-8000
@@
;for msgMyWorkplace, %1 is the name of the workplace.
@msgMyWorkplace
I work at %1.
@@
EndMessages

 

Using a Header File to Store Constants

Unless the constants you are declaring apply only to the current script source file, it is more practical to declare constants in a script header file. Typically, a header file has an extension of .jsh or .jsm. When you use a header file to declare constants, you must refer to that header file with an “Include” statement in the script source file where you want to use the constants. For examples, see the script source file that ships with the JAWS Shared user\settings\(Language) folder. One of the "include" statements for this file is "hjconst.jsh". Another is "common.jsm". Since the constants declared in these header files are in the default script source file, it means that you can use all of them in any of the default scripts and user-defined functions.

If you add an "Include" statement for the HJConst.jsh file within an application-specific script source file, for example, those constants become available to that script source file.

Collection Type Variables

Description

Collection New

A collection is a data type that may contain members of any type, and whose members are accessed by means of a key. Members of a collection need not be of the same data type as each other. After declaring a collection, create it using the keyword, New.

Items of a collection spring into existence the first time they are assigned. Assigning a collection member to a value makes that member's type the type of the value being assigned. Each member in a collection has a key of type string, and each member can contain a value of any data type.

You may access members of a collection by using the dot operator followed by the key name, or by the key as a string enclosed in square brackets.

Syntax

 

Var collection col
            Let col = new collection
            Let col.item = value

 

·         Col is a collection variable being declared and created.

·         Item is the name (or key) of a member in the collection being created.

·         Value is the value being assigned to a member of the collection.

Remarks

Declaring a collection does not create it. You must create the collection by means of the New statement.

Collection members are stored in alphabetical order of the member keys. If you know the name (or key) of a member in a collection, you can assign or retrieve that name (or key) using the dot operator. If the name (or key) of a collection member is enclosed in quotes or is contained in a variable, you must access that member using the variable name or quoted string enclosed inside square brackets instead of using the dot operator.

Collections are always passed to functions by reference.

Assigning one collection to another results in two variables referring to the same collection.

When retrieving a collection member into another variable, the script code must ensure that the value retrieved is stored in the appropriate type of variable. Retrieving a nonexistent item does not generate an error.

Code Sample

Script TestCollections ()
CollectionOfFruitCollections()
EndScript
Void Function FRTINIT(Collection Frt, String Type, string Prep, String Cut)
Let Frt.Type = Type
Let Frt.Prep = Prep
Let Frt.Cut = Cut
EndFunction
Void Function CollectionOfFruitCollections()
Var
            Collection Fruit,
            Collection frt,
            String key,
            String sMsgFruitInfo
sMsgFruitInfo = "%2 and %3 the %1."
Let Fruit = new collection
Let frt = new collection
FRTINIT(frt,"Bananas","peel","slice")
Let Fruit.Bananas = frt
Let frt = new collection
FRTINIT(frt,"Apples","core","slice")
Let Fruit.Apples = frt
Let frt = new collection
FRTINIT(frt,"Strawberries","sugar","halve")
Let Fruit.Strawberries = frt
Let frt = new collection
FRTINIT(frt,"Oranges","peel","section")
Let Fruit.Oranges = frt
Let frt = new collection
FRTINIT(frt,"Pears","peel","slice")
Let Fruit.Pears = frt
Let frt = new collection
FRTINIT(frt,"Cherries","hull","chop")
Let Fruit.Cherries = frt
Let frt = new collection
ForEach key in Fruit
            SayFormattedMessage(ot_line,
                        FormatString(sMsgFruitInfo,
                                    Fruit[key].Type,
                                    Fruit[key].Prep,
                                    Fruit[key].Cut))
EndForEach
EndFunction

Overview

UTF-8 is an acronym for UCS Transformation Format — 8-bit multibyte character encoding for Unicode. ANSI is an acronym for American National Standards Institute. For more technical information about the meanings of these terms, please visit:

http://en.wikipedia.org/wiki/UTF-8
 and
 http://en.wikipedia.org/wiki/ANSI
 and
 http://en.wikipedia.org/wiki/Unicode

For our purposes, ANSI and UTF-8 refer to a method for reading and writing files for JAWS to utilize where there are characters in the code or in the files whose character values are higher than ASCII 127. ASCII characters include all standard punctuation and alphanumeric characters for Western European languages, as well as various other symbols. From 127 to 256, there are characters like smiley faces, Greek characters, etc. Beyond 256 are over 109,000 Unicode characters, including Hebrew characters, Cyrillic characters, etc. Files containing such characters must be formatted properly in order to be interpreted by JAWS. So the UTF-8 file format for the Script Manager supports many languages other than English. This file format can even include characters that are used in Western European languages but have accent marks like vowels with an acute or umlaut mark.

For JAWS support to interpret UTF-8 file formats correctly, in the past, localizers had to manipulate script files that included Unicode characters one file at a time and by hand in order to save files with Unicode characters properly in UTF-8 format. Otherwise, files containing Unicode characters would wipe out those characters in when saving or compiling files with the JAWS Script Manager. The UTF-8 implementation for Freedom Scientific JAWS support via scripting should eliminate this problem.

Definitions

 Script source related files are those with extensions:

·         .jss - script source

·         .hss - hidden script source

·         .jsh - script header

·         .hsh - hidden script header

·         .jsm - script message

·         .jsd - script documentation

·         .sbl - speech symbols file

·         .jbt - JAWS Braille table file

·         .CHR - character substitution

Script binary files are those with the extension of .JSB. BOM (Byte Order Mark) is a series of three specific bytes (written in hex as 0xEF, 0xBB, and 0xBF respectively) which if present at the beginning of a file, indicates that the file is stored in UTF-8 format.

Remarks

The Script Manager is not a hex text editor, the only way to test whether a file is being read by JAWS in UTF-8 format is by inference.

Where UTF-8 is supported, the option in the Files menu of the Script Manager called UTF-8 Format appears as “checked” when the script Manager has read the file as a UTF-8 file.

If the Script Manager reads the file without the File menu option for UTF-8 Format checked, the file is considered to be an ANSI file.

If the File menu option for UTF-8 Format does not appear at all in the Files menu of Script Manager, it means that the current version/build of JAWS being run does not support UTF-8. (Note: If the current version/build of JAWS reader being run is supposed to support UTF-8 but there is no File menu option for UTF-8 Format available at all when a file is read or a new file created, no UTF-8 processing will be handled by JAWS with respect to that file at compile time.

Saving a UTF-8 Formatted Script File

Notes

When you open a script file using Script Manager, JAWS assumes that the file is formatted as an ANSI file. When you save the file, it is saved as an ANSI file. Unless you explicitly enable UTF-8 formatting for the current file, it is not saved as a UTF-8 file. Unless you direct it to be saved elsewhere, it will be saved in your User\Settings\(Language) folder.

If UTF-8 symbols are needed to appear on a Braille display, one or more .jbt files may need to be formatted as UTF-8 files.

 

The following example illustrates how to reformat your .jbt file for UTF-8:

1.    The .jbt file must temporarily replace the file whose name is identical in the Program Files folder for the current version of JAWS. Navigate to that folder. It’s path will be something like,
 C:\Program Files\Freedom Scientific\JAWS\xx.0

2.    Change the name of the file called “US_Unicode.jbt” to something like “#US_Unicode.jbt”.

3.    Copy the file with the same name as the original file whose name you just changed into the current folder. You should now have a file called “US_Unicode.jbt” file in the current folder as well as the renamed one that originally is part of the current JAWS build.

4.    From within Script Manager with the .jbt file open, find the option in the Files menu called "UTF-8 Format". The option is unchecked by default.

5.    Press ENTER on the option to enable UTF-8 formatting for the current file.

6.    Change or add whatever UTF-8 symbol is desired in the file, following its exact correct syntax.

7.    Save the file.

8.    Unload and reload JAWS without rebooting.

9.    From now on, the UTF-8 symbol coded into the .jbt file should be recognized by JAWS and displayed in Braille properly because the .jbt file has been saved with UTF-8 formatting enabled.
