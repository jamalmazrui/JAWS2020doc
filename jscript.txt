JAWS 5.0 Script Manager

Table of Contents

Overview of the Script Manager

Working with Script Files

Script and Function Overview

Accessing Script and Function Information

The Script Manager Compiler

Glossary of Scripting Terms

Overview of the Script Manager

The topics in this section describe how to use the Script Manager and provide a very basic overview of what scripting is and what it does. For a more detailed description of scripting concepts, including numerous practice exercises, refer to the Basics of Scripting manual available from the Freedom Scientific web site. For specific references to scripts and functions, refer to the Freedom Scientific Developer Network (FSDN).

The Freedom Scientific Script Manager is an editing program similar to popular code editors like Notepad++ and offers all the features necessary for you to create JAWS scripts. These features include:

·         Hot keys for quick file navigation, text editing, and dialog box access

·         Easy to follow dialog boxes that help you to find and assign scripts, functions, and parameters

·         Seamless information transfer to other files

·         Commands for opening and saving both user and shared script files

·         UTF-8 file support

·         A compiler that checks for syntax errors when compiling

·         Continuous zoom and syntax highlighting features for low vision or fully sighted users

Press INSERT+0 to run Script Manager. The Script Manager always opens the script file associated with the active application. If the program does not have any scripts, a new script file is created.

While you can have multiple script files open at the same time, you can only have one instance of the Script Manager running. To move between multiple script files, press CTRL+TAB.

Finding Scripts

The following describes where scripts are located on your system:

·         Shared JAWS scripts are saved to C:\ProgramData\Freedom Scientific\JAWS\version number\Scripts while user specific scripts are save to C:\Users\user name\AppData\Roaming\Freedom Scientific\JAWS\version number\settings\enu.

Opening Scripts

Freedom Scientific applications allow you to have both user and shared versions of the same script file. User script files are only available when a particular user is logged in to the computer. In addition, when using Chrome, Firefox, or Internet Explorer, you can have domain-specific scripts that only load when a particular web site is active.

·         To open a user script, choose Open or Open User File from the File menu. Shared script files are available to users on the local computer or network. If a user version of a script file is available, JAWS and MAGic use that file instead of the shared version.

·         To open a shared script, choose Open Shared File from the File menu.

·         To open a domain-specific script, launch the Script Manager while focused in the web browser application and then choose Open Domain File from the File menu. If a script file for the currently active web site does not currently exist, it will automatically be created using the name of the site. For example, www.freedomscientific.com.jss.

Saving Scripts

There are several ways to save scripts:

·         You can save your changes and compile the script by using the Save command. If you modify a shared script and then save your changes with this command, the application saves the file in your user settings folder.

·         To save the currently open script as a shared file, choose Save As Shared from the File menu.

·         To save the currently open script as a user file, choose Save As User from the File menu.

Tip: You can view the contents of your shared and user settings folders by using the Explore Utilities Folder option in the Utilities menu in the JAWS application window.

You can change the tab settings in Script Manager by selecting Tab Sizes in the View menu. Using Tab indentation with complex scripts and functions helps in understanding the logic and sequence of the script.

At times, you may be working with multiple files from multiple directories. To always know what directory you are in, you can choose to display the full path in the title bar. To do this, go to the View Menu and select Display Full Path.

Also found in the View Menu is the zoom feature, which allows you to magnify the contents of a file. Choose Zoom In to increase magnification, Zoom Out to decrease magnification, or Restore Default to set the zoom level to 100 percent. You can also hold down the CTRL key and use the mouse wheel to continuously increase or decrease the zoom level.

If you are not finished writing your scripts, you can save the work you have done without compiling by pressing CTRL+W.

Script Manager Hot Keys

The table below lists all the hot keys available in the Script Manager.

 

+---------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                       |
|                                                                                                                                       |
|   -------------- -------------------------------------------------------------------------------------------------------------------- |
|   Hot Key        Command Description                                                                                                  |
|   INSERT+0       Open Script Manager                                                                                                  |
|   CTRL+O         Open a Script File                                                                                                   |
|   CTRL+SHIFT+D   Open the User Specific Default Script Source File (Default.jss)                                                      |
|   CTRL+SHIFT+W   Open the Domain Script Source File (for the Currently Active Web Site)                                               |
|   CTRL+SHIFT+T   Reopen the Last Closed File                                                                                          |
|   CTRL+N         Create a New File                                                                                                    |
|   CTRL+F4        Close Current File without Closing Script Manager                                                                    |
|   F2             Move to Next Script or Message                                                                                       |
|   SHIFT+F2       Move to Previous Script or Message                                                                                   |
|   CTRL+F         Find                                                                                                                 |
|   F3             Find Next                                                                                                            |
|   SHIFT+F3       Find Previous                                                                                                        |
|   CTRL+H         Find and Replace                                                                                                     |
|   ALT+CTRL+I     Incremental Search                                                                                                   |
|   CTRL+G         Go to Line                                                                                                           |
|   CTRL+E         Create New Script                                                                                                    |
|   CTRL+S         Save and Compile                                                                                                     |
|   CTRL+W         Save without Compiling                                                                                               |
|   CTRL+TAB       Move between Open Files                                                                                              |
|   CTRL+I         Insert Function (works from within the Insert Function dialog box if you need a function inside another function.)   |
|   CTRL+R         Select Script or Function                                                                                            |
|   CTRL+D         View/Edit Documentation for the Current Script or Function                                                           |
|   CTRL+P         Print File                                                                                                           |
|   CTRL+SHIFT+I   Insert Perform Script                                                                                                |
|   CTRL+L         Script List                                                                                                          |
|   SHIFT+F1       Keyword Help                                                                                                         |
|   F12            Go to Definition                                                                                                     |
|   ALT+CTRL+F     Format Script File (Syntax Highlighting Must be Enabled)                                                             |
|   ALT+CTRL+S     Format Current Script (Syntax Highlighting Must be Enabled)                                                          |
|   -------------- -------------------------------------------------------------------------------------------------------------------- |
+---------------------------------------------------------------------------------------------------------------------------------------+

UTF-8 File Support

JAWS script files support ANSI or UTF-8 format. When you open a UTF-8 encoded script file (JSS), the UTF-8 option in the File menu has a check mark. If you open an ANSI encoded script file, this option does not have a check mark.

You can save an ANSI encoded file as UTF-8 by simply selecting, or checking, the UTF-8 Format option before you save the file. Likewise, to save a UTF-8 formatted file as ANSI, clear, or uncheck, this option before saving. Note that the script’s header and message files (JSH and JSM) can be in a different format. This means that a UTF-8 script file can include ANSI header and message files or vice versa.

 
 

 

  ------ --- ------
  Back       Next
  ------ --- ------

Working with Script Files

When you use the Open Shared File and Open User File commands on the File menu, the JSS files appear in either your shared or user folder. The shared folder contains JSS files for every supported application. Your user folder contains script files that you have created or modified. The file Default.jss is especially important because it contains all the scripts and functions used by Freedom Scientific applications to interface with Windows applications and because any scripts added to this file cause global changes in the behavior of JAWS. While you are working with Script Manager, you can quickly access this file at anytime by pressing CTRL+SHIFT+D.

Similarly, you may find that you want scripts to affect only a specific application. For this, you would need to open and add your scripts to the application-specific JSS file. The easiest way to access an application's JSS file is to open the application with JAWS running in the background and press INSERT+0. To be sure you have the correct file open, press INSERT+T.

You can also have scripts that are created specifically for a web site or web application opened in Chrome, Firefox, or Internet Explorer. These domain-specific scripts are loaded on top of the browser scripts and override general application behavior with the web site specific functionality when the particular site is active. To open a web site specific JSS file, press INSERT+0 from an open web page and then press CTRL+SHIFT+W. For more information on domain-specific scripting, refer to the Freedom Scientific Developer Network (FSDN) or read the Domain Scripting Quick Start document available from the Freedom Scientific web site.

Tip: You can use the Confignames.ini file to associate a more meaningful name with the application. Your settings files can then use this alias instead of the executable file's name. You can modify this file with any text editor program, such as Notepad. For more information, see Naming JAWS Settings Files in the Basics of Scripting manual.

After you open a JSS file that contains multiple scripts, use F2 or SHIFT+F2 to move among each script. If you have opened a JSM (script message) file, F2 and SHIFT+F2 will move between messages. If you are looking for a specific text string, press CTRL+F to open the Find dialog box. Once you have found the text string, you must close the dialog box in order to edit. However, you can now press F3 or SHIFT+F3 to find another instance of the text string and immediately begin editing. If you are making multiple and identical edits to the same text string, you may want to use the Replace dialog box instead. To open this dialog box, press CTRL+H. The Find and Replace dialog boxes allow you to make your searches case sensitive and/or match whole words.

Another method of searching for text that you may find faster and less obtrusive is the Incremental Search feature. This feature lets you skim your script files and quickly edit as there is no dialog box to open or close. In addition, Incremental Search works well with F3 and SHIFT+F3. To use this feature, press ALT+CTRL+I and then type the letter(s) or word(s) you are searching for. As you type the letters, your cursor will move about the page, while JAWS announces the text of the incremental search. The search displays in the Status Bar, which you can read by pressing INSERT+PAGE DOWN on the Num Pad. Move up or down in the search with F3 or SHIFT+F3. These keystrokes remain available after exiting Incremental Search. Once you are on the line or in the area you want to edit, you must press one of the arrow keys to exit Incremental Search. You can then edit the script.

If the cursor is on a script or function name defined in the same file, pressing F12 moves directly to that script or function. If the cursor is on a line containing an "include" or "use" statement, pressing F12 opens the specified file.

If you are familiar with a script file and you know the line that contains the script you want to work with, use the Go To Line dialog box (CTRL+G). Type the number of the line and press ENTER. The cursor moves immediately to the beginning of the line you specified. You can always find the number of the line you are working on by reading the Status Bar. You can also turn on Line Numbers in the View menu to always display the current line number as you navigate.

To quickly delete an entire script, press CTRL+R to select the script and then press the DELETE key.

 

  ------ --- ------
  Back       Next
  ------ --- ------

Script and Function Overview

The Freedom Scientific scripting language is comprised of scripts and functions. Scripts can be associated with keystrokes. For example, when you are in a word processor and press DOWN ARROW, JAWS reads a new line of text. A default script, called SayNextLine, is associated or "bound" to the DOWN ARROW key.

Functions, on the other hand, are not bound to keystrokes and are always called by a script or another function. Functions can use parameters to complete a task and often return information or a specific value. The scripting language has three different types of functions: event functions, built-in functions, and user-defined functions.

·         Event functions execute automatically when a Windows operating system event occurs. You cannot create new event functions. However, you can modify existing event functions. You can also create application-specific versions of the event functions found in the default script file.

·         User-defined functions can use existing built-in functions to create new or modify existing user-defined functions

·         Built-in functions are the building blocks of scripts and functions. They can not be modified or created.

See the Freedom Scientific Developer Network (FSDN) for a complete reference guide to all of the built-in functions you can use to create scripts.

 

 

  ------ --- ------
  Back       Next
  ------ --- ------

Accessing Script and Function Information

With Script Manager, you can view documentation for any script or function as well as information on any key word used in a script.

To view key word help, move the insertion point to a key word in a script or function and press SHIFT+F1. The Script Manager displays the Key Word Help dialog box containing specific information on the script or function.

After you have reviewed the key word help information, press ESC to close the Key Word Help dialog box.

You can also view documentation for any script or function within the current script file. First, move the insertion point to an individual script or function. You can use the Next Script (F2), Prior Script (SHIFT+F2), or Script List (CTRL+L) actions to move to the desired script or function. Any of the three navigation methods will move the insertion point to the beginning line of the script or function. Press DOWN ARROW twice to move into the body of the script or function. This also removes the highlight from the name of the script or function. To view the documentation, press CTRL+D. This displays the Script Information multi-page dialog box. The General page of this dialog box displays general information about the script or function. The information shown in the Script Information dialog box changes depending on whether you are viewing script or function information. The Parameters page displays the parameters used by the selected function. You can view a list of existing parameters on this page along with their descriptions. After you are finished viewing the script information, press ESC to close the dialog box.

 

  ------ --- ------
  Back       Next
  ------ --- ------

The Script Manager Compiler

When you save a script file using the Script Manager, your file is saved and compiled into machine-readable language. When you write scripts for JAWS in the Script Manager, you write them in plain text. JAWS, however, cannot use them in text form. When the Script Manager saves your file, it creates an additional file that is converted from text into a binary format that JAWS can understand and use.

The original text file is saved with a JSS (JAWS Script Source) file extension, and the compiled or binary version is saved with a JSB (JAWS Script Binary) file extension. The compiler checks the syntax (coding) of your script to make sure that it conforms to the script language rules. If there is an error, the compiler advises you what the error is and approximately where in the script you can find the error. This is why it is important to always create and save your script files using the Script Manager. If you edit and save your files using some other text editor, they will not be compiled when you save them, and JAWS will not be aware of the changes you have made.

The Script Manager generates several types of files. Listed below are the different file extensions along with their descriptions.

·         JSS – This is the JAWS Script Source file that you create when making application-specific or web site domain-specific script files. This file must be compiled before JAWS can use it.

·         JSB – This is the JAWS Script Binary (machine-readable language) file that is created when you save and compile a JSS file. You do not directly create this file nor do you edit this file.

·         JSM – This is the JAWS Script Message file. It contains all spoken messages used by the SayFormattedMessage functions. Each message in the file is given a unique name. Only the name is referenced when a script uses the SayFormattedMessage function to read a message. This way, when script files are distributed internationally the translation into other languages is easier since all messages are stored in one file.

·         .JSH – This is the JAWS Script Header file. This file contains information relevant to the associated JSS file, such as definitions of constants and global variables.

·         JSD – This is the JAWS Script Documentation file. This file contains all of the descriptive information about each script. This information is entered into the JSD file automatically when you create a script using the New Script dialog. You can edit this file if desired.

All shared JSS, JSB, JSH, and JSM files are stored in the C:\ProgramData\Freedom Scientific\JAWS\version number\Scripts folder. All shared JSD files are stored one folder level down in C:\ProgramData\Freedom Scientific\JAWS\version number\Scripts\Enu.

Compiling Scripts

When you save your script with CTRL+S, the compiler automatically runs, checking syntax and statement sequences. If there are errors, it displays them in the Compile Error dialog box. After you review the listed errors, press ENTER to close the dialog box. JAWS places the cursor at or near the error. If no error is present, you can assume that at least the syntax of your script is correct.

Once you correct the error, choose Save from the File menu or press CTRL+S again to recompile the script.

The compiler cannot always find the exact location of the mistake. For example, if you use several If-Then statements that are nested, and you forget to use the correct number of EndIf statements, the compiler will display an error, but the cursor may not be located exactly where the missing EndIf statement should be. The cursor may actually be several lines away from that location. The compiler can only tell you that your If-Then loops are not formulated properly and that an If statement must be followed by an EndIf statement. It is up to you to find out where you need to put the missing statement.

Include files are examined as they are included. Always place the include statement in your script file before you use anything in the included file. For instance, you must include Hjconst.jsh before using any of the constants it contains. If you layer your script file properly, all of your include statements should be near the beginning of the script file.

 

 

  ------ --- ------
  Back       Next
  ------ --- ------

Glossary of Scripting Terms

Application Script Files - These files are loaded on top of the default files when an application runs. JAWS knows to load the application script files, because the application script name (except for the extension) is the same as the application program name. You can have both user and shared versions of application script files. Shared scripts apply to all users on the computer or network when they use the application with JAWS. User scripts are loaded only by a specific user on a computer or network.

Arithmetic Operators -Arithmetic operators are used to perform classic arithmetic operations within scripts. The four operators are a minus sign or dash (-) for subtraction, a plus sign (+) for addition, a slash (/) for division, and an asterisk (*) for multiplication.

Basics of Scripting Manual - This guide provides an introduction to the Freedom Scientific scripting language. In it, you will find detailed information on scripting terms, syntax, functionality, and more. There are also numerous exercises to help you practice what you have learned. The Basics of Scripting manual consists of a series of HTML web pages and can be viewed online or downloaded to your computer as a self-extracting file. You can download this manual from the Freedom Scientific Web site.

Bitwise Operators - You can use bitwise operators to compare two pieces of information bit by bit instead of as a whole value. Computer information is stored in digital form as a series of ones and zeros (bits). In a bitwise comparison using the & operator, a value of true or 1 will be returned for every pair of bit positions in the two pieces of information which are identical.

Built-in Functions - The Freedom Scientific script language includes over 200 pre-defined functions for use in scripts. Each function performs a specific series of activities. These are the building blocks or instructions from which you create your scripts.

Built-in Operators -The Freedom Scientific script language includes 3 types of operators you can plug into functions when creating or editing. Operators come in several varieties, each with a specific ability. The three types are; Arithmetic, Logical, and Bitwise Operators

Comments - Comments are lines of text in your script file that are not executable statements. They are used to inform those reading the source file how the statements work. In the code, you can indicate that a line of text is a comment by preceding it with a semicolon or pound sign. You can also surround the comment text with /* and */.

Compile - When you save a script file using the Script Manager, your file is saved and compiled into machine-readable language. When the Script Manager saves a file, it creates an additional file that is converted from text into a binary format, a form that JAWS can understand and use.

Confignames.ini - JAWS uses this file to associate more meaningful names with the executable file names of Windows applications or the addresses of web applications when creating domain-specific scripts. You can then use this alias when naming your JAWS settings files for this application or web site. The Confignames.ini file can be found in your JAWS settings folder.

Constants -Constants do not change their value. Once a value is assigned to a constant, it stays that way. They can be used to represent a complex string of letters or numbers.

Control IDs -The Control ID is an arbitrary number assigned by the programmer to identify each window in his or her program. These Control IDs do not change during program operation. The Control ID, unlike the Window Class, has no special meaning other than the fact that it can be used to refer to a particular window.

Default Script File - The information which tells JAWS how to behave is contained in a default set of built-in files. The default script files (Default.jss) are loaded when JAWS starts and are always active during all application sessions. Common.jsm contains messages that are available to all scripts, while hjglobal.jsh and hjconst.jsh are used in any script file that refers to JAWS global variables and constants. Default.jsm contains messages that are deprecated, but are still needed for backward compatibility.

Domain-Specific Script Files - These files load on top of the application scripts for web browsers. This enables you to have unique scripts and settings changes applied for a specific web application which will override the general application files when the particular web site is active. JAWS knows to load the domain script files, because the domain script name (except for the extension) is the same as the web site name, for instance, www.freedomscientific.com.jss.

Event Function - An event function runs automatically when certain system events occur.

Freedom Scientific Developer Network - A database containing scripts and functions that are built into JAWS. The FSDN includes a complete scripting reference manual that is a compiled HTML Help file (FSDN.chm). It has an identical format to the JAWS help system; therefore, navigation is also identical. It can be used by anyone who wants a general reference for all scripts, user-defined functions, and built-in functions found in JAWS. Seasoned programmers may want to download the FSDN, as they will most likely pick up the syntax of the scripting language rather quickly. The FSDN can be downloaded from the Freedom Scientific web site.

Functions - A block of code that is not called by a keystroke and activates only when called by a script or another function.

Global - Variables can be local or global. Global variables can be used in any script within the script file where they are defined. Global variables can be declared at the beginning of a script file with the group heading, Globals. Place this group right after the include statements.

Header Files - Header files are designated with the extension JSH and contain either variable or constant declarations.

Hjconst.jsh - Contains the default JAWS constants.

Hjglobal.jsh - Contains the default JAWS global variables.

Hook Functions - Sometimes it is necessary to put JAWS into an alternative state where some or all of the keys on the keyboard perform different functions when pressed than they normally would. Briefly, a hook is a special user-defined function that you create, which is run instead of the code normally run by the JAWS scripts.

Includes -The purpose of an include statement is to tell the script source file (JSS) that information from other named files is to be included as part of the script. The syntax for an include statement requires that the file name along with its extension be enclosed in quotation marks. It is assumed that the file to be included is contained within the language (ENU) subdirectory of the \SETTINGS subdirectory of your JAWS directory.

Integer- An integer variable is designed to hold an integer value. An integer is a whole number without a decimal point.

JKM File Extension - This is the JAWS key map file. This file contains the keystrokes assigned to various scripts.

JSB File Extension - This is the JAWS Script Binary (machine-readable language) file that is created by the Script Manager when you save and compile a JSS file. You do not directly create this file nor do you edit this file.

JSD File Extension - This is the JAWS Script Documentation file. This file contains all of the descriptive information about each script. This information is entered into the JSD file automatically when you create a script using the New Script dialog box. You can edit this file if desired.

JSH File Extension - This is the JAWS Script Header file. This file contains information relevant to the associated JSS file, such as definitions of constants and global variables. See Constants and Variables for more details about these script components. See also, Include Files.

JSM File Extension - This is the JAWS Script Message file. It contains all of the spoken messages used by SayFormattedMessage functions. Each message in the file is numbered. Only the number is referenced when a script uses the SayFormattedMessage function to read a message. In this way, when script files are distributed internationally, translation of the messages into other languages is easier when numbered messages are used. See Include Files.

JSS File Extension - This is the JAWS Script Source file that you create when making application-specific or domain-specific script files. This file must be compiled before JAWS can use it.

Local - Variables can be local or global. Local variables can only be used in the script where they are declared. Local variables are declared within a script in the first statement after the begin statement. They have the heading, Var.

Logical Operators - Logical operators are used to make comparisons of variables to other variables or constants. Sometimes several items or groups of items must be compared with other items. The logical operators are usually used within If-Then and While loops to check whether conditions required for logical decisions are true or false.

Message Files - Message Files are designated with the extension JSM and contain message statements with their assigned numbers.

Object - An object variable is designed to hold an object. An object, for the purposes of the Freedom Scientific script language, refers to the types of objects present in certain Microsoft applications, such as Office.

Parameters - A parameter is a piece of information that is passed to a script or function. Parameters can be required or optional. If there is more than one parameter, a comma is used to separate each parameter within the parentheses.

Returns - A return is information that is sent back from the function to the calling script or function. The calling script or function then uses this information. The type of returned information, such as string, Int, Object, Handle, or Void, is declared before the function name.

Script - A script is like a mini computer program that combines a number of steps or keystrokes into one operation,

Script Files - Freedom Scientific script files are a collection of individual scripts, functions, and variable declarations that are automatically loaded whenever JAWS is used with a particular Windows application.

Script Manager - The Script Manager is the script-editing program that has all the features necessary for you to create scripts.

Scripting Language - JAWS provides a powerful scripting language you can use to write or edit your own user-defined function. The only difference between a built-in function and a user-defined function is that user-defined functions can be modified, while built-in functions, which are hard-coded into JAWS, cannot.

Scripts - Blocks of code that can be activated by a keystroke are called scripts, and those that cannot are called functions.

String - A string variable holds a string of characters. A string is a group of characters including letters, numbers, punctuation marks, and spaces.

User-Defined Functions - The difference between a user-defined function and a script is that a script is attached to a keystroke and cannot provide a return, while a user-defined function cannot be attached to a keystroke and does provide a return. User-defined functions can be modified. User-defined functions run whenever they are called from within a script or another user-defined function.

Window Classes -The Window Class of a window provides some information about what a window does. For example, a Window Class can be an edit field, a list box, or a button.

Window Handle - A window handle is a unique window identifier that is assigned by the system. Window handles are numbers that can change value whenever the application is closed, but often only change when Windows is restarted. Although the window handle changes during program operation, you can use this information to identify the window whenever the window is active.

Window Subtype Code - Window Subtype Code also returns an integer. Window Subtype Codes are translated into strings using the same constant definitions as Window Type Code. The only difference is that the Window Subtype Code provides more detailed information.

Window Type - Window Type returns a string or name that describes the window. Window Class of a button, radio button, and check box is always "button"; however, the programmer could add the Window Types of these three windows. In this case, the windows are reported as "button," "radio button," or "check box."

Window Type Code - Asking for the Window Type Code returns a number instead of a string. This number is translated into a recognizable string by constant definitions located in the file called hjconst.jsh. Since the same numbers are always returned for a given type of window, the numbers can be mapped to the actual text of the Window Type in any language.

Windows Hierarchy - Window hierarchy can be defined as the relationship between a parent and a child in a family.

 

 

  ------ --- ------
  Back       Next
  ------ --- ------

 
